// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1

import (
	v1 "github.com/seal-io/walrus/pkg/apis/walrus/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SettingLister helps list Settings.
// All objects returned here must be treated as read-only.
type SettingLister interface {
	// List lists all Settings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Setting, err error)
	// Settings returns an object that can list and get Settings.
	Settings(namespace string) SettingNamespaceLister
	SettingListerExpansion
}

// settingLister implements the SettingLister interface.
type settingLister struct {
	indexer cache.Indexer
}

// NewSettingLister returns a new SettingLister.
func NewSettingLister(indexer cache.Indexer) SettingLister {
	return &settingLister{indexer: indexer}
}

// List lists all Settings in the indexer.
func (s *settingLister) List(selector labels.Selector) (ret []*v1.Setting, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Setting))
	})
	return ret, err
}

// Settings returns an object that can list and get Settings.
func (s *settingLister) Settings(namespace string) SettingNamespaceLister {
	return settingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SettingNamespaceLister helps list and get Settings.
// All objects returned here must be treated as read-only.
type SettingNamespaceLister interface {
	// List lists all Settings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Setting, err error)
	// Get retrieves the Setting from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.Setting, error)
	SettingNamespaceListerExpansion
}

// settingNamespaceLister implements the SettingNamespaceLister
// interface.
type settingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Settings in the indexer for a given namespace.
func (s settingNamespaceLister) List(selector labels.Selector) (ret []*v1.Setting, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Setting))
	})
	return ret, err
}

// Get retrieves the Setting from the indexer for a given namespace and name.
func (s settingNamespaceLister) Get(name string) (*v1.Setting, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.SchemeResource("setting"), name)
	}
	return obj.(*v1.Setting), nil
}
