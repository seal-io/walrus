// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1

import (
	v1 "github.com/seal-io/walrus/pkg/apis/walrus/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CatalogLister helps list Catalogs.
// All objects returned here must be treated as read-only.
type CatalogLister interface {
	// List lists all Catalogs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Catalog, err error)
	// Catalogs returns an object that can list and get Catalogs.
	Catalogs(namespace string) CatalogNamespaceLister
	CatalogListerExpansion
}

// catalogLister implements the CatalogLister interface.
type catalogLister struct {
	indexer cache.Indexer
}

// NewCatalogLister returns a new CatalogLister.
func NewCatalogLister(indexer cache.Indexer) CatalogLister {
	return &catalogLister{indexer: indexer}
}

// List lists all Catalogs in the indexer.
func (s *catalogLister) List(selector labels.Selector) (ret []*v1.Catalog, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Catalog))
	})
	return ret, err
}

// Catalogs returns an object that can list and get Catalogs.
func (s *catalogLister) Catalogs(namespace string) CatalogNamespaceLister {
	return catalogNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CatalogNamespaceLister helps list and get Catalogs.
// All objects returned here must be treated as read-only.
type CatalogNamespaceLister interface {
	// List lists all Catalogs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Catalog, err error)
	// Get retrieves the Catalog from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.Catalog, error)
	CatalogNamespaceListerExpansion
}

// catalogNamespaceLister implements the CatalogNamespaceLister
// interface.
type catalogNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Catalogs in the indexer for a given namespace.
func (s catalogNamespaceLister) List(selector labels.Selector) (ret []*v1.Catalog, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Catalog))
	})
	return ret, err
}

// Get retrieves the Catalog from the indexer for a given namespace and name.
func (s catalogNamespaceLister) Get(name string) (*v1.Catalog, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.SchemeResource("catalog"), name)
	}
	return obj.(*v1.Catalog), nil
}
