// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1

import (
	"context"
	json "encoding/json"
	"fmt"
	"time"

	v1 "github.com/seal-io/walrus/pkg/apis/walrus/v1"
	walrusv1 "github.com/seal-io/walrus/pkg/clients/applyconfiguration/walrus/v1"
	scheme "github.com/seal-io/walrus/pkg/clients/clientset/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// SettingsGetter has a method to return a SettingInterface.
// A group's client should implement this interface.
type SettingsGetter interface {
	Settings(namespace string) SettingInterface
}

// SettingInterface has methods to work with Setting resources.
type SettingInterface interface {
	Update(ctx context.Context, setting *v1.Setting, opts metav1.UpdateOptions) (*v1.Setting, error)
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.Setting, error)
	List(ctx context.Context, opts metav1.ListOptions) (*v1.SettingList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.Setting, err error)
	Apply(ctx context.Context, setting *walrusv1.SettingApplyConfiguration, opts metav1.ApplyOptions) (result *v1.Setting, err error)
	SettingExpansion
}

// settings implements SettingInterface
type settings struct {
	client rest.Interface
	ns     string
}

// newSettings returns a Settings
func newSettings(c *WalrusV1Client, namespace string) *settings {
	return &settings{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the setting, and returns the corresponding setting object, and an error if there is any.
func (c *settings) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.Setting, err error) {
	result = &v1.Setting{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("settings").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of Settings that match those selectors.
func (c *settings) List(ctx context.Context, opts metav1.ListOptions) (result *v1.SettingList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1.SettingList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("settings").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested settings.
func (c *settings) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("settings").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Update takes the representation of a setting and updates it. Returns the server's representation of the setting, and an error, if there is any.
func (c *settings) Update(ctx context.Context, setting *v1.Setting, opts metav1.UpdateOptions) (result *v1.Setting, err error) {
	result = &v1.Setting{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("settings").
		Name(setting.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(setting).
		Do(ctx).
		Into(result)
	return
}

// Patch applies the patch and returns the patched setting.
func (c *settings) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.Setting, err error) {
	result = &v1.Setting{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("settings").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}

// Apply takes the given apply declarative configuration, applies it and returns the applied setting.
func (c *settings) Apply(ctx context.Context, setting *walrusv1.SettingApplyConfiguration, opts metav1.ApplyOptions) (result *v1.Setting, err error) {
	if setting == nil {
		return nil, fmt.Errorf("setting provided to Apply must not be nil")
	}
	patchOpts := opts.ToPatchOptions()
	data, err := json.Marshal(setting)
	if err != nil {
		return nil, err
	}
	name := setting.Name
	if name == nil {
		return nil, fmt.Errorf("setting.Name must be provided to Apply")
	}
	result = &v1.Setting{}
	err = c.client.Patch(types.ApplyPatchType).
		Namespace(c.ns).
		Resource("settings").
		Name(*name).
		VersionedParams(&patchOpts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}
