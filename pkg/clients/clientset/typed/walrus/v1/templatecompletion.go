// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1

import (
	"context"

	v1 "github.com/seal-io/walrus/pkg/apis/walrus/v1"
	scheme "github.com/seal-io/walrus/pkg/clients/clientset/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	rest "k8s.io/client-go/rest"
)

// TemplateCompletionsGetter has a method to return a TemplateCompletionInterface.
// A group's client should implement this interface.
type TemplateCompletionsGetter interface {
	TemplateCompletions(namespace string) TemplateCompletionInterface
}

// TemplateCompletionInterface has methods to work with TemplateCompletion resources.
type TemplateCompletionInterface interface {
	Create(ctx context.Context, templateCompletion *v1.TemplateCompletion, opts metav1.CreateOptions) (*v1.TemplateCompletion, error)
	TemplateCompletionExpansion
}

// templateCompletions implements TemplateCompletionInterface
type templateCompletions struct {
	client rest.Interface
	ns     string
}

// newTemplateCompletions returns a TemplateCompletions
func newTemplateCompletions(c *WalrusV1Client, namespace string) *templateCompletions {
	return &templateCompletions{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Create takes the representation of a templateCompletion and creates it.  Returns the server's representation of the templateCompletion, and an error, if there is any.
func (c *templateCompletions) Create(ctx context.Context, templateCompletion *v1.TemplateCompletion, opts metav1.CreateOptions) (result *v1.TemplateCompletion, err error) {
	result = &v1.TemplateCompletion{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("templatecompletions").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(templateCompletion).
		Do(ctx).
		Into(result)
	return
}
