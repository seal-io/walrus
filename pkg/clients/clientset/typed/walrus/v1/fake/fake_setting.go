// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package fake

import (
	"context"
	json "encoding/json"
	"fmt"

	v1 "github.com/seal-io/walrus/pkg/apis/walrus/v1"
	walrusv1 "github.com/seal-io/walrus/pkg/clients/applyconfiguration/walrus/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeSettings implements SettingInterface
type FakeSettings struct {
	Fake *FakeWalrusV1
	ns   string
}

var settingsResource = v1.SchemeGroupVersion.WithResource("settings")

var settingsKind = v1.SchemeGroupVersion.WithKind("Setting")

// Get takes name of the setting, and returns the corresponding setting object, and an error if there is any.
func (c *FakeSettings) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.Setting, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(settingsResource, c.ns, name), &v1.Setting{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.Setting), err
}

// List takes label and field selectors, and returns the list of Settings that match those selectors.
func (c *FakeSettings) List(ctx context.Context, opts metav1.ListOptions) (result *v1.SettingList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(settingsResource, settingsKind, c.ns, opts), &v1.SettingList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1.SettingList{ListMeta: obj.(*v1.SettingList).ListMeta}
	for _, item := range obj.(*v1.SettingList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested settings.
func (c *FakeSettings) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(settingsResource, c.ns, opts))

}

// Update takes the representation of a setting and updates it. Returns the server's representation of the setting, and an error, if there is any.
func (c *FakeSettings) Update(ctx context.Context, setting *v1.Setting, opts metav1.UpdateOptions) (result *v1.Setting, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(settingsResource, c.ns, setting), &v1.Setting{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.Setting), err
}

// Patch applies the patch and returns the patched setting.
func (c *FakeSettings) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.Setting, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(settingsResource, c.ns, name, pt, data, subresources...), &v1.Setting{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.Setting), err
}

// Apply takes the given apply declarative configuration, applies it and returns the applied setting.
func (c *FakeSettings) Apply(ctx context.Context, setting *walrusv1.SettingApplyConfiguration, opts metav1.ApplyOptions) (result *v1.Setting, err error) {
	if setting == nil {
		return nil, fmt.Errorf("setting provided to Apply must not be nil")
	}
	data, err := json.Marshal(setting)
	if err != nil {
		return nil, err
	}
	name := setting.Name
	if name == nil {
		return nil, fmt.Errorf("setting.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(settingsResource, c.ns, *name, types.ApplyPatchType, data), &v1.Setting{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.Setting), err
}
