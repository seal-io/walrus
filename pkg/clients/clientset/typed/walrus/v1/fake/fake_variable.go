// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package fake

import (
	"context"
	json "encoding/json"
	"fmt"

	v1 "github.com/seal-io/walrus/pkg/apis/walrus/v1"
	walrusv1 "github.com/seal-io/walrus/pkg/clients/applyconfiguration/walrus/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeVariables implements VariableInterface
type FakeVariables struct {
	Fake *FakeWalrusV1
	ns   string
}

var variablesResource = v1.SchemeGroupVersion.WithResource("variables")

var variablesKind = v1.SchemeGroupVersion.WithKind("Variable")

// Get takes name of the variable, and returns the corresponding variable object, and an error if there is any.
func (c *FakeVariables) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.Variable, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(variablesResource, c.ns, name), &v1.Variable{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.Variable), err
}

// List takes label and field selectors, and returns the list of Variables that match those selectors.
func (c *FakeVariables) List(ctx context.Context, opts metav1.ListOptions) (result *v1.VariableList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(variablesResource, variablesKind, c.ns, opts), &v1.VariableList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1.VariableList{ListMeta: obj.(*v1.VariableList).ListMeta}
	for _, item := range obj.(*v1.VariableList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested variables.
func (c *FakeVariables) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(variablesResource, c.ns, opts))

}

// Create takes the representation of a variable and creates it.  Returns the server's representation of the variable, and an error, if there is any.
func (c *FakeVariables) Create(ctx context.Context, variable *v1.Variable, opts metav1.CreateOptions) (result *v1.Variable, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(variablesResource, c.ns, variable), &v1.Variable{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.Variable), err
}

// Update takes the representation of a variable and updates it. Returns the server's representation of the variable, and an error, if there is any.
func (c *FakeVariables) Update(ctx context.Context, variable *v1.Variable, opts metav1.UpdateOptions) (result *v1.Variable, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(variablesResource, c.ns, variable), &v1.Variable{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.Variable), err
}

// Delete takes name of the variable and deletes it. Returns an error if one occurs.
func (c *FakeVariables) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(variablesResource, c.ns, name, opts), &v1.Variable{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeVariables) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(variablesResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1.VariableList{})
	return err
}

// Patch applies the patch and returns the patched variable.
func (c *FakeVariables) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.Variable, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(variablesResource, c.ns, name, pt, data, subresources...), &v1.Variable{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.Variable), err
}

// Apply takes the given apply declarative configuration, applies it and returns the applied variable.
func (c *FakeVariables) Apply(ctx context.Context, variable *walrusv1.VariableApplyConfiguration, opts metav1.ApplyOptions) (result *v1.Variable, err error) {
	if variable == nil {
		return nil, fmt.Errorf("variable provided to Apply must not be nil")
	}
	data, err := json.Marshal(variable)
	if err != nil {
		return nil, err
	}
	name := variable.Name
	if name == nil {
		return nil, fmt.Errorf("variable.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(variablesResource, c.ns, *name, types.ApplyPatchType, data), &v1.Variable{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.Variable), err
}
