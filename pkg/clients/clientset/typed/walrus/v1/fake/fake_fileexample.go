// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package fake

import (
	"context"

	v1 "github.com/seal-io/walrus/pkg/apis/walrus/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	testing "k8s.io/client-go/testing"
)

// FakeFileExamples implements FileExampleInterface
type FakeFileExamples struct {
	Fake *FakeWalrusV1
	ns   string
}

var fileexamplesResource = v1.SchemeGroupVersion.WithResource("fileexamples")

var fileexamplesKind = v1.SchemeGroupVersion.WithKind("FileExample")

// Get takes name of the fileExample, and returns the corresponding fileExample object, and an error if there is any.
func (c *FakeFileExamples) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.FileExample, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(fileexamplesResource, c.ns, name), &v1.FileExample{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.FileExample), err
}

// List takes label and field selectors, and returns the list of FileExamples that match those selectors.
func (c *FakeFileExamples) List(ctx context.Context, opts metav1.ListOptions) (result *v1.FileExampleList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(fileexamplesResource, fileexamplesKind, c.ns, opts), &v1.FileExampleList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1.FileExampleList{ListMeta: obj.(*v1.FileExampleList).ListMeta}
	for _, item := range obj.(*v1.FileExampleList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}
