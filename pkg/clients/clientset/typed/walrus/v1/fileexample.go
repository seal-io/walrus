// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1

import (
	"context"
	"time"

	walrusv1 "github.com/seal-io/walrus/pkg/apis/walrus/v1"
	scheme "github.com/seal-io/walrus/pkg/clients/clientset/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	rest "k8s.io/client-go/rest"
)

// FileExamplesGetter has a method to return a FileExampleInterface.
// A group's client should implement this interface.
type FileExamplesGetter interface {
	FileExamples(namespace string) FileExampleInterface
}

// FileExampleInterface has methods to work with FileExample resources.
type FileExampleInterface interface {
	Get(ctx context.Context, name string, opts v1.GetOptions) (*walrusv1.FileExample, error)
	List(ctx context.Context, opts v1.ListOptions) (*walrusv1.FileExampleList, error)
	FileExampleExpansion
}

// fileExamples implements FileExampleInterface
type fileExamples struct {
	client rest.Interface
	ns     string
}

// newFileExamples returns a FileExamples
func newFileExamples(c *WalrusV1Client, namespace string) *fileExamples {
	return &fileExamples{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the fileExample, and returns the corresponding fileExample object, and an error if there is any.
func (c *fileExamples) Get(ctx context.Context, name string, options v1.GetOptions) (result *walrusv1.FileExample, err error) {
	result = &walrusv1.FileExample{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("fileexamples").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of FileExamples that match those selectors.
func (c *fileExamples) List(ctx context.Context, opts v1.ListOptions) (result *walrusv1.FileExampleList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &walrusv1.FileExampleList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("fileexamples").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}
