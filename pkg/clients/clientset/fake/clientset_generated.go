// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package fake

import (
	clientset "github.com/seal-io/walrus/pkg/clients/clientset"
	admissionv1 "github.com/seal-io/walrus/pkg/clients/clientset/typed/admission/v1"
	fakeadmissionv1 "github.com/seal-io/walrus/pkg/clients/clientset/typed/admission/v1/fake"
	admissionregistrationv1 "github.com/seal-io/walrus/pkg/clients/clientset/typed/admissionregistration/v1"
	fakeadmissionregistrationv1 "github.com/seal-io/walrus/pkg/clients/clientset/typed/admissionregistration/v1/fake"
	apiextensionsv1 "github.com/seal-io/walrus/pkg/clients/clientset/typed/apiextensions/v1"
	fakeapiextensionsv1 "github.com/seal-io/walrus/pkg/clients/clientset/typed/apiextensions/v1/fake"
	apiregistrationv1 "github.com/seal-io/walrus/pkg/clients/clientset/typed/apiregistration/v1"
	fakeapiregistrationv1 "github.com/seal-io/walrus/pkg/clients/clientset/typed/apiregistration/v1/fake"
	appsv1 "github.com/seal-io/walrus/pkg/clients/clientset/typed/apps/v1"
	fakeappsv1 "github.com/seal-io/walrus/pkg/clients/clientset/typed/apps/v1/fake"
	authenticationv1 "github.com/seal-io/walrus/pkg/clients/clientset/typed/authentication/v1"
	fakeauthenticationv1 "github.com/seal-io/walrus/pkg/clients/clientset/typed/authentication/v1/fake"
	authorizationv1 "github.com/seal-io/walrus/pkg/clients/clientset/typed/authorization/v1"
	fakeauthorizationv1 "github.com/seal-io/walrus/pkg/clients/clientset/typed/authorization/v1/fake"
	autoscalingv1 "github.com/seal-io/walrus/pkg/clients/clientset/typed/autoscaling/v1"
	fakeautoscalingv1 "github.com/seal-io/walrus/pkg/clients/clientset/typed/autoscaling/v1/fake"
	autoscalingv2 "github.com/seal-io/walrus/pkg/clients/clientset/typed/autoscaling/v2"
	fakeautoscalingv2 "github.com/seal-io/walrus/pkg/clients/clientset/typed/autoscaling/v2/fake"
	batchv1 "github.com/seal-io/walrus/pkg/clients/clientset/typed/batch/v1"
	fakebatchv1 "github.com/seal-io/walrus/pkg/clients/clientset/typed/batch/v1/fake"
	certificatesv1 "github.com/seal-io/walrus/pkg/clients/clientset/typed/certificates/v1"
	fakecertificatesv1 "github.com/seal-io/walrus/pkg/clients/clientset/typed/certificates/v1/fake"
	coordinationv1 "github.com/seal-io/walrus/pkg/clients/clientset/typed/coordination/v1"
	fakecoordinationv1 "github.com/seal-io/walrus/pkg/clients/clientset/typed/coordination/v1/fake"
	corev1 "github.com/seal-io/walrus/pkg/clients/clientset/typed/core/v1"
	fakecorev1 "github.com/seal-io/walrus/pkg/clients/clientset/typed/core/v1/fake"
	discoveryv1 "github.com/seal-io/walrus/pkg/clients/clientset/typed/discovery/v1"
	fakediscoveryv1 "github.com/seal-io/walrus/pkg/clients/clientset/typed/discovery/v1/fake"
	eventsv1 "github.com/seal-io/walrus/pkg/clients/clientset/typed/events/v1"
	fakeeventsv1 "github.com/seal-io/walrus/pkg/clients/clientset/typed/events/v1/fake"
	rbacv1 "github.com/seal-io/walrus/pkg/clients/clientset/typed/rbac/v1"
	fakerbacv1 "github.com/seal-io/walrus/pkg/clients/clientset/typed/rbac/v1/fake"
	schedulingv1 "github.com/seal-io/walrus/pkg/clients/clientset/typed/scheduling/v1"
	fakeschedulingv1 "github.com/seal-io/walrus/pkg/clients/clientset/typed/scheduling/v1/fake"
	storagev1 "github.com/seal-io/walrus/pkg/clients/clientset/typed/storage/v1"
	fakestoragev1 "github.com/seal-io/walrus/pkg/clients/clientset/typed/storage/v1/fake"
	walrusv1 "github.com/seal-io/walrus/pkg/clients/clientset/typed/walrus/v1"
	fakewalrusv1 "github.com/seal-io/walrus/pkg/clients/clientset/typed/walrus/v1/fake"
	walruscorev1 "github.com/seal-io/walrus/pkg/clients/clientset/typed/walruscore/v1"
	fakewalruscorev1 "github.com/seal-io/walrus/pkg/clients/clientset/typed/walruscore/v1/fake"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/discovery"
	fakediscovery "k8s.io/client-go/discovery/fake"
	"k8s.io/client-go/testing"
)

// NewSimpleClientset returns a clientset that will respond with the provided objects.
// It's backed by a very simple object tracker that processes creates, updates and deletions as-is,
// without applying any validations and/or defaults. It shouldn't be considered a replacement
// for a real clientset and is mostly useful in simple unit tests.
func NewSimpleClientset(objects ...runtime.Object) *Clientset {
	o := testing.NewObjectTracker(scheme, codecs.UniversalDecoder())
	for _, obj := range objects {
		if err := o.Add(obj); err != nil {
			panic(err)
		}
	}

	cs := &Clientset{tracker: o}
	cs.discovery = &fakediscovery.FakeDiscovery{Fake: &cs.Fake}
	cs.AddReactor("*", "*", testing.ObjectReaction(o))
	cs.AddWatchReactor("*", func(action testing.Action) (handled bool, ret watch.Interface, err error) {
		gvr := action.GetResource()
		ns := action.GetNamespace()
		watch, err := o.Watch(gvr, ns)
		if err != nil {
			return false, nil, err
		}
		return true, watch, nil
	})

	return cs
}

// Clientset implements clientset.Interface. Meant to be embedded into a
// struct to get a default implementation. This makes faking out just the method
// you want to test easier.
type Clientset struct {
	testing.Fake
	discovery *fakediscovery.FakeDiscovery
	tracker   testing.ObjectTracker
}

func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	return c.discovery
}

func (c *Clientset) Tracker() testing.ObjectTracker {
	return c.tracker
}

var (
	_ clientset.Interface = &Clientset{}
	_ testing.FakeClient  = &Clientset{}
)

// WalruscoreV1 retrieves the WalruscoreV1Client
func (c *Clientset) WalruscoreV1() walruscorev1.WalruscoreV1Interface {
	return &fakewalruscorev1.FakeWalruscoreV1{Fake: &c.Fake}
}

// WalrusV1 retrieves the WalrusV1Client
func (c *Clientset) WalrusV1() walrusv1.WalrusV1Interface {
	return &fakewalrusv1.FakeWalrusV1{Fake: &c.Fake}
}

// AdmissionV1 retrieves the AdmissionV1Client
func (c *Clientset) AdmissionV1() admissionv1.AdmissionV1Interface {
	return &fakeadmissionv1.FakeAdmissionV1{Fake: &c.Fake}
}

// AdmissionregistrationV1 retrieves the AdmissionregistrationV1Client
func (c *Clientset) AdmissionregistrationV1() admissionregistrationv1.AdmissionregistrationV1Interface {
	return &fakeadmissionregistrationv1.FakeAdmissionregistrationV1{Fake: &c.Fake}
}

// AppsV1 retrieves the AppsV1Client
func (c *Clientset) AppsV1() appsv1.AppsV1Interface {
	return &fakeappsv1.FakeAppsV1{Fake: &c.Fake}
}

// AuthenticationV1 retrieves the AuthenticationV1Client
func (c *Clientset) AuthenticationV1() authenticationv1.AuthenticationV1Interface {
	return &fakeauthenticationv1.FakeAuthenticationV1{Fake: &c.Fake}
}

// AuthorizationV1 retrieves the AuthorizationV1Client
func (c *Clientset) AuthorizationV1() authorizationv1.AuthorizationV1Interface {
	return &fakeauthorizationv1.FakeAuthorizationV1{Fake: &c.Fake}
}

// AutoscalingV1 retrieves the AutoscalingV1Client
func (c *Clientset) AutoscalingV1() autoscalingv1.AutoscalingV1Interface {
	return &fakeautoscalingv1.FakeAutoscalingV1{Fake: &c.Fake}
}

// AutoscalingV2 retrieves the AutoscalingV2Client
func (c *Clientset) AutoscalingV2() autoscalingv2.AutoscalingV2Interface {
	return &fakeautoscalingv2.FakeAutoscalingV2{Fake: &c.Fake}
}

// BatchV1 retrieves the BatchV1Client
func (c *Clientset) BatchV1() batchv1.BatchV1Interface {
	return &fakebatchv1.FakeBatchV1{Fake: &c.Fake}
}

// CertificatesV1 retrieves the CertificatesV1Client
func (c *Clientset) CertificatesV1() certificatesv1.CertificatesV1Interface {
	return &fakecertificatesv1.FakeCertificatesV1{Fake: &c.Fake}
}

// CoordinationV1 retrieves the CoordinationV1Client
func (c *Clientset) CoordinationV1() coordinationv1.CoordinationV1Interface {
	return &fakecoordinationv1.FakeCoordinationV1{Fake: &c.Fake}
}

// CoreV1 retrieves the CoreV1Client
func (c *Clientset) CoreV1() corev1.CoreV1Interface {
	return &fakecorev1.FakeCoreV1{Fake: &c.Fake}
}

// DiscoveryV1 retrieves the DiscoveryV1Client
func (c *Clientset) DiscoveryV1() discoveryv1.DiscoveryV1Interface {
	return &fakediscoveryv1.FakeDiscoveryV1{Fake: &c.Fake}
}

// EventsV1 retrieves the EventsV1Client
func (c *Clientset) EventsV1() eventsv1.EventsV1Interface {
	return &fakeeventsv1.FakeEventsV1{Fake: &c.Fake}
}

// RbacV1 retrieves the RbacV1Client
func (c *Clientset) RbacV1() rbacv1.RbacV1Interface {
	return &fakerbacv1.FakeRbacV1{Fake: &c.Fake}
}

// SchedulingV1 retrieves the SchedulingV1Client
func (c *Clientset) SchedulingV1() schedulingv1.SchedulingV1Interface {
	return &fakeschedulingv1.FakeSchedulingV1{Fake: &c.Fake}
}

// StorageV1 retrieves the StorageV1Client
func (c *Clientset) StorageV1() storagev1.StorageV1Interface {
	return &fakestoragev1.FakeStorageV1{Fake: &c.Fake}
}

// ApiextensionsV1 retrieves the ApiextensionsV1Client
func (c *Clientset) ApiextensionsV1() apiextensionsv1.ApiextensionsV1Interface {
	return &fakeapiextensionsv1.FakeApiextensionsV1{Fake: &c.Fake}
}

// ApiregistrationV1 retrieves the ApiregistrationV1Client
func (c *Clientset) ApiregistrationV1() apiregistrationv1.ApiregistrationV1Interface {
	return &fakeapiregistrationv1.FakeApiregistrationV1{Fake: &c.Fake}
}
