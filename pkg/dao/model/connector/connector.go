// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus". DO NOT EDIT.

package connector

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"golang.org/x/exp/slices"

	"github.com/seal-io/walrus/pkg/dao/types/crypto"
)

const (
	// Label holds the string label denoting the connector type in the database.
	Label = "connector"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldLabels holds the string denoting the labels field in the database.
	FieldLabels = "labels"
	// FieldAnnotations holds the string denoting the annotations field in the database.
	FieldAnnotations = "annotations"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldProjectID holds the string denoting the project_id field in the database.
	FieldProjectID = "project_id"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldApplicableEnvironmentType holds the string denoting the applicable_environment_type field in the database.
	FieldApplicableEnvironmentType = "applicable_environment_type"
	// FieldConfigVersion holds the string denoting the config_version field in the database.
	FieldConfigVersion = "config_version"
	// FieldConfigData holds the string denoting the config_data field in the database.
	FieldConfigData = "config_data"
	// FieldEnableFinOps holds the string denoting the enable_fin_ops field in the database.
	FieldEnableFinOps = "enable_fin_ops"
	// FieldFinOpsCustomPricing holds the string denoting the fin_ops_custom_pricing field in the database.
	FieldFinOpsCustomPricing = "fin_ops_custom_pricing"
	// EdgeProject holds the string denoting the project edge name in mutations.
	EdgeProject = "project"
	// EdgeEnvironments holds the string denoting the environments edge name in mutations.
	EdgeEnvironments = "environments"
	// EdgeResourceComponents holds the string denoting the resource_components edge name in mutations.
	EdgeResourceComponents = "resource_components"
	// EdgeCostReports holds the string denoting the cost_reports edge name in mutations.
	EdgeCostReports = "cost_reports"
	// Table holds the table name of the connector in the database.
	Table = "connectors"
	// ProjectTable is the table that holds the project relation/edge.
	ProjectTable = "connectors"
	// ProjectInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	ProjectInverseTable = "projects"
	// ProjectColumn is the table column denoting the project relation/edge.
	ProjectColumn = "project_id"
	// EnvironmentsTable is the table that holds the environments relation/edge.
	EnvironmentsTable = "environment_connector_relationships"
	// EnvironmentsInverseTable is the table name for the EnvironmentConnectorRelationship entity.
	// It exists in this package in order to avoid circular dependency with the "environmentconnectorrelationship" package.
	EnvironmentsInverseTable = "environment_connector_relationships"
	// EnvironmentsColumn is the table column denoting the environments relation/edge.
	EnvironmentsColumn = "connector_id"
	// ResourceComponentsTable is the table that holds the resource_components relation/edge.
	ResourceComponentsTable = "resource_components"
	// ResourceComponentsInverseTable is the table name for the ResourceComponent entity.
	// It exists in this package in order to avoid circular dependency with the "resourcecomponent" package.
	ResourceComponentsInverseTable = "resource_components"
	// ResourceComponentsColumn is the table column denoting the resource_components relation/edge.
	ResourceComponentsColumn = "connector_id"
	// CostReportsTable is the table that holds the cost_reports relation/edge.
	CostReportsTable = "cost_reports"
	// CostReportsInverseTable is the table name for the CostReport entity.
	// It exists in this package in order to avoid circular dependency with the "costreport" package.
	CostReportsInverseTable = "cost_reports"
	// CostReportsColumn is the table column denoting the cost_reports relation/edge.
	CostReportsColumn = "connector_id"
)

// Columns holds all SQL columns for connector fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldLabels,
	FieldAnnotations,
	FieldCreateTime,
	FieldUpdateTime,
	FieldStatus,
	FieldProjectID,
	FieldCategory,
	FieldType,
	FieldApplicableEnvironmentType,
	FieldConfigVersion,
	FieldConfigData,
	FieldEnableFinOps,
	FieldFinOpsCustomPricing,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/seal-io/walrus/pkg/dao/model/runtime"
var (
	Hooks        [2]ent.Hook
	Interceptors [1]ent.Interceptor
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultLabels holds the default value on creation for the "labels" field.
	DefaultLabels map[string]string
	// DefaultAnnotations holds the default value on creation for the "annotations" field.
	DefaultAnnotations map[string]string
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// CategoryValidator is a validator for the "category" field. It is called by the builders before save.
	CategoryValidator func(string) error
	// TypeValidator is a validator for the "type" field. It is called by the builders before save.
	TypeValidator func(string) error
	// ApplicableEnvironmentTypeValidator is a validator for the "applicable_environment_type" field. It is called by the builders before save.
	ApplicableEnvironmentTypeValidator func(string) error
	// ConfigVersionValidator is a validator for the "config_version" field. It is called by the builders before save.
	ConfigVersionValidator func(string) error
	// DefaultConfigData holds the default value on creation for the "config_data" field.
	DefaultConfigData crypto.Properties
)

// OrderOption defines the ordering options for the Connector queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByProjectID orders the results by the project_id field.
func ByProjectID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProjectID, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByApplicableEnvironmentType orders the results by the applicable_environment_type field.
func ByApplicableEnvironmentType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApplicableEnvironmentType, opts...).ToFunc()
}

// ByConfigVersion orders the results by the config_version field.
func ByConfigVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConfigVersion, opts...).ToFunc()
}

// ByConfigData orders the results by the config_data field.
func ByConfigData(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConfigData, opts...).ToFunc()
}

// ByEnableFinOps orders the results by the enable_fin_ops field.
func ByEnableFinOps(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnableFinOps, opts...).ToFunc()
}

// ByProjectField orders the results by project field.
func ByProjectField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProjectStep(), sql.OrderByField(field, opts...))
	}
}

// ByEnvironmentsCount orders the results by environments count.
func ByEnvironmentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEnvironmentsStep(), opts...)
	}
}

// ByEnvironments orders the results by environments terms.
func ByEnvironments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEnvironmentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByResourceComponentsCount orders the results by resource_components count.
func ByResourceComponentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newResourceComponentsStep(), opts...)
	}
}

// ByResourceComponents orders the results by resource_components terms.
func ByResourceComponents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newResourceComponentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCostReportsCount orders the results by cost_reports count.
func ByCostReportsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCostReportsStep(), opts...)
	}
}

// ByCostReports orders the results by cost_reports terms.
func ByCostReports(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCostReportsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
	)
}
func newEnvironmentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EnvironmentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, EnvironmentsTable, EnvironmentsColumn),
	)
}
func newResourceComponentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ResourceComponentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ResourceComponentsTable, ResourceComponentsColumn),
	)
}
func newCostReportsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CostReportsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CostReportsTable, CostReportsColumn),
	)
}

// WithoutFields returns the fields ignored the given list.
func WithoutFields(ignores ...string) []string {
	if len(ignores) == 0 {
		return slices.Clone(Columns)
	}

	var s = make(map[string]bool, len(ignores))
	for i := range ignores {
		s[ignores[i]] = true
	}

	var r = make([]string, 0, len(Columns)-len(s))
	for i := range Columns {
		if s[Columns[i]] {
			continue
		}
		r = append(r, Columns[i])
	}
	return r
}
