// SPDX-FileCopyrightText: 2023 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "ent". DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/seal-io/seal/pkg/dao/model/environment"
	"github.com/seal-io/seal/pkg/dao/model/project"
	"github.com/seal-io/seal/pkg/dao/model/service"
	"github.com/seal-io/seal/pkg/dao/model/servicedependency"
	"github.com/seal-io/seal/pkg/dao/model/serviceresource"
	"github.com/seal-io/seal/pkg/dao/model/servicerevision"
	"github.com/seal-io/seal/pkg/dao/types"
	"github.com/seal-io/seal/pkg/dao/types/oid"
	"github.com/seal-io/seal/pkg/dao/types/property"
	"github.com/seal-io/seal/pkg/dao/types/status"
)

// ServiceCreate is the builder for creating a Service entity.
type ServiceCreate struct {
	config
	mutation *ServiceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetProjectID sets the "projectID" field.
func (sc *ServiceCreate) SetProjectID(o oid.ID) *ServiceCreate {
	sc.mutation.SetProjectID(o)
	return sc
}

// SetName sets the "name" field.
func (sc *ServiceCreate) SetName(s string) *ServiceCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetDescription sets the "description" field.
func (sc *ServiceCreate) SetDescription(s string) *ServiceCreate {
	sc.mutation.SetDescription(s)
	return sc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sc *ServiceCreate) SetNillableDescription(s *string) *ServiceCreate {
	if s != nil {
		sc.SetDescription(*s)
	}
	return sc
}

// SetLabels sets the "labels" field.
func (sc *ServiceCreate) SetLabels(m map[string]string) *ServiceCreate {
	sc.mutation.SetLabels(m)
	return sc
}

// SetAnnotations sets the "annotations" field.
func (sc *ServiceCreate) SetAnnotations(m map[string]string) *ServiceCreate {
	sc.mutation.SetAnnotations(m)
	return sc
}

// SetCreateTime sets the "createTime" field.
func (sc *ServiceCreate) SetCreateTime(t time.Time) *ServiceCreate {
	sc.mutation.SetCreateTime(t)
	return sc
}

// SetNillableCreateTime sets the "createTime" field if the given value is not nil.
func (sc *ServiceCreate) SetNillableCreateTime(t *time.Time) *ServiceCreate {
	if t != nil {
		sc.SetCreateTime(*t)
	}
	return sc
}

// SetUpdateTime sets the "updateTime" field.
func (sc *ServiceCreate) SetUpdateTime(t time.Time) *ServiceCreate {
	sc.mutation.SetUpdateTime(t)
	return sc
}

// SetNillableUpdateTime sets the "updateTime" field if the given value is not nil.
func (sc *ServiceCreate) SetNillableUpdateTime(t *time.Time) *ServiceCreate {
	if t != nil {
		sc.SetUpdateTime(*t)
	}
	return sc
}

// SetEnvironmentID sets the "environmentID" field.
func (sc *ServiceCreate) SetEnvironmentID(o oid.ID) *ServiceCreate {
	sc.mutation.SetEnvironmentID(o)
	return sc
}

// SetTemplate sets the "template" field.
func (sc *ServiceCreate) SetTemplate(tvr types.TemplateVersionRef) *ServiceCreate {
	sc.mutation.SetTemplate(tvr)
	return sc
}

// SetAttributes sets the "attributes" field.
func (sc *ServiceCreate) SetAttributes(pr property.Values) *ServiceCreate {
	sc.mutation.SetAttributes(pr)
	return sc
}

// SetStatus sets the "status" field.
func (sc *ServiceCreate) SetStatus(s status.Status) *ServiceCreate {
	sc.mutation.SetStatus(s)
	return sc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sc *ServiceCreate) SetNillableStatus(s *status.Status) *ServiceCreate {
	if s != nil {
		sc.SetStatus(*s)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *ServiceCreate) SetID(o oid.ID) *ServiceCreate {
	sc.mutation.SetID(o)
	return sc
}

// SetEnvironment sets the "environment" edge to the Environment entity.
func (sc *ServiceCreate) SetEnvironment(e *Environment) *ServiceCreate {
	return sc.SetEnvironmentID(e.ID)
}

// SetProject sets the "project" edge to the Project entity.
func (sc *ServiceCreate) SetProject(p *Project) *ServiceCreate {
	return sc.SetProjectID(p.ID)
}

// AddRevisionIDs adds the "revisions" edge to the ServiceRevision entity by IDs.
func (sc *ServiceCreate) AddRevisionIDs(ids ...oid.ID) *ServiceCreate {
	sc.mutation.AddRevisionIDs(ids...)
	return sc
}

// AddRevisions adds the "revisions" edges to the ServiceRevision entity.
func (sc *ServiceCreate) AddRevisions(s ...*ServiceRevision) *ServiceCreate {
	ids := make([]oid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddRevisionIDs(ids...)
}

// AddResourceIDs adds the "resources" edge to the ServiceResource entity by IDs.
func (sc *ServiceCreate) AddResourceIDs(ids ...oid.ID) *ServiceCreate {
	sc.mutation.AddResourceIDs(ids...)
	return sc
}

// AddResources adds the "resources" edges to the ServiceResource entity.
func (sc *ServiceCreate) AddResources(s ...*ServiceResource) *ServiceCreate {
	ids := make([]oid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddResourceIDs(ids...)
}

// AddDependencyIDs adds the "dependencies" edge to the ServiceDependency entity by IDs.
func (sc *ServiceCreate) AddDependencyIDs(ids ...oid.ID) *ServiceCreate {
	sc.mutation.AddDependencyIDs(ids...)
	return sc
}

// AddDependencies adds the "dependencies" edges to the ServiceDependency entity.
func (sc *ServiceCreate) AddDependencies(s ...*ServiceDependency) *ServiceCreate {
	ids := make([]oid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddDependencyIDs(ids...)
}

// Mutation returns the ServiceMutation object of the builder.
func (sc *ServiceCreate) Mutation() *ServiceMutation {
	return sc.mutation
}

// Save creates the Service in the database.
func (sc *ServiceCreate) Save(ctx context.Context) (*Service, error) {
	if err := sc.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*Service, ServiceMutation](ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ServiceCreate) SaveX(ctx context.Context) *Service {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *ServiceCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *ServiceCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *ServiceCreate) defaults() error {
	if _, ok := sc.mutation.Labels(); !ok {
		v := service.DefaultLabels
		sc.mutation.SetLabels(v)
	}
	if _, ok := sc.mutation.Annotations(); !ok {
		v := service.DefaultAnnotations
		sc.mutation.SetAnnotations(v)
	}
	if _, ok := sc.mutation.CreateTime(); !ok {
		if service.DefaultCreateTime == nil {
			return fmt.Errorf("model: uninitialized service.DefaultCreateTime (forgotten import model/runtime?)")
		}
		v := service.DefaultCreateTime()
		sc.mutation.SetCreateTime(v)
	}
	if _, ok := sc.mutation.UpdateTime(); !ok {
		if service.DefaultUpdateTime == nil {
			return fmt.Errorf("model: uninitialized service.DefaultUpdateTime (forgotten import model/runtime?)")
		}
		v := service.DefaultUpdateTime()
		sc.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sc *ServiceCreate) check() error {
	if _, ok := sc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "projectID", err: errors.New(`model: missing required field "Service.projectID"`)}
	}
	if v, ok := sc.mutation.ProjectID(); ok {
		if err := service.ProjectIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "projectID", err: fmt.Errorf(`model: validator failed for field "Service.projectID": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`model: missing required field "Service.name"`)}
	}
	if v, ok := sc.mutation.Name(); ok {
		if err := service.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`model: validator failed for field "Service.name": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Labels(); !ok {
		return &ValidationError{Name: "labels", err: errors.New(`model: missing required field "Service.labels"`)}
	}
	if _, ok := sc.mutation.Annotations(); !ok {
		return &ValidationError{Name: "annotations", err: errors.New(`model: missing required field "Service.annotations"`)}
	}
	if _, ok := sc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "createTime", err: errors.New(`model: missing required field "Service.createTime"`)}
	}
	if _, ok := sc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "updateTime", err: errors.New(`model: missing required field "Service.updateTime"`)}
	}
	if _, ok := sc.mutation.EnvironmentID(); !ok {
		return &ValidationError{Name: "environmentID", err: errors.New(`model: missing required field "Service.environmentID"`)}
	}
	if v, ok := sc.mutation.EnvironmentID(); ok {
		if err := service.EnvironmentIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "environmentID", err: fmt.Errorf(`model: validator failed for field "Service.environmentID": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Template(); !ok {
		return &ValidationError{Name: "template", err: errors.New(`model: missing required field "Service.template"`)}
	}
	if _, ok := sc.mutation.EnvironmentID(); !ok {
		return &ValidationError{Name: "environment", err: errors.New(`model: missing required edge "Service.environment"`)}
	}
	if _, ok := sc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project", err: errors.New(`model: missing required edge "Service.project"`)}
	}
	return nil
}

func (sc *ServiceCreate) sqlSave(ctx context.Context) (*Service, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*oid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *ServiceCreate) createSpec() (*Service, *sqlgraph.CreateSpec) {
	var (
		_node = &Service{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(service.Table, sqlgraph.NewFieldSpec(service.FieldID, field.TypeString))
	)
	_spec.Schema = sc.schemaConfig.Service
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.SetField(service.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sc.mutation.Description(); ok {
		_spec.SetField(service.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := sc.mutation.Labels(); ok {
		_spec.SetField(service.FieldLabels, field.TypeJSON, value)
		_node.Labels = value
	}
	if value, ok := sc.mutation.Annotations(); ok {
		_spec.SetField(service.FieldAnnotations, field.TypeJSON, value)
		_node.Annotations = value
	}
	if value, ok := sc.mutation.CreateTime(); ok {
		_spec.SetField(service.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = &value
	}
	if value, ok := sc.mutation.UpdateTime(); ok {
		_spec.SetField(service.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = &value
	}
	if value, ok := sc.mutation.Template(); ok {
		_spec.SetField(service.FieldTemplate, field.TypeJSON, value)
		_node.Template = value
	}
	if value, ok := sc.mutation.Attributes(); ok {
		_spec.SetField(service.FieldAttributes, field.TypeOther, value)
		_node.Attributes = value
	}
	if value, ok := sc.mutation.Status(); ok {
		_spec.SetField(service.FieldStatus, field.TypeJSON, value)
		_node.Status = value
	}
	if nodes := sc.mutation.EnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   service.EnvironmentTable,
			Columns: []string{service.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeString),
			},
		}
		edge.Schema = sc.schemaConfig.Service
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EnvironmentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   service.ProjectTable,
			Columns: []string{service.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		edge.Schema = sc.schemaConfig.Service
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.RevisionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   service.RevisionsTable,
			Columns: []string{service.RevisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicerevision.FieldID, field.TypeString),
			},
		}
		edge.Schema = sc.schemaConfig.ServiceRevision
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ResourcesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   service.ResourcesTable,
			Columns: []string{service.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceresource.FieldID, field.TypeString),
			},
		}
		edge.Schema = sc.schemaConfig.ServiceResource
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.DependenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   service.DependenciesTable,
			Columns: []string{service.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicedependency.FieldID, field.TypeString),
			},
		}
		edge.Schema = sc.schemaConfig.ServiceDependency
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Service.Create().
//		SetProjectID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ServiceUpsert) {
//			SetProjectID(v+v).
//		}).
//		Exec(ctx)
func (sc *ServiceCreate) OnConflict(opts ...sql.ConflictOption) *ServiceUpsertOne {
	sc.conflict = opts
	return &ServiceUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Service.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *ServiceCreate) OnConflictColumns(columns ...string) *ServiceUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &ServiceUpsertOne{
		create: sc,
	}
}

type (
	// ServiceUpsertOne is the builder for "upsert"-ing
	//  one Service node.
	ServiceUpsertOne struct {
		create *ServiceCreate
	}

	// ServiceUpsert is the "OnConflict" setter.
	ServiceUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *ServiceUpsert) SetName(v string) *ServiceUpsert {
	u.Set(service.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ServiceUpsert) UpdateName() *ServiceUpsert {
	u.SetExcluded(service.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *ServiceUpsert) SetDescription(v string) *ServiceUpsert {
	u.Set(service.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ServiceUpsert) UpdateDescription() *ServiceUpsert {
	u.SetExcluded(service.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *ServiceUpsert) ClearDescription() *ServiceUpsert {
	u.SetNull(service.FieldDescription)
	return u
}

// SetLabels sets the "labels" field.
func (u *ServiceUpsert) SetLabels(v map[string]string) *ServiceUpsert {
	u.Set(service.FieldLabels, v)
	return u
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *ServiceUpsert) UpdateLabels() *ServiceUpsert {
	u.SetExcluded(service.FieldLabels)
	return u
}

// SetAnnotations sets the "annotations" field.
func (u *ServiceUpsert) SetAnnotations(v map[string]string) *ServiceUpsert {
	u.Set(service.FieldAnnotations, v)
	return u
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *ServiceUpsert) UpdateAnnotations() *ServiceUpsert {
	u.SetExcluded(service.FieldAnnotations)
	return u
}

// SetUpdateTime sets the "updateTime" field.
func (u *ServiceUpsert) SetUpdateTime(v time.Time) *ServiceUpsert {
	u.Set(service.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "updateTime" field to the value that was provided on create.
func (u *ServiceUpsert) UpdateUpdateTime() *ServiceUpsert {
	u.SetExcluded(service.FieldUpdateTime)
	return u
}

// SetTemplate sets the "template" field.
func (u *ServiceUpsert) SetTemplate(v types.TemplateVersionRef) *ServiceUpsert {
	u.Set(service.FieldTemplate, v)
	return u
}

// UpdateTemplate sets the "template" field to the value that was provided on create.
func (u *ServiceUpsert) UpdateTemplate() *ServiceUpsert {
	u.SetExcluded(service.FieldTemplate)
	return u
}

// SetAttributes sets the "attributes" field.
func (u *ServiceUpsert) SetAttributes(v property.Values) *ServiceUpsert {
	u.Set(service.FieldAttributes, v)
	return u
}

// UpdateAttributes sets the "attributes" field to the value that was provided on create.
func (u *ServiceUpsert) UpdateAttributes() *ServiceUpsert {
	u.SetExcluded(service.FieldAttributes)
	return u
}

// ClearAttributes clears the value of the "attributes" field.
func (u *ServiceUpsert) ClearAttributes() *ServiceUpsert {
	u.SetNull(service.FieldAttributes)
	return u
}

// SetStatus sets the "status" field.
func (u *ServiceUpsert) SetStatus(v status.Status) *ServiceUpsert {
	u.Set(service.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ServiceUpsert) UpdateStatus() *ServiceUpsert {
	u.SetExcluded(service.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *ServiceUpsert) ClearStatus() *ServiceUpsert {
	u.SetNull(service.FieldStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Service.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(service.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ServiceUpsertOne) UpdateNewValues() *ServiceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(service.FieldID)
		}
		if _, exists := u.create.mutation.ProjectID(); exists {
			s.SetIgnore(service.FieldProjectID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(service.FieldCreateTime)
		}
		if _, exists := u.create.mutation.EnvironmentID(); exists {
			s.SetIgnore(service.FieldEnvironmentID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Service.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ServiceUpsertOne) Ignore() *ServiceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ServiceUpsertOne) DoNothing() *ServiceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ServiceCreate.OnConflict
// documentation for more info.
func (u *ServiceUpsertOne) Update(set func(*ServiceUpsert)) *ServiceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ServiceUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *ServiceUpsertOne) SetName(v string) *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ServiceUpsertOne) UpdateName() *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *ServiceUpsertOne) SetDescription(v string) *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ServiceUpsertOne) UpdateDescription() *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ServiceUpsertOne) ClearDescription() *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.ClearDescription()
	})
}

// SetLabels sets the "labels" field.
func (u *ServiceUpsertOne) SetLabels(v map[string]string) *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.SetLabels(v)
	})
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *ServiceUpsertOne) UpdateLabels() *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.UpdateLabels()
	})
}

// SetAnnotations sets the "annotations" field.
func (u *ServiceUpsertOne) SetAnnotations(v map[string]string) *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.SetAnnotations(v)
	})
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *ServiceUpsertOne) UpdateAnnotations() *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.UpdateAnnotations()
	})
}

// SetUpdateTime sets the "updateTime" field.
func (u *ServiceUpsertOne) SetUpdateTime(v time.Time) *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "updateTime" field to the value that was provided on create.
func (u *ServiceUpsertOne) UpdateUpdateTime() *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetTemplate sets the "template" field.
func (u *ServiceUpsertOne) SetTemplate(v types.TemplateVersionRef) *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.SetTemplate(v)
	})
}

// UpdateTemplate sets the "template" field to the value that was provided on create.
func (u *ServiceUpsertOne) UpdateTemplate() *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.UpdateTemplate()
	})
}

// SetAttributes sets the "attributes" field.
func (u *ServiceUpsertOne) SetAttributes(v property.Values) *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.SetAttributes(v)
	})
}

// UpdateAttributes sets the "attributes" field to the value that was provided on create.
func (u *ServiceUpsertOne) UpdateAttributes() *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.UpdateAttributes()
	})
}

// ClearAttributes clears the value of the "attributes" field.
func (u *ServiceUpsertOne) ClearAttributes() *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.ClearAttributes()
	})
}

// SetStatus sets the "status" field.
func (u *ServiceUpsertOne) SetStatus(v status.Status) *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ServiceUpsertOne) UpdateStatus() *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *ServiceUpsertOne) ClearStatus() *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.ClearStatus()
	})
}

// Exec executes the query.
func (u *ServiceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for ServiceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ServiceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ServiceUpsertOne) ID(ctx context.Context) (id oid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("model: ServiceUpsertOne.ID is not supported by MySQL driver. Use ServiceUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ServiceUpsertOne) IDX(ctx context.Context) oid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ServiceCreateBulk is the builder for creating many Service entities in bulk.
type ServiceCreateBulk struct {
	config
	builders []*ServiceCreate
	conflict []sql.ConflictOption
}

// Save creates the Service entities in the database.
func (scb *ServiceCreateBulk) Save(ctx context.Context) ([]*Service, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Service, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ServiceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *ServiceCreateBulk) SaveX(ctx context.Context) []*Service {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *ServiceCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *ServiceCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Service.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ServiceUpsert) {
//			SetProjectID(v+v).
//		}).
//		Exec(ctx)
func (scb *ServiceCreateBulk) OnConflict(opts ...sql.ConflictOption) *ServiceUpsertBulk {
	scb.conflict = opts
	return &ServiceUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Service.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *ServiceCreateBulk) OnConflictColumns(columns ...string) *ServiceUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &ServiceUpsertBulk{
		create: scb,
	}
}

// ServiceUpsertBulk is the builder for "upsert"-ing
// a bulk of Service nodes.
type ServiceUpsertBulk struct {
	create *ServiceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Service.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(service.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ServiceUpsertBulk) UpdateNewValues() *ServiceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(service.FieldID)
			}
			if _, exists := b.mutation.ProjectID(); exists {
				s.SetIgnore(service.FieldProjectID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(service.FieldCreateTime)
			}
			if _, exists := b.mutation.EnvironmentID(); exists {
				s.SetIgnore(service.FieldEnvironmentID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Service.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ServiceUpsertBulk) Ignore() *ServiceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ServiceUpsertBulk) DoNothing() *ServiceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ServiceCreateBulk.OnConflict
// documentation for more info.
func (u *ServiceUpsertBulk) Update(set func(*ServiceUpsert)) *ServiceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ServiceUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *ServiceUpsertBulk) SetName(v string) *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ServiceUpsertBulk) UpdateName() *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *ServiceUpsertBulk) SetDescription(v string) *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ServiceUpsertBulk) UpdateDescription() *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ServiceUpsertBulk) ClearDescription() *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.ClearDescription()
	})
}

// SetLabels sets the "labels" field.
func (u *ServiceUpsertBulk) SetLabels(v map[string]string) *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.SetLabels(v)
	})
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *ServiceUpsertBulk) UpdateLabels() *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.UpdateLabels()
	})
}

// SetAnnotations sets the "annotations" field.
func (u *ServiceUpsertBulk) SetAnnotations(v map[string]string) *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.SetAnnotations(v)
	})
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *ServiceUpsertBulk) UpdateAnnotations() *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.UpdateAnnotations()
	})
}

// SetUpdateTime sets the "updateTime" field.
func (u *ServiceUpsertBulk) SetUpdateTime(v time.Time) *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "updateTime" field to the value that was provided on create.
func (u *ServiceUpsertBulk) UpdateUpdateTime() *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetTemplate sets the "template" field.
func (u *ServiceUpsertBulk) SetTemplate(v types.TemplateVersionRef) *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.SetTemplate(v)
	})
}

// UpdateTemplate sets the "template" field to the value that was provided on create.
func (u *ServiceUpsertBulk) UpdateTemplate() *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.UpdateTemplate()
	})
}

// SetAttributes sets the "attributes" field.
func (u *ServiceUpsertBulk) SetAttributes(v property.Values) *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.SetAttributes(v)
	})
}

// UpdateAttributes sets the "attributes" field to the value that was provided on create.
func (u *ServiceUpsertBulk) UpdateAttributes() *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.UpdateAttributes()
	})
}

// ClearAttributes clears the value of the "attributes" field.
func (u *ServiceUpsertBulk) ClearAttributes() *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.ClearAttributes()
	})
}

// SetStatus sets the "status" field.
func (u *ServiceUpsertBulk) SetStatus(v status.Status) *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ServiceUpsertBulk) UpdateStatus() *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *ServiceUpsertBulk) ClearStatus() *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.ClearStatus()
	})
}

// Exec executes the query.
func (u *ServiceUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model: OnConflict was set for builder %d. Set it on the ServiceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for ServiceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ServiceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
