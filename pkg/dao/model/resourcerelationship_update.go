// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus". DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/seal-io/walrus/pkg/dao/model/internal"
	"github.com/seal-io/walrus/pkg/dao/model/predicate"
	"github.com/seal-io/walrus/pkg/dao/model/resourcerelationship"
)

// ResourceRelationshipUpdate is the builder for updating ResourceRelationship entities.
type ResourceRelationshipUpdate struct {
	config
	hooks     []Hook
	mutation  *ResourceRelationshipMutation
	modifiers []func(*sql.UpdateBuilder)
	object    *ResourceRelationship
}

// Where appends a list predicates to the ResourceRelationshipUpdate builder.
func (rru *ResourceRelationshipUpdate) Where(ps ...predicate.ResourceRelationship) *ResourceRelationshipUpdate {
	rru.mutation.Where(ps...)
	return rru
}

// Mutation returns the ResourceRelationshipMutation object of the builder.
func (rru *ResourceRelationshipUpdate) Mutation() *ResourceRelationshipMutation {
	return rru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rru *ResourceRelationshipUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rru.sqlSave, rru.mutation, rru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rru *ResourceRelationshipUpdate) SaveX(ctx context.Context) int {
	affected, err := rru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rru *ResourceRelationshipUpdate) Exec(ctx context.Context) error {
	_, err := rru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rru *ResourceRelationshipUpdate) ExecX(ctx context.Context) {
	if err := rru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rru *ResourceRelationshipUpdate) check() error {
	if _, ok := rru.mutation.ResourceID(); rru.mutation.ResourceCleared() && !ok {
		return errors.New(`model: clearing a required unique edge "ResourceRelationship.resource"`)
	}
	if _, ok := rru.mutation.DependencyID(); rru.mutation.DependencyCleared() && !ok {
		return errors.New(`model: clearing a required unique edge "ResourceRelationship.dependency"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rru *ResourceRelationshipUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ResourceRelationshipUpdate {
	rru.modifiers = append(rru.modifiers, modifiers...)
	return rru
}

func (rru *ResourceRelationshipUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(resourcerelationship.Table, resourcerelationship.Columns, sqlgraph.NewFieldSpec(resourcerelationship.FieldID, field.TypeString))
	if ps := rru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_spec.Node.Schema = rru.schemaConfig.ResourceRelationship
	ctx = internal.NewSchemaConfigContext(ctx, rru.schemaConfig)
	_spec.AddModifiers(rru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, rru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resourcerelationship.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rru.mutation.done = true
	return n, nil
}

// ResourceRelationshipUpdateOne is the builder for updating a single ResourceRelationship entity.
type ResourceRelationshipUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ResourceRelationshipMutation
	modifiers []func(*sql.UpdateBuilder)
	object    *ResourceRelationship
}

// Mutation returns the ResourceRelationshipMutation object of the builder.
func (rruo *ResourceRelationshipUpdateOne) Mutation() *ResourceRelationshipMutation {
	return rruo.mutation
}

// Where appends a list predicates to the ResourceRelationshipUpdate builder.
func (rruo *ResourceRelationshipUpdateOne) Where(ps ...predicate.ResourceRelationship) *ResourceRelationshipUpdateOne {
	rruo.mutation.Where(ps...)
	return rruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rruo *ResourceRelationshipUpdateOne) Select(field string, fields ...string) *ResourceRelationshipUpdateOne {
	rruo.fields = append([]string{field}, fields...)
	return rruo
}

// Save executes the query and returns the updated ResourceRelationship entity.
func (rruo *ResourceRelationshipUpdateOne) Save(ctx context.Context) (*ResourceRelationship, error) {
	return withHooks(ctx, rruo.sqlSave, rruo.mutation, rruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rruo *ResourceRelationshipUpdateOne) SaveX(ctx context.Context) *ResourceRelationship {
	node, err := rruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rruo *ResourceRelationshipUpdateOne) Exec(ctx context.Context) error {
	_, err := rruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rruo *ResourceRelationshipUpdateOne) ExecX(ctx context.Context) {
	if err := rruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rruo *ResourceRelationshipUpdateOne) check() error {
	if _, ok := rruo.mutation.ResourceID(); rruo.mutation.ResourceCleared() && !ok {
		return errors.New(`model: clearing a required unique edge "ResourceRelationship.resource"`)
	}
	if _, ok := rruo.mutation.DependencyID(); rruo.mutation.DependencyCleared() && !ok {
		return errors.New(`model: clearing a required unique edge "ResourceRelationship.dependency"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rruo *ResourceRelationshipUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ResourceRelationshipUpdateOne {
	rruo.modifiers = append(rruo.modifiers, modifiers...)
	return rruo
}

func (rruo *ResourceRelationshipUpdateOne) sqlSave(ctx context.Context) (_node *ResourceRelationship, err error) {
	if err := rruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(resourcerelationship.Table, resourcerelationship.Columns, sqlgraph.NewFieldSpec(resourcerelationship.FieldID, field.TypeString))
	id, ok := rruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`model: missing "ResourceRelationship.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, resourcerelationship.FieldID)
		for _, f := range fields {
			if !resourcerelationship.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
			}
			if f != resourcerelationship.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_spec.Node.Schema = rruo.schemaConfig.ResourceRelationship
	ctx = internal.NewSchemaConfigContext(ctx, rruo.schemaConfig)
	_spec.AddModifiers(rruo.modifiers...)
	_node = &ResourceRelationship{config: rruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resourcerelationship.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rruo.mutation.done = true
	return _node, nil
}
