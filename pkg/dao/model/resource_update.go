// SPDX-FileCopyrightText: 2023 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus". DO NOT EDIT.

package model

import (
	"context"
	stdsql "database/sql"
	"errors"
	"fmt"
	"reflect"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/seal-io/walrus/pkg/dao/model/internal"
	"github.com/seal-io/walrus/pkg/dao/model/predicate"
	"github.com/seal-io/walrus/pkg/dao/model/resource"
	"github.com/seal-io/walrus/pkg/dao/model/resourcecomponent"
	"github.com/seal-io/walrus/pkg/dao/model/resourcerelationship"
	"github.com/seal-io/walrus/pkg/dao/model/resourcerevision"
	"github.com/seal-io/walrus/pkg/dao/model/templateversion"
	"github.com/seal-io/walrus/pkg/dao/types/object"
	"github.com/seal-io/walrus/pkg/dao/types/property"
	"github.com/seal-io/walrus/pkg/dao/types/status"
)

// ResourceUpdate is the builder for updating Resource entities.
type ResourceUpdate struct {
	config
	hooks     []Hook
	mutation  *ResourceMutation
	modifiers []func(*sql.UpdateBuilder)
	object    *Resource
}

// Where appends a list predicates to the ResourceUpdate builder.
func (ru *ResourceUpdate) Where(ps ...predicate.Resource) *ResourceUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetDescription sets the "description" field.
func (ru *ResourceUpdate) SetDescription(s string) *ResourceUpdate {
	ru.mutation.SetDescription(s)
	return ru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ru *ResourceUpdate) SetNillableDescription(s *string) *ResourceUpdate {
	if s != nil {
		ru.SetDescription(*s)
	}
	return ru
}

// ClearDescription clears the value of the "description" field.
func (ru *ResourceUpdate) ClearDescription() *ResourceUpdate {
	ru.mutation.ClearDescription()
	return ru
}

// SetLabels sets the "labels" field.
func (ru *ResourceUpdate) SetLabels(m map[string]string) *ResourceUpdate {
	ru.mutation.SetLabels(m)
	return ru
}

// ClearLabels clears the value of the "labels" field.
func (ru *ResourceUpdate) ClearLabels() *ResourceUpdate {
	ru.mutation.ClearLabels()
	return ru
}

// SetAnnotations sets the "annotations" field.
func (ru *ResourceUpdate) SetAnnotations(m map[string]string) *ResourceUpdate {
	ru.mutation.SetAnnotations(m)
	return ru
}

// ClearAnnotations clears the value of the "annotations" field.
func (ru *ResourceUpdate) ClearAnnotations() *ResourceUpdate {
	ru.mutation.ClearAnnotations()
	return ru
}

// SetUpdateTime sets the "update_time" field.
func (ru *ResourceUpdate) SetUpdateTime(t time.Time) *ResourceUpdate {
	ru.mutation.SetUpdateTime(t)
	return ru
}

// SetStatus sets the "status" field.
func (ru *ResourceUpdate) SetStatus(s status.Status) *ResourceUpdate {
	ru.mutation.SetStatus(s)
	return ru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ru *ResourceUpdate) SetNillableStatus(s *status.Status) *ResourceUpdate {
	if s != nil {
		ru.SetStatus(*s)
	}
	return ru
}

// ClearStatus clears the value of the "status" field.
func (ru *ResourceUpdate) ClearStatus() *ResourceUpdate {
	ru.mutation.ClearStatus()
	return ru
}

// SetTemplateID sets the "template_id" field.
func (ru *ResourceUpdate) SetTemplateID(o object.ID) *ResourceUpdate {
	ru.mutation.SetTemplateID(o)
	return ru
}

// SetNillableTemplateID sets the "template_id" field if the given value is not nil.
func (ru *ResourceUpdate) SetNillableTemplateID(o *object.ID) *ResourceUpdate {
	if o != nil {
		ru.SetTemplateID(*o)
	}
	return ru
}

// ClearTemplateID clears the value of the "template_id" field.
func (ru *ResourceUpdate) ClearTemplateID() *ResourceUpdate {
	ru.mutation.ClearTemplateID()
	return ru
}

// SetAttributes sets the "attributes" field.
func (ru *ResourceUpdate) SetAttributes(pr property.Values) *ResourceUpdate {
	ru.mutation.SetAttributes(pr)
	return ru
}

// ClearAttributes clears the value of the "attributes" field.
func (ru *ResourceUpdate) ClearAttributes() *ResourceUpdate {
	ru.mutation.ClearAttributes()
	return ru
}

// SetChangeComment sets the "change_comment" field.
func (ru *ResourceUpdate) SetChangeComment(s string) *ResourceUpdate {
	ru.mutation.SetChangeComment(s)
	return ru
}

// SetNillableChangeComment sets the "change_comment" field if the given value is not nil.
func (ru *ResourceUpdate) SetNillableChangeComment(s *string) *ResourceUpdate {
	if s != nil {
		ru.SetChangeComment(*s)
	}
	return ru
}

// ClearChangeComment clears the value of the "change_comment" field.
func (ru *ResourceUpdate) ClearChangeComment() *ResourceUpdate {
	ru.mutation.ClearChangeComment()
	return ru
}

// SetActionType sets the "action_type" field.
func (ru *ResourceUpdate) SetActionType(s string) *ResourceUpdate {
	ru.mutation.SetActionType(s)
	return ru
}

// SetTemplate sets the "template" edge to the TemplateVersion entity.
func (ru *ResourceUpdate) SetTemplate(t *TemplateVersion) *ResourceUpdate {
	return ru.SetTemplateID(t.ID)
}

// AddRevisionIDs adds the "revisions" edge to the ResourceRevision entity by IDs.
func (ru *ResourceUpdate) AddRevisionIDs(ids ...object.ID) *ResourceUpdate {
	ru.mutation.AddRevisionIDs(ids...)
	return ru
}

// AddRevisions adds the "revisions" edges to the ResourceRevision entity.
func (ru *ResourceUpdate) AddRevisions(r ...*ResourceRevision) *ResourceUpdate {
	ids := make([]object.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddRevisionIDs(ids...)
}

// AddComponentIDs adds the "components" edge to the ResourceComponent entity by IDs.
func (ru *ResourceUpdate) AddComponentIDs(ids ...object.ID) *ResourceUpdate {
	ru.mutation.AddComponentIDs(ids...)
	return ru
}

// AddComponents adds the "components" edges to the ResourceComponent entity.
func (ru *ResourceUpdate) AddComponents(r ...*ResourceComponent) *ResourceUpdate {
	ids := make([]object.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddComponentIDs(ids...)
}

// AddDependencyIDs adds the "dependencies" edge to the ResourceRelationship entity by IDs.
func (ru *ResourceUpdate) AddDependencyIDs(ids ...object.ID) *ResourceUpdate {
	ru.mutation.AddDependencyIDs(ids...)
	return ru
}

// AddDependencies adds the "dependencies" edges to the ResourceRelationship entity.
func (ru *ResourceUpdate) AddDependencies(r ...*ResourceRelationship) *ResourceUpdate {
	ids := make([]object.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddDependencyIDs(ids...)
}

// Mutation returns the ResourceMutation object of the builder.
func (ru *ResourceUpdate) Mutation() *ResourceMutation {
	return ru.mutation
}

// ClearTemplate clears the "template" edge to the TemplateVersion entity.
func (ru *ResourceUpdate) ClearTemplate() *ResourceUpdate {
	ru.mutation.ClearTemplate()
	return ru
}

// ClearRevisions clears all "revisions" edges to the ResourceRevision entity.
func (ru *ResourceUpdate) ClearRevisions() *ResourceUpdate {
	ru.mutation.ClearRevisions()
	return ru
}

// RemoveRevisionIDs removes the "revisions" edge to ResourceRevision entities by IDs.
func (ru *ResourceUpdate) RemoveRevisionIDs(ids ...object.ID) *ResourceUpdate {
	ru.mutation.RemoveRevisionIDs(ids...)
	return ru
}

// RemoveRevisions removes "revisions" edges to ResourceRevision entities.
func (ru *ResourceUpdate) RemoveRevisions(r ...*ResourceRevision) *ResourceUpdate {
	ids := make([]object.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveRevisionIDs(ids...)
}

// ClearComponents clears all "components" edges to the ResourceComponent entity.
func (ru *ResourceUpdate) ClearComponents() *ResourceUpdate {
	ru.mutation.ClearComponents()
	return ru
}

// RemoveComponentIDs removes the "components" edge to ResourceComponent entities by IDs.
func (ru *ResourceUpdate) RemoveComponentIDs(ids ...object.ID) *ResourceUpdate {
	ru.mutation.RemoveComponentIDs(ids...)
	return ru
}

// RemoveComponents removes "components" edges to ResourceComponent entities.
func (ru *ResourceUpdate) RemoveComponents(r ...*ResourceComponent) *ResourceUpdate {
	ids := make([]object.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveComponentIDs(ids...)
}

// ClearDependencies clears all "dependencies" edges to the ResourceRelationship entity.
func (ru *ResourceUpdate) ClearDependencies() *ResourceUpdate {
	ru.mutation.ClearDependencies()
	return ru
}

// RemoveDependencyIDs removes the "dependencies" edge to ResourceRelationship entities by IDs.
func (ru *ResourceUpdate) RemoveDependencyIDs(ids ...object.ID) *ResourceUpdate {
	ru.mutation.RemoveDependencyIDs(ids...)
	return ru
}

// RemoveDependencies removes "dependencies" edges to ResourceRelationship entities.
func (ru *ResourceUpdate) RemoveDependencies(r ...*ResourceRelationship) *ResourceUpdate {
	ids := make([]object.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveDependencyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ResourceUpdate) Save(ctx context.Context) (int, error) {
	if err := ru.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ResourceUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ResourceUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *ResourceUpdate) defaults() error {
	if _, ok := ru.mutation.UpdateTime(); !ok {
		if resource.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("model: uninitialized resource.UpdateDefaultUpdateTime (forgotten import model/runtime?)")
		}
		v := resource.UpdateDefaultUpdateTime()
		ru.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ru *ResourceUpdate) check() error {
	if _, ok := ru.mutation.ProjectID(); ru.mutation.ProjectCleared() && !ok {
		return errors.New(`model: clearing a required unique edge "Resource.project"`)
	}
	if _, ok := ru.mutation.EnvironmentID(); ru.mutation.EnvironmentCleared() && !ok {
		return errors.New(`model: clearing a required unique edge "Resource.environment"`)
	}
	return nil
}

// Set is different from other Set* methods,
// it sets the value by judging the definition of each field within the entire object.
//
// For default fields, Set calls if the value is not zero.
//
// For no default but required fields, Set calls directly.
//
// For no default but optional fields, Set calls if the value is not zero,
// or clears if the value is zero.
//
// For example:
//
//	## Without Default
//
//	### Required
//
//	db.SetX(obj.X)
//
//	### Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	} else {
//	   db.ClearX()
//	}
//
//	## With Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (ru *ResourceUpdate) Set(obj *Resource) *ResourceUpdate {
	// Without Default.
	if obj.Description != "" {
		ru.SetDescription(obj.Description)
	} else {
		ru.ClearDescription()
	}
	if !reflect.ValueOf(obj.Labels).IsZero() {
		ru.SetLabels(obj.Labels)
	} else {
		ru.ClearLabels()
	}
	if !reflect.ValueOf(obj.Annotations).IsZero() {
		ru.SetAnnotations(obj.Annotations)
	}
	if !reflect.ValueOf(obj.Status).IsZero() {
		ru.SetStatus(obj.Status)
	}
	if obj.TemplateID != nil {
		ru.SetTemplateID(*obj.TemplateID)
	} else {
		ru.ClearTemplateID()
	}
	if !reflect.ValueOf(obj.Attributes).IsZero() {
		ru.SetAttributes(obj.Attributes)
	} else {
		ru.ClearAttributes()
	}
	if obj.ChangeComment != "" {
		ru.SetChangeComment(obj.ChangeComment)
	} else {
		ru.ClearChangeComment()
	}
	ru.SetActionType(obj.ActionType)

	// With Default.
	if obj.UpdateTime != nil {
		ru.SetUpdateTime(*obj.UpdateTime)
	}

	// Record the given object.
	ru.object = obj

	return ru
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ru *ResourceUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ResourceUpdate {
	ru.modifiers = append(ru.modifiers, modifiers...)
	return ru
}

func (ru *ResourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(resource.Table, resource.Columns, sqlgraph.NewFieldSpec(resource.FieldID, field.TypeString))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Description(); ok {
		_spec.SetField(resource.FieldDescription, field.TypeString, value)
	}
	if ru.mutation.DescriptionCleared() {
		_spec.ClearField(resource.FieldDescription, field.TypeString)
	}
	if value, ok := ru.mutation.Labels(); ok {
		_spec.SetField(resource.FieldLabels, field.TypeJSON, value)
	}
	if ru.mutation.LabelsCleared() {
		_spec.ClearField(resource.FieldLabels, field.TypeJSON)
	}
	if value, ok := ru.mutation.Annotations(); ok {
		_spec.SetField(resource.FieldAnnotations, field.TypeJSON, value)
	}
	if ru.mutation.AnnotationsCleared() {
		_spec.ClearField(resource.FieldAnnotations, field.TypeJSON)
	}
	if value, ok := ru.mutation.UpdateTime(); ok {
		_spec.SetField(resource.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := ru.mutation.Status(); ok {
		_spec.SetField(resource.FieldStatus, field.TypeJSON, value)
	}
	if ru.mutation.StatusCleared() {
		_spec.ClearField(resource.FieldStatus, field.TypeJSON)
	}
	if ru.mutation.TypeCleared() {
		_spec.ClearField(resource.FieldType, field.TypeString)
	}
	if value, ok := ru.mutation.Attributes(); ok {
		_spec.SetField(resource.FieldAttributes, field.TypeOther, value)
	}
	if ru.mutation.AttributesCleared() {
		_spec.ClearField(resource.FieldAttributes, field.TypeOther)
	}
	if value, ok := ru.mutation.ChangeComment(); ok {
		_spec.SetField(resource.FieldChangeComment, field.TypeString, value)
	}
	if ru.mutation.ChangeCommentCleared() {
		_spec.ClearField(resource.FieldChangeComment, field.TypeString)
	}
	if value, ok := ru.mutation.ActionType(); ok {
		_spec.SetField(resource.FieldActionType, field.TypeString, value)
	}
	if ru.mutation.TemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resource.TemplateTable,
			Columns: []string{resource.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(templateversion.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.Resource
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.TemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resource.TemplateTable,
			Columns: []string{resource.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(templateversion.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.Resource
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.RevisionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.RevisionsTable,
			Columns: []string{resource.RevisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourcerevision.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.ResourceRevision
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedRevisionsIDs(); len(nodes) > 0 && !ru.mutation.RevisionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.RevisionsTable,
			Columns: []string{resource.RevisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourcerevision.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.ResourceRevision
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RevisionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.RevisionsTable,
			Columns: []string{resource.RevisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourcerevision.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.ResourceRevision
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.ComponentsTable,
			Columns: []string{resource.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourcecomponent.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.ResourceComponent
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedComponentsIDs(); len(nodes) > 0 && !ru.mutation.ComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.ComponentsTable,
			Columns: []string{resource.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourcecomponent.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.ResourceComponent
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ComponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.ComponentsTable,
			Columns: []string{resource.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourcecomponent.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.ResourceComponent
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.DependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   resource.DependenciesTable,
			Columns: []string{resource.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourcerelationship.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.ResourceRelationship
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedDependenciesIDs(); len(nodes) > 0 && !ru.mutation.DependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   resource.DependenciesTable,
			Columns: []string{resource.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourcerelationship.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.ResourceRelationship
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.DependenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   resource.DependenciesTable,
			Columns: []string{resource.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourcerelationship.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.ResourceRelationship
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = ru.schemaConfig.Resource
	ctx = internal.NewSchemaConfigContext(ctx, ru.schemaConfig)
	_spec.AddModifiers(ru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// ResourceUpdateOne is the builder for updating a single Resource entity.
type ResourceUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ResourceMutation
	modifiers []func(*sql.UpdateBuilder)
	object    *Resource
}

// SetDescription sets the "description" field.
func (ruo *ResourceUpdateOne) SetDescription(s string) *ResourceUpdateOne {
	ruo.mutation.SetDescription(s)
	return ruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ruo *ResourceUpdateOne) SetNillableDescription(s *string) *ResourceUpdateOne {
	if s != nil {
		ruo.SetDescription(*s)
	}
	return ruo
}

// ClearDescription clears the value of the "description" field.
func (ruo *ResourceUpdateOne) ClearDescription() *ResourceUpdateOne {
	ruo.mutation.ClearDescription()
	return ruo
}

// SetLabels sets the "labels" field.
func (ruo *ResourceUpdateOne) SetLabels(m map[string]string) *ResourceUpdateOne {
	ruo.mutation.SetLabels(m)
	return ruo
}

// ClearLabels clears the value of the "labels" field.
func (ruo *ResourceUpdateOne) ClearLabels() *ResourceUpdateOne {
	ruo.mutation.ClearLabels()
	return ruo
}

// SetAnnotations sets the "annotations" field.
func (ruo *ResourceUpdateOne) SetAnnotations(m map[string]string) *ResourceUpdateOne {
	ruo.mutation.SetAnnotations(m)
	return ruo
}

// ClearAnnotations clears the value of the "annotations" field.
func (ruo *ResourceUpdateOne) ClearAnnotations() *ResourceUpdateOne {
	ruo.mutation.ClearAnnotations()
	return ruo
}

// SetUpdateTime sets the "update_time" field.
func (ruo *ResourceUpdateOne) SetUpdateTime(t time.Time) *ResourceUpdateOne {
	ruo.mutation.SetUpdateTime(t)
	return ruo
}

// SetStatus sets the "status" field.
func (ruo *ResourceUpdateOne) SetStatus(s status.Status) *ResourceUpdateOne {
	ruo.mutation.SetStatus(s)
	return ruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ruo *ResourceUpdateOne) SetNillableStatus(s *status.Status) *ResourceUpdateOne {
	if s != nil {
		ruo.SetStatus(*s)
	}
	return ruo
}

// ClearStatus clears the value of the "status" field.
func (ruo *ResourceUpdateOne) ClearStatus() *ResourceUpdateOne {
	ruo.mutation.ClearStatus()
	return ruo
}

// SetTemplateID sets the "template_id" field.
func (ruo *ResourceUpdateOne) SetTemplateID(o object.ID) *ResourceUpdateOne {
	ruo.mutation.SetTemplateID(o)
	return ruo
}

// SetNillableTemplateID sets the "template_id" field if the given value is not nil.
func (ruo *ResourceUpdateOne) SetNillableTemplateID(o *object.ID) *ResourceUpdateOne {
	if o != nil {
		ruo.SetTemplateID(*o)
	}
	return ruo
}

// ClearTemplateID clears the value of the "template_id" field.
func (ruo *ResourceUpdateOne) ClearTemplateID() *ResourceUpdateOne {
	ruo.mutation.ClearTemplateID()
	return ruo
}

// SetAttributes sets the "attributes" field.
func (ruo *ResourceUpdateOne) SetAttributes(pr property.Values) *ResourceUpdateOne {
	ruo.mutation.SetAttributes(pr)
	return ruo
}

// ClearAttributes clears the value of the "attributes" field.
func (ruo *ResourceUpdateOne) ClearAttributes() *ResourceUpdateOne {
	ruo.mutation.ClearAttributes()
	return ruo
}

// SetChangeComment sets the "change_comment" field.
func (ruo *ResourceUpdateOne) SetChangeComment(s string) *ResourceUpdateOne {
	ruo.mutation.SetChangeComment(s)
	return ruo
}

// SetNillableChangeComment sets the "change_comment" field if the given value is not nil.
func (ruo *ResourceUpdateOne) SetNillableChangeComment(s *string) *ResourceUpdateOne {
	if s != nil {
		ruo.SetChangeComment(*s)
	}
	return ruo
}

// ClearChangeComment clears the value of the "change_comment" field.
func (ruo *ResourceUpdateOne) ClearChangeComment() *ResourceUpdateOne {
	ruo.mutation.ClearChangeComment()
	return ruo
}

// SetActionType sets the "action_type" field.
func (ruo *ResourceUpdateOne) SetActionType(s string) *ResourceUpdateOne {
	ruo.mutation.SetActionType(s)
	return ruo
}

// SetTemplate sets the "template" edge to the TemplateVersion entity.
func (ruo *ResourceUpdateOne) SetTemplate(t *TemplateVersion) *ResourceUpdateOne {
	return ruo.SetTemplateID(t.ID)
}

// AddRevisionIDs adds the "revisions" edge to the ResourceRevision entity by IDs.
func (ruo *ResourceUpdateOne) AddRevisionIDs(ids ...object.ID) *ResourceUpdateOne {
	ruo.mutation.AddRevisionIDs(ids...)
	return ruo
}

// AddRevisions adds the "revisions" edges to the ResourceRevision entity.
func (ruo *ResourceUpdateOne) AddRevisions(r ...*ResourceRevision) *ResourceUpdateOne {
	ids := make([]object.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddRevisionIDs(ids...)
}

// AddComponentIDs adds the "components" edge to the ResourceComponent entity by IDs.
func (ruo *ResourceUpdateOne) AddComponentIDs(ids ...object.ID) *ResourceUpdateOne {
	ruo.mutation.AddComponentIDs(ids...)
	return ruo
}

// AddComponents adds the "components" edges to the ResourceComponent entity.
func (ruo *ResourceUpdateOne) AddComponents(r ...*ResourceComponent) *ResourceUpdateOne {
	ids := make([]object.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddComponentIDs(ids...)
}

// AddDependencyIDs adds the "dependencies" edge to the ResourceRelationship entity by IDs.
func (ruo *ResourceUpdateOne) AddDependencyIDs(ids ...object.ID) *ResourceUpdateOne {
	ruo.mutation.AddDependencyIDs(ids...)
	return ruo
}

// AddDependencies adds the "dependencies" edges to the ResourceRelationship entity.
func (ruo *ResourceUpdateOne) AddDependencies(r ...*ResourceRelationship) *ResourceUpdateOne {
	ids := make([]object.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddDependencyIDs(ids...)
}

// Mutation returns the ResourceMutation object of the builder.
func (ruo *ResourceUpdateOne) Mutation() *ResourceMutation {
	return ruo.mutation
}

// ClearTemplate clears the "template" edge to the TemplateVersion entity.
func (ruo *ResourceUpdateOne) ClearTemplate() *ResourceUpdateOne {
	ruo.mutation.ClearTemplate()
	return ruo
}

// ClearRevisions clears all "revisions" edges to the ResourceRevision entity.
func (ruo *ResourceUpdateOne) ClearRevisions() *ResourceUpdateOne {
	ruo.mutation.ClearRevisions()
	return ruo
}

// RemoveRevisionIDs removes the "revisions" edge to ResourceRevision entities by IDs.
func (ruo *ResourceUpdateOne) RemoveRevisionIDs(ids ...object.ID) *ResourceUpdateOne {
	ruo.mutation.RemoveRevisionIDs(ids...)
	return ruo
}

// RemoveRevisions removes "revisions" edges to ResourceRevision entities.
func (ruo *ResourceUpdateOne) RemoveRevisions(r ...*ResourceRevision) *ResourceUpdateOne {
	ids := make([]object.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveRevisionIDs(ids...)
}

// ClearComponents clears all "components" edges to the ResourceComponent entity.
func (ruo *ResourceUpdateOne) ClearComponents() *ResourceUpdateOne {
	ruo.mutation.ClearComponents()
	return ruo
}

// RemoveComponentIDs removes the "components" edge to ResourceComponent entities by IDs.
func (ruo *ResourceUpdateOne) RemoveComponentIDs(ids ...object.ID) *ResourceUpdateOne {
	ruo.mutation.RemoveComponentIDs(ids...)
	return ruo
}

// RemoveComponents removes "components" edges to ResourceComponent entities.
func (ruo *ResourceUpdateOne) RemoveComponents(r ...*ResourceComponent) *ResourceUpdateOne {
	ids := make([]object.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveComponentIDs(ids...)
}

// ClearDependencies clears all "dependencies" edges to the ResourceRelationship entity.
func (ruo *ResourceUpdateOne) ClearDependencies() *ResourceUpdateOne {
	ruo.mutation.ClearDependencies()
	return ruo
}

// RemoveDependencyIDs removes the "dependencies" edge to ResourceRelationship entities by IDs.
func (ruo *ResourceUpdateOne) RemoveDependencyIDs(ids ...object.ID) *ResourceUpdateOne {
	ruo.mutation.RemoveDependencyIDs(ids...)
	return ruo
}

// RemoveDependencies removes "dependencies" edges to ResourceRelationship entities.
func (ruo *ResourceUpdateOne) RemoveDependencies(r ...*ResourceRelationship) *ResourceUpdateOne {
	ids := make([]object.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveDependencyIDs(ids...)
}

// Where appends a list predicates to the ResourceUpdate builder.
func (ruo *ResourceUpdateOne) Where(ps ...predicate.Resource) *ResourceUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ResourceUpdateOne) Select(field string, fields ...string) *ResourceUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Resource entity.
func (ruo *ResourceUpdateOne) Save(ctx context.Context) (*Resource, error) {
	if err := ruo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ResourceUpdateOne) SaveX(ctx context.Context) *Resource {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ResourceUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *ResourceUpdateOne) defaults() error {
	if _, ok := ruo.mutation.UpdateTime(); !ok {
		if resource.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("model: uninitialized resource.UpdateDefaultUpdateTime (forgotten import model/runtime?)")
		}
		v := resource.UpdateDefaultUpdateTime()
		ruo.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ruo *ResourceUpdateOne) check() error {
	if _, ok := ruo.mutation.ProjectID(); ruo.mutation.ProjectCleared() && !ok {
		return errors.New(`model: clearing a required unique edge "Resource.project"`)
	}
	if _, ok := ruo.mutation.EnvironmentID(); ruo.mutation.EnvironmentCleared() && !ok {
		return errors.New(`model: clearing a required unique edge "Resource.environment"`)
	}
	return nil
}

// Set is different from other Set* methods,
// it sets the value by judging the definition of each field within the entire object.
//
// For default fields, Set calls if the value changes from the original.
//
// For no default but required fields, Set calls if the value changes from the original.
//
// For no default but optional fields, Set calls if the value changes from the original,
// or clears if changes to zero.
//
// For example:
//
//	## Without Default
//
//	### Required
//
//	db.SetX(obj.X)
//
//	### Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   if _is_not_equal_(db.X, obj.X) {
//	      db.SetX(obj.X)
//	   }
//	} else {
//	   db.ClearX()
//	}
//
//	## With Default
//
//	if _is_zero_value_(obj.X) && _is_not_equal_(db.X, obj.X) {
//	   db.SetX(obj.X)
//	}
func (ruo *ResourceUpdateOne) Set(obj *Resource) *ResourceUpdateOne {
	h := func(n ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			mt := m.(*ResourceMutation)
			db, err := mt.Client().Resource.Get(ctx, *mt.id)
			if err != nil {
				return nil, fmt.Errorf("failed getting Resource with id: %v", *mt.id)
			}

			// Without Default.
			if obj.Description != "" {
				if db.Description != obj.Description {
					ruo.SetDescription(obj.Description)
				}
			} else {
				ruo.ClearDescription()
			}
			if !reflect.ValueOf(obj.Labels).IsZero() {
				if !reflect.DeepEqual(db.Labels, obj.Labels) {
					ruo.SetLabels(obj.Labels)
				}
			} else {
				ruo.ClearLabels()
			}
			if !reflect.ValueOf(obj.Annotations).IsZero() {
				if !reflect.DeepEqual(db.Annotations, obj.Annotations) {
					ruo.SetAnnotations(obj.Annotations)
				}
			}
			if !reflect.ValueOf(obj.Status).IsZero() {
				if !db.Status.Equal(obj.Status) {
					ruo.SetStatus(obj.Status)
				}
			}
			if obj.TemplateID != nil {
				if !reflect.DeepEqual(db.TemplateID, obj.TemplateID) {
					ruo.SetTemplateID(*obj.TemplateID)
				}
			} else {
				ruo.ClearTemplateID()
			}
			if !reflect.ValueOf(obj.Attributes).IsZero() {
				if !reflect.DeepEqual(db.Attributes, obj.Attributes) {
					ruo.SetAttributes(obj.Attributes)
				}
			} else {
				ruo.ClearAttributes()
			}
			if obj.ChangeComment != "" {
				if db.ChangeComment != obj.ChangeComment {
					ruo.SetChangeComment(obj.ChangeComment)
				}
			} else {
				ruo.ClearChangeComment()
			}
			if db.ActionType != obj.ActionType {
				ruo.SetActionType(obj.ActionType)
			}

			// With Default.
			if (obj.UpdateTime != nil) && (!reflect.DeepEqual(db.UpdateTime, obj.UpdateTime)) {
				ruo.SetUpdateTime(*obj.UpdateTime)
			}

			// Record the given object.
			ruo.object = obj

			return n.Mutate(ctx, m)
		})
	}

	ruo.hooks = append(ruo.hooks, h)

	return ruo
}

// getClientSet returns the ClientSet for the given builder.
func (ruo *ResourceUpdateOne) getClientSet() (mc ClientSet) {
	if _, ok := ruo.config.driver.(*txDriver); ok {
		tx := &Tx{config: ruo.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: ruo.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after updated the Resource entity,
// which is always good for cascading update operations.
func (ruo *ResourceUpdateOne) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *Resource) error) (*Resource, error) {
	obj, err := ruo.Save(ctx)
	if err != nil &&
		(ruo.object == nil || !errors.Is(err, stdsql.ErrNoRows)) {
		return nil, err
	}

	if len(cbs) == 0 {
		return obj, err
	}

	mc := ruo.getClientSet()

	if obj == nil {
		obj = ruo.object
	} else if x := ruo.object; x != nil {
		if _, set := ruo.mutation.Field(resource.FieldDescription); set {
			obj.Description = x.Description
		}
		if _, set := ruo.mutation.Field(resource.FieldLabels); set {
			obj.Labels = x.Labels
		}
		if _, set := ruo.mutation.Field(resource.FieldAnnotations); set {
			obj.Annotations = x.Annotations
		}
		if _, set := ruo.mutation.Field(resource.FieldStatus); set {
			obj.Status = x.Status
		}
		if _, set := ruo.mutation.Field(resource.FieldTemplateID); set {
			obj.TemplateID = x.TemplateID
		}
		if _, set := ruo.mutation.Field(resource.FieldAttributes); set {
			obj.Attributes = x.Attributes
		}
		if _, set := ruo.mutation.Field(resource.FieldChangeComment); set {
			obj.ChangeComment = x.ChangeComment
		}
		if _, set := ruo.mutation.Field(resource.FieldActionType); set {
			obj.ActionType = x.ActionType
		}
		obj.Edges = x.Edges
	}

	for i := range cbs {
		if err = cbs[i](ctx, mc, obj); err != nil {
			return nil, err
		}
	}

	return obj, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (ruo *ResourceUpdateOne) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *Resource) error) *Resource {
	obj, err := ruo.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return obj
}

// ExecE calls the given function after executed the query,
// which is always good for cascading update operations.
func (ruo *ResourceUpdateOne) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *Resource) error) error {
	_, err := ruo.SaveE(ctx, cbs...)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ResourceUpdateOne) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *Resource) error) {
	if err := ruo.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ruo *ResourceUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ResourceUpdateOne {
	ruo.modifiers = append(ruo.modifiers, modifiers...)
	return ruo
}

func (ruo *ResourceUpdateOne) sqlSave(ctx context.Context) (_node *Resource, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(resource.Table, resource.Columns, sqlgraph.NewFieldSpec(resource.FieldID, field.TypeString))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`model: missing "Resource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, resource.FieldID)
		for _, f := range fields {
			if !resource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
			}
			if f != resource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Description(); ok {
		_spec.SetField(resource.FieldDescription, field.TypeString, value)
	}
	if ruo.mutation.DescriptionCleared() {
		_spec.ClearField(resource.FieldDescription, field.TypeString)
	}
	if value, ok := ruo.mutation.Labels(); ok {
		_spec.SetField(resource.FieldLabels, field.TypeJSON, value)
	}
	if ruo.mutation.LabelsCleared() {
		_spec.ClearField(resource.FieldLabels, field.TypeJSON)
	}
	if value, ok := ruo.mutation.Annotations(); ok {
		_spec.SetField(resource.FieldAnnotations, field.TypeJSON, value)
	}
	if ruo.mutation.AnnotationsCleared() {
		_spec.ClearField(resource.FieldAnnotations, field.TypeJSON)
	}
	if value, ok := ruo.mutation.UpdateTime(); ok {
		_spec.SetField(resource.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.Status(); ok {
		_spec.SetField(resource.FieldStatus, field.TypeJSON, value)
	}
	if ruo.mutation.StatusCleared() {
		_spec.ClearField(resource.FieldStatus, field.TypeJSON)
	}
	if ruo.mutation.TypeCleared() {
		_spec.ClearField(resource.FieldType, field.TypeString)
	}
	if value, ok := ruo.mutation.Attributes(); ok {
		_spec.SetField(resource.FieldAttributes, field.TypeOther, value)
	}
	if ruo.mutation.AttributesCleared() {
		_spec.ClearField(resource.FieldAttributes, field.TypeOther)
	}
	if value, ok := ruo.mutation.ChangeComment(); ok {
		_spec.SetField(resource.FieldChangeComment, field.TypeString, value)
	}
	if ruo.mutation.ChangeCommentCleared() {
		_spec.ClearField(resource.FieldChangeComment, field.TypeString)
	}
	if value, ok := ruo.mutation.ActionType(); ok {
		_spec.SetField(resource.FieldActionType, field.TypeString, value)
	}
	if ruo.mutation.TemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resource.TemplateTable,
			Columns: []string{resource.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(templateversion.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.Resource
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.TemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resource.TemplateTable,
			Columns: []string{resource.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(templateversion.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.Resource
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.RevisionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.RevisionsTable,
			Columns: []string{resource.RevisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourcerevision.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.ResourceRevision
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedRevisionsIDs(); len(nodes) > 0 && !ruo.mutation.RevisionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.RevisionsTable,
			Columns: []string{resource.RevisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourcerevision.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.ResourceRevision
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RevisionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.RevisionsTable,
			Columns: []string{resource.RevisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourcerevision.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.ResourceRevision
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.ComponentsTable,
			Columns: []string{resource.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourcecomponent.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.ResourceComponent
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedComponentsIDs(); len(nodes) > 0 && !ruo.mutation.ComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.ComponentsTable,
			Columns: []string{resource.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourcecomponent.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.ResourceComponent
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ComponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.ComponentsTable,
			Columns: []string{resource.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourcecomponent.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.ResourceComponent
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.DependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   resource.DependenciesTable,
			Columns: []string{resource.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourcerelationship.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.ResourceRelationship
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedDependenciesIDs(); len(nodes) > 0 && !ruo.mutation.DependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   resource.DependenciesTable,
			Columns: []string{resource.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourcerelationship.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.ResourceRelationship
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.DependenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   resource.DependenciesTable,
			Columns: []string{resource.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourcerelationship.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.ResourceRelationship
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = ruo.schemaConfig.Resource
	ctx = internal.NewSchemaConfigContext(ctx, ruo.schemaConfig)
	_spec.AddModifiers(ruo.modifiers...)
	_node = &Resource{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
