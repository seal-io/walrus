// SPDX-FileCopyrightText: 2023 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus". DO NOT EDIT.

package resource

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"golang.org/x/exp/slices"
)

const (
	// Label holds the string label denoting the resource type in the database.
	Label = "resource"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldLabels holds the string denoting the labels field in the database.
	FieldLabels = "labels"
	// FieldAnnotations holds the string denoting the annotations field in the database.
	FieldAnnotations = "annotations"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldProjectID holds the string denoting the project_id field in the database.
	FieldProjectID = "project_id"
	// FieldEnvironmentID holds the string denoting the environment_id field in the database.
	FieldEnvironmentID = "environment_id"
	// FieldTemplateID holds the string denoting the template_id field in the database.
	FieldTemplateID = "template_id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldResourceDefinitionID holds the string denoting the resource_definition_id field in the database.
	FieldResourceDefinitionID = "resource_definition_id"
	// FieldResourceDefinitionMatchingRuleID holds the string denoting the resource_definition_matching_rule_id field in the database.
	FieldResourceDefinitionMatchingRuleID = "resource_definition_matching_rule_id"
	// FieldAttributes holds the string denoting the attributes field in the database.
	FieldAttributes = "attributes"
	// FieldEndpoints holds the string denoting the endpoints field in the database.
	FieldEndpoints = "endpoints"
	// FieldChangeComment holds the string denoting the change_comment field in the database.
	FieldChangeComment = "change_comment"
	// EdgeProject holds the string denoting the project edge name in mutations.
	EdgeProject = "project"
	// EdgeEnvironment holds the string denoting the environment edge name in mutations.
	EdgeEnvironment = "environment"
	// EdgeTemplate holds the string denoting the template edge name in mutations.
	EdgeTemplate = "template"
	// EdgeResourceDefinition holds the string denoting the resource_definition edge name in mutations.
	EdgeResourceDefinition = "resource_definition"
	// EdgeResourceDefinitionMatchingRule holds the string denoting the resource_definition_matching_rule edge name in mutations.
	EdgeResourceDefinitionMatchingRule = "resource_definition_matching_rule"
	// EdgeRevisions holds the string denoting the revisions edge name in mutations.
	EdgeRevisions = "revisions"
	// EdgeComponents holds the string denoting the components edge name in mutations.
	EdgeComponents = "components"
	// EdgeDependencies holds the string denoting the dependencies edge name in mutations.
	EdgeDependencies = "dependencies"
	// Table holds the table name of the resource in the database.
	Table = "resources"
	// ProjectTable is the table that holds the project relation/edge.
	ProjectTable = "resources"
	// ProjectInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	ProjectInverseTable = "projects"
	// ProjectColumn is the table column denoting the project relation/edge.
	ProjectColumn = "project_id"
	// EnvironmentTable is the table that holds the environment relation/edge.
	EnvironmentTable = "resources"
	// EnvironmentInverseTable is the table name for the Environment entity.
	// It exists in this package in order to avoid circular dependency with the "environment" package.
	EnvironmentInverseTable = "environments"
	// EnvironmentColumn is the table column denoting the environment relation/edge.
	EnvironmentColumn = "environment_id"
	// TemplateTable is the table that holds the template relation/edge.
	TemplateTable = "resources"
	// TemplateInverseTable is the table name for the TemplateVersion entity.
	// It exists in this package in order to avoid circular dependency with the "templateversion" package.
	TemplateInverseTable = "template_versions"
	// TemplateColumn is the table column denoting the template relation/edge.
	TemplateColumn = "template_id"
	// ResourceDefinitionTable is the table that holds the resource_definition relation/edge.
	ResourceDefinitionTable = "resources"
	// ResourceDefinitionInverseTable is the table name for the ResourceDefinition entity.
	// It exists in this package in order to avoid circular dependency with the "resourcedefinition" package.
	ResourceDefinitionInverseTable = "resource_definitions"
	// ResourceDefinitionColumn is the table column denoting the resource_definition relation/edge.
	ResourceDefinitionColumn = "resource_definition_id"
	// ResourceDefinitionMatchingRuleTable is the table that holds the resource_definition_matching_rule relation/edge.
	ResourceDefinitionMatchingRuleTable = "resources"
	// ResourceDefinitionMatchingRuleInverseTable is the table name for the ResourceDefinitionMatchingRule entity.
	// It exists in this package in order to avoid circular dependency with the "resourcedefinitionmatchingrule" package.
	ResourceDefinitionMatchingRuleInverseTable = "resource_definition_matching_rules"
	// ResourceDefinitionMatchingRuleColumn is the table column denoting the resource_definition_matching_rule relation/edge.
	ResourceDefinitionMatchingRuleColumn = "resource_definition_matching_rule_id"
	// RevisionsTable is the table that holds the revisions relation/edge.
	RevisionsTable = "resource_revisions"
	// RevisionsInverseTable is the table name for the ResourceRevision entity.
	// It exists in this package in order to avoid circular dependency with the "resourcerevision" package.
	RevisionsInverseTable = "resource_revisions"
	// RevisionsColumn is the table column denoting the revisions relation/edge.
	RevisionsColumn = "resource_id"
	// ComponentsTable is the table that holds the components relation/edge.
	ComponentsTable = "resource_components"
	// ComponentsInverseTable is the table name for the ResourceComponent entity.
	// It exists in this package in order to avoid circular dependency with the "resourcecomponent" package.
	ComponentsInverseTable = "resource_components"
	// ComponentsColumn is the table column denoting the components relation/edge.
	ComponentsColumn = "resource_id"
	// DependenciesTable is the table that holds the dependencies relation/edge.
	DependenciesTable = "resource_relationships"
	// DependenciesInverseTable is the table name for the ResourceRelationship entity.
	// It exists in this package in order to avoid circular dependency with the "resourcerelationship" package.
	DependenciesInverseTable = "resource_relationships"
	// DependenciesColumn is the table column denoting the dependencies relation/edge.
	DependenciesColumn = "resource_id"
)

// Columns holds all SQL columns for resource fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldLabels,
	FieldAnnotations,
	FieldCreateTime,
	FieldUpdateTime,
	FieldStatus,
	FieldProjectID,
	FieldEnvironmentID,
	FieldTemplateID,
	FieldType,
	FieldResourceDefinitionID,
	FieldResourceDefinitionMatchingRuleID,
	FieldAttributes,
	FieldEndpoints,
	FieldChangeComment,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/seal-io/walrus/pkg/dao/model/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultLabels holds the default value on creation for the "labels" field.
	DefaultLabels map[string]string
	// DefaultAnnotations holds the default value on creation for the "annotations" field.
	DefaultAnnotations map[string]string
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// ProjectIDValidator is a validator for the "project_id" field. It is called by the builders before save.
	ProjectIDValidator func(string) error
	// EnvironmentIDValidator is a validator for the "environment_id" field. It is called by the builders before save.
	EnvironmentIDValidator func(string) error
)

// OrderOption defines the ordering options for the Resource queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByProjectID orders the results by the project_id field.
func ByProjectID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProjectID, opts...).ToFunc()
}

// ByEnvironmentID orders the results by the environment_id field.
func ByEnvironmentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnvironmentID, opts...).ToFunc()
}

// ByTemplateID orders the results by the template_id field.
func ByTemplateID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTemplateID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByResourceDefinitionID orders the results by the resource_definition_id field.
func ByResourceDefinitionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceDefinitionID, opts...).ToFunc()
}

// ByResourceDefinitionMatchingRuleID orders the results by the resource_definition_matching_rule_id field.
func ByResourceDefinitionMatchingRuleID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceDefinitionMatchingRuleID, opts...).ToFunc()
}

// ByAttributes orders the results by the attributes field.
func ByAttributes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAttributes, opts...).ToFunc()
}

// ByChangeComment orders the results by the change_comment field.
func ByChangeComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChangeComment, opts...).ToFunc()
}

// ByProjectField orders the results by project field.
func ByProjectField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProjectStep(), sql.OrderByField(field, opts...))
	}
}

// ByEnvironmentField orders the results by environment field.
func ByEnvironmentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEnvironmentStep(), sql.OrderByField(field, opts...))
	}
}

// ByTemplateField orders the results by template field.
func ByTemplateField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTemplateStep(), sql.OrderByField(field, opts...))
	}
}

// ByResourceDefinitionField orders the results by resource_definition field.
func ByResourceDefinitionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newResourceDefinitionStep(), sql.OrderByField(field, opts...))
	}
}

// ByResourceDefinitionMatchingRuleField orders the results by resource_definition_matching_rule field.
func ByResourceDefinitionMatchingRuleField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newResourceDefinitionMatchingRuleStep(), sql.OrderByField(field, opts...))
	}
}

// ByRevisionsCount orders the results by revisions count.
func ByRevisionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRevisionsStep(), opts...)
	}
}

// ByRevisions orders the results by revisions terms.
func ByRevisions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRevisionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByComponentsCount orders the results by components count.
func ByComponentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newComponentsStep(), opts...)
	}
}

// ByComponents orders the results by components terms.
func ByComponents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newComponentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDependenciesCount orders the results by dependencies count.
func ByDependenciesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDependenciesStep(), opts...)
	}
}

// ByDependencies orders the results by dependencies terms.
func ByDependencies(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDependenciesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
	)
}
func newEnvironmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EnvironmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, EnvironmentTable, EnvironmentColumn),
	)
}
func newTemplateStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TemplateInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TemplateTable, TemplateColumn),
	)
}
func newResourceDefinitionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ResourceDefinitionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ResourceDefinitionTable, ResourceDefinitionColumn),
	)
}
func newResourceDefinitionMatchingRuleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ResourceDefinitionMatchingRuleInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ResourceDefinitionMatchingRuleTable, ResourceDefinitionMatchingRuleColumn),
	)
}
func newRevisionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RevisionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RevisionsTable, RevisionsColumn),
	)
}
func newComponentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ComponentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ComponentsTable, ComponentsColumn),
	)
}
func newDependenciesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DependenciesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, DependenciesTable, DependenciesColumn),
	)
}

// WithoutFields returns the fields ignored the given list.
func WithoutFields(ignores ...string) []string {
	if len(ignores) == 0 {
		return slices.Clone(Columns)
	}

	var s = make(map[string]bool, len(ignores))
	for i := range ignores {
		s[ignores[i]] = true
	}

	var r = make([]string, 0, len(Columns)-len(s))
	for i := range Columns {
		if s[Columns[i]] {
			continue
		}
		r = append(r, Columns[i])
	}
	return r
}
