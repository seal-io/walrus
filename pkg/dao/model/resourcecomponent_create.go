// SPDX-FileCopyrightText: 2023 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus". DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/seal-io/walrus/pkg/dao/model/connector"
	"github.com/seal-io/walrus/pkg/dao/model/environment"
	"github.com/seal-io/walrus/pkg/dao/model/project"
	"github.com/seal-io/walrus/pkg/dao/model/resource"
	"github.com/seal-io/walrus/pkg/dao/model/resourcecomponent"
	"github.com/seal-io/walrus/pkg/dao/model/resourcecomponentrelationship"
	"github.com/seal-io/walrus/pkg/dao/types/object"
	"github.com/seal-io/walrus/pkg/dao/types/status"
)

// ResourceComponentCreate is the builder for creating a ResourceComponent entity.
type ResourceComponentCreate struct {
	config
	mutation   *ResourceComponentMutation
	hooks      []Hook
	conflict   []sql.ConflictOption
	object     *ResourceComponent
	fromUpsert bool
}

// SetCreateTime sets the "create_time" field.
func (rcc *ResourceComponentCreate) SetCreateTime(t time.Time) *ResourceComponentCreate {
	rcc.mutation.SetCreateTime(t)
	return rcc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (rcc *ResourceComponentCreate) SetNillableCreateTime(t *time.Time) *ResourceComponentCreate {
	if t != nil {
		rcc.SetCreateTime(*t)
	}
	return rcc
}

// SetUpdateTime sets the "update_time" field.
func (rcc *ResourceComponentCreate) SetUpdateTime(t time.Time) *ResourceComponentCreate {
	rcc.mutation.SetUpdateTime(t)
	return rcc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (rcc *ResourceComponentCreate) SetNillableUpdateTime(t *time.Time) *ResourceComponentCreate {
	if t != nil {
		rcc.SetUpdateTime(*t)
	}
	return rcc
}

// SetStatus sets the "status" field.
func (rcc *ResourceComponentCreate) SetStatus(s status.Status) *ResourceComponentCreate {
	rcc.mutation.SetStatus(s)
	return rcc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rcc *ResourceComponentCreate) SetNillableStatus(s *status.Status) *ResourceComponentCreate {
	if s != nil {
		rcc.SetStatus(*s)
	}
	return rcc
}

// SetProjectID sets the "project_id" field.
func (rcc *ResourceComponentCreate) SetProjectID(o object.ID) *ResourceComponentCreate {
	rcc.mutation.SetProjectID(o)
	return rcc
}

// SetEnvironmentID sets the "environment_id" field.
func (rcc *ResourceComponentCreate) SetEnvironmentID(o object.ID) *ResourceComponentCreate {
	rcc.mutation.SetEnvironmentID(o)
	return rcc
}

// SetResourceID sets the "resource_id" field.
func (rcc *ResourceComponentCreate) SetResourceID(o object.ID) *ResourceComponentCreate {
	rcc.mutation.SetResourceID(o)
	return rcc
}

// SetConnectorID sets the "connector_id" field.
func (rcc *ResourceComponentCreate) SetConnectorID(o object.ID) *ResourceComponentCreate {
	rcc.mutation.SetConnectorID(o)
	return rcc
}

// SetCompositionID sets the "composition_id" field.
func (rcc *ResourceComponentCreate) SetCompositionID(o object.ID) *ResourceComponentCreate {
	rcc.mutation.SetCompositionID(o)
	return rcc
}

// SetNillableCompositionID sets the "composition_id" field if the given value is not nil.
func (rcc *ResourceComponentCreate) SetNillableCompositionID(o *object.ID) *ResourceComponentCreate {
	if o != nil {
		rcc.SetCompositionID(*o)
	}
	return rcc
}

// SetClassID sets the "class_id" field.
func (rcc *ResourceComponentCreate) SetClassID(o object.ID) *ResourceComponentCreate {
	rcc.mutation.SetClassID(o)
	return rcc
}

// SetNillableClassID sets the "class_id" field if the given value is not nil.
func (rcc *ResourceComponentCreate) SetNillableClassID(o *object.ID) *ResourceComponentCreate {
	if o != nil {
		rcc.SetClassID(*o)
	}
	return rcc
}

// SetMode sets the "mode" field.
func (rcc *ResourceComponentCreate) SetMode(s string) *ResourceComponentCreate {
	rcc.mutation.SetMode(s)
	return rcc
}

// SetType sets the "type" field.
func (rcc *ResourceComponentCreate) SetType(s string) *ResourceComponentCreate {
	rcc.mutation.SetType(s)
	return rcc
}

// SetName sets the "name" field.
func (rcc *ResourceComponentCreate) SetName(s string) *ResourceComponentCreate {
	rcc.mutation.SetName(s)
	return rcc
}

// SetDeployerType sets the "deployer_type" field.
func (rcc *ResourceComponentCreate) SetDeployerType(s string) *ResourceComponentCreate {
	rcc.mutation.SetDeployerType(s)
	return rcc
}

// SetShape sets the "shape" field.
func (rcc *ResourceComponentCreate) SetShape(s string) *ResourceComponentCreate {
	rcc.mutation.SetShape(s)
	return rcc
}

// SetID sets the "id" field.
func (rcc *ResourceComponentCreate) SetID(o object.ID) *ResourceComponentCreate {
	rcc.mutation.SetID(o)
	return rcc
}

// SetProject sets the "project" edge to the Project entity.
func (rcc *ResourceComponentCreate) SetProject(p *Project) *ResourceComponentCreate {
	return rcc.SetProjectID(p.ID)
}

// SetEnvironment sets the "environment" edge to the Environment entity.
func (rcc *ResourceComponentCreate) SetEnvironment(e *Environment) *ResourceComponentCreate {
	return rcc.SetEnvironmentID(e.ID)
}

// SetResource sets the "resource" edge to the Resource entity.
func (rcc *ResourceComponentCreate) SetResource(r *Resource) *ResourceComponentCreate {
	return rcc.SetResourceID(r.ID)
}

// SetConnector sets the "connector" edge to the Connector entity.
func (rcc *ResourceComponentCreate) SetConnector(c *Connector) *ResourceComponentCreate {
	return rcc.SetConnectorID(c.ID)
}

// SetComposition sets the "composition" edge to the ResourceComponent entity.
func (rcc *ResourceComponentCreate) SetComposition(r *ResourceComponent) *ResourceComponentCreate {
	return rcc.SetCompositionID(r.ID)
}

// AddComponentIDs adds the "components" edge to the ResourceComponent entity by IDs.
func (rcc *ResourceComponentCreate) AddComponentIDs(ids ...object.ID) *ResourceComponentCreate {
	rcc.mutation.AddComponentIDs(ids...)
	return rcc
}

// AddComponents adds the "components" edges to the ResourceComponent entity.
func (rcc *ResourceComponentCreate) AddComponents(r ...*ResourceComponent) *ResourceComponentCreate {
	ids := make([]object.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcc.AddComponentIDs(ids...)
}

// SetClass sets the "class" edge to the ResourceComponent entity.
func (rcc *ResourceComponentCreate) SetClass(r *ResourceComponent) *ResourceComponentCreate {
	return rcc.SetClassID(r.ID)
}

// AddInstanceIDs adds the "instances" edge to the ResourceComponent entity by IDs.
func (rcc *ResourceComponentCreate) AddInstanceIDs(ids ...object.ID) *ResourceComponentCreate {
	rcc.mutation.AddInstanceIDs(ids...)
	return rcc
}

// AddInstances adds the "instances" edges to the ResourceComponent entity.
func (rcc *ResourceComponentCreate) AddInstances(r ...*ResourceComponent) *ResourceComponentCreate {
	ids := make([]object.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcc.AddInstanceIDs(ids...)
}

// AddDependencyIDs adds the "dependencies" edge to the ResourceComponentRelationship entity by IDs.
func (rcc *ResourceComponentCreate) AddDependencyIDs(ids ...object.ID) *ResourceComponentCreate {
	rcc.mutation.AddDependencyIDs(ids...)
	return rcc
}

// AddDependencies adds the "dependencies" edges to the ResourceComponentRelationship entity.
func (rcc *ResourceComponentCreate) AddDependencies(r ...*ResourceComponentRelationship) *ResourceComponentCreate {
	ids := make([]object.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcc.AddDependencyIDs(ids...)
}

// Mutation returns the ResourceComponentMutation object of the builder.
func (rcc *ResourceComponentCreate) Mutation() *ResourceComponentMutation {
	return rcc.mutation
}

// Save creates the ResourceComponent in the database.
func (rcc *ResourceComponentCreate) Save(ctx context.Context) (*ResourceComponent, error) {
	if err := rcc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rcc.sqlSave, rcc.mutation, rcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rcc *ResourceComponentCreate) SaveX(ctx context.Context) *ResourceComponent {
	v, err := rcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcc *ResourceComponentCreate) Exec(ctx context.Context) error {
	_, err := rcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcc *ResourceComponentCreate) ExecX(ctx context.Context) {
	if err := rcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rcc *ResourceComponentCreate) defaults() error {
	if _, ok := rcc.mutation.CreateTime(); !ok {
		if resourcecomponent.DefaultCreateTime == nil {
			return fmt.Errorf("model: uninitialized resourcecomponent.DefaultCreateTime (forgotten import model/runtime?)")
		}
		v := resourcecomponent.DefaultCreateTime()
		rcc.mutation.SetCreateTime(v)
	}
	if _, ok := rcc.mutation.UpdateTime(); !ok {
		if resourcecomponent.DefaultUpdateTime == nil {
			return fmt.Errorf("model: uninitialized resourcecomponent.DefaultUpdateTime (forgotten import model/runtime?)")
		}
		v := resourcecomponent.DefaultUpdateTime()
		rcc.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rcc *ResourceComponentCreate) check() error {
	if _, ok := rcc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`model: missing required field "ResourceComponent.create_time"`)}
	}
	if _, ok := rcc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`model: missing required field "ResourceComponent.update_time"`)}
	}
	if _, ok := rcc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project_id", err: errors.New(`model: missing required field "ResourceComponent.project_id"`)}
	}
	if v, ok := rcc.mutation.ProjectID(); ok {
		if err := resourcecomponent.ProjectIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "project_id", err: fmt.Errorf(`model: validator failed for field "ResourceComponent.project_id": %w`, err)}
		}
	}
	if _, ok := rcc.mutation.EnvironmentID(); !ok {
		return &ValidationError{Name: "environment_id", err: errors.New(`model: missing required field "ResourceComponent.environment_id"`)}
	}
	if v, ok := rcc.mutation.EnvironmentID(); ok {
		if err := resourcecomponent.EnvironmentIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "environment_id", err: fmt.Errorf(`model: validator failed for field "ResourceComponent.environment_id": %w`, err)}
		}
	}
	if _, ok := rcc.mutation.ResourceID(); !ok {
		return &ValidationError{Name: "resource_id", err: errors.New(`model: missing required field "ResourceComponent.resource_id"`)}
	}
	if v, ok := rcc.mutation.ResourceID(); ok {
		if err := resourcecomponent.ResourceIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "resource_id", err: fmt.Errorf(`model: validator failed for field "ResourceComponent.resource_id": %w`, err)}
		}
	}
	if _, ok := rcc.mutation.ConnectorID(); !ok {
		return &ValidationError{Name: "connector_id", err: errors.New(`model: missing required field "ResourceComponent.connector_id"`)}
	}
	if v, ok := rcc.mutation.ConnectorID(); ok {
		if err := resourcecomponent.ConnectorIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "connector_id", err: fmt.Errorf(`model: validator failed for field "ResourceComponent.connector_id": %w`, err)}
		}
	}
	if _, ok := rcc.mutation.Mode(); !ok {
		return &ValidationError{Name: "mode", err: errors.New(`model: missing required field "ResourceComponent.mode"`)}
	}
	if v, ok := rcc.mutation.Mode(); ok {
		if err := resourcecomponent.ModeValidator(v); err != nil {
			return &ValidationError{Name: "mode", err: fmt.Errorf(`model: validator failed for field "ResourceComponent.mode": %w`, err)}
		}
	}
	if _, ok := rcc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`model: missing required field "ResourceComponent.type"`)}
	}
	if v, ok := rcc.mutation.GetType(); ok {
		if err := resourcecomponent.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`model: validator failed for field "ResourceComponent.type": %w`, err)}
		}
	}
	if _, ok := rcc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`model: missing required field "ResourceComponent.name"`)}
	}
	if v, ok := rcc.mutation.Name(); ok {
		if err := resourcecomponent.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`model: validator failed for field "ResourceComponent.name": %w`, err)}
		}
	}
	if _, ok := rcc.mutation.DeployerType(); !ok {
		return &ValidationError{Name: "deployer_type", err: errors.New(`model: missing required field "ResourceComponent.deployer_type"`)}
	}
	if v, ok := rcc.mutation.DeployerType(); ok {
		if err := resourcecomponent.DeployerTypeValidator(v); err != nil {
			return &ValidationError{Name: "deployer_type", err: fmt.Errorf(`model: validator failed for field "ResourceComponent.deployer_type": %w`, err)}
		}
	}
	if _, ok := rcc.mutation.Shape(); !ok {
		return &ValidationError{Name: "shape", err: errors.New(`model: missing required field "ResourceComponent.shape"`)}
	}
	if v, ok := rcc.mutation.Shape(); ok {
		if err := resourcecomponent.ShapeValidator(v); err != nil {
			return &ValidationError{Name: "shape", err: fmt.Errorf(`model: validator failed for field "ResourceComponent.shape": %w`, err)}
		}
	}
	if _, ok := rcc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project", err: errors.New(`model: missing required edge "ResourceComponent.project"`)}
	}
	if _, ok := rcc.mutation.EnvironmentID(); !ok {
		return &ValidationError{Name: "environment", err: errors.New(`model: missing required edge "ResourceComponent.environment"`)}
	}
	if _, ok := rcc.mutation.ResourceID(); !ok {
		return &ValidationError{Name: "resource", err: errors.New(`model: missing required edge "ResourceComponent.resource"`)}
	}
	if _, ok := rcc.mutation.ConnectorID(); !ok {
		return &ValidationError{Name: "connector", err: errors.New(`model: missing required edge "ResourceComponent.connector"`)}
	}
	return nil
}

func (rcc *ResourceComponentCreate) sqlSave(ctx context.Context) (*ResourceComponent, error) {
	if err := rcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*object.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rcc.mutation.id = &_node.ID
	rcc.mutation.done = true
	return _node, nil
}

func (rcc *ResourceComponentCreate) createSpec() (*ResourceComponent, *sqlgraph.CreateSpec) {
	var (
		_node = &ResourceComponent{config: rcc.config}
		_spec = sqlgraph.NewCreateSpec(resourcecomponent.Table, sqlgraph.NewFieldSpec(resourcecomponent.FieldID, field.TypeString))
	)
	_spec.Schema = rcc.schemaConfig.ResourceComponent
	_spec.OnConflict = rcc.conflict
	if id, ok := rcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rcc.mutation.CreateTime(); ok {
		_spec.SetField(resourcecomponent.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = &value
	}
	if value, ok := rcc.mutation.UpdateTime(); ok {
		_spec.SetField(resourcecomponent.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = &value
	}
	if value, ok := rcc.mutation.Status(); ok {
		_spec.SetField(resourcecomponent.FieldStatus, field.TypeJSON, value)
		_node.Status = value
	}
	if value, ok := rcc.mutation.Mode(); ok {
		_spec.SetField(resourcecomponent.FieldMode, field.TypeString, value)
		_node.Mode = value
	}
	if value, ok := rcc.mutation.GetType(); ok {
		_spec.SetField(resourcecomponent.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := rcc.mutation.Name(); ok {
		_spec.SetField(resourcecomponent.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rcc.mutation.DeployerType(); ok {
		_spec.SetField(resourcecomponent.FieldDeployerType, field.TypeString, value)
		_node.DeployerType = value
	}
	if value, ok := rcc.mutation.Shape(); ok {
		_spec.SetField(resourcecomponent.FieldShape, field.TypeString, value)
		_node.Shape = value
	}
	if nodes := rcc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcecomponent.ProjectTable,
			Columns: []string{resourcecomponent.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		edge.Schema = rcc.schemaConfig.ResourceComponent
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rcc.mutation.EnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcecomponent.EnvironmentTable,
			Columns: []string{resourcecomponent.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeString),
			},
		}
		edge.Schema = rcc.schemaConfig.ResourceComponent
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EnvironmentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rcc.mutation.ResourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcecomponent.ResourceTable,
			Columns: []string{resourcecomponent.ResourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeString),
			},
		}
		edge.Schema = rcc.schemaConfig.ResourceComponent
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ResourceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rcc.mutation.ConnectorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcecomponent.ConnectorTable,
			Columns: []string{resourcecomponent.ConnectorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connector.FieldID, field.TypeString),
			},
		}
		edge.Schema = rcc.schemaConfig.ResourceComponent
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ConnectorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rcc.mutation.CompositionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcecomponent.CompositionTable,
			Columns: []string{resourcecomponent.CompositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourcecomponent.FieldID, field.TypeString),
			},
		}
		edge.Schema = rcc.schemaConfig.ResourceComponent
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CompositionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rcc.mutation.ComponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcecomponent.ComponentsTable,
			Columns: []string{resourcecomponent.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourcecomponent.FieldID, field.TypeString),
			},
		}
		edge.Schema = rcc.schemaConfig.ResourceComponent
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rcc.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcecomponent.ClassTable,
			Columns: []string{resourcecomponent.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourcecomponent.FieldID, field.TypeString),
			},
		}
		edge.Schema = rcc.schemaConfig.ResourceComponent
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ClassID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rcc.mutation.InstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcecomponent.InstancesTable,
			Columns: []string{resourcecomponent.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourcecomponent.FieldID, field.TypeString),
			},
		}
		edge.Schema = rcc.schemaConfig.ResourceComponent
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rcc.mutation.DependenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   resourcecomponent.DependenciesTable,
			Columns: []string{resourcecomponent.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourcecomponentrelationship.FieldID, field.TypeString),
			},
		}
		edge.Schema = rcc.schemaConfig.ResourceComponentRelationship
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// Set is different from other Set* methods,
// it sets the value by judging the definition of each field within the entire object.
//
// For required fields, Set calls directly.
//
// For optional fields, Set calls if the value is not zero.
//
// For example:
//
//	## Required
//
//	db.SetX(obj.X)
//
//	## Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (rcc *ResourceComponentCreate) Set(obj *ResourceComponent) *ResourceComponentCreate {
	// Required.
	rcc.SetProjectID(obj.ProjectID)
	rcc.SetEnvironmentID(obj.EnvironmentID)
	rcc.SetResourceID(obj.ResourceID)
	rcc.SetConnectorID(obj.ConnectorID)
	rcc.SetMode(obj.Mode)
	rcc.SetType(obj.Type)
	rcc.SetName(obj.Name)
	rcc.SetDeployerType(obj.DeployerType)
	rcc.SetShape(obj.Shape)

	// Optional.
	if obj.CreateTime != nil {
		rcc.SetCreateTime(*obj.CreateTime)
	}
	if obj.UpdateTime != nil {
		rcc.SetUpdateTime(*obj.UpdateTime)
	}
	if !reflect.ValueOf(obj.Status).IsZero() {
		rcc.SetStatus(obj.Status)
	}
	if obj.CompositionID != "" {
		rcc.SetCompositionID(obj.CompositionID)
	}
	if obj.ClassID != "" {
		rcc.SetClassID(obj.ClassID)
	}

	// Record the given object.
	rcc.object = obj

	return rcc
}

// getClientSet returns the ClientSet for the given builder.
func (rcc *ResourceComponentCreate) getClientSet() (mc ClientSet) {
	if _, ok := rcc.config.driver.(*txDriver); ok {
		tx := &Tx{config: rcc.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: rcc.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after created the ResourceComponent entity,
// which is always good for cascading create operations.
func (rcc *ResourceComponentCreate) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ResourceComponent) error) (*ResourceComponent, error) {
	obj, err := rcc.Save(ctx)
	if err != nil {
		return nil, err
	}

	if len(cbs) == 0 {
		return obj, err
	}

	mc := rcc.getClientSet()

	if x := rcc.object; x != nil {
		if _, set := rcc.mutation.Field(resourcecomponent.FieldStatus); set {
			obj.Status = x.Status
		}
		if _, set := rcc.mutation.Field(resourcecomponent.FieldProjectID); set {
			obj.ProjectID = x.ProjectID
		}
		if _, set := rcc.mutation.Field(resourcecomponent.FieldEnvironmentID); set {
			obj.EnvironmentID = x.EnvironmentID
		}
		if _, set := rcc.mutation.Field(resourcecomponent.FieldResourceID); set {
			obj.ResourceID = x.ResourceID
		}
		if _, set := rcc.mutation.Field(resourcecomponent.FieldConnectorID); set {
			obj.ConnectorID = x.ConnectorID
		}
		if _, set := rcc.mutation.Field(resourcecomponent.FieldCompositionID); set {
			obj.CompositionID = x.CompositionID
		}
		if _, set := rcc.mutation.Field(resourcecomponent.FieldClassID); set {
			obj.ClassID = x.ClassID
		}
		if _, set := rcc.mutation.Field(resourcecomponent.FieldMode); set {
			obj.Mode = x.Mode
		}
		if _, set := rcc.mutation.Field(resourcecomponent.FieldType); set {
			obj.Type = x.Type
		}
		if _, set := rcc.mutation.Field(resourcecomponent.FieldName); set {
			obj.Name = x.Name
		}
		if _, set := rcc.mutation.Field(resourcecomponent.FieldDeployerType); set {
			obj.DeployerType = x.DeployerType
		}
		if _, set := rcc.mutation.Field(resourcecomponent.FieldShape); set {
			obj.Shape = x.Shape
		}
		obj.Edges = x.Edges
	}

	for i := range cbs {
		if err = cbs[i](ctx, mc, obj); err != nil {
			return nil, err
		}
	}

	return obj, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (rcc *ResourceComponentCreate) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ResourceComponent) error) *ResourceComponent {
	obj, err := rcc.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return obj
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (rcc *ResourceComponentCreate) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ResourceComponent) error) error {
	_, err := rcc.SaveE(ctx, cbs...)
	return err
}

// ExecEX is like ExecE, but panics if an error occurs.
func (rcc *ResourceComponentCreate) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ResourceComponent) error) {
	if err := rcc.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// Set leverages the ResourceComponentCreate Set method,
// it sets the value by judging the definition of each field within the entire item of the given list.
//
// For required fields, Set calls directly.
//
// For optional fields, Set calls if the value is not zero.
//
// For example:
//
//	## Required
//
//	db.SetX(obj.X)
//
//	## Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (rccb *ResourceComponentCreateBulk) Set(objs ...*ResourceComponent) *ResourceComponentCreateBulk {
	if len(objs) != 0 {
		client := NewResourceComponentClient(rccb.config)

		rccb.builders = make([]*ResourceComponentCreate, len(objs))
		for i := range objs {
			rccb.builders[i] = client.Create().Set(objs[i])
		}

		// Record the given objects.
		rccb.objects = objs
	}

	return rccb
}

// getClientSet returns the ClientSet for the given builder.
func (rccb *ResourceComponentCreateBulk) getClientSet() (mc ClientSet) {
	if _, ok := rccb.config.driver.(*txDriver); ok {
		tx := &Tx{config: rccb.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: rccb.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after created the ResourceComponent entities,
// which is always good for cascading create operations.
func (rccb *ResourceComponentCreateBulk) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ResourceComponent) error) ([]*ResourceComponent, error) {
	objs, err := rccb.Save(ctx)
	if err != nil {
		return nil, err
	}

	if len(cbs) == 0 {
		return objs, err
	}

	mc := rccb.getClientSet()

	if x := rccb.objects; x != nil {
		for i := range x {
			if _, set := rccb.builders[i].mutation.Field(resourcecomponent.FieldStatus); set {
				objs[i].Status = x[i].Status
			}
			if _, set := rccb.builders[i].mutation.Field(resourcecomponent.FieldProjectID); set {
				objs[i].ProjectID = x[i].ProjectID
			}
			if _, set := rccb.builders[i].mutation.Field(resourcecomponent.FieldEnvironmentID); set {
				objs[i].EnvironmentID = x[i].EnvironmentID
			}
			if _, set := rccb.builders[i].mutation.Field(resourcecomponent.FieldResourceID); set {
				objs[i].ResourceID = x[i].ResourceID
			}
			if _, set := rccb.builders[i].mutation.Field(resourcecomponent.FieldConnectorID); set {
				objs[i].ConnectorID = x[i].ConnectorID
			}
			if _, set := rccb.builders[i].mutation.Field(resourcecomponent.FieldCompositionID); set {
				objs[i].CompositionID = x[i].CompositionID
			}
			if _, set := rccb.builders[i].mutation.Field(resourcecomponent.FieldClassID); set {
				objs[i].ClassID = x[i].ClassID
			}
			if _, set := rccb.builders[i].mutation.Field(resourcecomponent.FieldMode); set {
				objs[i].Mode = x[i].Mode
			}
			if _, set := rccb.builders[i].mutation.Field(resourcecomponent.FieldType); set {
				objs[i].Type = x[i].Type
			}
			if _, set := rccb.builders[i].mutation.Field(resourcecomponent.FieldName); set {
				objs[i].Name = x[i].Name
			}
			if _, set := rccb.builders[i].mutation.Field(resourcecomponent.FieldDeployerType); set {
				objs[i].DeployerType = x[i].DeployerType
			}
			if _, set := rccb.builders[i].mutation.Field(resourcecomponent.FieldShape); set {
				objs[i].Shape = x[i].Shape
			}
			objs[i].Edges = x[i].Edges
		}
	}

	for i := range objs {
		for j := range cbs {
			if err = cbs[j](ctx, mc, objs[i]); err != nil {
				return nil, err
			}
		}
	}

	return objs, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (rccb *ResourceComponentCreateBulk) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ResourceComponent) error) []*ResourceComponent {
	objs, err := rccb.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return objs
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (rccb *ResourceComponentCreateBulk) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ResourceComponent) error) error {
	_, err := rccb.SaveE(ctx, cbs...)
	return err
}

// ExecEX is like ExecE, but panics if an error occurs.
func (rccb *ResourceComponentCreateBulk) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ResourceComponent) error) {
	if err := rccb.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (u *ResourceComponentUpsertOne) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *ResourceComponent) error) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for ResourceComponentUpsertOne.OnConflict")
	}
	u.create.fromUpsert = true
	return u.create.ExecE(ctx, cbs...)
}

// ExecEX is like ExecE, but panics if an error occurs.
func (u *ResourceComponentUpsertOne) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *ResourceComponent) error) {
	if err := u.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (u *ResourceComponentUpsertBulk) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *ResourceComponent) error) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model: OnConflict was set for builder %d. Set it on the ResourceComponentUpsertBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for ResourceComponentUpsertBulk.OnConflict")
	}
	u.create.fromUpsert = true
	return u.create.ExecE(ctx, cbs...)
}

// ExecEX is like ExecE, but panics if an error occurs.
func (u *ResourceComponentUpsertBulk) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *ResourceComponent) error) {
	if err := u.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ResourceComponent.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ResourceComponentUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (rcc *ResourceComponentCreate) OnConflict(opts ...sql.ConflictOption) *ResourceComponentUpsertOne {
	rcc.conflict = opts
	return &ResourceComponentUpsertOne{
		create: rcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ResourceComponent.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcc *ResourceComponentCreate) OnConflictColumns(columns ...string) *ResourceComponentUpsertOne {
	rcc.conflict = append(rcc.conflict, sql.ConflictColumns(columns...))
	return &ResourceComponentUpsertOne{
		create: rcc,
	}
}

type (
	// ResourceComponentUpsertOne is the builder for "upsert"-ing
	//  one ResourceComponent node.
	ResourceComponentUpsertOne struct {
		create *ResourceComponentCreate
	}

	// ResourceComponentUpsert is the "OnConflict" setter.
	ResourceComponentUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *ResourceComponentUpsert) SetUpdateTime(v time.Time) *ResourceComponentUpsert {
	u.Set(resourcecomponent.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *ResourceComponentUpsert) UpdateUpdateTime() *ResourceComponentUpsert {
	u.SetExcluded(resourcecomponent.FieldUpdateTime)
	return u
}

// SetStatus sets the "status" field.
func (u *ResourceComponentUpsert) SetStatus(v status.Status) *ResourceComponentUpsert {
	u.Set(resourcecomponent.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ResourceComponentUpsert) UpdateStatus() *ResourceComponentUpsert {
	u.SetExcluded(resourcecomponent.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *ResourceComponentUpsert) ClearStatus() *ResourceComponentUpsert {
	u.SetNull(resourcecomponent.FieldStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ResourceComponent.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(resourcecomponent.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ResourceComponentUpsertOne) UpdateNewValues() *ResourceComponentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(resourcecomponent.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(resourcecomponent.FieldCreateTime)
		}
		if _, exists := u.create.mutation.ProjectID(); exists {
			s.SetIgnore(resourcecomponent.FieldProjectID)
		}
		if _, exists := u.create.mutation.EnvironmentID(); exists {
			s.SetIgnore(resourcecomponent.FieldEnvironmentID)
		}
		if _, exists := u.create.mutation.ResourceID(); exists {
			s.SetIgnore(resourcecomponent.FieldResourceID)
		}
		if _, exists := u.create.mutation.ConnectorID(); exists {
			s.SetIgnore(resourcecomponent.FieldConnectorID)
		}
		if _, exists := u.create.mutation.CompositionID(); exists {
			s.SetIgnore(resourcecomponent.FieldCompositionID)
		}
		if _, exists := u.create.mutation.ClassID(); exists {
			s.SetIgnore(resourcecomponent.FieldClassID)
		}
		if _, exists := u.create.mutation.Mode(); exists {
			s.SetIgnore(resourcecomponent.FieldMode)
		}
		if _, exists := u.create.mutation.GetType(); exists {
			s.SetIgnore(resourcecomponent.FieldType)
		}
		if _, exists := u.create.mutation.Name(); exists {
			s.SetIgnore(resourcecomponent.FieldName)
		}
		if _, exists := u.create.mutation.DeployerType(); exists {
			s.SetIgnore(resourcecomponent.FieldDeployerType)
		}
		if _, exists := u.create.mutation.Shape(); exists {
			s.SetIgnore(resourcecomponent.FieldShape)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ResourceComponent.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ResourceComponentUpsertOne) Ignore() *ResourceComponentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ResourceComponentUpsertOne) DoNothing() *ResourceComponentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ResourceComponentCreate.OnConflict
// documentation for more info.
func (u *ResourceComponentUpsertOne) Update(set func(*ResourceComponentUpsert)) *ResourceComponentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ResourceComponentUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *ResourceComponentUpsertOne) SetUpdateTime(v time.Time) *ResourceComponentUpsertOne {
	return u.Update(func(s *ResourceComponentUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *ResourceComponentUpsertOne) UpdateUpdateTime() *ResourceComponentUpsertOne {
	return u.Update(func(s *ResourceComponentUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetStatus sets the "status" field.
func (u *ResourceComponentUpsertOne) SetStatus(v status.Status) *ResourceComponentUpsertOne {
	return u.Update(func(s *ResourceComponentUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ResourceComponentUpsertOne) UpdateStatus() *ResourceComponentUpsertOne {
	return u.Update(func(s *ResourceComponentUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *ResourceComponentUpsertOne) ClearStatus() *ResourceComponentUpsertOne {
	return u.Update(func(s *ResourceComponentUpsert) {
		s.ClearStatus()
	})
}

// Exec executes the query.
func (u *ResourceComponentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for ResourceComponentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ResourceComponentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ResourceComponentUpsertOne) ID(ctx context.Context) (id object.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("model: ResourceComponentUpsertOne.ID is not supported by MySQL driver. Use ResourceComponentUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ResourceComponentUpsertOne) IDX(ctx context.Context) object.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ResourceComponentCreateBulk is the builder for creating many ResourceComponent entities in bulk.
type ResourceComponentCreateBulk struct {
	config
	builders   []*ResourceComponentCreate
	conflict   []sql.ConflictOption
	objects    []*ResourceComponent
	fromUpsert bool
}

// Save creates the ResourceComponent entities in the database.
func (rccb *ResourceComponentCreateBulk) Save(ctx context.Context) ([]*ResourceComponent, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rccb.builders))
	nodes := make([]*ResourceComponent, len(rccb.builders))
	mutators := make([]Mutator, len(rccb.builders))
	for i := range rccb.builders {
		func(i int, root context.Context) {
			builder := rccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ResourceComponentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rccb *ResourceComponentCreateBulk) SaveX(ctx context.Context) []*ResourceComponent {
	v, err := rccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rccb *ResourceComponentCreateBulk) Exec(ctx context.Context) error {
	_, err := rccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rccb *ResourceComponentCreateBulk) ExecX(ctx context.Context) {
	if err := rccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ResourceComponent.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ResourceComponentUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (rccb *ResourceComponentCreateBulk) OnConflict(opts ...sql.ConflictOption) *ResourceComponentUpsertBulk {
	rccb.conflict = opts
	return &ResourceComponentUpsertBulk{
		create: rccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ResourceComponent.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rccb *ResourceComponentCreateBulk) OnConflictColumns(columns ...string) *ResourceComponentUpsertBulk {
	rccb.conflict = append(rccb.conflict, sql.ConflictColumns(columns...))
	return &ResourceComponentUpsertBulk{
		create: rccb,
	}
}

// ResourceComponentUpsertBulk is the builder for "upsert"-ing
// a bulk of ResourceComponent nodes.
type ResourceComponentUpsertBulk struct {
	create *ResourceComponentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ResourceComponent.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(resourcecomponent.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ResourceComponentUpsertBulk) UpdateNewValues() *ResourceComponentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(resourcecomponent.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(resourcecomponent.FieldCreateTime)
			}
			if _, exists := b.mutation.ProjectID(); exists {
				s.SetIgnore(resourcecomponent.FieldProjectID)
			}
			if _, exists := b.mutation.EnvironmentID(); exists {
				s.SetIgnore(resourcecomponent.FieldEnvironmentID)
			}
			if _, exists := b.mutation.ResourceID(); exists {
				s.SetIgnore(resourcecomponent.FieldResourceID)
			}
			if _, exists := b.mutation.ConnectorID(); exists {
				s.SetIgnore(resourcecomponent.FieldConnectorID)
			}
			if _, exists := b.mutation.CompositionID(); exists {
				s.SetIgnore(resourcecomponent.FieldCompositionID)
			}
			if _, exists := b.mutation.ClassID(); exists {
				s.SetIgnore(resourcecomponent.FieldClassID)
			}
			if _, exists := b.mutation.Mode(); exists {
				s.SetIgnore(resourcecomponent.FieldMode)
			}
			if _, exists := b.mutation.GetType(); exists {
				s.SetIgnore(resourcecomponent.FieldType)
			}
			if _, exists := b.mutation.Name(); exists {
				s.SetIgnore(resourcecomponent.FieldName)
			}
			if _, exists := b.mutation.DeployerType(); exists {
				s.SetIgnore(resourcecomponent.FieldDeployerType)
			}
			if _, exists := b.mutation.Shape(); exists {
				s.SetIgnore(resourcecomponent.FieldShape)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ResourceComponent.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ResourceComponentUpsertBulk) Ignore() *ResourceComponentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ResourceComponentUpsertBulk) DoNothing() *ResourceComponentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ResourceComponentCreateBulk.OnConflict
// documentation for more info.
func (u *ResourceComponentUpsertBulk) Update(set func(*ResourceComponentUpsert)) *ResourceComponentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ResourceComponentUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *ResourceComponentUpsertBulk) SetUpdateTime(v time.Time) *ResourceComponentUpsertBulk {
	return u.Update(func(s *ResourceComponentUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *ResourceComponentUpsertBulk) UpdateUpdateTime() *ResourceComponentUpsertBulk {
	return u.Update(func(s *ResourceComponentUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetStatus sets the "status" field.
func (u *ResourceComponentUpsertBulk) SetStatus(v status.Status) *ResourceComponentUpsertBulk {
	return u.Update(func(s *ResourceComponentUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ResourceComponentUpsertBulk) UpdateStatus() *ResourceComponentUpsertBulk {
	return u.Update(func(s *ResourceComponentUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *ResourceComponentUpsertBulk) ClearStatus() *ResourceComponentUpsertBulk {
	return u.Update(func(s *ResourceComponentUpsert) {
		s.ClearStatus()
	})
}

// Exec executes the query.
func (u *ResourceComponentUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model: OnConflict was set for builder %d. Set it on the ResourceComponentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for ResourceComponentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ResourceComponentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
