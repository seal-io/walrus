// SPDX-FileCopyrightText: 2023 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "ent". DO NOT EDIT.

package model

import (
	"time"

	"github.com/seal-io/seal/pkg/dao/types/oid"
)

// ServiceDependencyQueryInput is the input for the ServiceDependency query.
type ServiceDependencyQueryInput struct {
	// ID holds the value of the "id" field.
	ID oid.ID `uri:"id,omitempty" json:"id,omitempty"`
}

// Model converts the ServiceDependencyQueryInput to ServiceDependency.
func (in ServiceDependencyQueryInput) Model() *ServiceDependency {
	return &ServiceDependency{
		ID: in.ID,
	}
}

// ServiceDependencyCreateInput is the input for the ServiceDependency creation.
type ServiceDependencyCreateInput struct {
	// service ID is dependent by the service.
	DependentID oid.ID `json:"dependentID"`
	// dependency path of service.
	Path []oid.ID `json:"path,omitempty"`
	// Type of the service dependency.
	Type string `json:"type"`
	// Services of the dependency.
	Service ServiceQueryInput `json:"service"`
}

// Model converts the ServiceDependencyCreateInput to ServiceDependency.
func (in ServiceDependencyCreateInput) Model() *ServiceDependency {
	var entity = &ServiceDependency{
		DependentID: in.DependentID,
		Path:        in.Path,
		Type:        in.Type,
	}
	entity.ServiceID = in.Service.ID
	return entity
}

// ServiceDependencyUpdateInput is the input for the ServiceDependency modification.
type ServiceDependencyUpdateInput struct {
	// ID holds the value of the "id" field.
	ID oid.ID `uri:"id" json:"-"`
	// service ID is dependent by the service.
	DependentID oid.ID `json:"dependentID,omitempty"`
	// dependency path of service.
	Path []oid.ID `json:"path,omitempty"`
}

// Model converts the ServiceDependencyUpdateInput to ServiceDependency.
func (in ServiceDependencyUpdateInput) Model() *ServiceDependency {
	var entity = &ServiceDependency{
		ID:          in.ID,
		DependentID: in.DependentID,
		Path:        in.Path,
	}
	return entity
}

// ServiceDependencyOutput is the output for the ServiceDependency.
type ServiceDependencyOutput struct {
	// ID holds the value of the "id" field.
	ID oid.ID `json:"id,omitempty"`
	// Describe creation time.
	CreateTime *time.Time `json:"createTime,omitempty"`
	// service ID is dependent by the service.
	DependentID oid.ID `json:"dependentID,omitempty"`
	// dependency path of service.
	Path []oid.ID `json:"path,omitempty"`
	// Type of the service dependency.
	Type string `json:"type,omitempty"`
	// Services of the dependency.
	Service *ServiceOutput `json:"service,omitempty"`
}

// ExposeServiceDependency converts the ServiceDependency to ServiceDependencyOutput.
func ExposeServiceDependency(in *ServiceDependency) *ServiceDependencyOutput {
	if in == nil {
		return nil
	}
	var entity = &ServiceDependencyOutput{
		ID:          in.ID,
		CreateTime:  in.CreateTime,
		DependentID: in.DependentID,
		Path:        in.Path,
		Type:        in.Type,
		Service:     ExposeService(in.Edges.Service),
	}
	if in.ServiceID != "" {
		if entity.Service == nil {
			entity.Service = &ServiceOutput{}
		}
		entity.Service.ID = in.ServiceID
	}
	return entity
}

// ExposeServiceDependencies converts the ServiceDependency slice to ServiceDependencyOutput pointer slice.
func ExposeServiceDependencies(in []*ServiceDependency) []*ServiceDependencyOutput {
	var out = make([]*ServiceDependencyOutput, 0, len(in))
	for i := 0; i < len(in); i++ {
		var o = ExposeServiceDependency(in[i])
		if o == nil {
			continue
		}
		out = append(out, o)
	}
	if len(out) == 0 {
		return nil
	}
	return out
}
