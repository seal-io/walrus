// SPDX-FileCopyrightText: 2023 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "seal". DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/seal-io/seal/pkg/dao/model/environment"
	"github.com/seal-io/seal/pkg/dao/model/project"
	"github.com/seal-io/seal/pkg/dao/model/variable"
	"github.com/seal-io/seal/pkg/dao/types/crypto"
	"github.com/seal-io/seal/pkg/dao/types/object"
)

// VariableCreate is the builder for creating a Variable entity.
type VariableCreate struct {
	config
	mutation   *VariableMutation
	hooks      []Hook
	conflict   []sql.ConflictOption
	object     *Variable
	fromUpsert bool
}

// SetCreateTime sets the "create_time" field.
func (vc *VariableCreate) SetCreateTime(t time.Time) *VariableCreate {
	vc.mutation.SetCreateTime(t)
	return vc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (vc *VariableCreate) SetNillableCreateTime(t *time.Time) *VariableCreate {
	if t != nil {
		vc.SetCreateTime(*t)
	}
	return vc
}

// SetUpdateTime sets the "update_time" field.
func (vc *VariableCreate) SetUpdateTime(t time.Time) *VariableCreate {
	vc.mutation.SetUpdateTime(t)
	return vc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (vc *VariableCreate) SetNillableUpdateTime(t *time.Time) *VariableCreate {
	if t != nil {
		vc.SetUpdateTime(*t)
	}
	return vc
}

// SetProjectID sets the "project_id" field.
func (vc *VariableCreate) SetProjectID(o object.ID) *VariableCreate {
	vc.mutation.SetProjectID(o)
	return vc
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (vc *VariableCreate) SetNillableProjectID(o *object.ID) *VariableCreate {
	if o != nil {
		vc.SetProjectID(*o)
	}
	return vc
}

// SetEnvironmentID sets the "environment_id" field.
func (vc *VariableCreate) SetEnvironmentID(o object.ID) *VariableCreate {
	vc.mutation.SetEnvironmentID(o)
	return vc
}

// SetNillableEnvironmentID sets the "environment_id" field if the given value is not nil.
func (vc *VariableCreate) SetNillableEnvironmentID(o *object.ID) *VariableCreate {
	if o != nil {
		vc.SetEnvironmentID(*o)
	}
	return vc
}

// SetName sets the "name" field.
func (vc *VariableCreate) SetName(s string) *VariableCreate {
	vc.mutation.SetName(s)
	return vc
}

// SetValue sets the "value" field.
func (vc *VariableCreate) SetValue(c crypto.String) *VariableCreate {
	vc.mutation.SetValue(c)
	return vc
}

// SetSensitive sets the "sensitive" field.
func (vc *VariableCreate) SetSensitive(b bool) *VariableCreate {
	vc.mutation.SetSensitive(b)
	return vc
}

// SetNillableSensitive sets the "sensitive" field if the given value is not nil.
func (vc *VariableCreate) SetNillableSensitive(b *bool) *VariableCreate {
	if b != nil {
		vc.SetSensitive(*b)
	}
	return vc
}

// SetDescription sets the "description" field.
func (vc *VariableCreate) SetDescription(s string) *VariableCreate {
	vc.mutation.SetDescription(s)
	return vc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (vc *VariableCreate) SetNillableDescription(s *string) *VariableCreate {
	if s != nil {
		vc.SetDescription(*s)
	}
	return vc
}

// SetID sets the "id" field.
func (vc *VariableCreate) SetID(o object.ID) *VariableCreate {
	vc.mutation.SetID(o)
	return vc
}

// SetProject sets the "project" edge to the Project entity.
func (vc *VariableCreate) SetProject(p *Project) *VariableCreate {
	return vc.SetProjectID(p.ID)
}

// SetEnvironment sets the "environment" edge to the Environment entity.
func (vc *VariableCreate) SetEnvironment(e *Environment) *VariableCreate {
	return vc.SetEnvironmentID(e.ID)
}

// Mutation returns the VariableMutation object of the builder.
func (vc *VariableCreate) Mutation() *VariableMutation {
	return vc.mutation
}

// Save creates the Variable in the database.
func (vc *VariableCreate) Save(ctx context.Context) (*Variable, error) {
	if err := vc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, vc.sqlSave, vc.mutation, vc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vc *VariableCreate) SaveX(ctx context.Context) *Variable {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vc *VariableCreate) Exec(ctx context.Context) error {
	_, err := vc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vc *VariableCreate) ExecX(ctx context.Context) {
	if err := vc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vc *VariableCreate) defaults() error {
	if _, ok := vc.mutation.CreateTime(); !ok {
		if variable.DefaultCreateTime == nil {
			return fmt.Errorf("model: uninitialized variable.DefaultCreateTime (forgotten import model/runtime?)")
		}
		v := variable.DefaultCreateTime()
		vc.mutation.SetCreateTime(v)
	}
	if _, ok := vc.mutation.UpdateTime(); !ok {
		if variable.DefaultUpdateTime == nil {
			return fmt.Errorf("model: uninitialized variable.DefaultUpdateTime (forgotten import model/runtime?)")
		}
		v := variable.DefaultUpdateTime()
		vc.mutation.SetUpdateTime(v)
	}
	if _, ok := vc.mutation.Sensitive(); !ok {
		v := variable.DefaultSensitive
		vc.mutation.SetSensitive(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (vc *VariableCreate) check() error {
	if _, ok := vc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`model: missing required field "Variable.create_time"`)}
	}
	if _, ok := vc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`model: missing required field "Variable.update_time"`)}
	}
	if _, ok := vc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`model: missing required field "Variable.name"`)}
	}
	if v, ok := vc.mutation.Name(); ok {
		if err := variable.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`model: validator failed for field "Variable.name": %w`, err)}
		}
	}
	if _, ok := vc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`model: missing required field "Variable.value"`)}
	}
	if v, ok := vc.mutation.Value(); ok {
		if err := variable.ValueValidator(string(v)); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`model: validator failed for field "Variable.value": %w`, err)}
		}
	}
	if _, ok := vc.mutation.Sensitive(); !ok {
		return &ValidationError{Name: "sensitive", err: errors.New(`model: missing required field "Variable.sensitive"`)}
	}
	return nil
}

func (vc *VariableCreate) sqlSave(ctx context.Context) (*Variable, error) {
	if err := vc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*object.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	vc.mutation.id = &_node.ID
	vc.mutation.done = true
	return _node, nil
}

func (vc *VariableCreate) createSpec() (*Variable, *sqlgraph.CreateSpec) {
	var (
		_node = &Variable{config: vc.config}
		_spec = sqlgraph.NewCreateSpec(variable.Table, sqlgraph.NewFieldSpec(variable.FieldID, field.TypeString))
	)
	_spec.Schema = vc.schemaConfig.Variable
	_spec.OnConflict = vc.conflict
	if id, ok := vc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := vc.mutation.CreateTime(); ok {
		_spec.SetField(variable.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = &value
	}
	if value, ok := vc.mutation.UpdateTime(); ok {
		_spec.SetField(variable.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = &value
	}
	if value, ok := vc.mutation.Name(); ok {
		_spec.SetField(variable.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := vc.mutation.Value(); ok {
		_spec.SetField(variable.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if value, ok := vc.mutation.Sensitive(); ok {
		_spec.SetField(variable.FieldSensitive, field.TypeBool, value)
		_node.Sensitive = value
	}
	if value, ok := vc.mutation.Description(); ok {
		_spec.SetField(variable.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if nodes := vc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   variable.ProjectTable,
			Columns: []string{variable.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		edge.Schema = vc.schemaConfig.Variable
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.EnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   variable.EnvironmentTable,
			Columns: []string{variable.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeString),
			},
		}
		edge.Schema = vc.schemaConfig.Variable
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EnvironmentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// Set is different from other Set* methods,
// it sets the value by judging the definition of each field within the entire object.
//
// For required fields, Set calls directly.
//
// For optional fields, Set calls if the value is not zero.
//
// For example:
//
//	## Required
//
//	db.SetX(obj.X)
//
//	## Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (vc *VariableCreate) Set(obj *Variable) *VariableCreate {
	// Required.
	vc.SetName(obj.Name)
	vc.SetValue(obj.Value)
	vc.SetSensitive(obj.Sensitive)

	// Optional.
	if obj.CreateTime != nil {
		vc.SetCreateTime(*obj.CreateTime)
	}
	if obj.UpdateTime != nil {
		vc.SetUpdateTime(*obj.UpdateTime)
	}
	if obj.ProjectID != "" {
		vc.SetProjectID(obj.ProjectID)
	}
	if obj.EnvironmentID != "" {
		vc.SetEnvironmentID(obj.EnvironmentID)
	}
	if obj.Description != "" {
		vc.SetDescription(obj.Description)
	}

	// Record the given object.
	vc.object = obj

	return vc
}

// getClientSet returns the ClientSet for the given builder.
func (vc *VariableCreate) getClientSet() (mc ClientSet) {
	if _, ok := vc.config.driver.(*txDriver); ok {
		tx := &Tx{config: vc.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: vc.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after created the Variable entity,
// which is always good for cascading create operations.
func (vc *VariableCreate) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *Variable) error) (*Variable, error) {
	obj, err := vc.Save(ctx)
	if err != nil {
		return nil, err
	}

	if len(cbs) == 0 {
		return obj, err
	}

	mc := vc.getClientSet()
	if vc.fromUpsert {
		q := mc.Variables().Query().
			Where(
				variable.Name(obj.Name),
			)
		if obj.ProjectID != "" {
			q.Where(variable.ProjectID(obj.ProjectID))
		} else {
			q.Where(variable.ProjectIDIsNil())
		}
		if obj.EnvironmentID != "" {
			q.Where(variable.EnvironmentID(obj.EnvironmentID))
		} else {
			q.Where(variable.EnvironmentIDIsNil())
		}
		obj.ID, err = q.OnlyID(ctx)
		if err != nil {
			return nil, fmt.Errorf("model: failed to query id of Variable entity: %w", err)
		}
	}

	if x := vc.object; x != nil {
		if _, set := vc.mutation.Field(variable.FieldProjectID); set {
			obj.ProjectID = x.ProjectID
		}
		if _, set := vc.mutation.Field(variable.FieldEnvironmentID); set {
			obj.EnvironmentID = x.EnvironmentID
		}
		if _, set := vc.mutation.Field(variable.FieldName); set {
			obj.Name = x.Name
		}
		if _, set := vc.mutation.Field(variable.FieldValue); set {
			obj.Value = x.Value
		}
		if _, set := vc.mutation.Field(variable.FieldDescription); set {
			obj.Description = x.Description
		}
		obj.Edges = x.Edges
	}

	for i := range cbs {
		if err = cbs[i](ctx, mc, obj); err != nil {
			return nil, err
		}
	}

	return obj, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (vc *VariableCreate) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *Variable) error) *Variable {
	obj, err := vc.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return obj
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (vc *VariableCreate) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *Variable) error) error {
	_, err := vc.SaveE(ctx, cbs...)
	return err
}

// ExecEX is like ExecE, but panics if an error occurs.
func (vc *VariableCreate) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *Variable) error) {
	if err := vc.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// Set leverages the VariableCreate Set method,
// it sets the value by judging the definition of each field within the entire item of the given list.
//
// For required fields, Set calls directly.
//
// For optional fields, Set calls if the value is not zero.
//
// For example:
//
//	## Required
//
//	db.SetX(obj.X)
//
//	## Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (vcb *VariableCreateBulk) Set(objs ...*Variable) *VariableCreateBulk {
	if len(objs) != 0 {
		client := NewVariableClient(vcb.config)

		vcb.builders = make([]*VariableCreate, len(objs))
		for i := range objs {
			vcb.builders[i] = client.Create().Set(objs[i])
		}

		// Record the given objects.
		vcb.objects = objs
	}

	return vcb
}

// getClientSet returns the ClientSet for the given builder.
func (vcb *VariableCreateBulk) getClientSet() (mc ClientSet) {
	if _, ok := vcb.config.driver.(*txDriver); ok {
		tx := &Tx{config: vcb.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: vcb.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after created the Variable entities,
// which is always good for cascading create operations.
func (vcb *VariableCreateBulk) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *Variable) error) ([]*Variable, error) {
	objs, err := vcb.Save(ctx)
	if err != nil {
		return nil, err
	}

	if len(cbs) == 0 {
		return objs, err
	}

	mc := vcb.getClientSet()
	if vcb.fromUpsert {
		for i := range objs {
			obj := objs[i]
			q := mc.Variables().Query().
				Where(
					variable.Name(obj.Name),
				)
			if obj.ProjectID != "" {
				q.Where(variable.ProjectID(obj.ProjectID))
			} else {
				q.Where(variable.ProjectIDIsNil())
			}
			if obj.EnvironmentID != "" {
				q.Where(variable.EnvironmentID(obj.EnvironmentID))
			} else {
				q.Where(variable.EnvironmentIDIsNil())
			}
			objs[i].ID, err = q.OnlyID(ctx)
			if err != nil {
				return nil, fmt.Errorf("model: failed to query id of Variable entity: %w", err)
			}
		}
	}

	if x := vcb.objects; x != nil {
		for i := range x {
			if _, set := vcb.builders[i].mutation.Field(variable.FieldProjectID); set {
				objs[i].ProjectID = x[i].ProjectID
			}
			if _, set := vcb.builders[i].mutation.Field(variable.FieldEnvironmentID); set {
				objs[i].EnvironmentID = x[i].EnvironmentID
			}
			if _, set := vcb.builders[i].mutation.Field(variable.FieldName); set {
				objs[i].Name = x[i].Name
			}
			if _, set := vcb.builders[i].mutation.Field(variable.FieldValue); set {
				objs[i].Value = x[i].Value
			}
			if _, set := vcb.builders[i].mutation.Field(variable.FieldDescription); set {
				objs[i].Description = x[i].Description
			}
			objs[i].Edges = x[i].Edges
		}
	}

	for i := range objs {
		for j := range cbs {
			if err = cbs[j](ctx, mc, objs[i]); err != nil {
				return nil, err
			}
		}
	}

	return objs, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (vcb *VariableCreateBulk) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *Variable) error) []*Variable {
	objs, err := vcb.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return objs
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (vcb *VariableCreateBulk) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *Variable) error) error {
	_, err := vcb.SaveE(ctx, cbs...)
	return err
}

// ExecEX is like ExecE, but panics if an error occurs.
func (vcb *VariableCreateBulk) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *Variable) error) {
	if err := vcb.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (u *VariableUpsertOne) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *Variable) error) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for VariableUpsertOne.OnConflict")
	}
	u.create.fromUpsert = true
	return u.create.ExecE(ctx, cbs...)
}

// ExecEX is like ExecE, but panics if an error occurs.
func (u *VariableUpsertOne) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *Variable) error) {
	if err := u.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (u *VariableUpsertBulk) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *Variable) error) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model: OnConflict was set for builder %d. Set it on the VariableUpsertBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for VariableUpsertBulk.OnConflict")
	}
	u.create.fromUpsert = true
	return u.create.ExecE(ctx, cbs...)
}

// ExecEX is like ExecE, but panics if an error occurs.
func (u *VariableUpsertBulk) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *Variable) error) {
	if err := u.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Variable.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VariableUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (vc *VariableCreate) OnConflict(opts ...sql.ConflictOption) *VariableUpsertOne {
	vc.conflict = opts
	return &VariableUpsertOne{
		create: vc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Variable.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vc *VariableCreate) OnConflictColumns(columns ...string) *VariableUpsertOne {
	vc.conflict = append(vc.conflict, sql.ConflictColumns(columns...))
	return &VariableUpsertOne{
		create: vc,
	}
}

type (
	// VariableUpsertOne is the builder for "upsert"-ing
	//  one Variable node.
	VariableUpsertOne struct {
		create *VariableCreate
	}

	// VariableUpsert is the "OnConflict" setter.
	VariableUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *VariableUpsert) SetUpdateTime(v time.Time) *VariableUpsert {
	u.Set(variable.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *VariableUpsert) UpdateUpdateTime() *VariableUpsert {
	u.SetExcluded(variable.FieldUpdateTime)
	return u
}

// SetValue sets the "value" field.
func (u *VariableUpsert) SetValue(v crypto.String) *VariableUpsert {
	u.Set(variable.FieldValue, v)
	return u
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *VariableUpsert) UpdateValue() *VariableUpsert {
	u.SetExcluded(variable.FieldValue)
	return u
}

// SetSensitive sets the "sensitive" field.
func (u *VariableUpsert) SetSensitive(v bool) *VariableUpsert {
	u.Set(variable.FieldSensitive, v)
	return u
}

// UpdateSensitive sets the "sensitive" field to the value that was provided on create.
func (u *VariableUpsert) UpdateSensitive() *VariableUpsert {
	u.SetExcluded(variable.FieldSensitive)
	return u
}

// SetDescription sets the "description" field.
func (u *VariableUpsert) SetDescription(v string) *VariableUpsert {
	u.Set(variable.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *VariableUpsert) UpdateDescription() *VariableUpsert {
	u.SetExcluded(variable.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *VariableUpsert) ClearDescription() *VariableUpsert {
	u.SetNull(variable.FieldDescription)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Variable.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(variable.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *VariableUpsertOne) UpdateNewValues() *VariableUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(variable.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(variable.FieldCreateTime)
		}
		if _, exists := u.create.mutation.ProjectID(); exists {
			s.SetIgnore(variable.FieldProjectID)
		}
		if _, exists := u.create.mutation.EnvironmentID(); exists {
			s.SetIgnore(variable.FieldEnvironmentID)
		}
		if _, exists := u.create.mutation.Name(); exists {
			s.SetIgnore(variable.FieldName)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Variable.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *VariableUpsertOne) Ignore() *VariableUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VariableUpsertOne) DoNothing() *VariableUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VariableCreate.OnConflict
// documentation for more info.
func (u *VariableUpsertOne) Update(set func(*VariableUpsert)) *VariableUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VariableUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *VariableUpsertOne) SetUpdateTime(v time.Time) *VariableUpsertOne {
	return u.Update(func(s *VariableUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *VariableUpsertOne) UpdateUpdateTime() *VariableUpsertOne {
	return u.Update(func(s *VariableUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetValue sets the "value" field.
func (u *VariableUpsertOne) SetValue(v crypto.String) *VariableUpsertOne {
	return u.Update(func(s *VariableUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *VariableUpsertOne) UpdateValue() *VariableUpsertOne {
	return u.Update(func(s *VariableUpsert) {
		s.UpdateValue()
	})
}

// SetSensitive sets the "sensitive" field.
func (u *VariableUpsertOne) SetSensitive(v bool) *VariableUpsertOne {
	return u.Update(func(s *VariableUpsert) {
		s.SetSensitive(v)
	})
}

// UpdateSensitive sets the "sensitive" field to the value that was provided on create.
func (u *VariableUpsertOne) UpdateSensitive() *VariableUpsertOne {
	return u.Update(func(s *VariableUpsert) {
		s.UpdateSensitive()
	})
}

// SetDescription sets the "description" field.
func (u *VariableUpsertOne) SetDescription(v string) *VariableUpsertOne {
	return u.Update(func(s *VariableUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *VariableUpsertOne) UpdateDescription() *VariableUpsertOne {
	return u.Update(func(s *VariableUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *VariableUpsertOne) ClearDescription() *VariableUpsertOne {
	return u.Update(func(s *VariableUpsert) {
		s.ClearDescription()
	})
}

// Exec executes the query.
func (u *VariableUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for VariableCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VariableUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *VariableUpsertOne) ID(ctx context.Context) (id object.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("model: VariableUpsertOne.ID is not supported by MySQL driver. Use VariableUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *VariableUpsertOne) IDX(ctx context.Context) object.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// VariableCreateBulk is the builder for creating many Variable entities in bulk.
type VariableCreateBulk struct {
	config
	builders   []*VariableCreate
	conflict   []sql.ConflictOption
	objects    []*Variable
	fromUpsert bool
}

// Save creates the Variable entities in the database.
func (vcb *VariableCreateBulk) Save(ctx context.Context) ([]*Variable, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Variable, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VariableMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = vcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vcb *VariableCreateBulk) SaveX(ctx context.Context) []*Variable {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcb *VariableCreateBulk) Exec(ctx context.Context) error {
	_, err := vcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcb *VariableCreateBulk) ExecX(ctx context.Context) {
	if err := vcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Variable.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VariableUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (vcb *VariableCreateBulk) OnConflict(opts ...sql.ConflictOption) *VariableUpsertBulk {
	vcb.conflict = opts
	return &VariableUpsertBulk{
		create: vcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Variable.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vcb *VariableCreateBulk) OnConflictColumns(columns ...string) *VariableUpsertBulk {
	vcb.conflict = append(vcb.conflict, sql.ConflictColumns(columns...))
	return &VariableUpsertBulk{
		create: vcb,
	}
}

// VariableUpsertBulk is the builder for "upsert"-ing
// a bulk of Variable nodes.
type VariableUpsertBulk struct {
	create *VariableCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Variable.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(variable.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *VariableUpsertBulk) UpdateNewValues() *VariableUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(variable.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(variable.FieldCreateTime)
			}
			if _, exists := b.mutation.ProjectID(); exists {
				s.SetIgnore(variable.FieldProjectID)
			}
			if _, exists := b.mutation.EnvironmentID(); exists {
				s.SetIgnore(variable.FieldEnvironmentID)
			}
			if _, exists := b.mutation.Name(); exists {
				s.SetIgnore(variable.FieldName)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Variable.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *VariableUpsertBulk) Ignore() *VariableUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VariableUpsertBulk) DoNothing() *VariableUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VariableCreateBulk.OnConflict
// documentation for more info.
func (u *VariableUpsertBulk) Update(set func(*VariableUpsert)) *VariableUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VariableUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *VariableUpsertBulk) SetUpdateTime(v time.Time) *VariableUpsertBulk {
	return u.Update(func(s *VariableUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *VariableUpsertBulk) UpdateUpdateTime() *VariableUpsertBulk {
	return u.Update(func(s *VariableUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetValue sets the "value" field.
func (u *VariableUpsertBulk) SetValue(v crypto.String) *VariableUpsertBulk {
	return u.Update(func(s *VariableUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *VariableUpsertBulk) UpdateValue() *VariableUpsertBulk {
	return u.Update(func(s *VariableUpsert) {
		s.UpdateValue()
	})
}

// SetSensitive sets the "sensitive" field.
func (u *VariableUpsertBulk) SetSensitive(v bool) *VariableUpsertBulk {
	return u.Update(func(s *VariableUpsert) {
		s.SetSensitive(v)
	})
}

// UpdateSensitive sets the "sensitive" field to the value that was provided on create.
func (u *VariableUpsertBulk) UpdateSensitive() *VariableUpsertBulk {
	return u.Update(func(s *VariableUpsert) {
		s.UpdateSensitive()
	})
}

// SetDescription sets the "description" field.
func (u *VariableUpsertBulk) SetDescription(v string) *VariableUpsertBulk {
	return u.Update(func(s *VariableUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *VariableUpsertBulk) UpdateDescription() *VariableUpsertBulk {
	return u.Update(func(s *VariableUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *VariableUpsertBulk) ClearDescription() *VariableUpsertBulk {
	return u.Update(func(s *VariableUpsert) {
		s.ClearDescription()
	})
}

// Exec executes the query.
func (u *VariableUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model: OnConflict was set for builder %d. Set it on the VariableCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for VariableCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VariableUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
