// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus". DO NOT EDIT.

package model

import (
	"context"
	stdsql "database/sql"
	"errors"
	"fmt"
	"reflect"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"

	"github.com/seal-io/walrus/pkg/dao/model/internal"
	"github.com/seal-io/walrus/pkg/dao/model/predicate"
	"github.com/seal-io/walrus/pkg/dao/model/workflow"
	"github.com/seal-io/walrus/pkg/dao/model/workflowexecution"
	"github.com/seal-io/walrus/pkg/dao/model/workflowstage"
	"github.com/seal-io/walrus/pkg/dao/types"
	"github.com/seal-io/walrus/pkg/dao/types/object"
)

// WorkflowUpdate is the builder for updating Workflow entities.
type WorkflowUpdate struct {
	config
	hooks     []Hook
	mutation  *WorkflowMutation
	modifiers []func(*sql.UpdateBuilder)
	object    *Workflow
}

// Where appends a list predicates to the WorkflowUpdate builder.
func (wu *WorkflowUpdate) Where(ps ...predicate.Workflow) *WorkflowUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetDescription sets the "description" field.
func (wu *WorkflowUpdate) SetDescription(s string) *WorkflowUpdate {
	wu.mutation.SetDescription(s)
	return wu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (wu *WorkflowUpdate) SetNillableDescription(s *string) *WorkflowUpdate {
	if s != nil {
		wu.SetDescription(*s)
	}
	return wu
}

// ClearDescription clears the value of the "description" field.
func (wu *WorkflowUpdate) ClearDescription() *WorkflowUpdate {
	wu.mutation.ClearDescription()
	return wu
}

// SetLabels sets the "labels" field.
func (wu *WorkflowUpdate) SetLabels(m map[string]string) *WorkflowUpdate {
	wu.mutation.SetLabels(m)
	return wu
}

// ClearLabels clears the value of the "labels" field.
func (wu *WorkflowUpdate) ClearLabels() *WorkflowUpdate {
	wu.mutation.ClearLabels()
	return wu
}

// SetAnnotations sets the "annotations" field.
func (wu *WorkflowUpdate) SetAnnotations(m map[string]string) *WorkflowUpdate {
	wu.mutation.SetAnnotations(m)
	return wu
}

// ClearAnnotations clears the value of the "annotations" field.
func (wu *WorkflowUpdate) ClearAnnotations() *WorkflowUpdate {
	wu.mutation.ClearAnnotations()
	return wu
}

// SetUpdateTime sets the "update_time" field.
func (wu *WorkflowUpdate) SetUpdateTime(t time.Time) *WorkflowUpdate {
	wu.mutation.SetUpdateTime(t)
	return wu
}

// SetParallelism sets the "parallelism" field.
func (wu *WorkflowUpdate) SetParallelism(i int) *WorkflowUpdate {
	wu.mutation.ResetParallelism()
	wu.mutation.SetParallelism(i)
	return wu
}

// SetNillableParallelism sets the "parallelism" field if the given value is not nil.
func (wu *WorkflowUpdate) SetNillableParallelism(i *int) *WorkflowUpdate {
	if i != nil {
		wu.SetParallelism(*i)
	}
	return wu
}

// AddParallelism adds i to the "parallelism" field.
func (wu *WorkflowUpdate) AddParallelism(i int) *WorkflowUpdate {
	wu.mutation.AddParallelism(i)
	return wu
}

// SetTimeout sets the "timeout" field.
func (wu *WorkflowUpdate) SetTimeout(i int) *WorkflowUpdate {
	wu.mutation.ResetTimeout()
	wu.mutation.SetTimeout(i)
	return wu
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (wu *WorkflowUpdate) SetNillableTimeout(i *int) *WorkflowUpdate {
	if i != nil {
		wu.SetTimeout(*i)
	}
	return wu
}

// AddTimeout adds i to the "timeout" field.
func (wu *WorkflowUpdate) AddTimeout(i int) *WorkflowUpdate {
	wu.mutation.AddTimeout(i)
	return wu
}

// SetVersion sets the "version" field.
func (wu *WorkflowUpdate) SetVersion(i int) *WorkflowUpdate {
	wu.mutation.ResetVersion()
	wu.mutation.SetVersion(i)
	return wu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (wu *WorkflowUpdate) SetNillableVersion(i *int) *WorkflowUpdate {
	if i != nil {
		wu.SetVersion(*i)
	}
	return wu
}

// AddVersion adds i to the "version" field.
func (wu *WorkflowUpdate) AddVersion(i int) *WorkflowUpdate {
	wu.mutation.AddVersion(i)
	return wu
}

// SetVariables sets the "variables" field.
func (wu *WorkflowUpdate) SetVariables(tv types.WorkflowVariables) *WorkflowUpdate {
	wu.mutation.SetVariables(tv)
	return wu
}

// AppendVariables appends tv to the "variables" field.
func (wu *WorkflowUpdate) AppendVariables(tv types.WorkflowVariables) *WorkflowUpdate {
	wu.mutation.AppendVariables(tv)
	return wu
}

// ClearVariables clears the value of the "variables" field.
func (wu *WorkflowUpdate) ClearVariables() *WorkflowUpdate {
	wu.mutation.ClearVariables()
	return wu
}

// AddStageIDs adds the "stages" edge to the WorkflowStage entity by IDs.
func (wu *WorkflowUpdate) AddStageIDs(ids ...object.ID) *WorkflowUpdate {
	wu.mutation.AddStageIDs(ids...)
	return wu
}

// AddStages adds the "stages" edges to the WorkflowStage entity.
func (wu *WorkflowUpdate) AddStages(w ...*WorkflowStage) *WorkflowUpdate {
	ids := make([]object.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wu.AddStageIDs(ids...)
}

// AddExecutionIDs adds the "executions" edge to the WorkflowExecution entity by IDs.
func (wu *WorkflowUpdate) AddExecutionIDs(ids ...object.ID) *WorkflowUpdate {
	wu.mutation.AddExecutionIDs(ids...)
	return wu
}

// AddExecutions adds the "executions" edges to the WorkflowExecution entity.
func (wu *WorkflowUpdate) AddExecutions(w ...*WorkflowExecution) *WorkflowUpdate {
	ids := make([]object.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wu.AddExecutionIDs(ids...)
}

// Mutation returns the WorkflowMutation object of the builder.
func (wu *WorkflowUpdate) Mutation() *WorkflowMutation {
	return wu.mutation
}

// ClearStages clears all "stages" edges to the WorkflowStage entity.
func (wu *WorkflowUpdate) ClearStages() *WorkflowUpdate {
	wu.mutation.ClearStages()
	return wu
}

// RemoveStageIDs removes the "stages" edge to WorkflowStage entities by IDs.
func (wu *WorkflowUpdate) RemoveStageIDs(ids ...object.ID) *WorkflowUpdate {
	wu.mutation.RemoveStageIDs(ids...)
	return wu
}

// RemoveStages removes "stages" edges to WorkflowStage entities.
func (wu *WorkflowUpdate) RemoveStages(w ...*WorkflowStage) *WorkflowUpdate {
	ids := make([]object.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wu.RemoveStageIDs(ids...)
}

// ClearExecutions clears all "executions" edges to the WorkflowExecution entity.
func (wu *WorkflowUpdate) ClearExecutions() *WorkflowUpdate {
	wu.mutation.ClearExecutions()
	return wu
}

// RemoveExecutionIDs removes the "executions" edge to WorkflowExecution entities by IDs.
func (wu *WorkflowUpdate) RemoveExecutionIDs(ids ...object.ID) *WorkflowUpdate {
	wu.mutation.RemoveExecutionIDs(ids...)
	return wu
}

// RemoveExecutions removes "executions" edges to WorkflowExecution entities.
func (wu *WorkflowUpdate) RemoveExecutions(w ...*WorkflowExecution) *WorkflowUpdate {
	ids := make([]object.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wu.RemoveExecutionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WorkflowUpdate) Save(ctx context.Context) (int, error) {
	if err := wu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WorkflowUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WorkflowUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WorkflowUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wu *WorkflowUpdate) defaults() error {
	if _, ok := wu.mutation.UpdateTime(); !ok {
		if workflow.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("model: uninitialized workflow.UpdateDefaultUpdateTime (forgotten import model/runtime?)")
		}
		v := workflow.UpdateDefaultUpdateTime()
		wu.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (wu *WorkflowUpdate) check() error {
	if v, ok := wu.mutation.Parallelism(); ok {
		if err := workflow.ParallelismValidator(v); err != nil {
			return &ValidationError{Name: "parallelism", err: fmt.Errorf(`model: validator failed for field "Workflow.parallelism": %w`, err)}
		}
	}
	if v, ok := wu.mutation.Timeout(); ok {
		if err := workflow.TimeoutValidator(v); err != nil {
			return &ValidationError{Name: "timeout", err: fmt.Errorf(`model: validator failed for field "Workflow.timeout": %w`, err)}
		}
	}
	if v, ok := wu.mutation.Version(); ok {
		if err := workflow.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`model: validator failed for field "Workflow.version": %w`, err)}
		}
	}
	if v, ok := wu.mutation.Variables(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "variables", err: fmt.Errorf(`model: validator failed for field "Workflow.variables": %w`, err)}
		}
	}
	if _, ok := wu.mutation.ProjectID(); wu.mutation.ProjectCleared() && !ok {
		return errors.New(`model: clearing a required unique edge "Workflow.project"`)
	}
	return nil
}

// Set is different from other Set* methods,
// it sets the value by judging the definition of each field within the entire object.
//
// For default fields, Set calls if the value is not zero.
//
// For no default but required fields, Set calls directly.
//
// For no default but optional fields, Set calls if the value is not zero,
// or clears if the value is zero.
//
// For example:
//
//	## Without Default
//
//	### Required
//
//	db.SetX(obj.X)
//
//	### Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	} else {
//	   db.ClearX()
//	}
//
//	## With Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (wu *WorkflowUpdate) Set(obj *Workflow) *WorkflowUpdate {
	// Without Default.
	if obj.Description != "" {
		wu.SetDescription(obj.Description)
	} else {
		wu.ClearDescription()
	}
	if !reflect.ValueOf(obj.Labels).IsZero() {
		wu.SetLabels(obj.Labels)
	}
	if !reflect.ValueOf(obj.Annotations).IsZero() {
		wu.SetAnnotations(obj.Annotations)
	}
	wu.SetParallelism(obj.Parallelism)
	wu.SetTimeout(obj.Timeout)
	wu.SetVersion(obj.Version)
	if !reflect.ValueOf(obj.Variables).IsZero() {
		wu.SetVariables(obj.Variables)
	} else {
		wu.ClearVariables()
	}

	// With Default.
	if obj.UpdateTime != nil {
		wu.SetUpdateTime(*obj.UpdateTime)
	}

	// Record the given object.
	wu.object = obj

	return wu
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wu *WorkflowUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WorkflowUpdate {
	wu.modifiers = append(wu.modifiers, modifiers...)
	return wu
}

func (wu *WorkflowUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(workflow.Table, workflow.Columns, sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeString))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.Description(); ok {
		_spec.SetField(workflow.FieldDescription, field.TypeString, value)
	}
	if wu.mutation.DescriptionCleared() {
		_spec.ClearField(workflow.FieldDescription, field.TypeString)
	}
	if value, ok := wu.mutation.Labels(); ok {
		_spec.SetField(workflow.FieldLabels, field.TypeJSON, value)
	}
	if wu.mutation.LabelsCleared() {
		_spec.ClearField(workflow.FieldLabels, field.TypeJSON)
	}
	if value, ok := wu.mutation.Annotations(); ok {
		_spec.SetField(workflow.FieldAnnotations, field.TypeJSON, value)
	}
	if wu.mutation.AnnotationsCleared() {
		_spec.ClearField(workflow.FieldAnnotations, field.TypeJSON)
	}
	if value, ok := wu.mutation.UpdateTime(); ok {
		_spec.SetField(workflow.FieldUpdateTime, field.TypeTime, value)
	}
	if wu.mutation.EnvironmentIDCleared() {
		_spec.ClearField(workflow.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := wu.mutation.Parallelism(); ok {
		_spec.SetField(workflow.FieldParallelism, field.TypeInt, value)
	}
	if value, ok := wu.mutation.AddedParallelism(); ok {
		_spec.AddField(workflow.FieldParallelism, field.TypeInt, value)
	}
	if value, ok := wu.mutation.Timeout(); ok {
		_spec.SetField(workflow.FieldTimeout, field.TypeInt, value)
	}
	if value, ok := wu.mutation.AddedTimeout(); ok {
		_spec.AddField(workflow.FieldTimeout, field.TypeInt, value)
	}
	if value, ok := wu.mutation.Version(); ok {
		_spec.SetField(workflow.FieldVersion, field.TypeInt, value)
	}
	if value, ok := wu.mutation.AddedVersion(); ok {
		_spec.AddField(workflow.FieldVersion, field.TypeInt, value)
	}
	if value, ok := wu.mutation.Variables(); ok {
		_spec.SetField(workflow.FieldVariables, field.TypeJSON, value)
	}
	if value, ok := wu.mutation.AppendedVariables(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, workflow.FieldVariables, value)
		})
	}
	if wu.mutation.VariablesCleared() {
		_spec.ClearField(workflow.FieldVariables, field.TypeJSON)
	}
	if wu.mutation.StagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.StagesTable,
			Columns: []string{workflow.StagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowstage.FieldID, field.TypeString),
			},
		}
		edge.Schema = wu.schemaConfig.WorkflowStage
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedStagesIDs(); len(nodes) > 0 && !wu.mutation.StagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.StagesTable,
			Columns: []string{workflow.StagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowstage.FieldID, field.TypeString),
			},
		}
		edge.Schema = wu.schemaConfig.WorkflowStage
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.StagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.StagesTable,
			Columns: []string{workflow.StagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowstage.FieldID, field.TypeString),
			},
		}
		edge.Schema = wu.schemaConfig.WorkflowStage
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.ExecutionsTable,
			Columns: []string{workflow.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeString),
			},
		}
		edge.Schema = wu.schemaConfig.WorkflowExecution
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedExecutionsIDs(); len(nodes) > 0 && !wu.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.ExecutionsTable,
			Columns: []string{workflow.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeString),
			},
		}
		edge.Schema = wu.schemaConfig.WorkflowExecution
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.ExecutionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.ExecutionsTable,
			Columns: []string{workflow.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeString),
			},
		}
		edge.Schema = wu.schemaConfig.WorkflowExecution
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = wu.schemaConfig.Workflow
	ctx = internal.NewSchemaConfigContext(ctx, wu.schemaConfig)
	_spec.AddModifiers(wu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflow.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WorkflowUpdateOne is the builder for updating a single Workflow entity.
type WorkflowUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *WorkflowMutation
	modifiers []func(*sql.UpdateBuilder)
	object    *Workflow
}

// SetDescription sets the "description" field.
func (wuo *WorkflowUpdateOne) SetDescription(s string) *WorkflowUpdateOne {
	wuo.mutation.SetDescription(s)
	return wuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (wuo *WorkflowUpdateOne) SetNillableDescription(s *string) *WorkflowUpdateOne {
	if s != nil {
		wuo.SetDescription(*s)
	}
	return wuo
}

// ClearDescription clears the value of the "description" field.
func (wuo *WorkflowUpdateOne) ClearDescription() *WorkflowUpdateOne {
	wuo.mutation.ClearDescription()
	return wuo
}

// SetLabels sets the "labels" field.
func (wuo *WorkflowUpdateOne) SetLabels(m map[string]string) *WorkflowUpdateOne {
	wuo.mutation.SetLabels(m)
	return wuo
}

// ClearLabels clears the value of the "labels" field.
func (wuo *WorkflowUpdateOne) ClearLabels() *WorkflowUpdateOne {
	wuo.mutation.ClearLabels()
	return wuo
}

// SetAnnotations sets the "annotations" field.
func (wuo *WorkflowUpdateOne) SetAnnotations(m map[string]string) *WorkflowUpdateOne {
	wuo.mutation.SetAnnotations(m)
	return wuo
}

// ClearAnnotations clears the value of the "annotations" field.
func (wuo *WorkflowUpdateOne) ClearAnnotations() *WorkflowUpdateOne {
	wuo.mutation.ClearAnnotations()
	return wuo
}

// SetUpdateTime sets the "update_time" field.
func (wuo *WorkflowUpdateOne) SetUpdateTime(t time.Time) *WorkflowUpdateOne {
	wuo.mutation.SetUpdateTime(t)
	return wuo
}

// SetParallelism sets the "parallelism" field.
func (wuo *WorkflowUpdateOne) SetParallelism(i int) *WorkflowUpdateOne {
	wuo.mutation.ResetParallelism()
	wuo.mutation.SetParallelism(i)
	return wuo
}

// SetNillableParallelism sets the "parallelism" field if the given value is not nil.
func (wuo *WorkflowUpdateOne) SetNillableParallelism(i *int) *WorkflowUpdateOne {
	if i != nil {
		wuo.SetParallelism(*i)
	}
	return wuo
}

// AddParallelism adds i to the "parallelism" field.
func (wuo *WorkflowUpdateOne) AddParallelism(i int) *WorkflowUpdateOne {
	wuo.mutation.AddParallelism(i)
	return wuo
}

// SetTimeout sets the "timeout" field.
func (wuo *WorkflowUpdateOne) SetTimeout(i int) *WorkflowUpdateOne {
	wuo.mutation.ResetTimeout()
	wuo.mutation.SetTimeout(i)
	return wuo
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (wuo *WorkflowUpdateOne) SetNillableTimeout(i *int) *WorkflowUpdateOne {
	if i != nil {
		wuo.SetTimeout(*i)
	}
	return wuo
}

// AddTimeout adds i to the "timeout" field.
func (wuo *WorkflowUpdateOne) AddTimeout(i int) *WorkflowUpdateOne {
	wuo.mutation.AddTimeout(i)
	return wuo
}

// SetVersion sets the "version" field.
func (wuo *WorkflowUpdateOne) SetVersion(i int) *WorkflowUpdateOne {
	wuo.mutation.ResetVersion()
	wuo.mutation.SetVersion(i)
	return wuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (wuo *WorkflowUpdateOne) SetNillableVersion(i *int) *WorkflowUpdateOne {
	if i != nil {
		wuo.SetVersion(*i)
	}
	return wuo
}

// AddVersion adds i to the "version" field.
func (wuo *WorkflowUpdateOne) AddVersion(i int) *WorkflowUpdateOne {
	wuo.mutation.AddVersion(i)
	return wuo
}

// SetVariables sets the "variables" field.
func (wuo *WorkflowUpdateOne) SetVariables(tv types.WorkflowVariables) *WorkflowUpdateOne {
	wuo.mutation.SetVariables(tv)
	return wuo
}

// AppendVariables appends tv to the "variables" field.
func (wuo *WorkflowUpdateOne) AppendVariables(tv types.WorkflowVariables) *WorkflowUpdateOne {
	wuo.mutation.AppendVariables(tv)
	return wuo
}

// ClearVariables clears the value of the "variables" field.
func (wuo *WorkflowUpdateOne) ClearVariables() *WorkflowUpdateOne {
	wuo.mutation.ClearVariables()
	return wuo
}

// AddStageIDs adds the "stages" edge to the WorkflowStage entity by IDs.
func (wuo *WorkflowUpdateOne) AddStageIDs(ids ...object.ID) *WorkflowUpdateOne {
	wuo.mutation.AddStageIDs(ids...)
	return wuo
}

// AddStages adds the "stages" edges to the WorkflowStage entity.
func (wuo *WorkflowUpdateOne) AddStages(w ...*WorkflowStage) *WorkflowUpdateOne {
	ids := make([]object.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wuo.AddStageIDs(ids...)
}

// AddExecutionIDs adds the "executions" edge to the WorkflowExecution entity by IDs.
func (wuo *WorkflowUpdateOne) AddExecutionIDs(ids ...object.ID) *WorkflowUpdateOne {
	wuo.mutation.AddExecutionIDs(ids...)
	return wuo
}

// AddExecutions adds the "executions" edges to the WorkflowExecution entity.
func (wuo *WorkflowUpdateOne) AddExecutions(w ...*WorkflowExecution) *WorkflowUpdateOne {
	ids := make([]object.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wuo.AddExecutionIDs(ids...)
}

// Mutation returns the WorkflowMutation object of the builder.
func (wuo *WorkflowUpdateOne) Mutation() *WorkflowMutation {
	return wuo.mutation
}

// ClearStages clears all "stages" edges to the WorkflowStage entity.
func (wuo *WorkflowUpdateOne) ClearStages() *WorkflowUpdateOne {
	wuo.mutation.ClearStages()
	return wuo
}

// RemoveStageIDs removes the "stages" edge to WorkflowStage entities by IDs.
func (wuo *WorkflowUpdateOne) RemoveStageIDs(ids ...object.ID) *WorkflowUpdateOne {
	wuo.mutation.RemoveStageIDs(ids...)
	return wuo
}

// RemoveStages removes "stages" edges to WorkflowStage entities.
func (wuo *WorkflowUpdateOne) RemoveStages(w ...*WorkflowStage) *WorkflowUpdateOne {
	ids := make([]object.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wuo.RemoveStageIDs(ids...)
}

// ClearExecutions clears all "executions" edges to the WorkflowExecution entity.
func (wuo *WorkflowUpdateOne) ClearExecutions() *WorkflowUpdateOne {
	wuo.mutation.ClearExecutions()
	return wuo
}

// RemoveExecutionIDs removes the "executions" edge to WorkflowExecution entities by IDs.
func (wuo *WorkflowUpdateOne) RemoveExecutionIDs(ids ...object.ID) *WorkflowUpdateOne {
	wuo.mutation.RemoveExecutionIDs(ids...)
	return wuo
}

// RemoveExecutions removes "executions" edges to WorkflowExecution entities.
func (wuo *WorkflowUpdateOne) RemoveExecutions(w ...*WorkflowExecution) *WorkflowUpdateOne {
	ids := make([]object.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wuo.RemoveExecutionIDs(ids...)
}

// Where appends a list predicates to the WorkflowUpdate builder.
func (wuo *WorkflowUpdateOne) Where(ps ...predicate.Workflow) *WorkflowUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WorkflowUpdateOne) Select(field string, fields ...string) *WorkflowUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Workflow entity.
func (wuo *WorkflowUpdateOne) Save(ctx context.Context) (*Workflow, error) {
	if err := wuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WorkflowUpdateOne) SaveX(ctx context.Context) *Workflow {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WorkflowUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WorkflowUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wuo *WorkflowUpdateOne) defaults() error {
	if _, ok := wuo.mutation.UpdateTime(); !ok {
		if workflow.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("model: uninitialized workflow.UpdateDefaultUpdateTime (forgotten import model/runtime?)")
		}
		v := workflow.UpdateDefaultUpdateTime()
		wuo.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (wuo *WorkflowUpdateOne) check() error {
	if v, ok := wuo.mutation.Parallelism(); ok {
		if err := workflow.ParallelismValidator(v); err != nil {
			return &ValidationError{Name: "parallelism", err: fmt.Errorf(`model: validator failed for field "Workflow.parallelism": %w`, err)}
		}
	}
	if v, ok := wuo.mutation.Timeout(); ok {
		if err := workflow.TimeoutValidator(v); err != nil {
			return &ValidationError{Name: "timeout", err: fmt.Errorf(`model: validator failed for field "Workflow.timeout": %w`, err)}
		}
	}
	if v, ok := wuo.mutation.Version(); ok {
		if err := workflow.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`model: validator failed for field "Workflow.version": %w`, err)}
		}
	}
	if v, ok := wuo.mutation.Variables(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "variables", err: fmt.Errorf(`model: validator failed for field "Workflow.variables": %w`, err)}
		}
	}
	if _, ok := wuo.mutation.ProjectID(); wuo.mutation.ProjectCleared() && !ok {
		return errors.New(`model: clearing a required unique edge "Workflow.project"`)
	}
	return nil
}

// Set is different from other Set* methods,
// it sets the value by judging the definition of each field within the entire object.
//
// For default fields, Set calls if the value changes from the original.
//
// For no default but required fields, Set calls if the value changes from the original.
//
// For no default but optional fields, Set calls if the value changes from the original,
// or clears if changes to zero.
//
// For example:
//
//	## Without Default
//
//	### Required
//
//	db.SetX(obj.X)
//
//	### Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   if _is_not_equal_(db.X, obj.X) {
//	      db.SetX(obj.X)
//	   }
//	} else {
//	   db.ClearX()
//	}
//
//	## With Default
//
//	if _is_zero_value_(obj.X) && _is_not_equal_(db.X, obj.X) {
//	   db.SetX(obj.X)
//	}
func (wuo *WorkflowUpdateOne) Set(obj *Workflow) *WorkflowUpdateOne {
	h := func(n ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			mt := m.(*WorkflowMutation)
			db, err := mt.Client().Workflow.Get(ctx, *mt.id)
			if err != nil {
				return nil, fmt.Errorf("failed getting Workflow with id: %v", *mt.id)
			}

			// Without Default.
			if obj.Description != "" {
				if db.Description != obj.Description {
					wuo.SetDescription(obj.Description)
				}
			} else {
				wuo.ClearDescription()
			}
			if !reflect.ValueOf(obj.Labels).IsZero() {
				if !reflect.DeepEqual(db.Labels, obj.Labels) {
					wuo.SetLabels(obj.Labels)
				}
			}
			if !reflect.ValueOf(obj.Annotations).IsZero() {
				if !reflect.DeepEqual(db.Annotations, obj.Annotations) {
					wuo.SetAnnotations(obj.Annotations)
				}
			}
			if db.Parallelism != obj.Parallelism {
				wuo.SetParallelism(obj.Parallelism)
			}
			if db.Timeout != obj.Timeout {
				wuo.SetTimeout(obj.Timeout)
			}
			if db.Version != obj.Version {
				wuo.SetVersion(obj.Version)
			}
			if !reflect.ValueOf(obj.Variables).IsZero() {
				if !reflect.DeepEqual(db.Variables, obj.Variables) {
					wuo.SetVariables(obj.Variables)
				}
			} else {
				wuo.ClearVariables()
			}

			// With Default.
			if (obj.UpdateTime != nil) && (!reflect.DeepEqual(db.UpdateTime, obj.UpdateTime)) {
				wuo.SetUpdateTime(*obj.UpdateTime)
			}

			// Record the given object.
			wuo.object = obj

			return n.Mutate(ctx, m)
		})
	}

	wuo.hooks = append(wuo.hooks, h)

	return wuo
}

// getClientSet returns the ClientSet for the given builder.
func (wuo *WorkflowUpdateOne) getClientSet() (mc ClientSet) {
	if _, ok := wuo.config.driver.(*txDriver); ok {
		tx := &Tx{config: wuo.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: wuo.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after updated the Workflow entity,
// which is always good for cascading update operations.
func (wuo *WorkflowUpdateOne) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *Workflow) error) (*Workflow, error) {
	obj, err := wuo.Save(ctx)
	if err != nil &&
		(wuo.object == nil || !errors.Is(err, stdsql.ErrNoRows)) {
		return nil, err
	}

	if len(cbs) == 0 {
		return obj, err
	}

	mc := wuo.getClientSet()

	if obj == nil {
		obj = wuo.object
	} else if x := wuo.object; x != nil {
		if _, set := wuo.mutation.Field(workflow.FieldDescription); set {
			obj.Description = x.Description
		}
		if _, set := wuo.mutation.Field(workflow.FieldLabels); set {
			obj.Labels = x.Labels
		}
		if _, set := wuo.mutation.Field(workflow.FieldAnnotations); set {
			obj.Annotations = x.Annotations
		}
		if _, set := wuo.mutation.Field(workflow.FieldParallelism); set {
			obj.Parallelism = x.Parallelism
		}
		if _, set := wuo.mutation.Field(workflow.FieldTimeout); set {
			obj.Timeout = x.Timeout
		}
		if _, set := wuo.mutation.Field(workflow.FieldVersion); set {
			obj.Version = x.Version
		}
		if _, set := wuo.mutation.Field(workflow.FieldVariables); set {
			obj.Variables = x.Variables
		}
		obj.Edges = x.Edges
	}

	for i := range cbs {
		if err = cbs[i](ctx, mc, obj); err != nil {
			return nil, err
		}
	}

	return obj, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (wuo *WorkflowUpdateOne) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *Workflow) error) *Workflow {
	obj, err := wuo.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return obj
}

// ExecE calls the given function after executed the query,
// which is always good for cascading update operations.
func (wuo *WorkflowUpdateOne) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *Workflow) error) error {
	_, err := wuo.SaveE(ctx, cbs...)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WorkflowUpdateOne) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *Workflow) error) {
	if err := wuo.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wuo *WorkflowUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WorkflowUpdateOne {
	wuo.modifiers = append(wuo.modifiers, modifiers...)
	return wuo
}

func (wuo *WorkflowUpdateOne) sqlSave(ctx context.Context) (_node *Workflow, err error) {
	if err := wuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workflow.Table, workflow.Columns, sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeString))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`model: missing "Workflow.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workflow.FieldID)
		for _, f := range fields {
			if !workflow.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
			}
			if f != workflow.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.Description(); ok {
		_spec.SetField(workflow.FieldDescription, field.TypeString, value)
	}
	if wuo.mutation.DescriptionCleared() {
		_spec.ClearField(workflow.FieldDescription, field.TypeString)
	}
	if value, ok := wuo.mutation.Labels(); ok {
		_spec.SetField(workflow.FieldLabels, field.TypeJSON, value)
	}
	if wuo.mutation.LabelsCleared() {
		_spec.ClearField(workflow.FieldLabels, field.TypeJSON)
	}
	if value, ok := wuo.mutation.Annotations(); ok {
		_spec.SetField(workflow.FieldAnnotations, field.TypeJSON, value)
	}
	if wuo.mutation.AnnotationsCleared() {
		_spec.ClearField(workflow.FieldAnnotations, field.TypeJSON)
	}
	if value, ok := wuo.mutation.UpdateTime(); ok {
		_spec.SetField(workflow.FieldUpdateTime, field.TypeTime, value)
	}
	if wuo.mutation.EnvironmentIDCleared() {
		_spec.ClearField(workflow.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := wuo.mutation.Parallelism(); ok {
		_spec.SetField(workflow.FieldParallelism, field.TypeInt, value)
	}
	if value, ok := wuo.mutation.AddedParallelism(); ok {
		_spec.AddField(workflow.FieldParallelism, field.TypeInt, value)
	}
	if value, ok := wuo.mutation.Timeout(); ok {
		_spec.SetField(workflow.FieldTimeout, field.TypeInt, value)
	}
	if value, ok := wuo.mutation.AddedTimeout(); ok {
		_spec.AddField(workflow.FieldTimeout, field.TypeInt, value)
	}
	if value, ok := wuo.mutation.Version(); ok {
		_spec.SetField(workflow.FieldVersion, field.TypeInt, value)
	}
	if value, ok := wuo.mutation.AddedVersion(); ok {
		_spec.AddField(workflow.FieldVersion, field.TypeInt, value)
	}
	if value, ok := wuo.mutation.Variables(); ok {
		_spec.SetField(workflow.FieldVariables, field.TypeJSON, value)
	}
	if value, ok := wuo.mutation.AppendedVariables(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, workflow.FieldVariables, value)
		})
	}
	if wuo.mutation.VariablesCleared() {
		_spec.ClearField(workflow.FieldVariables, field.TypeJSON)
	}
	if wuo.mutation.StagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.StagesTable,
			Columns: []string{workflow.StagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowstage.FieldID, field.TypeString),
			},
		}
		edge.Schema = wuo.schemaConfig.WorkflowStage
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedStagesIDs(); len(nodes) > 0 && !wuo.mutation.StagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.StagesTable,
			Columns: []string{workflow.StagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowstage.FieldID, field.TypeString),
			},
		}
		edge.Schema = wuo.schemaConfig.WorkflowStage
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.StagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.StagesTable,
			Columns: []string{workflow.StagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowstage.FieldID, field.TypeString),
			},
		}
		edge.Schema = wuo.schemaConfig.WorkflowStage
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.ExecutionsTable,
			Columns: []string{workflow.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeString),
			},
		}
		edge.Schema = wuo.schemaConfig.WorkflowExecution
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedExecutionsIDs(); len(nodes) > 0 && !wuo.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.ExecutionsTable,
			Columns: []string{workflow.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeString),
			},
		}
		edge.Schema = wuo.schemaConfig.WorkflowExecution
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.ExecutionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.ExecutionsTable,
			Columns: []string{workflow.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeString),
			},
		}
		edge.Schema = wuo.schemaConfig.WorkflowExecution
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = wuo.schemaConfig.Workflow
	ctx = internal.NewSchemaConfigContext(ctx, wuo.schemaConfig)
	_spec.AddModifiers(wuo.modifiers...)
	_node = &Workflow{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflow.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
