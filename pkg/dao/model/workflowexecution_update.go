// SPDX-FileCopyrightText: 2023 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus". DO NOT EDIT.

package model

import (
	"context"
	stdsql "database/sql"
	"errors"
	"fmt"
	"reflect"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/seal-io/walrus/pkg/dao/model/internal"
	"github.com/seal-io/walrus/pkg/dao/model/predicate"
	"github.com/seal-io/walrus/pkg/dao/model/workflowexecution"
	"github.com/seal-io/walrus/pkg/dao/model/workflowstageexecution"
	"github.com/seal-io/walrus/pkg/dao/types"
	"github.com/seal-io/walrus/pkg/dao/types/object"
	"github.com/seal-io/walrus/pkg/dao/types/status"
)

// WorkflowExecutionUpdate is the builder for updating WorkflowExecution entities.
type WorkflowExecutionUpdate struct {
	config
	hooks     []Hook
	mutation  *WorkflowExecutionMutation
	modifiers []func(*sql.UpdateBuilder)
	object    *WorkflowExecution
}

// Where appends a list predicates to the WorkflowExecutionUpdate builder.
func (weu *WorkflowExecutionUpdate) Where(ps ...predicate.WorkflowExecution) *WorkflowExecutionUpdate {
	weu.mutation.Where(ps...)
	return weu
}

// SetDescription sets the "description" field.
func (weu *WorkflowExecutionUpdate) SetDescription(s string) *WorkflowExecutionUpdate {
	weu.mutation.SetDescription(s)
	return weu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (weu *WorkflowExecutionUpdate) SetNillableDescription(s *string) *WorkflowExecutionUpdate {
	if s != nil {
		weu.SetDescription(*s)
	}
	return weu
}

// ClearDescription clears the value of the "description" field.
func (weu *WorkflowExecutionUpdate) ClearDescription() *WorkflowExecutionUpdate {
	weu.mutation.ClearDescription()
	return weu
}

// SetLabels sets the "labels" field.
func (weu *WorkflowExecutionUpdate) SetLabels(m map[string]string) *WorkflowExecutionUpdate {
	weu.mutation.SetLabels(m)
	return weu
}

// ClearLabels clears the value of the "labels" field.
func (weu *WorkflowExecutionUpdate) ClearLabels() *WorkflowExecutionUpdate {
	weu.mutation.ClearLabels()
	return weu
}

// SetAnnotations sets the "annotations" field.
func (weu *WorkflowExecutionUpdate) SetAnnotations(m map[string]string) *WorkflowExecutionUpdate {
	weu.mutation.SetAnnotations(m)
	return weu
}

// ClearAnnotations clears the value of the "annotations" field.
func (weu *WorkflowExecutionUpdate) ClearAnnotations() *WorkflowExecutionUpdate {
	weu.mutation.ClearAnnotations()
	return weu
}

// SetUpdateTime sets the "update_time" field.
func (weu *WorkflowExecutionUpdate) SetUpdateTime(t time.Time) *WorkflowExecutionUpdate {
	weu.mutation.SetUpdateTime(t)
	return weu
}

// SetStatus sets the "status" field.
func (weu *WorkflowExecutionUpdate) SetStatus(s status.Status) *WorkflowExecutionUpdate {
	weu.mutation.SetStatus(s)
	return weu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (weu *WorkflowExecutionUpdate) SetNillableStatus(s *status.Status) *WorkflowExecutionUpdate {
	if s != nil {
		weu.SetStatus(*s)
	}
	return weu
}

// ClearStatus clears the value of the "status" field.
func (weu *WorkflowExecutionUpdate) ClearStatus() *WorkflowExecutionUpdate {
	weu.mutation.ClearStatus()
	return weu
}

// SetVersion sets the "version" field.
func (weu *WorkflowExecutionUpdate) SetVersion(i int) *WorkflowExecutionUpdate {
	weu.mutation.ResetVersion()
	weu.mutation.SetVersion(i)
	return weu
}

// AddVersion adds i to the "version" field.
func (weu *WorkflowExecutionUpdate) AddVersion(i int) *WorkflowExecutionUpdate {
	weu.mutation.AddVersion(i)
	return weu
}

// SetExecuteTime sets the "execute_time" field.
func (weu *WorkflowExecutionUpdate) SetExecuteTime(t time.Time) *WorkflowExecutionUpdate {
	weu.mutation.SetExecuteTime(t)
	return weu
}

// SetNillableExecuteTime sets the "execute_time" field if the given value is not nil.
func (weu *WorkflowExecutionUpdate) SetNillableExecuteTime(t *time.Time) *WorkflowExecutionUpdate {
	if t != nil {
		weu.SetExecuteTime(*t)
	}
	return weu
}

// ClearExecuteTime clears the value of the "execute_time" field.
func (weu *WorkflowExecutionUpdate) ClearExecuteTime() *WorkflowExecutionUpdate {
	weu.mutation.ClearExecuteTime()
	return weu
}

// SetTimes sets the "times" field.
func (weu *WorkflowExecutionUpdate) SetTimes(i int) *WorkflowExecutionUpdate {
	weu.mutation.ResetTimes()
	weu.mutation.SetTimes(i)
	return weu
}

// SetNillableTimes sets the "times" field if the given value is not nil.
func (weu *WorkflowExecutionUpdate) SetNillableTimes(i *int) *WorkflowExecutionUpdate {
	if i != nil {
		weu.SetTimes(*i)
	}
	return weu
}

// AddTimes adds i to the "times" field.
func (weu *WorkflowExecutionUpdate) AddTimes(i int) *WorkflowExecutionUpdate {
	weu.mutation.AddTimes(i)
	return weu
}

// SetDuration sets the "duration" field.
func (weu *WorkflowExecutionUpdate) SetDuration(i int) *WorkflowExecutionUpdate {
	weu.mutation.ResetDuration()
	weu.mutation.SetDuration(i)
	return weu
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (weu *WorkflowExecutionUpdate) SetNillableDuration(i *int) *WorkflowExecutionUpdate {
	if i != nil {
		weu.SetDuration(*i)
	}
	return weu
}

// AddDuration adds i to the "duration" field.
func (weu *WorkflowExecutionUpdate) AddDuration(i int) *WorkflowExecutionUpdate {
	weu.mutation.AddDuration(i)
	return weu
}

// SetParallelism sets the "parallelism" field.
func (weu *WorkflowExecutionUpdate) SetParallelism(i int) *WorkflowExecutionUpdate {
	weu.mutation.ResetParallelism()
	weu.mutation.SetParallelism(i)
	return weu
}

// SetNillableParallelism sets the "parallelism" field if the given value is not nil.
func (weu *WorkflowExecutionUpdate) SetNillableParallelism(i *int) *WorkflowExecutionUpdate {
	if i != nil {
		weu.SetParallelism(*i)
	}
	return weu
}

// AddParallelism adds i to the "parallelism" field.
func (weu *WorkflowExecutionUpdate) AddParallelism(i int) *WorkflowExecutionUpdate {
	weu.mutation.AddParallelism(i)
	return weu
}

// SetTimeout sets the "timeout" field.
func (weu *WorkflowExecutionUpdate) SetTimeout(i int) *WorkflowExecutionUpdate {
	weu.mutation.ResetTimeout()
	weu.mutation.SetTimeout(i)
	return weu
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (weu *WorkflowExecutionUpdate) SetNillableTimeout(i *int) *WorkflowExecutionUpdate {
	if i != nil {
		weu.SetTimeout(*i)
	}
	return weu
}

// AddTimeout adds i to the "timeout" field.
func (weu *WorkflowExecutionUpdate) AddTimeout(i int) *WorkflowExecutionUpdate {
	weu.mutation.AddTimeout(i)
	return weu
}

// SetTrigger sets the "trigger" field.
func (weu *WorkflowExecutionUpdate) SetTrigger(tet types.WorkflowExecutionTrigger) *WorkflowExecutionUpdate {
	weu.mutation.SetTrigger(tet)
	return weu
}

// SetNillableTrigger sets the "trigger" field if the given value is not nil.
func (weu *WorkflowExecutionUpdate) SetNillableTrigger(tet *types.WorkflowExecutionTrigger) *WorkflowExecutionUpdate {
	if tet != nil {
		weu.SetTrigger(*tet)
	}
	return weu
}

// AddStageIDs adds the "stages" edge to the WorkflowStageExecution entity by IDs.
func (weu *WorkflowExecutionUpdate) AddStageIDs(ids ...object.ID) *WorkflowExecutionUpdate {
	weu.mutation.AddStageIDs(ids...)
	return weu
}

// AddStages adds the "stages" edges to the WorkflowStageExecution entity.
func (weu *WorkflowExecutionUpdate) AddStages(w ...*WorkflowStageExecution) *WorkflowExecutionUpdate {
	ids := make([]object.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return weu.AddStageIDs(ids...)
}

// Mutation returns the WorkflowExecutionMutation object of the builder.
func (weu *WorkflowExecutionUpdate) Mutation() *WorkflowExecutionMutation {
	return weu.mutation
}

// ClearStages clears all "stages" edges to the WorkflowStageExecution entity.
func (weu *WorkflowExecutionUpdate) ClearStages() *WorkflowExecutionUpdate {
	weu.mutation.ClearStages()
	return weu
}

// RemoveStageIDs removes the "stages" edge to WorkflowStageExecution entities by IDs.
func (weu *WorkflowExecutionUpdate) RemoveStageIDs(ids ...object.ID) *WorkflowExecutionUpdate {
	weu.mutation.RemoveStageIDs(ids...)
	return weu
}

// RemoveStages removes "stages" edges to WorkflowStageExecution entities.
func (weu *WorkflowExecutionUpdate) RemoveStages(w ...*WorkflowStageExecution) *WorkflowExecutionUpdate {
	ids := make([]object.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return weu.RemoveStageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (weu *WorkflowExecutionUpdate) Save(ctx context.Context) (int, error) {
	if err := weu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, weu.sqlSave, weu.mutation, weu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (weu *WorkflowExecutionUpdate) SaveX(ctx context.Context) int {
	affected, err := weu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (weu *WorkflowExecutionUpdate) Exec(ctx context.Context) error {
	_, err := weu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (weu *WorkflowExecutionUpdate) ExecX(ctx context.Context) {
	if err := weu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (weu *WorkflowExecutionUpdate) defaults() error {
	if _, ok := weu.mutation.UpdateTime(); !ok {
		if workflowexecution.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("model: uninitialized workflowexecution.UpdateDefaultUpdateTime (forgotten import model/runtime?)")
		}
		v := workflowexecution.UpdateDefaultUpdateTime()
		weu.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (weu *WorkflowExecutionUpdate) check() error {
	if v, ok := weu.mutation.Version(); ok {
		if err := workflowexecution.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`model: validator failed for field "WorkflowExecution.version": %w`, err)}
		}
	}
	if v, ok := weu.mutation.Times(); ok {
		if err := workflowexecution.TimesValidator(v); err != nil {
			return &ValidationError{Name: "times", err: fmt.Errorf(`model: validator failed for field "WorkflowExecution.times": %w`, err)}
		}
	}
	if v, ok := weu.mutation.Duration(); ok {
		if err := workflowexecution.DurationValidator(v); err != nil {
			return &ValidationError{Name: "duration", err: fmt.Errorf(`model: validator failed for field "WorkflowExecution.duration": %w`, err)}
		}
	}
	if v, ok := weu.mutation.Parallelism(); ok {
		if err := workflowexecution.ParallelismValidator(v); err != nil {
			return &ValidationError{Name: "parallelism", err: fmt.Errorf(`model: validator failed for field "WorkflowExecution.parallelism": %w`, err)}
		}
	}
	if v, ok := weu.mutation.Timeout(); ok {
		if err := workflowexecution.TimeoutValidator(v); err != nil {
			return &ValidationError{Name: "timeout", err: fmt.Errorf(`model: validator failed for field "WorkflowExecution.timeout": %w`, err)}
		}
	}
	if _, ok := weu.mutation.ProjectID(); weu.mutation.ProjectCleared() && !ok {
		return errors.New(`model: clearing a required unique edge "WorkflowExecution.project"`)
	}
	if _, ok := weu.mutation.WorkflowID(); weu.mutation.WorkflowCleared() && !ok {
		return errors.New(`model: clearing a required unique edge "WorkflowExecution.workflow"`)
	}
	return nil
}

// Set is different from other Set* methods,
// it sets the value by judging the definition of each field within the entire object.
//
// For default fields, Set calls if the value is not zero.
//
// For no default but required fields, Set calls directly.
//
// For no default but optional fields, Set calls if the value is not zero,
// or clears if the value is zero.
//
// For example:
//
//	## Without Default
//
//	### Required
//
//	db.SetX(obj.X)
//
//	### Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	} else {
//	   db.ClearX()
//	}
//
//	## With Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (weu *WorkflowExecutionUpdate) Set(obj *WorkflowExecution) *WorkflowExecutionUpdate {
	// Without Default.
	if obj.Description != "" {
		weu.SetDescription(obj.Description)
	} else {
		weu.ClearDescription()
	}
	if !reflect.ValueOf(obj.Labels).IsZero() {
		weu.SetLabels(obj.Labels)
	}
	if !reflect.ValueOf(obj.Annotations).IsZero() {
		weu.SetAnnotations(obj.Annotations)
	}
	if !reflect.ValueOf(obj.Status).IsZero() {
		weu.SetStatus(obj.Status)
	}
	weu.SetVersion(obj.Version)
	if !obj.ExecuteTime.IsZero() {
		weu.SetExecuteTime(obj.ExecuteTime)
	}
	weu.SetTimes(obj.Times)
	weu.SetDuration(obj.Duration)
	weu.SetParallelism(obj.Parallelism)
	weu.SetTimeout(obj.Timeout)
	weu.SetTrigger(obj.Trigger)

	// With Default.
	if obj.UpdateTime != nil {
		weu.SetUpdateTime(*obj.UpdateTime)
	}

	// Record the given object.
	weu.object = obj

	return weu
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (weu *WorkflowExecutionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WorkflowExecutionUpdate {
	weu.modifiers = append(weu.modifiers, modifiers...)
	return weu
}

func (weu *WorkflowExecutionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := weu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(workflowexecution.Table, workflowexecution.Columns, sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeString))
	if ps := weu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := weu.mutation.Description(); ok {
		_spec.SetField(workflowexecution.FieldDescription, field.TypeString, value)
	}
	if weu.mutation.DescriptionCleared() {
		_spec.ClearField(workflowexecution.FieldDescription, field.TypeString)
	}
	if value, ok := weu.mutation.Labels(); ok {
		_spec.SetField(workflowexecution.FieldLabels, field.TypeJSON, value)
	}
	if weu.mutation.LabelsCleared() {
		_spec.ClearField(workflowexecution.FieldLabels, field.TypeJSON)
	}
	if value, ok := weu.mutation.Annotations(); ok {
		_spec.SetField(workflowexecution.FieldAnnotations, field.TypeJSON, value)
	}
	if weu.mutation.AnnotationsCleared() {
		_spec.ClearField(workflowexecution.FieldAnnotations, field.TypeJSON)
	}
	if value, ok := weu.mutation.UpdateTime(); ok {
		_spec.SetField(workflowexecution.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := weu.mutation.Status(); ok {
		_spec.SetField(workflowexecution.FieldStatus, field.TypeJSON, value)
	}
	if weu.mutation.StatusCleared() {
		_spec.ClearField(workflowexecution.FieldStatus, field.TypeJSON)
	}
	if value, ok := weu.mutation.Version(); ok {
		_spec.SetField(workflowexecution.FieldVersion, field.TypeInt, value)
	}
	if value, ok := weu.mutation.AddedVersion(); ok {
		_spec.AddField(workflowexecution.FieldVersion, field.TypeInt, value)
	}
	if value, ok := weu.mutation.ExecuteTime(); ok {
		_spec.SetField(workflowexecution.FieldExecuteTime, field.TypeTime, value)
	}
	if weu.mutation.ExecuteTimeCleared() {
		_spec.ClearField(workflowexecution.FieldExecuteTime, field.TypeTime)
	}
	if value, ok := weu.mutation.Times(); ok {
		_spec.SetField(workflowexecution.FieldTimes, field.TypeInt, value)
	}
	if value, ok := weu.mutation.AddedTimes(); ok {
		_spec.AddField(workflowexecution.FieldTimes, field.TypeInt, value)
	}
	if value, ok := weu.mutation.Duration(); ok {
		_spec.SetField(workflowexecution.FieldDuration, field.TypeInt, value)
	}
	if value, ok := weu.mutation.AddedDuration(); ok {
		_spec.AddField(workflowexecution.FieldDuration, field.TypeInt, value)
	}
	if value, ok := weu.mutation.Parallelism(); ok {
		_spec.SetField(workflowexecution.FieldParallelism, field.TypeInt, value)
	}
	if value, ok := weu.mutation.AddedParallelism(); ok {
		_spec.AddField(workflowexecution.FieldParallelism, field.TypeInt, value)
	}
	if value, ok := weu.mutation.Timeout(); ok {
		_spec.SetField(workflowexecution.FieldTimeout, field.TypeInt, value)
	}
	if value, ok := weu.mutation.AddedTimeout(); ok {
		_spec.AddField(workflowexecution.FieldTimeout, field.TypeInt, value)
	}
	if value, ok := weu.mutation.Trigger(); ok {
		_spec.SetField(workflowexecution.FieldTrigger, field.TypeJSON, value)
	}
	if weu.mutation.StagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowexecution.StagesTable,
			Columns: []string{workflowexecution.StagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowstageexecution.FieldID, field.TypeString),
			},
		}
		edge.Schema = weu.schemaConfig.WorkflowStageExecution
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weu.mutation.RemovedStagesIDs(); len(nodes) > 0 && !weu.mutation.StagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowexecution.StagesTable,
			Columns: []string{workflowexecution.StagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowstageexecution.FieldID, field.TypeString),
			},
		}
		edge.Schema = weu.schemaConfig.WorkflowStageExecution
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weu.mutation.StagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowexecution.StagesTable,
			Columns: []string{workflowexecution.StagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowstageexecution.FieldID, field.TypeString),
			},
		}
		edge.Schema = weu.schemaConfig.WorkflowStageExecution
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = weu.schemaConfig.WorkflowExecution
	ctx = internal.NewSchemaConfigContext(ctx, weu.schemaConfig)
	_spec.AddModifiers(weu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, weu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflowexecution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	weu.mutation.done = true
	return n, nil
}

// WorkflowExecutionUpdateOne is the builder for updating a single WorkflowExecution entity.
type WorkflowExecutionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *WorkflowExecutionMutation
	modifiers []func(*sql.UpdateBuilder)
	object    *WorkflowExecution
}

// SetDescription sets the "description" field.
func (weuo *WorkflowExecutionUpdateOne) SetDescription(s string) *WorkflowExecutionUpdateOne {
	weuo.mutation.SetDescription(s)
	return weuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (weuo *WorkflowExecutionUpdateOne) SetNillableDescription(s *string) *WorkflowExecutionUpdateOne {
	if s != nil {
		weuo.SetDescription(*s)
	}
	return weuo
}

// ClearDescription clears the value of the "description" field.
func (weuo *WorkflowExecutionUpdateOne) ClearDescription() *WorkflowExecutionUpdateOne {
	weuo.mutation.ClearDescription()
	return weuo
}

// SetLabels sets the "labels" field.
func (weuo *WorkflowExecutionUpdateOne) SetLabels(m map[string]string) *WorkflowExecutionUpdateOne {
	weuo.mutation.SetLabels(m)
	return weuo
}

// ClearLabels clears the value of the "labels" field.
func (weuo *WorkflowExecutionUpdateOne) ClearLabels() *WorkflowExecutionUpdateOne {
	weuo.mutation.ClearLabels()
	return weuo
}

// SetAnnotations sets the "annotations" field.
func (weuo *WorkflowExecutionUpdateOne) SetAnnotations(m map[string]string) *WorkflowExecutionUpdateOne {
	weuo.mutation.SetAnnotations(m)
	return weuo
}

// ClearAnnotations clears the value of the "annotations" field.
func (weuo *WorkflowExecutionUpdateOne) ClearAnnotations() *WorkflowExecutionUpdateOne {
	weuo.mutation.ClearAnnotations()
	return weuo
}

// SetUpdateTime sets the "update_time" field.
func (weuo *WorkflowExecutionUpdateOne) SetUpdateTime(t time.Time) *WorkflowExecutionUpdateOne {
	weuo.mutation.SetUpdateTime(t)
	return weuo
}

// SetStatus sets the "status" field.
func (weuo *WorkflowExecutionUpdateOne) SetStatus(s status.Status) *WorkflowExecutionUpdateOne {
	weuo.mutation.SetStatus(s)
	return weuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (weuo *WorkflowExecutionUpdateOne) SetNillableStatus(s *status.Status) *WorkflowExecutionUpdateOne {
	if s != nil {
		weuo.SetStatus(*s)
	}
	return weuo
}

// ClearStatus clears the value of the "status" field.
func (weuo *WorkflowExecutionUpdateOne) ClearStatus() *WorkflowExecutionUpdateOne {
	weuo.mutation.ClearStatus()
	return weuo
}

// SetVersion sets the "version" field.
func (weuo *WorkflowExecutionUpdateOne) SetVersion(i int) *WorkflowExecutionUpdateOne {
	weuo.mutation.ResetVersion()
	weuo.mutation.SetVersion(i)
	return weuo
}

// AddVersion adds i to the "version" field.
func (weuo *WorkflowExecutionUpdateOne) AddVersion(i int) *WorkflowExecutionUpdateOne {
	weuo.mutation.AddVersion(i)
	return weuo
}

// SetExecuteTime sets the "execute_time" field.
func (weuo *WorkflowExecutionUpdateOne) SetExecuteTime(t time.Time) *WorkflowExecutionUpdateOne {
	weuo.mutation.SetExecuteTime(t)
	return weuo
}

// SetNillableExecuteTime sets the "execute_time" field if the given value is not nil.
func (weuo *WorkflowExecutionUpdateOne) SetNillableExecuteTime(t *time.Time) *WorkflowExecutionUpdateOne {
	if t != nil {
		weuo.SetExecuteTime(*t)
	}
	return weuo
}

// ClearExecuteTime clears the value of the "execute_time" field.
func (weuo *WorkflowExecutionUpdateOne) ClearExecuteTime() *WorkflowExecutionUpdateOne {
	weuo.mutation.ClearExecuteTime()
	return weuo
}

// SetTimes sets the "times" field.
func (weuo *WorkflowExecutionUpdateOne) SetTimes(i int) *WorkflowExecutionUpdateOne {
	weuo.mutation.ResetTimes()
	weuo.mutation.SetTimes(i)
	return weuo
}

// SetNillableTimes sets the "times" field if the given value is not nil.
func (weuo *WorkflowExecutionUpdateOne) SetNillableTimes(i *int) *WorkflowExecutionUpdateOne {
	if i != nil {
		weuo.SetTimes(*i)
	}
	return weuo
}

// AddTimes adds i to the "times" field.
func (weuo *WorkflowExecutionUpdateOne) AddTimes(i int) *WorkflowExecutionUpdateOne {
	weuo.mutation.AddTimes(i)
	return weuo
}

// SetDuration sets the "duration" field.
func (weuo *WorkflowExecutionUpdateOne) SetDuration(i int) *WorkflowExecutionUpdateOne {
	weuo.mutation.ResetDuration()
	weuo.mutation.SetDuration(i)
	return weuo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (weuo *WorkflowExecutionUpdateOne) SetNillableDuration(i *int) *WorkflowExecutionUpdateOne {
	if i != nil {
		weuo.SetDuration(*i)
	}
	return weuo
}

// AddDuration adds i to the "duration" field.
func (weuo *WorkflowExecutionUpdateOne) AddDuration(i int) *WorkflowExecutionUpdateOne {
	weuo.mutation.AddDuration(i)
	return weuo
}

// SetParallelism sets the "parallelism" field.
func (weuo *WorkflowExecutionUpdateOne) SetParallelism(i int) *WorkflowExecutionUpdateOne {
	weuo.mutation.ResetParallelism()
	weuo.mutation.SetParallelism(i)
	return weuo
}

// SetNillableParallelism sets the "parallelism" field if the given value is not nil.
func (weuo *WorkflowExecutionUpdateOne) SetNillableParallelism(i *int) *WorkflowExecutionUpdateOne {
	if i != nil {
		weuo.SetParallelism(*i)
	}
	return weuo
}

// AddParallelism adds i to the "parallelism" field.
func (weuo *WorkflowExecutionUpdateOne) AddParallelism(i int) *WorkflowExecutionUpdateOne {
	weuo.mutation.AddParallelism(i)
	return weuo
}

// SetTimeout sets the "timeout" field.
func (weuo *WorkflowExecutionUpdateOne) SetTimeout(i int) *WorkflowExecutionUpdateOne {
	weuo.mutation.ResetTimeout()
	weuo.mutation.SetTimeout(i)
	return weuo
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (weuo *WorkflowExecutionUpdateOne) SetNillableTimeout(i *int) *WorkflowExecutionUpdateOne {
	if i != nil {
		weuo.SetTimeout(*i)
	}
	return weuo
}

// AddTimeout adds i to the "timeout" field.
func (weuo *WorkflowExecutionUpdateOne) AddTimeout(i int) *WorkflowExecutionUpdateOne {
	weuo.mutation.AddTimeout(i)
	return weuo
}

// SetTrigger sets the "trigger" field.
func (weuo *WorkflowExecutionUpdateOne) SetTrigger(tet types.WorkflowExecutionTrigger) *WorkflowExecutionUpdateOne {
	weuo.mutation.SetTrigger(tet)
	return weuo
}

// SetNillableTrigger sets the "trigger" field if the given value is not nil.
func (weuo *WorkflowExecutionUpdateOne) SetNillableTrigger(tet *types.WorkflowExecutionTrigger) *WorkflowExecutionUpdateOne {
	if tet != nil {
		weuo.SetTrigger(*tet)
	}
	return weuo
}

// AddStageIDs adds the "stages" edge to the WorkflowStageExecution entity by IDs.
func (weuo *WorkflowExecutionUpdateOne) AddStageIDs(ids ...object.ID) *WorkflowExecutionUpdateOne {
	weuo.mutation.AddStageIDs(ids...)
	return weuo
}

// AddStages adds the "stages" edges to the WorkflowStageExecution entity.
func (weuo *WorkflowExecutionUpdateOne) AddStages(w ...*WorkflowStageExecution) *WorkflowExecutionUpdateOne {
	ids := make([]object.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return weuo.AddStageIDs(ids...)
}

// Mutation returns the WorkflowExecutionMutation object of the builder.
func (weuo *WorkflowExecutionUpdateOne) Mutation() *WorkflowExecutionMutation {
	return weuo.mutation
}

// ClearStages clears all "stages" edges to the WorkflowStageExecution entity.
func (weuo *WorkflowExecutionUpdateOne) ClearStages() *WorkflowExecutionUpdateOne {
	weuo.mutation.ClearStages()
	return weuo
}

// RemoveStageIDs removes the "stages" edge to WorkflowStageExecution entities by IDs.
func (weuo *WorkflowExecutionUpdateOne) RemoveStageIDs(ids ...object.ID) *WorkflowExecutionUpdateOne {
	weuo.mutation.RemoveStageIDs(ids...)
	return weuo
}

// RemoveStages removes "stages" edges to WorkflowStageExecution entities.
func (weuo *WorkflowExecutionUpdateOne) RemoveStages(w ...*WorkflowStageExecution) *WorkflowExecutionUpdateOne {
	ids := make([]object.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return weuo.RemoveStageIDs(ids...)
}

// Where appends a list predicates to the WorkflowExecutionUpdate builder.
func (weuo *WorkflowExecutionUpdateOne) Where(ps ...predicate.WorkflowExecution) *WorkflowExecutionUpdateOne {
	weuo.mutation.Where(ps...)
	return weuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (weuo *WorkflowExecutionUpdateOne) Select(field string, fields ...string) *WorkflowExecutionUpdateOne {
	weuo.fields = append([]string{field}, fields...)
	return weuo
}

// Save executes the query and returns the updated WorkflowExecution entity.
func (weuo *WorkflowExecutionUpdateOne) Save(ctx context.Context) (*WorkflowExecution, error) {
	if err := weuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, weuo.sqlSave, weuo.mutation, weuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (weuo *WorkflowExecutionUpdateOne) SaveX(ctx context.Context) *WorkflowExecution {
	node, err := weuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (weuo *WorkflowExecutionUpdateOne) Exec(ctx context.Context) error {
	_, err := weuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (weuo *WorkflowExecutionUpdateOne) ExecX(ctx context.Context) {
	if err := weuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (weuo *WorkflowExecutionUpdateOne) defaults() error {
	if _, ok := weuo.mutation.UpdateTime(); !ok {
		if workflowexecution.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("model: uninitialized workflowexecution.UpdateDefaultUpdateTime (forgotten import model/runtime?)")
		}
		v := workflowexecution.UpdateDefaultUpdateTime()
		weuo.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (weuo *WorkflowExecutionUpdateOne) check() error {
	if v, ok := weuo.mutation.Version(); ok {
		if err := workflowexecution.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`model: validator failed for field "WorkflowExecution.version": %w`, err)}
		}
	}
	if v, ok := weuo.mutation.Times(); ok {
		if err := workflowexecution.TimesValidator(v); err != nil {
			return &ValidationError{Name: "times", err: fmt.Errorf(`model: validator failed for field "WorkflowExecution.times": %w`, err)}
		}
	}
	if v, ok := weuo.mutation.Duration(); ok {
		if err := workflowexecution.DurationValidator(v); err != nil {
			return &ValidationError{Name: "duration", err: fmt.Errorf(`model: validator failed for field "WorkflowExecution.duration": %w`, err)}
		}
	}
	if v, ok := weuo.mutation.Parallelism(); ok {
		if err := workflowexecution.ParallelismValidator(v); err != nil {
			return &ValidationError{Name: "parallelism", err: fmt.Errorf(`model: validator failed for field "WorkflowExecution.parallelism": %w`, err)}
		}
	}
	if v, ok := weuo.mutation.Timeout(); ok {
		if err := workflowexecution.TimeoutValidator(v); err != nil {
			return &ValidationError{Name: "timeout", err: fmt.Errorf(`model: validator failed for field "WorkflowExecution.timeout": %w`, err)}
		}
	}
	if _, ok := weuo.mutation.ProjectID(); weuo.mutation.ProjectCleared() && !ok {
		return errors.New(`model: clearing a required unique edge "WorkflowExecution.project"`)
	}
	if _, ok := weuo.mutation.WorkflowID(); weuo.mutation.WorkflowCleared() && !ok {
		return errors.New(`model: clearing a required unique edge "WorkflowExecution.workflow"`)
	}
	return nil
}

// Set is different from other Set* methods,
// it sets the value by judging the definition of each field within the entire object.
//
// For default fields, Set calls if the value changes from the original.
//
// For no default but required fields, Set calls if the value changes from the original.
//
// For no default but optional fields, Set calls if the value changes from the original,
// or clears if changes to zero.
//
// For example:
//
//	## Without Default
//
//	### Required
//
//	db.SetX(obj.X)
//
//	### Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   if _is_not_equal_(db.X, obj.X) {
//	      db.SetX(obj.X)
//	   }
//	} else {
//	   db.ClearX()
//	}
//
//	## With Default
//
//	if _is_zero_value_(obj.X) && _is_not_equal_(db.X, obj.X) {
//	   db.SetX(obj.X)
//	}
func (weuo *WorkflowExecutionUpdateOne) Set(obj *WorkflowExecution) *WorkflowExecutionUpdateOne {
	h := func(n ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			mt := m.(*WorkflowExecutionMutation)
			db, err := mt.Client().WorkflowExecution.Get(ctx, *mt.id)
			if err != nil {
				return nil, fmt.Errorf("failed getting WorkflowExecution with id: %v", *mt.id)
			}

			// Without Default.
			if obj.Description != "" {
				if db.Description != obj.Description {
					weuo.SetDescription(obj.Description)
				}
			} else {
				weuo.ClearDescription()
			}
			if !reflect.ValueOf(obj.Labels).IsZero() {
				if !reflect.DeepEqual(db.Labels, obj.Labels) {
					weuo.SetLabels(obj.Labels)
				}
			}
			if !reflect.ValueOf(obj.Annotations).IsZero() {
				if !reflect.DeepEqual(db.Annotations, obj.Annotations) {
					weuo.SetAnnotations(obj.Annotations)
				}
			}
			if !reflect.ValueOf(obj.Status).IsZero() {
				if !db.Status.Equal(obj.Status) {
					weuo.SetStatus(obj.Status)
				}
			}
			if db.Version != obj.Version {
				weuo.SetVersion(obj.Version)
			}
			if !obj.ExecuteTime.IsZero() {
				if !db.ExecuteTime.Equal(obj.ExecuteTime) {
					weuo.SetExecuteTime(obj.ExecuteTime)
				}
			}
			if db.Times != obj.Times {
				weuo.SetTimes(obj.Times)
			}
			if db.Duration != obj.Duration {
				weuo.SetDuration(obj.Duration)
			}
			if db.Parallelism != obj.Parallelism {
				weuo.SetParallelism(obj.Parallelism)
			}
			if db.Timeout != obj.Timeout {
				weuo.SetTimeout(obj.Timeout)
			}
			if !reflect.DeepEqual(db.Trigger, obj.Trigger) {
				weuo.SetTrigger(obj.Trigger)
			}

			// With Default.
			if (obj.UpdateTime != nil) && (!reflect.DeepEqual(db.UpdateTime, obj.UpdateTime)) {
				weuo.SetUpdateTime(*obj.UpdateTime)
			}

			// Record the given object.
			weuo.object = obj

			return n.Mutate(ctx, m)
		})
	}

	weuo.hooks = append(weuo.hooks, h)

	return weuo
}

// getClientSet returns the ClientSet for the given builder.
func (weuo *WorkflowExecutionUpdateOne) getClientSet() (mc ClientSet) {
	if _, ok := weuo.config.driver.(*txDriver); ok {
		tx := &Tx{config: weuo.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: weuo.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after updated the WorkflowExecution entity,
// which is always good for cascading update operations.
func (weuo *WorkflowExecutionUpdateOne) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *WorkflowExecution) error) (*WorkflowExecution, error) {
	obj, err := weuo.Save(ctx)
	if err != nil &&
		(weuo.object == nil || !errors.Is(err, stdsql.ErrNoRows)) {
		return nil, err
	}

	if len(cbs) == 0 {
		return obj, err
	}

	mc := weuo.getClientSet()

	if obj == nil {
		obj = weuo.object
	} else if x := weuo.object; x != nil {
		if _, set := weuo.mutation.Field(workflowexecution.FieldDescription); set {
			obj.Description = x.Description
		}
		if _, set := weuo.mutation.Field(workflowexecution.FieldLabels); set {
			obj.Labels = x.Labels
		}
		if _, set := weuo.mutation.Field(workflowexecution.FieldAnnotations); set {
			obj.Annotations = x.Annotations
		}
		if _, set := weuo.mutation.Field(workflowexecution.FieldStatus); set {
			obj.Status = x.Status
		}
		if _, set := weuo.mutation.Field(workflowexecution.FieldVersion); set {
			obj.Version = x.Version
		}
		if _, set := weuo.mutation.Field(workflowexecution.FieldExecuteTime); set {
			obj.ExecuteTime = x.ExecuteTime
		}
		if _, set := weuo.mutation.Field(workflowexecution.FieldTimes); set {
			obj.Times = x.Times
		}
		if _, set := weuo.mutation.Field(workflowexecution.FieldDuration); set {
			obj.Duration = x.Duration
		}
		if _, set := weuo.mutation.Field(workflowexecution.FieldParallelism); set {
			obj.Parallelism = x.Parallelism
		}
		if _, set := weuo.mutation.Field(workflowexecution.FieldTimeout); set {
			obj.Timeout = x.Timeout
		}
		if _, set := weuo.mutation.Field(workflowexecution.FieldTrigger); set {
			obj.Trigger = x.Trigger
		}
		obj.Edges = x.Edges
	}

	for i := range cbs {
		if err = cbs[i](ctx, mc, obj); err != nil {
			return nil, err
		}
	}

	return obj, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (weuo *WorkflowExecutionUpdateOne) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *WorkflowExecution) error) *WorkflowExecution {
	obj, err := weuo.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return obj
}

// ExecE calls the given function after executed the query,
// which is always good for cascading update operations.
func (weuo *WorkflowExecutionUpdateOne) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *WorkflowExecution) error) error {
	_, err := weuo.SaveE(ctx, cbs...)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (weuo *WorkflowExecutionUpdateOne) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *WorkflowExecution) error) {
	if err := weuo.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (weuo *WorkflowExecutionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WorkflowExecutionUpdateOne {
	weuo.modifiers = append(weuo.modifiers, modifiers...)
	return weuo
}

func (weuo *WorkflowExecutionUpdateOne) sqlSave(ctx context.Context) (_node *WorkflowExecution, err error) {
	if err := weuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workflowexecution.Table, workflowexecution.Columns, sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeString))
	id, ok := weuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`model: missing "WorkflowExecution.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := weuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workflowexecution.FieldID)
		for _, f := range fields {
			if !workflowexecution.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
			}
			if f != workflowexecution.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := weuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := weuo.mutation.Description(); ok {
		_spec.SetField(workflowexecution.FieldDescription, field.TypeString, value)
	}
	if weuo.mutation.DescriptionCleared() {
		_spec.ClearField(workflowexecution.FieldDescription, field.TypeString)
	}
	if value, ok := weuo.mutation.Labels(); ok {
		_spec.SetField(workflowexecution.FieldLabels, field.TypeJSON, value)
	}
	if weuo.mutation.LabelsCleared() {
		_spec.ClearField(workflowexecution.FieldLabels, field.TypeJSON)
	}
	if value, ok := weuo.mutation.Annotations(); ok {
		_spec.SetField(workflowexecution.FieldAnnotations, field.TypeJSON, value)
	}
	if weuo.mutation.AnnotationsCleared() {
		_spec.ClearField(workflowexecution.FieldAnnotations, field.TypeJSON)
	}
	if value, ok := weuo.mutation.UpdateTime(); ok {
		_spec.SetField(workflowexecution.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := weuo.mutation.Status(); ok {
		_spec.SetField(workflowexecution.FieldStatus, field.TypeJSON, value)
	}
	if weuo.mutation.StatusCleared() {
		_spec.ClearField(workflowexecution.FieldStatus, field.TypeJSON)
	}
	if value, ok := weuo.mutation.Version(); ok {
		_spec.SetField(workflowexecution.FieldVersion, field.TypeInt, value)
	}
	if value, ok := weuo.mutation.AddedVersion(); ok {
		_spec.AddField(workflowexecution.FieldVersion, field.TypeInt, value)
	}
	if value, ok := weuo.mutation.ExecuteTime(); ok {
		_spec.SetField(workflowexecution.FieldExecuteTime, field.TypeTime, value)
	}
	if weuo.mutation.ExecuteTimeCleared() {
		_spec.ClearField(workflowexecution.FieldExecuteTime, field.TypeTime)
	}
	if value, ok := weuo.mutation.Times(); ok {
		_spec.SetField(workflowexecution.FieldTimes, field.TypeInt, value)
	}
	if value, ok := weuo.mutation.AddedTimes(); ok {
		_spec.AddField(workflowexecution.FieldTimes, field.TypeInt, value)
	}
	if value, ok := weuo.mutation.Duration(); ok {
		_spec.SetField(workflowexecution.FieldDuration, field.TypeInt, value)
	}
	if value, ok := weuo.mutation.AddedDuration(); ok {
		_spec.AddField(workflowexecution.FieldDuration, field.TypeInt, value)
	}
	if value, ok := weuo.mutation.Parallelism(); ok {
		_spec.SetField(workflowexecution.FieldParallelism, field.TypeInt, value)
	}
	if value, ok := weuo.mutation.AddedParallelism(); ok {
		_spec.AddField(workflowexecution.FieldParallelism, field.TypeInt, value)
	}
	if value, ok := weuo.mutation.Timeout(); ok {
		_spec.SetField(workflowexecution.FieldTimeout, field.TypeInt, value)
	}
	if value, ok := weuo.mutation.AddedTimeout(); ok {
		_spec.AddField(workflowexecution.FieldTimeout, field.TypeInt, value)
	}
	if value, ok := weuo.mutation.Trigger(); ok {
		_spec.SetField(workflowexecution.FieldTrigger, field.TypeJSON, value)
	}
	if weuo.mutation.StagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowexecution.StagesTable,
			Columns: []string{workflowexecution.StagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowstageexecution.FieldID, field.TypeString),
			},
		}
		edge.Schema = weuo.schemaConfig.WorkflowStageExecution
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weuo.mutation.RemovedStagesIDs(); len(nodes) > 0 && !weuo.mutation.StagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowexecution.StagesTable,
			Columns: []string{workflowexecution.StagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowstageexecution.FieldID, field.TypeString),
			},
		}
		edge.Schema = weuo.schemaConfig.WorkflowStageExecution
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weuo.mutation.StagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowexecution.StagesTable,
			Columns: []string{workflowexecution.StagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowstageexecution.FieldID, field.TypeString),
			},
		}
		edge.Schema = weuo.schemaConfig.WorkflowStageExecution
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = weuo.schemaConfig.WorkflowExecution
	ctx = internal.NewSchemaConfigContext(ctx, weuo.schemaConfig)
	_spec.AddModifiers(weuo.modifiers...)
	_node = &WorkflowExecution{config: weuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, weuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflowexecution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	weuo.mutation.done = true
	return _node, nil
}
