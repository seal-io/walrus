// SPDX-FileCopyrightText: 2023 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus". DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/seal-io/walrus/pkg/dao/model/connector"
	"github.com/seal-io/walrus/pkg/dao/model/costreport"
	"github.com/seal-io/walrus/pkg/dao/model/environmentconnectorrelationship"
	"github.com/seal-io/walrus/pkg/dao/model/project"
	"github.com/seal-io/walrus/pkg/dao/model/resourcecomponent"
	"github.com/seal-io/walrus/pkg/dao/types"
	"github.com/seal-io/walrus/pkg/dao/types/crypto"
	"github.com/seal-io/walrus/pkg/dao/types/object"
	"github.com/seal-io/walrus/pkg/dao/types/status"
)

// ConnectorCreate is the builder for creating a Connector entity.
type ConnectorCreate struct {
	config
	mutation   *ConnectorMutation
	hooks      []Hook
	conflict   []sql.ConflictOption
	object     *Connector
	fromUpsert bool
}

// SetName sets the "name" field.
func (cc *ConnectorCreate) SetName(s string) *ConnectorCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetDescription sets the "description" field.
func (cc *ConnectorCreate) SetDescription(s string) *ConnectorCreate {
	cc.mutation.SetDescription(s)
	return cc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cc *ConnectorCreate) SetNillableDescription(s *string) *ConnectorCreate {
	if s != nil {
		cc.SetDescription(*s)
	}
	return cc
}

// SetLabels sets the "labels" field.
func (cc *ConnectorCreate) SetLabels(m map[string]string) *ConnectorCreate {
	cc.mutation.SetLabels(m)
	return cc
}

// SetAnnotations sets the "annotations" field.
func (cc *ConnectorCreate) SetAnnotations(m map[string]string) *ConnectorCreate {
	cc.mutation.SetAnnotations(m)
	return cc
}

// SetCreateTime sets the "create_time" field.
func (cc *ConnectorCreate) SetCreateTime(t time.Time) *ConnectorCreate {
	cc.mutation.SetCreateTime(t)
	return cc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cc *ConnectorCreate) SetNillableCreateTime(t *time.Time) *ConnectorCreate {
	if t != nil {
		cc.SetCreateTime(*t)
	}
	return cc
}

// SetUpdateTime sets the "update_time" field.
func (cc *ConnectorCreate) SetUpdateTime(t time.Time) *ConnectorCreate {
	cc.mutation.SetUpdateTime(t)
	return cc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (cc *ConnectorCreate) SetNillableUpdateTime(t *time.Time) *ConnectorCreate {
	if t != nil {
		cc.SetUpdateTime(*t)
	}
	return cc
}

// SetStatus sets the "status" field.
func (cc *ConnectorCreate) SetStatus(s status.Status) *ConnectorCreate {
	cc.mutation.SetStatus(s)
	return cc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cc *ConnectorCreate) SetNillableStatus(s *status.Status) *ConnectorCreate {
	if s != nil {
		cc.SetStatus(*s)
	}
	return cc
}

// SetProjectID sets the "project_id" field.
func (cc *ConnectorCreate) SetProjectID(o object.ID) *ConnectorCreate {
	cc.mutation.SetProjectID(o)
	return cc
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (cc *ConnectorCreate) SetNillableProjectID(o *object.ID) *ConnectorCreate {
	if o != nil {
		cc.SetProjectID(*o)
	}
	return cc
}

// SetCategory sets the "category" field.
func (cc *ConnectorCreate) SetCategory(s string) *ConnectorCreate {
	cc.mutation.SetCategory(s)
	return cc
}

// SetType sets the "type" field.
func (cc *ConnectorCreate) SetType(s string) *ConnectorCreate {
	cc.mutation.SetType(s)
	return cc
}

// SetApplicableEnvironmentType sets the "applicable_environment_type" field.
func (cc *ConnectorCreate) SetApplicableEnvironmentType(s string) *ConnectorCreate {
	cc.mutation.SetApplicableEnvironmentType(s)
	return cc
}

// SetConfigVersion sets the "config_version" field.
func (cc *ConnectorCreate) SetConfigVersion(s string) *ConnectorCreate {
	cc.mutation.SetConfigVersion(s)
	return cc
}

// SetConfigData sets the "config_data" field.
func (cc *ConnectorCreate) SetConfigData(c crypto.Properties) *ConnectorCreate {
	cc.mutation.SetConfigData(c)
	return cc
}

// SetEnableFinOps sets the "enable_fin_ops" field.
func (cc *ConnectorCreate) SetEnableFinOps(b bool) *ConnectorCreate {
	cc.mutation.SetEnableFinOps(b)
	return cc
}

// SetFinOpsCustomPricing sets the "fin_ops_custom_pricing" field.
func (cc *ConnectorCreate) SetFinOpsCustomPricing(tocp *types.FinOpsCustomPricing) *ConnectorCreate {
	cc.mutation.SetFinOpsCustomPricing(tocp)
	return cc
}

// SetID sets the "id" field.
func (cc *ConnectorCreate) SetID(o object.ID) *ConnectorCreate {
	cc.mutation.SetID(o)
	return cc
}

// SetProject sets the "project" edge to the Project entity.
func (cc *ConnectorCreate) SetProject(p *Project) *ConnectorCreate {
	return cc.SetProjectID(p.ID)
}

// AddEnvironmentIDs adds the "environments" edge to the EnvironmentConnectorRelationship entity by IDs.
func (cc *ConnectorCreate) AddEnvironmentIDs(ids ...object.ID) *ConnectorCreate {
	cc.mutation.AddEnvironmentIDs(ids...)
	return cc
}

// AddEnvironments adds the "environments" edges to the EnvironmentConnectorRelationship entity.
func (cc *ConnectorCreate) AddEnvironments(e ...*EnvironmentConnectorRelationship) *ConnectorCreate {
	ids := make([]object.ID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cc.AddEnvironmentIDs(ids...)
}

// AddResourceComponentIDs adds the "resource_components" edge to the ResourceComponent entity by IDs.
func (cc *ConnectorCreate) AddResourceComponentIDs(ids ...object.ID) *ConnectorCreate {
	cc.mutation.AddResourceComponentIDs(ids...)
	return cc
}

// AddResourceComponents adds the "resource_components" edges to the ResourceComponent entity.
func (cc *ConnectorCreate) AddResourceComponents(r ...*ResourceComponent) *ConnectorCreate {
	ids := make([]object.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cc.AddResourceComponentIDs(ids...)
}

// AddCostReportIDs adds the "cost_reports" edge to the CostReport entity by IDs.
func (cc *ConnectorCreate) AddCostReportIDs(ids ...int) *ConnectorCreate {
	cc.mutation.AddCostReportIDs(ids...)
	return cc
}

// AddCostReports adds the "cost_reports" edges to the CostReport entity.
func (cc *ConnectorCreate) AddCostReports(c ...*CostReport) *ConnectorCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddCostReportIDs(ids...)
}

// Mutation returns the ConnectorMutation object of the builder.
func (cc *ConnectorCreate) Mutation() *ConnectorMutation {
	return cc.mutation
}

// Save creates the Connector in the database.
func (cc *ConnectorCreate) Save(ctx context.Context) (*Connector, error) {
	if err := cc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ConnectorCreate) SaveX(ctx context.Context) *Connector {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ConnectorCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ConnectorCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ConnectorCreate) defaults() error {
	if _, ok := cc.mutation.Labels(); !ok {
		v := connector.DefaultLabels
		cc.mutation.SetLabels(v)
	}
	if _, ok := cc.mutation.Annotations(); !ok {
		v := connector.DefaultAnnotations
		cc.mutation.SetAnnotations(v)
	}
	if _, ok := cc.mutation.CreateTime(); !ok {
		if connector.DefaultCreateTime == nil {
			return fmt.Errorf("model: uninitialized connector.DefaultCreateTime (forgotten import model/runtime?)")
		}
		v := connector.DefaultCreateTime()
		cc.mutation.SetCreateTime(v)
	}
	if _, ok := cc.mutation.UpdateTime(); !ok {
		if connector.DefaultUpdateTime == nil {
			return fmt.Errorf("model: uninitialized connector.DefaultUpdateTime (forgotten import model/runtime?)")
		}
		v := connector.DefaultUpdateTime()
		cc.mutation.SetUpdateTime(v)
	}
	if _, ok := cc.mutation.ConfigData(); !ok {
		v := connector.DefaultConfigData
		cc.mutation.SetConfigData(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cc *ConnectorCreate) check() error {
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`model: missing required field "Connector.name"`)}
	}
	if v, ok := cc.mutation.Name(); ok {
		if err := connector.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`model: validator failed for field "Connector.name": %w`, err)}
		}
	}
	if _, ok := cc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`model: missing required field "Connector.create_time"`)}
	}
	if _, ok := cc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`model: missing required field "Connector.update_time"`)}
	}
	if _, ok := cc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`model: missing required field "Connector.category"`)}
	}
	if v, ok := cc.mutation.Category(); ok {
		if err := connector.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`model: validator failed for field "Connector.category": %w`, err)}
		}
	}
	if _, ok := cc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`model: missing required field "Connector.type"`)}
	}
	if v, ok := cc.mutation.GetType(); ok {
		if err := connector.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`model: validator failed for field "Connector.type": %w`, err)}
		}
	}
	if _, ok := cc.mutation.ApplicableEnvironmentType(); !ok {
		return &ValidationError{Name: "applicable_environment_type", err: errors.New(`model: missing required field "Connector.applicable_environment_type"`)}
	}
	if v, ok := cc.mutation.ApplicableEnvironmentType(); ok {
		if err := connector.ApplicableEnvironmentTypeValidator(v); err != nil {
			return &ValidationError{Name: "applicable_environment_type", err: fmt.Errorf(`model: validator failed for field "Connector.applicable_environment_type": %w`, err)}
		}
	}
	if _, ok := cc.mutation.ConfigVersion(); !ok {
		return &ValidationError{Name: "config_version", err: errors.New(`model: missing required field "Connector.config_version"`)}
	}
	if v, ok := cc.mutation.ConfigVersion(); ok {
		if err := connector.ConfigVersionValidator(v); err != nil {
			return &ValidationError{Name: "config_version", err: fmt.Errorf(`model: validator failed for field "Connector.config_version": %w`, err)}
		}
	}
	if _, ok := cc.mutation.EnableFinOps(); !ok {
		return &ValidationError{Name: "enable_fin_ops", err: errors.New(`model: missing required field "Connector.enable_fin_ops"`)}
	}
	return nil
}

func (cc *ConnectorCreate) sqlSave(ctx context.Context) (*Connector, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*object.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ConnectorCreate) createSpec() (*Connector, *sqlgraph.CreateSpec) {
	var (
		_node = &Connector{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(connector.Table, sqlgraph.NewFieldSpec(connector.FieldID, field.TypeString))
	)
	_spec.Schema = cc.schemaConfig.Connector
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(connector.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.Description(); ok {
		_spec.SetField(connector.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := cc.mutation.Labels(); ok {
		_spec.SetField(connector.FieldLabels, field.TypeJSON, value)
		_node.Labels = value
	}
	if value, ok := cc.mutation.Annotations(); ok {
		_spec.SetField(connector.FieldAnnotations, field.TypeJSON, value)
		_node.Annotations = value
	}
	if value, ok := cc.mutation.CreateTime(); ok {
		_spec.SetField(connector.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = &value
	}
	if value, ok := cc.mutation.UpdateTime(); ok {
		_spec.SetField(connector.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = &value
	}
	if value, ok := cc.mutation.Status(); ok {
		_spec.SetField(connector.FieldStatus, field.TypeJSON, value)
		_node.Status = value
	}
	if value, ok := cc.mutation.Category(); ok {
		_spec.SetField(connector.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := cc.mutation.GetType(); ok {
		_spec.SetField(connector.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := cc.mutation.ApplicableEnvironmentType(); ok {
		_spec.SetField(connector.FieldApplicableEnvironmentType, field.TypeString, value)
		_node.ApplicableEnvironmentType = value
	}
	if value, ok := cc.mutation.ConfigVersion(); ok {
		_spec.SetField(connector.FieldConfigVersion, field.TypeString, value)
		_node.ConfigVersion = value
	}
	if value, ok := cc.mutation.ConfigData(); ok {
		_spec.SetField(connector.FieldConfigData, field.TypeOther, value)
		_node.ConfigData = value
	}
	if value, ok := cc.mutation.EnableFinOps(); ok {
		_spec.SetField(connector.FieldEnableFinOps, field.TypeBool, value)
		_node.EnableFinOps = value
	}
	if value, ok := cc.mutation.FinOpsCustomPricing(); ok {
		_spec.SetField(connector.FieldFinOpsCustomPricing, field.TypeJSON, value)
		_node.FinOpsCustomPricing = value
	}
	if nodes := cc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   connector.ProjectTable,
			Columns: []string{connector.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		edge.Schema = cc.schemaConfig.Connector
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.EnvironmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   connector.EnvironmentsTable,
			Columns: []string{connector.EnvironmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environmentconnectorrelationship.FieldID, field.TypeString),
			},
		}
		edge.Schema = cc.schemaConfig.EnvironmentConnectorRelationship
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ResourceComponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connector.ResourceComponentsTable,
			Columns: []string{connector.ResourceComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourcecomponent.FieldID, field.TypeString),
			},
		}
		edge.Schema = cc.schemaConfig.ResourceComponent
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CostReportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connector.CostReportsTable,
			Columns: []string{connector.CostReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costreport.FieldID, field.TypeInt),
			},
		}
		edge.Schema = cc.schemaConfig.CostReport
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// Set is different from other Set* methods,
// it sets the value by judging the definition of each field within the entire object.
//
// For required fields, Set calls directly.
//
// For optional fields, Set calls if the value is not zero.
//
// For example:
//
//	## Required
//
//	db.SetX(obj.X)
//
//	## Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (cc *ConnectorCreate) Set(obj *Connector) *ConnectorCreate {
	// Required.
	cc.SetName(obj.Name)
	cc.SetCategory(obj.Category)
	cc.SetType(obj.Type)
	cc.SetApplicableEnvironmentType(obj.ApplicableEnvironmentType)
	cc.SetConfigVersion(obj.ConfigVersion)
	cc.SetEnableFinOps(obj.EnableFinOps)

	// Optional.
	if obj.Description != "" {
		cc.SetDescription(obj.Description)
	}
	if !reflect.ValueOf(obj.Labels).IsZero() {
		cc.SetLabels(obj.Labels)
	}
	if !reflect.ValueOf(obj.Annotations).IsZero() {
		cc.SetAnnotations(obj.Annotations)
	}
	if obj.CreateTime != nil {
		cc.SetCreateTime(*obj.CreateTime)
	}
	if obj.UpdateTime != nil {
		cc.SetUpdateTime(*obj.UpdateTime)
	}
	if !reflect.ValueOf(obj.Status).IsZero() {
		cc.SetStatus(obj.Status)
	}
	if obj.ProjectID != "" {
		cc.SetProjectID(obj.ProjectID)
	}
	if !reflect.ValueOf(obj.ConfigData).IsZero() {
		cc.SetConfigData(obj.ConfigData)
	}
	if obj.FinOpsCustomPricing != nil && !obj.FinOpsCustomPricing.IsZero() {
		cc.SetFinOpsCustomPricing(obj.FinOpsCustomPricing)
	}

	// Record the given object.
	cc.object = obj

	return cc
}

// getClientSet returns the ClientSet for the given builder.
func (cc *ConnectorCreate) getClientSet() (mc ClientSet) {
	if _, ok := cc.config.driver.(*txDriver); ok {
		tx := &Tx{config: cc.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: cc.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after created the Connector entity,
// which is always good for cascading create operations.
func (cc *ConnectorCreate) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *Connector) error) (*Connector, error) {
	obj, err := cc.Save(ctx)
	if err != nil {
		return nil, err
	}

	if len(cbs) == 0 {
		return obj, err
	}

	mc := cc.getClientSet()
	if cc.fromUpsert {
		q := mc.Connectors().Query().
			Where(
				connector.Name(obj.Name),
			)
		if obj.ProjectID != "" {
			q.Where(connector.ProjectID(obj.ProjectID))
		} else {
			q.Where(connector.ProjectIDIsNil())
		}
		obj.ID, err = q.OnlyID(ctx)
		if err != nil {
			return nil, fmt.Errorf("model: failed to query id of Connector entity: %w", err)
		}
	}

	if x := cc.object; x != nil {
		if _, set := cc.mutation.Field(connector.FieldName); set {
			obj.Name = x.Name
		}
		if _, set := cc.mutation.Field(connector.FieldDescription); set {
			obj.Description = x.Description
		}
		if _, set := cc.mutation.Field(connector.FieldStatus); set {
			obj.Status = x.Status
		}
		if _, set := cc.mutation.Field(connector.FieldProjectID); set {
			obj.ProjectID = x.ProjectID
		}
		if _, set := cc.mutation.Field(connector.FieldCategory); set {
			obj.Category = x.Category
		}
		if _, set := cc.mutation.Field(connector.FieldType); set {
			obj.Type = x.Type
		}
		if _, set := cc.mutation.Field(connector.FieldApplicableEnvironmentType); set {
			obj.ApplicableEnvironmentType = x.ApplicableEnvironmentType
		}
		if _, set := cc.mutation.Field(connector.FieldConfigVersion); set {
			obj.ConfigVersion = x.ConfigVersion
		}
		if _, set := cc.mutation.Field(connector.FieldEnableFinOps); set {
			obj.EnableFinOps = x.EnableFinOps
		}
		if _, set := cc.mutation.Field(connector.FieldFinOpsCustomPricing); set {
			obj.FinOpsCustomPricing = x.FinOpsCustomPricing
		}
		obj.Edges = x.Edges
	}

	for i := range cbs {
		if err = cbs[i](ctx, mc, obj); err != nil {
			return nil, err
		}
	}

	return obj, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (cc *ConnectorCreate) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *Connector) error) *Connector {
	obj, err := cc.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return obj
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (cc *ConnectorCreate) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *Connector) error) error {
	_, err := cc.SaveE(ctx, cbs...)
	return err
}

// ExecEX is like ExecE, but panics if an error occurs.
func (cc *ConnectorCreate) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *Connector) error) {
	if err := cc.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// Set leverages the ConnectorCreate Set method,
// it sets the value by judging the definition of each field within the entire item of the given list.
//
// For required fields, Set calls directly.
//
// For optional fields, Set calls if the value is not zero.
//
// For example:
//
//	## Required
//
//	db.SetX(obj.X)
//
//	## Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (ccb *ConnectorCreateBulk) Set(objs ...*Connector) *ConnectorCreateBulk {
	if len(objs) != 0 {
		client := NewConnectorClient(ccb.config)

		ccb.builders = make([]*ConnectorCreate, len(objs))
		for i := range objs {
			ccb.builders[i] = client.Create().Set(objs[i])
		}

		// Record the given objects.
		ccb.objects = objs
	}

	return ccb
}

// getClientSet returns the ClientSet for the given builder.
func (ccb *ConnectorCreateBulk) getClientSet() (mc ClientSet) {
	if _, ok := ccb.config.driver.(*txDriver); ok {
		tx := &Tx{config: ccb.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: ccb.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after created the Connector entities,
// which is always good for cascading create operations.
func (ccb *ConnectorCreateBulk) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *Connector) error) ([]*Connector, error) {
	objs, err := ccb.Save(ctx)
	if err != nil {
		return nil, err
	}

	if len(cbs) == 0 {
		return objs, err
	}

	mc := ccb.getClientSet()
	if ccb.fromUpsert {
		for i := range objs {
			obj := objs[i]
			q := mc.Connectors().Query().
				Where(
					connector.Name(obj.Name),
				)
			if obj.ProjectID != "" {
				q.Where(connector.ProjectID(obj.ProjectID))
			} else {
				q.Where(connector.ProjectIDIsNil())
			}
			objs[i].ID, err = q.OnlyID(ctx)
			if err != nil {
				return nil, fmt.Errorf("model: failed to query id of Connector entity: %w", err)
			}
		}
	}

	if x := ccb.objects; x != nil {
		for i := range x {
			if _, set := ccb.builders[i].mutation.Field(connector.FieldName); set {
				objs[i].Name = x[i].Name
			}
			if _, set := ccb.builders[i].mutation.Field(connector.FieldDescription); set {
				objs[i].Description = x[i].Description
			}
			if _, set := ccb.builders[i].mutation.Field(connector.FieldStatus); set {
				objs[i].Status = x[i].Status
			}
			if _, set := ccb.builders[i].mutation.Field(connector.FieldProjectID); set {
				objs[i].ProjectID = x[i].ProjectID
			}
			if _, set := ccb.builders[i].mutation.Field(connector.FieldCategory); set {
				objs[i].Category = x[i].Category
			}
			if _, set := ccb.builders[i].mutation.Field(connector.FieldType); set {
				objs[i].Type = x[i].Type
			}
			if _, set := ccb.builders[i].mutation.Field(connector.FieldApplicableEnvironmentType); set {
				objs[i].ApplicableEnvironmentType = x[i].ApplicableEnvironmentType
			}
			if _, set := ccb.builders[i].mutation.Field(connector.FieldConfigVersion); set {
				objs[i].ConfigVersion = x[i].ConfigVersion
			}
			if _, set := ccb.builders[i].mutation.Field(connector.FieldEnableFinOps); set {
				objs[i].EnableFinOps = x[i].EnableFinOps
			}
			if _, set := ccb.builders[i].mutation.Field(connector.FieldFinOpsCustomPricing); set {
				objs[i].FinOpsCustomPricing = x[i].FinOpsCustomPricing
			}
			objs[i].Edges = x[i].Edges
		}
	}

	for i := range objs {
		for j := range cbs {
			if err = cbs[j](ctx, mc, objs[i]); err != nil {
				return nil, err
			}
		}
	}

	return objs, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (ccb *ConnectorCreateBulk) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *Connector) error) []*Connector {
	objs, err := ccb.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return objs
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (ccb *ConnectorCreateBulk) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *Connector) error) error {
	_, err := ccb.SaveE(ctx, cbs...)
	return err
}

// ExecEX is like ExecE, but panics if an error occurs.
func (ccb *ConnectorCreateBulk) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *Connector) error) {
	if err := ccb.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (u *ConnectorUpsertOne) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *Connector) error) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for ConnectorUpsertOne.OnConflict")
	}
	u.create.fromUpsert = true
	return u.create.ExecE(ctx, cbs...)
}

// ExecEX is like ExecE, but panics if an error occurs.
func (u *ConnectorUpsertOne) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *Connector) error) {
	if err := u.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (u *ConnectorUpsertBulk) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *Connector) error) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model: OnConflict was set for builder %d. Set it on the ConnectorUpsertBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for ConnectorUpsertBulk.OnConflict")
	}
	u.create.fromUpsert = true
	return u.create.ExecE(ctx, cbs...)
}

// ExecEX is like ExecE, but panics if an error occurs.
func (u *ConnectorUpsertBulk) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *Connector) error) {
	if err := u.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Connector.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ConnectorUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (cc *ConnectorCreate) OnConflict(opts ...sql.ConflictOption) *ConnectorUpsertOne {
	cc.conflict = opts
	return &ConnectorUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Connector.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *ConnectorCreate) OnConflictColumns(columns ...string) *ConnectorUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &ConnectorUpsertOne{
		create: cc,
	}
}

type (
	// ConnectorUpsertOne is the builder for "upsert"-ing
	//  one Connector node.
	ConnectorUpsertOne struct {
		create *ConnectorCreate
	}

	// ConnectorUpsert is the "OnConflict" setter.
	ConnectorUpsert struct {
		*sql.UpdateSet
	}
)

// SetDescription sets the "description" field.
func (u *ConnectorUpsert) SetDescription(v string) *ConnectorUpsert {
	u.Set(connector.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ConnectorUpsert) UpdateDescription() *ConnectorUpsert {
	u.SetExcluded(connector.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *ConnectorUpsert) ClearDescription() *ConnectorUpsert {
	u.SetNull(connector.FieldDescription)
	return u
}

// SetLabels sets the "labels" field.
func (u *ConnectorUpsert) SetLabels(v map[string]string) *ConnectorUpsert {
	u.Set(connector.FieldLabels, v)
	return u
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *ConnectorUpsert) UpdateLabels() *ConnectorUpsert {
	u.SetExcluded(connector.FieldLabels)
	return u
}

// ClearLabels clears the value of the "labels" field.
func (u *ConnectorUpsert) ClearLabels() *ConnectorUpsert {
	u.SetNull(connector.FieldLabels)
	return u
}

// SetAnnotations sets the "annotations" field.
func (u *ConnectorUpsert) SetAnnotations(v map[string]string) *ConnectorUpsert {
	u.Set(connector.FieldAnnotations, v)
	return u
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *ConnectorUpsert) UpdateAnnotations() *ConnectorUpsert {
	u.SetExcluded(connector.FieldAnnotations)
	return u
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *ConnectorUpsert) ClearAnnotations() *ConnectorUpsert {
	u.SetNull(connector.FieldAnnotations)
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *ConnectorUpsert) SetUpdateTime(v time.Time) *ConnectorUpsert {
	u.Set(connector.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *ConnectorUpsert) UpdateUpdateTime() *ConnectorUpsert {
	u.SetExcluded(connector.FieldUpdateTime)
	return u
}

// SetStatus sets the "status" field.
func (u *ConnectorUpsert) SetStatus(v status.Status) *ConnectorUpsert {
	u.Set(connector.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ConnectorUpsert) UpdateStatus() *ConnectorUpsert {
	u.SetExcluded(connector.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *ConnectorUpsert) ClearStatus() *ConnectorUpsert {
	u.SetNull(connector.FieldStatus)
	return u
}

// SetConfigVersion sets the "config_version" field.
func (u *ConnectorUpsert) SetConfigVersion(v string) *ConnectorUpsert {
	u.Set(connector.FieldConfigVersion, v)
	return u
}

// UpdateConfigVersion sets the "config_version" field to the value that was provided on create.
func (u *ConnectorUpsert) UpdateConfigVersion() *ConnectorUpsert {
	u.SetExcluded(connector.FieldConfigVersion)
	return u
}

// SetConfigData sets the "config_data" field.
func (u *ConnectorUpsert) SetConfigData(v crypto.Properties) *ConnectorUpsert {
	u.Set(connector.FieldConfigData, v)
	return u
}

// UpdateConfigData sets the "config_data" field to the value that was provided on create.
func (u *ConnectorUpsert) UpdateConfigData() *ConnectorUpsert {
	u.SetExcluded(connector.FieldConfigData)
	return u
}

// ClearConfigData clears the value of the "config_data" field.
func (u *ConnectorUpsert) ClearConfigData() *ConnectorUpsert {
	u.SetNull(connector.FieldConfigData)
	return u
}

// SetEnableFinOps sets the "enable_fin_ops" field.
func (u *ConnectorUpsert) SetEnableFinOps(v bool) *ConnectorUpsert {
	u.Set(connector.FieldEnableFinOps, v)
	return u
}

// UpdateEnableFinOps sets the "enable_fin_ops" field to the value that was provided on create.
func (u *ConnectorUpsert) UpdateEnableFinOps() *ConnectorUpsert {
	u.SetExcluded(connector.FieldEnableFinOps)
	return u
}

// SetFinOpsCustomPricing sets the "fin_ops_custom_pricing" field.
func (u *ConnectorUpsert) SetFinOpsCustomPricing(v *types.FinOpsCustomPricing) *ConnectorUpsert {
	u.Set(connector.FieldFinOpsCustomPricing, v)
	return u
}

// UpdateFinOpsCustomPricing sets the "fin_ops_custom_pricing" field to the value that was provided on create.
func (u *ConnectorUpsert) UpdateFinOpsCustomPricing() *ConnectorUpsert {
	u.SetExcluded(connector.FieldFinOpsCustomPricing)
	return u
}

// ClearFinOpsCustomPricing clears the value of the "fin_ops_custom_pricing" field.
func (u *ConnectorUpsert) ClearFinOpsCustomPricing() *ConnectorUpsert {
	u.SetNull(connector.FieldFinOpsCustomPricing)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Connector.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(connector.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ConnectorUpsertOne) UpdateNewValues() *ConnectorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(connector.FieldID)
		}
		if _, exists := u.create.mutation.Name(); exists {
			s.SetIgnore(connector.FieldName)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(connector.FieldCreateTime)
		}
		if _, exists := u.create.mutation.ProjectID(); exists {
			s.SetIgnore(connector.FieldProjectID)
		}
		if _, exists := u.create.mutation.Category(); exists {
			s.SetIgnore(connector.FieldCategory)
		}
		if _, exists := u.create.mutation.GetType(); exists {
			s.SetIgnore(connector.FieldType)
		}
		if _, exists := u.create.mutation.ApplicableEnvironmentType(); exists {
			s.SetIgnore(connector.FieldApplicableEnvironmentType)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Connector.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ConnectorUpsertOne) Ignore() *ConnectorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ConnectorUpsertOne) DoNothing() *ConnectorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ConnectorCreate.OnConflict
// documentation for more info.
func (u *ConnectorUpsertOne) Update(set func(*ConnectorUpsert)) *ConnectorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ConnectorUpsert{UpdateSet: update})
	}))
	return u
}

// SetDescription sets the "description" field.
func (u *ConnectorUpsertOne) SetDescription(v string) *ConnectorUpsertOne {
	return u.Update(func(s *ConnectorUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ConnectorUpsertOne) UpdateDescription() *ConnectorUpsertOne {
	return u.Update(func(s *ConnectorUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ConnectorUpsertOne) ClearDescription() *ConnectorUpsertOne {
	return u.Update(func(s *ConnectorUpsert) {
		s.ClearDescription()
	})
}

// SetLabels sets the "labels" field.
func (u *ConnectorUpsertOne) SetLabels(v map[string]string) *ConnectorUpsertOne {
	return u.Update(func(s *ConnectorUpsert) {
		s.SetLabels(v)
	})
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *ConnectorUpsertOne) UpdateLabels() *ConnectorUpsertOne {
	return u.Update(func(s *ConnectorUpsert) {
		s.UpdateLabels()
	})
}

// ClearLabels clears the value of the "labels" field.
func (u *ConnectorUpsertOne) ClearLabels() *ConnectorUpsertOne {
	return u.Update(func(s *ConnectorUpsert) {
		s.ClearLabels()
	})
}

// SetAnnotations sets the "annotations" field.
func (u *ConnectorUpsertOne) SetAnnotations(v map[string]string) *ConnectorUpsertOne {
	return u.Update(func(s *ConnectorUpsert) {
		s.SetAnnotations(v)
	})
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *ConnectorUpsertOne) UpdateAnnotations() *ConnectorUpsertOne {
	return u.Update(func(s *ConnectorUpsert) {
		s.UpdateAnnotations()
	})
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *ConnectorUpsertOne) ClearAnnotations() *ConnectorUpsertOne {
	return u.Update(func(s *ConnectorUpsert) {
		s.ClearAnnotations()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *ConnectorUpsertOne) SetUpdateTime(v time.Time) *ConnectorUpsertOne {
	return u.Update(func(s *ConnectorUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *ConnectorUpsertOne) UpdateUpdateTime() *ConnectorUpsertOne {
	return u.Update(func(s *ConnectorUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetStatus sets the "status" field.
func (u *ConnectorUpsertOne) SetStatus(v status.Status) *ConnectorUpsertOne {
	return u.Update(func(s *ConnectorUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ConnectorUpsertOne) UpdateStatus() *ConnectorUpsertOne {
	return u.Update(func(s *ConnectorUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *ConnectorUpsertOne) ClearStatus() *ConnectorUpsertOne {
	return u.Update(func(s *ConnectorUpsert) {
		s.ClearStatus()
	})
}

// SetConfigVersion sets the "config_version" field.
func (u *ConnectorUpsertOne) SetConfigVersion(v string) *ConnectorUpsertOne {
	return u.Update(func(s *ConnectorUpsert) {
		s.SetConfigVersion(v)
	})
}

// UpdateConfigVersion sets the "config_version" field to the value that was provided on create.
func (u *ConnectorUpsertOne) UpdateConfigVersion() *ConnectorUpsertOne {
	return u.Update(func(s *ConnectorUpsert) {
		s.UpdateConfigVersion()
	})
}

// SetConfigData sets the "config_data" field.
func (u *ConnectorUpsertOne) SetConfigData(v crypto.Properties) *ConnectorUpsertOne {
	return u.Update(func(s *ConnectorUpsert) {
		s.SetConfigData(v)
	})
}

// UpdateConfigData sets the "config_data" field to the value that was provided on create.
func (u *ConnectorUpsertOne) UpdateConfigData() *ConnectorUpsertOne {
	return u.Update(func(s *ConnectorUpsert) {
		s.UpdateConfigData()
	})
}

// ClearConfigData clears the value of the "config_data" field.
func (u *ConnectorUpsertOne) ClearConfigData() *ConnectorUpsertOne {
	return u.Update(func(s *ConnectorUpsert) {
		s.ClearConfigData()
	})
}

// SetEnableFinOps sets the "enable_fin_ops" field.
func (u *ConnectorUpsertOne) SetEnableFinOps(v bool) *ConnectorUpsertOne {
	return u.Update(func(s *ConnectorUpsert) {
		s.SetEnableFinOps(v)
	})
}

// UpdateEnableFinOps sets the "enable_fin_ops" field to the value that was provided on create.
func (u *ConnectorUpsertOne) UpdateEnableFinOps() *ConnectorUpsertOne {
	return u.Update(func(s *ConnectorUpsert) {
		s.UpdateEnableFinOps()
	})
}

// SetFinOpsCustomPricing sets the "fin_ops_custom_pricing" field.
func (u *ConnectorUpsertOne) SetFinOpsCustomPricing(v *types.FinOpsCustomPricing) *ConnectorUpsertOne {
	return u.Update(func(s *ConnectorUpsert) {
		s.SetFinOpsCustomPricing(v)
	})
}

// UpdateFinOpsCustomPricing sets the "fin_ops_custom_pricing" field to the value that was provided on create.
func (u *ConnectorUpsertOne) UpdateFinOpsCustomPricing() *ConnectorUpsertOne {
	return u.Update(func(s *ConnectorUpsert) {
		s.UpdateFinOpsCustomPricing()
	})
}

// ClearFinOpsCustomPricing clears the value of the "fin_ops_custom_pricing" field.
func (u *ConnectorUpsertOne) ClearFinOpsCustomPricing() *ConnectorUpsertOne {
	return u.Update(func(s *ConnectorUpsert) {
		s.ClearFinOpsCustomPricing()
	})
}

// Exec executes the query.
func (u *ConnectorUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for ConnectorCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ConnectorUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ConnectorUpsertOne) ID(ctx context.Context) (id object.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("model: ConnectorUpsertOne.ID is not supported by MySQL driver. Use ConnectorUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ConnectorUpsertOne) IDX(ctx context.Context) object.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ConnectorCreateBulk is the builder for creating many Connector entities in bulk.
type ConnectorCreateBulk struct {
	config
	err        error
	builders   []*ConnectorCreate
	conflict   []sql.ConflictOption
	objects    []*Connector
	fromUpsert bool
}

// Save creates the Connector entities in the database.
func (ccb *ConnectorCreateBulk) Save(ctx context.Context) ([]*Connector, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Connector, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ConnectorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ConnectorCreateBulk) SaveX(ctx context.Context) []*Connector {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ConnectorCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ConnectorCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Connector.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ConnectorUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (ccb *ConnectorCreateBulk) OnConflict(opts ...sql.ConflictOption) *ConnectorUpsertBulk {
	ccb.conflict = opts
	return &ConnectorUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Connector.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *ConnectorCreateBulk) OnConflictColumns(columns ...string) *ConnectorUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &ConnectorUpsertBulk{
		create: ccb,
	}
}

// ConnectorUpsertBulk is the builder for "upsert"-ing
// a bulk of Connector nodes.
type ConnectorUpsertBulk struct {
	create *ConnectorCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Connector.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(connector.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ConnectorUpsertBulk) UpdateNewValues() *ConnectorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(connector.FieldID)
			}
			if _, exists := b.mutation.Name(); exists {
				s.SetIgnore(connector.FieldName)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(connector.FieldCreateTime)
			}
			if _, exists := b.mutation.ProjectID(); exists {
				s.SetIgnore(connector.FieldProjectID)
			}
			if _, exists := b.mutation.Category(); exists {
				s.SetIgnore(connector.FieldCategory)
			}
			if _, exists := b.mutation.GetType(); exists {
				s.SetIgnore(connector.FieldType)
			}
			if _, exists := b.mutation.ApplicableEnvironmentType(); exists {
				s.SetIgnore(connector.FieldApplicableEnvironmentType)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Connector.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ConnectorUpsertBulk) Ignore() *ConnectorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ConnectorUpsertBulk) DoNothing() *ConnectorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ConnectorCreateBulk.OnConflict
// documentation for more info.
func (u *ConnectorUpsertBulk) Update(set func(*ConnectorUpsert)) *ConnectorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ConnectorUpsert{UpdateSet: update})
	}))
	return u
}

// SetDescription sets the "description" field.
func (u *ConnectorUpsertBulk) SetDescription(v string) *ConnectorUpsertBulk {
	return u.Update(func(s *ConnectorUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ConnectorUpsertBulk) UpdateDescription() *ConnectorUpsertBulk {
	return u.Update(func(s *ConnectorUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ConnectorUpsertBulk) ClearDescription() *ConnectorUpsertBulk {
	return u.Update(func(s *ConnectorUpsert) {
		s.ClearDescription()
	})
}

// SetLabels sets the "labels" field.
func (u *ConnectorUpsertBulk) SetLabels(v map[string]string) *ConnectorUpsertBulk {
	return u.Update(func(s *ConnectorUpsert) {
		s.SetLabels(v)
	})
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *ConnectorUpsertBulk) UpdateLabels() *ConnectorUpsertBulk {
	return u.Update(func(s *ConnectorUpsert) {
		s.UpdateLabels()
	})
}

// ClearLabels clears the value of the "labels" field.
func (u *ConnectorUpsertBulk) ClearLabels() *ConnectorUpsertBulk {
	return u.Update(func(s *ConnectorUpsert) {
		s.ClearLabels()
	})
}

// SetAnnotations sets the "annotations" field.
func (u *ConnectorUpsertBulk) SetAnnotations(v map[string]string) *ConnectorUpsertBulk {
	return u.Update(func(s *ConnectorUpsert) {
		s.SetAnnotations(v)
	})
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *ConnectorUpsertBulk) UpdateAnnotations() *ConnectorUpsertBulk {
	return u.Update(func(s *ConnectorUpsert) {
		s.UpdateAnnotations()
	})
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *ConnectorUpsertBulk) ClearAnnotations() *ConnectorUpsertBulk {
	return u.Update(func(s *ConnectorUpsert) {
		s.ClearAnnotations()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *ConnectorUpsertBulk) SetUpdateTime(v time.Time) *ConnectorUpsertBulk {
	return u.Update(func(s *ConnectorUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *ConnectorUpsertBulk) UpdateUpdateTime() *ConnectorUpsertBulk {
	return u.Update(func(s *ConnectorUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetStatus sets the "status" field.
func (u *ConnectorUpsertBulk) SetStatus(v status.Status) *ConnectorUpsertBulk {
	return u.Update(func(s *ConnectorUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ConnectorUpsertBulk) UpdateStatus() *ConnectorUpsertBulk {
	return u.Update(func(s *ConnectorUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *ConnectorUpsertBulk) ClearStatus() *ConnectorUpsertBulk {
	return u.Update(func(s *ConnectorUpsert) {
		s.ClearStatus()
	})
}

// SetConfigVersion sets the "config_version" field.
func (u *ConnectorUpsertBulk) SetConfigVersion(v string) *ConnectorUpsertBulk {
	return u.Update(func(s *ConnectorUpsert) {
		s.SetConfigVersion(v)
	})
}

// UpdateConfigVersion sets the "config_version" field to the value that was provided on create.
func (u *ConnectorUpsertBulk) UpdateConfigVersion() *ConnectorUpsertBulk {
	return u.Update(func(s *ConnectorUpsert) {
		s.UpdateConfigVersion()
	})
}

// SetConfigData sets the "config_data" field.
func (u *ConnectorUpsertBulk) SetConfigData(v crypto.Properties) *ConnectorUpsertBulk {
	return u.Update(func(s *ConnectorUpsert) {
		s.SetConfigData(v)
	})
}

// UpdateConfigData sets the "config_data" field to the value that was provided on create.
func (u *ConnectorUpsertBulk) UpdateConfigData() *ConnectorUpsertBulk {
	return u.Update(func(s *ConnectorUpsert) {
		s.UpdateConfigData()
	})
}

// ClearConfigData clears the value of the "config_data" field.
func (u *ConnectorUpsertBulk) ClearConfigData() *ConnectorUpsertBulk {
	return u.Update(func(s *ConnectorUpsert) {
		s.ClearConfigData()
	})
}

// SetEnableFinOps sets the "enable_fin_ops" field.
func (u *ConnectorUpsertBulk) SetEnableFinOps(v bool) *ConnectorUpsertBulk {
	return u.Update(func(s *ConnectorUpsert) {
		s.SetEnableFinOps(v)
	})
}

// UpdateEnableFinOps sets the "enable_fin_ops" field to the value that was provided on create.
func (u *ConnectorUpsertBulk) UpdateEnableFinOps() *ConnectorUpsertBulk {
	return u.Update(func(s *ConnectorUpsert) {
		s.UpdateEnableFinOps()
	})
}

// SetFinOpsCustomPricing sets the "fin_ops_custom_pricing" field.
func (u *ConnectorUpsertBulk) SetFinOpsCustomPricing(v *types.FinOpsCustomPricing) *ConnectorUpsertBulk {
	return u.Update(func(s *ConnectorUpsert) {
		s.SetFinOpsCustomPricing(v)
	})
}

// UpdateFinOpsCustomPricing sets the "fin_ops_custom_pricing" field to the value that was provided on create.
func (u *ConnectorUpsertBulk) UpdateFinOpsCustomPricing() *ConnectorUpsertBulk {
	return u.Update(func(s *ConnectorUpsert) {
		s.UpdateFinOpsCustomPricing()
	})
}

// ClearFinOpsCustomPricing clears the value of the "fin_ops_custom_pricing" field.
func (u *ConnectorUpsertBulk) ClearFinOpsCustomPricing() *ConnectorUpsertBulk {
	return u.Update(func(s *ConnectorUpsert) {
		s.ClearFinOpsCustomPricing()
	})
}

// Exec executes the query.
func (u *ConnectorUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model: OnConflict was set for builder %d. Set it on the ConnectorCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for ConnectorCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ConnectorUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
