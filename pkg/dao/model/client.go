// SPDX-FileCopyrightText: 2023 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "ent". DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/seal-io/seal/pkg/dao/model/migrate"
	"github.com/seal-io/seal/pkg/dao/types/oid"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"

	"github.com/seal-io/seal/pkg/dao/model/allocationcost"
	"github.com/seal-io/seal/pkg/dao/model/clustercost"
	"github.com/seal-io/seal/pkg/dao/model/connector"
	"github.com/seal-io/seal/pkg/dao/model/environment"
	"github.com/seal-io/seal/pkg/dao/model/environmentconnectorrelationship"
	"github.com/seal-io/seal/pkg/dao/model/perspective"
	"github.com/seal-io/seal/pkg/dao/model/project"
	"github.com/seal-io/seal/pkg/dao/model/role"
	"github.com/seal-io/seal/pkg/dao/model/secret"
	"github.com/seal-io/seal/pkg/dao/model/service"
	"github.com/seal-io/seal/pkg/dao/model/serviceresource"
	"github.com/seal-io/seal/pkg/dao/model/servicerevision"
	"github.com/seal-io/seal/pkg/dao/model/setting"
	"github.com/seal-io/seal/pkg/dao/model/subject"
	"github.com/seal-io/seal/pkg/dao/model/subjectrolerelationship"
	"github.com/seal-io/seal/pkg/dao/model/template"
	"github.com/seal-io/seal/pkg/dao/model/templateversion"
	"github.com/seal-io/seal/pkg/dao/model/token"

	stdsql "database/sql"

	"github.com/seal-io/seal/pkg/dao/model/internal"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AllocationCost is the client for interacting with the AllocationCost builders.
	AllocationCost *AllocationCostClient
	// ClusterCost is the client for interacting with the ClusterCost builders.
	ClusterCost *ClusterCostClient
	// Connector is the client for interacting with the Connector builders.
	Connector *ConnectorClient
	// Environment is the client for interacting with the Environment builders.
	Environment *EnvironmentClient
	// EnvironmentConnectorRelationship is the client for interacting with the EnvironmentConnectorRelationship builders.
	EnvironmentConnectorRelationship *EnvironmentConnectorRelationshipClient
	// Perspective is the client for interacting with the Perspective builders.
	Perspective *PerspectiveClient
	// Project is the client for interacting with the Project builders.
	Project *ProjectClient
	// Role is the client for interacting with the Role builders.
	Role *RoleClient
	// Secret is the client for interacting with the Secret builders.
	Secret *SecretClient
	// Service is the client for interacting with the Service builders.
	Service *ServiceClient
	// ServiceResource is the client for interacting with the ServiceResource builders.
	ServiceResource *ServiceResourceClient
	// ServiceRevision is the client for interacting with the ServiceRevision builders.
	ServiceRevision *ServiceRevisionClient
	// Setting is the client for interacting with the Setting builders.
	Setting *SettingClient
	// Subject is the client for interacting with the Subject builders.
	Subject *SubjectClient
	// SubjectRoleRelationship is the client for interacting with the SubjectRoleRelationship builders.
	SubjectRoleRelationship *SubjectRoleRelationshipClient
	// Template is the client for interacting with the Template builders.
	Template *TemplateClient
	// TemplateVersion is the client for interacting with the TemplateVersion builders.
	TemplateVersion *TemplateVersionClient
	// Token is the client for interacting with the Token builders.
	Token *TokenClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AllocationCost = NewAllocationCostClient(c.config)
	c.ClusterCost = NewClusterCostClient(c.config)
	c.Connector = NewConnectorClient(c.config)
	c.Environment = NewEnvironmentClient(c.config)
	c.EnvironmentConnectorRelationship = NewEnvironmentConnectorRelationshipClient(c.config)
	c.Perspective = NewPerspectiveClient(c.config)
	c.Project = NewProjectClient(c.config)
	c.Role = NewRoleClient(c.config)
	c.Secret = NewSecretClient(c.config)
	c.Service = NewServiceClient(c.config)
	c.ServiceResource = NewServiceResourceClient(c.config)
	c.ServiceRevision = NewServiceRevisionClient(c.config)
	c.Setting = NewSettingClient(c.config)
	c.Subject = NewSubjectClient(c.config)
	c.SubjectRoleRelationship = NewSubjectRoleRelationshipClient(c.config)
	c.Template = NewTemplateClient(c.config)
	c.TemplateVersion = NewTemplateVersionClient(c.config)
	c.Token = NewTokenClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
		// schemaConfig contains alternative names for all tables.
		schemaConfig SchemaConfig
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("model: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("model: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                              ctx,
		config:                           cfg,
		AllocationCost:                   NewAllocationCostClient(cfg),
		ClusterCost:                      NewClusterCostClient(cfg),
		Connector:                        NewConnectorClient(cfg),
		Environment:                      NewEnvironmentClient(cfg),
		EnvironmentConnectorRelationship: NewEnvironmentConnectorRelationshipClient(cfg),
		Perspective:                      NewPerspectiveClient(cfg),
		Project:                          NewProjectClient(cfg),
		Role:                             NewRoleClient(cfg),
		Secret:                           NewSecretClient(cfg),
		Service:                          NewServiceClient(cfg),
		ServiceResource:                  NewServiceResourceClient(cfg),
		ServiceRevision:                  NewServiceRevisionClient(cfg),
		Setting:                          NewSettingClient(cfg),
		Subject:                          NewSubjectClient(cfg),
		SubjectRoleRelationship:          NewSubjectRoleRelationshipClient(cfg),
		Template:                         NewTemplateClient(cfg),
		TemplateVersion:                  NewTemplateVersionClient(cfg),
		Token:                            NewTokenClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                              ctx,
		config:                           cfg,
		AllocationCost:                   NewAllocationCostClient(cfg),
		ClusterCost:                      NewClusterCostClient(cfg),
		Connector:                        NewConnectorClient(cfg),
		Environment:                      NewEnvironmentClient(cfg),
		EnvironmentConnectorRelationship: NewEnvironmentConnectorRelationshipClient(cfg),
		Perspective:                      NewPerspectiveClient(cfg),
		Project:                          NewProjectClient(cfg),
		Role:                             NewRoleClient(cfg),
		Secret:                           NewSecretClient(cfg),
		Service:                          NewServiceClient(cfg),
		ServiceResource:                  NewServiceResourceClient(cfg),
		ServiceRevision:                  NewServiceRevisionClient(cfg),
		Setting:                          NewSettingClient(cfg),
		Subject:                          NewSubjectClient(cfg),
		SubjectRoleRelationship:          NewSubjectRoleRelationshipClient(cfg),
		Template:                         NewTemplateClient(cfg),
		TemplateVersion:                  NewTemplateVersionClient(cfg),
		Token:                            NewTokenClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AllocationCost.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.AllocationCost, c.ClusterCost, c.Connector, c.Environment,
		c.EnvironmentConnectorRelationship, c.Perspective, c.Project, c.Role, c.Secret,
		c.Service, c.ServiceResource, c.ServiceRevision, c.Setting, c.Subject,
		c.SubjectRoleRelationship, c.Template, c.TemplateVersion, c.Token,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.AllocationCost, c.ClusterCost, c.Connector, c.Environment,
		c.EnvironmentConnectorRelationship, c.Perspective, c.Project, c.Role, c.Secret,
		c.Service, c.ServiceResource, c.ServiceRevision, c.Setting, c.Subject,
		c.SubjectRoleRelationship, c.Template, c.TemplateVersion, c.Token,
	} {
		n.Intercept(interceptors...)
	}
}

// AllocationCosts implements the ClientSet.
func (c *Client) AllocationCosts() *AllocationCostClient {
	return c.AllocationCost
}

// ClusterCosts implements the ClientSet.
func (c *Client) ClusterCosts() *ClusterCostClient {
	return c.ClusterCost
}

// Connectors implements the ClientSet.
func (c *Client) Connectors() *ConnectorClient {
	return c.Connector
}

// Environments implements the ClientSet.
func (c *Client) Environments() *EnvironmentClient {
	return c.Environment
}

// EnvironmentConnectorRelationships implements the ClientSet.
func (c *Client) EnvironmentConnectorRelationships() *EnvironmentConnectorRelationshipClient {
	return c.EnvironmentConnectorRelationship
}

// Perspectives implements the ClientSet.
func (c *Client) Perspectives() *PerspectiveClient {
	return c.Perspective
}

// Projects implements the ClientSet.
func (c *Client) Projects() *ProjectClient {
	return c.Project
}

// Roles implements the ClientSet.
func (c *Client) Roles() *RoleClient {
	return c.Role
}

// Secrets implements the ClientSet.
func (c *Client) Secrets() *SecretClient {
	return c.Secret
}

// Services implements the ClientSet.
func (c *Client) Services() *ServiceClient {
	return c.Service
}

// ServiceResources implements the ClientSet.
func (c *Client) ServiceResources() *ServiceResourceClient {
	return c.ServiceResource
}

// ServiceRevisions implements the ClientSet.
func (c *Client) ServiceRevisions() *ServiceRevisionClient {
	return c.ServiceRevision
}

// Settings implements the ClientSet.
func (c *Client) Settings() *SettingClient {
	return c.Setting
}

// Subjects implements the ClientSet.
func (c *Client) Subjects() *SubjectClient {
	return c.Subject
}

// SubjectRoleRelationships implements the ClientSet.
func (c *Client) SubjectRoleRelationships() *SubjectRoleRelationshipClient {
	return c.SubjectRoleRelationship
}

// Templates implements the ClientSet.
func (c *Client) Templates() *TemplateClient {
	return c.Template
}

// TemplateVersions implements the ClientSet.
func (c *Client) TemplateVersions() *TemplateVersionClient {
	return c.TemplateVersion
}

// Tokens implements the ClientSet.
func (c *Client) Tokens() *TokenClient {
	return c.Token
}

// Dialect returns the dialect name of the driver.
func (c *Client) Dialect() string {
	return c.driver.Dialect()
}

// WithTx gives a new transactional client in the callback function,
// if already in a transaction, this will keep in the same transaction.
func (c *Client) WithTx(ctx context.Context, fn func(tx *Tx) error) (err error) {
	var tx *Tx
	tx, err = c.Tx(ctx)
	if err != nil {
		return
	}
	defer func() {
		if v := recover(); v != nil {
			switch vt := v.(type) {
			case error:
				err = fmt.Errorf("panic as %w", vt)
			default:
				err = fmt.Errorf("panic as %v", v)
			}
			if txErr := tx.Rollback(); txErr != nil {
				err = fmt.Errorf("try to rollback as received %w, but failed: %v", err, txErr)
			}
		}
	}()
	if err = fn(tx); err != nil {
		if txErr := tx.Rollback(); txErr != nil {
			err = fmt.Errorf("try to rollback as received %w, but failed: %v", err, txErr)
		}
		return
	}
	if txErr := tx.Commit(); txErr != nil {
		err = fmt.Errorf("try to commit, but failed: %v", txErr)
	}
	return
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AllocationCostMutation:
		return c.AllocationCost.mutate(ctx, m)
	case *ClusterCostMutation:
		return c.ClusterCost.mutate(ctx, m)
	case *ConnectorMutation:
		return c.Connector.mutate(ctx, m)
	case *EnvironmentMutation:
		return c.Environment.mutate(ctx, m)
	case *EnvironmentConnectorRelationshipMutation:
		return c.EnvironmentConnectorRelationship.mutate(ctx, m)
	case *PerspectiveMutation:
		return c.Perspective.mutate(ctx, m)
	case *ProjectMutation:
		return c.Project.mutate(ctx, m)
	case *RoleMutation:
		return c.Role.mutate(ctx, m)
	case *SecretMutation:
		return c.Secret.mutate(ctx, m)
	case *ServiceMutation:
		return c.Service.mutate(ctx, m)
	case *ServiceResourceMutation:
		return c.ServiceResource.mutate(ctx, m)
	case *ServiceRevisionMutation:
		return c.ServiceRevision.mutate(ctx, m)
	case *SettingMutation:
		return c.Setting.mutate(ctx, m)
	case *SubjectMutation:
		return c.Subject.mutate(ctx, m)
	case *SubjectRoleRelationshipMutation:
		return c.SubjectRoleRelationship.mutate(ctx, m)
	case *TemplateMutation:
		return c.Template.mutate(ctx, m)
	case *TemplateVersionMutation:
		return c.TemplateVersion.mutate(ctx, m)
	case *TokenMutation:
		return c.Token.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("model: unknown mutation type %T", m)
	}
}

// AllocationCostClient is a client for the AllocationCost schema.
type AllocationCostClient struct {
	config
}

// NewAllocationCostClient returns a client for the AllocationCost from the given config.
func NewAllocationCostClient(c config) *AllocationCostClient {
	return &AllocationCostClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `allocationcost.Hooks(f(g(h())))`.
func (c *AllocationCostClient) Use(hooks ...Hook) {
	c.hooks.AllocationCost = append(c.hooks.AllocationCost, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `allocationcost.Intercept(f(g(h())))`.
func (c *AllocationCostClient) Intercept(interceptors ...Interceptor) {
	c.inters.AllocationCost = append(c.inters.AllocationCost, interceptors...)
}

// Create returns a builder for creating a AllocationCost entity.
func (c *AllocationCostClient) Create() *AllocationCostCreate {
	mutation := newAllocationCostMutation(c.config, OpCreate)
	return &AllocationCostCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AllocationCost entities.
func (c *AllocationCostClient) CreateBulk(builders ...*AllocationCostCreate) *AllocationCostCreateBulk {
	return &AllocationCostCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AllocationCost.
func (c *AllocationCostClient) Update() *AllocationCostUpdate {
	mutation := newAllocationCostMutation(c.config, OpUpdate)
	return &AllocationCostUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AllocationCostClient) UpdateOne(ac *AllocationCost) *AllocationCostUpdateOne {
	mutation := newAllocationCostMutation(c.config, OpUpdateOne, withAllocationCost(ac))
	return &AllocationCostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AllocationCostClient) UpdateOneID(id int) *AllocationCostUpdateOne {
	mutation := newAllocationCostMutation(c.config, OpUpdateOne, withAllocationCostID(id))
	return &AllocationCostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AllocationCost.
func (c *AllocationCostClient) Delete() *AllocationCostDelete {
	mutation := newAllocationCostMutation(c.config, OpDelete)
	return &AllocationCostDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AllocationCostClient) DeleteOne(ac *AllocationCost) *AllocationCostDeleteOne {
	return c.DeleteOneID(ac.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AllocationCostClient) DeleteOneID(id int) *AllocationCostDeleteOne {
	builder := c.Delete().Where(allocationcost.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AllocationCostDeleteOne{builder}
}

// Query returns a query builder for AllocationCost.
func (c *AllocationCostClient) Query() *AllocationCostQuery {
	return &AllocationCostQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAllocationCost},
		inters: c.Interceptors(),
	}
}

// Get returns a AllocationCost entity by its id.
func (c *AllocationCostClient) Get(ctx context.Context, id int) (*AllocationCost, error) {
	return c.Query().Where(allocationcost.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AllocationCostClient) GetX(ctx context.Context, id int) *AllocationCost {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryConnector queries the connector edge of a AllocationCost.
func (c *AllocationCostClient) QueryConnector(ac *AllocationCost) *ConnectorQuery {
	query := (&ConnectorClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(allocationcost.Table, allocationcost.FieldID, id),
			sqlgraph.To(connector.Table, connector.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, allocationcost.ConnectorTable, allocationcost.ConnectorColumn),
		)
		schemaConfig := ac.schemaConfig
		step.To.Schema = schemaConfig.Connector
		step.Edge.Schema = schemaConfig.AllocationCost
		fromV = sqlgraph.Neighbors(ac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AllocationCostClient) Hooks() []Hook {
	return c.hooks.AllocationCost
}

// Interceptors returns the client interceptors.
func (c *AllocationCostClient) Interceptors() []Interceptor {
	return c.inters.AllocationCost
}

func (c *AllocationCostClient) mutate(ctx context.Context, m *AllocationCostMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AllocationCostCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AllocationCostUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AllocationCostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AllocationCostDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("model: unknown AllocationCost mutation op: %q", m.Op())
	}
}

// ClusterCostClient is a client for the ClusterCost schema.
type ClusterCostClient struct {
	config
}

// NewClusterCostClient returns a client for the ClusterCost from the given config.
func NewClusterCostClient(c config) *ClusterCostClient {
	return &ClusterCostClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `clustercost.Hooks(f(g(h())))`.
func (c *ClusterCostClient) Use(hooks ...Hook) {
	c.hooks.ClusterCost = append(c.hooks.ClusterCost, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `clustercost.Intercept(f(g(h())))`.
func (c *ClusterCostClient) Intercept(interceptors ...Interceptor) {
	c.inters.ClusterCost = append(c.inters.ClusterCost, interceptors...)
}

// Create returns a builder for creating a ClusterCost entity.
func (c *ClusterCostClient) Create() *ClusterCostCreate {
	mutation := newClusterCostMutation(c.config, OpCreate)
	return &ClusterCostCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ClusterCost entities.
func (c *ClusterCostClient) CreateBulk(builders ...*ClusterCostCreate) *ClusterCostCreateBulk {
	return &ClusterCostCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ClusterCost.
func (c *ClusterCostClient) Update() *ClusterCostUpdate {
	mutation := newClusterCostMutation(c.config, OpUpdate)
	return &ClusterCostUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ClusterCostClient) UpdateOne(cc *ClusterCost) *ClusterCostUpdateOne {
	mutation := newClusterCostMutation(c.config, OpUpdateOne, withClusterCost(cc))
	return &ClusterCostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ClusterCostClient) UpdateOneID(id int) *ClusterCostUpdateOne {
	mutation := newClusterCostMutation(c.config, OpUpdateOne, withClusterCostID(id))
	return &ClusterCostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ClusterCost.
func (c *ClusterCostClient) Delete() *ClusterCostDelete {
	mutation := newClusterCostMutation(c.config, OpDelete)
	return &ClusterCostDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ClusterCostClient) DeleteOne(cc *ClusterCost) *ClusterCostDeleteOne {
	return c.DeleteOneID(cc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ClusterCostClient) DeleteOneID(id int) *ClusterCostDeleteOne {
	builder := c.Delete().Where(clustercost.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ClusterCostDeleteOne{builder}
}

// Query returns a query builder for ClusterCost.
func (c *ClusterCostClient) Query() *ClusterCostQuery {
	return &ClusterCostQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeClusterCost},
		inters: c.Interceptors(),
	}
}

// Get returns a ClusterCost entity by its id.
func (c *ClusterCostClient) Get(ctx context.Context, id int) (*ClusterCost, error) {
	return c.Query().Where(clustercost.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ClusterCostClient) GetX(ctx context.Context, id int) *ClusterCost {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryConnector queries the connector edge of a ClusterCost.
func (c *ClusterCostClient) QueryConnector(cc *ClusterCost) *ConnectorQuery {
	query := (&ConnectorClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(clustercost.Table, clustercost.FieldID, id),
			sqlgraph.To(connector.Table, connector.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, clustercost.ConnectorTable, clustercost.ConnectorColumn),
		)
		schemaConfig := cc.schemaConfig
		step.To.Schema = schemaConfig.Connector
		step.Edge.Schema = schemaConfig.ClusterCost
		fromV = sqlgraph.Neighbors(cc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ClusterCostClient) Hooks() []Hook {
	return c.hooks.ClusterCost
}

// Interceptors returns the client interceptors.
func (c *ClusterCostClient) Interceptors() []Interceptor {
	return c.inters.ClusterCost
}

func (c *ClusterCostClient) mutate(ctx context.Context, m *ClusterCostMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ClusterCostCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ClusterCostUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ClusterCostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ClusterCostDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("model: unknown ClusterCost mutation op: %q", m.Op())
	}
}

// ConnectorClient is a client for the Connector schema.
type ConnectorClient struct {
	config
}

// NewConnectorClient returns a client for the Connector from the given config.
func NewConnectorClient(c config) *ConnectorClient {
	return &ConnectorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `connector.Hooks(f(g(h())))`.
func (c *ConnectorClient) Use(hooks ...Hook) {
	c.hooks.Connector = append(c.hooks.Connector, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `connector.Intercept(f(g(h())))`.
func (c *ConnectorClient) Intercept(interceptors ...Interceptor) {
	c.inters.Connector = append(c.inters.Connector, interceptors...)
}

// Create returns a builder for creating a Connector entity.
func (c *ConnectorClient) Create() *ConnectorCreate {
	mutation := newConnectorMutation(c.config, OpCreate)
	return &ConnectorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Connector entities.
func (c *ConnectorClient) CreateBulk(builders ...*ConnectorCreate) *ConnectorCreateBulk {
	return &ConnectorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Connector.
func (c *ConnectorClient) Update() *ConnectorUpdate {
	mutation := newConnectorMutation(c.config, OpUpdate)
	return &ConnectorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ConnectorClient) UpdateOne(co *Connector) *ConnectorUpdateOne {
	mutation := newConnectorMutation(c.config, OpUpdateOne, withConnector(co))
	return &ConnectorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ConnectorClient) UpdateOneID(id oid.ID) *ConnectorUpdateOne {
	mutation := newConnectorMutation(c.config, OpUpdateOne, withConnectorID(id))
	return &ConnectorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Connector.
func (c *ConnectorClient) Delete() *ConnectorDelete {
	mutation := newConnectorMutation(c.config, OpDelete)
	return &ConnectorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ConnectorClient) DeleteOne(co *Connector) *ConnectorDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ConnectorClient) DeleteOneID(id oid.ID) *ConnectorDeleteOne {
	builder := c.Delete().Where(connector.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ConnectorDeleteOne{builder}
}

// Query returns a query builder for Connector.
func (c *ConnectorClient) Query() *ConnectorQuery {
	return &ConnectorQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeConnector},
		inters: c.Interceptors(),
	}
}

// Get returns a Connector entity by its id.
func (c *ConnectorClient) Get(ctx context.Context, id oid.ID) (*Connector, error) {
	return c.Query().Where(connector.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ConnectorClient) GetX(ctx context.Context, id oid.ID) *Connector {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProject queries the project edge of a Connector.
func (c *ConnectorClient) QueryProject(co *Connector) *ProjectQuery {
	query := (&ProjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(connector.Table, connector.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, connector.ProjectTable, connector.ProjectColumn),
		)
		schemaConfig := co.schemaConfig
		step.To.Schema = schemaConfig.Project
		step.Edge.Schema = schemaConfig.Connector
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnvironments queries the environments edge of a Connector.
func (c *ConnectorClient) QueryEnvironments(co *Connector) *EnvironmentConnectorRelationshipQuery {
	query := (&EnvironmentConnectorRelationshipClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(connector.Table, connector.FieldID, id),
			sqlgraph.To(environmentconnectorrelationship.Table, environmentconnectorrelationship.ConnectorColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, connector.EnvironmentsTable, connector.EnvironmentsColumn),
		)
		schemaConfig := co.schemaConfig
		step.To.Schema = schemaConfig.EnvironmentConnectorRelationship
		step.Edge.Schema = schemaConfig.EnvironmentConnectorRelationship
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryResources queries the resources edge of a Connector.
func (c *ConnectorClient) QueryResources(co *Connector) *ServiceResourceQuery {
	query := (&ServiceResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(connector.Table, connector.FieldID, id),
			sqlgraph.To(serviceresource.Table, serviceresource.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, connector.ResourcesTable, connector.ResourcesColumn),
		)
		schemaConfig := co.schemaConfig
		step.To.Schema = schemaConfig.ServiceResource
		step.Edge.Schema = schemaConfig.ServiceResource
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClusterCosts queries the clusterCosts edge of a Connector.
func (c *ConnectorClient) QueryClusterCosts(co *Connector) *ClusterCostQuery {
	query := (&ClusterCostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(connector.Table, connector.FieldID, id),
			sqlgraph.To(clustercost.Table, clustercost.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, connector.ClusterCostsTable, connector.ClusterCostsColumn),
		)
		schemaConfig := co.schemaConfig
		step.To.Schema = schemaConfig.ClusterCost
		step.Edge.Schema = schemaConfig.ClusterCost
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAllocationCosts queries the allocationCosts edge of a Connector.
func (c *ConnectorClient) QueryAllocationCosts(co *Connector) *AllocationCostQuery {
	query := (&AllocationCostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(connector.Table, connector.FieldID, id),
			sqlgraph.To(allocationcost.Table, allocationcost.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, connector.AllocationCostsTable, connector.AllocationCostsColumn),
		)
		schemaConfig := co.schemaConfig
		step.To.Schema = schemaConfig.AllocationCost
		step.Edge.Schema = schemaConfig.AllocationCost
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ConnectorClient) Hooks() []Hook {
	hooks := c.hooks.Connector
	return append(hooks[:len(hooks):len(hooks)], connector.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ConnectorClient) Interceptors() []Interceptor {
	inters := c.inters.Connector
	return append(inters[:len(inters):len(inters)], connector.Interceptors[:]...)
}

func (c *ConnectorClient) mutate(ctx context.Context, m *ConnectorMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ConnectorCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ConnectorUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ConnectorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ConnectorDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("model: unknown Connector mutation op: %q", m.Op())
	}
}

// EnvironmentClient is a client for the Environment schema.
type EnvironmentClient struct {
	config
}

// NewEnvironmentClient returns a client for the Environment from the given config.
func NewEnvironmentClient(c config) *EnvironmentClient {
	return &EnvironmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `environment.Hooks(f(g(h())))`.
func (c *EnvironmentClient) Use(hooks ...Hook) {
	c.hooks.Environment = append(c.hooks.Environment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `environment.Intercept(f(g(h())))`.
func (c *EnvironmentClient) Intercept(interceptors ...Interceptor) {
	c.inters.Environment = append(c.inters.Environment, interceptors...)
}

// Create returns a builder for creating a Environment entity.
func (c *EnvironmentClient) Create() *EnvironmentCreate {
	mutation := newEnvironmentMutation(c.config, OpCreate)
	return &EnvironmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Environment entities.
func (c *EnvironmentClient) CreateBulk(builders ...*EnvironmentCreate) *EnvironmentCreateBulk {
	return &EnvironmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Environment.
func (c *EnvironmentClient) Update() *EnvironmentUpdate {
	mutation := newEnvironmentMutation(c.config, OpUpdate)
	return &EnvironmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EnvironmentClient) UpdateOne(e *Environment) *EnvironmentUpdateOne {
	mutation := newEnvironmentMutation(c.config, OpUpdateOne, withEnvironment(e))
	return &EnvironmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EnvironmentClient) UpdateOneID(id oid.ID) *EnvironmentUpdateOne {
	mutation := newEnvironmentMutation(c.config, OpUpdateOne, withEnvironmentID(id))
	return &EnvironmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Environment.
func (c *EnvironmentClient) Delete() *EnvironmentDelete {
	mutation := newEnvironmentMutation(c.config, OpDelete)
	return &EnvironmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EnvironmentClient) DeleteOne(e *Environment) *EnvironmentDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EnvironmentClient) DeleteOneID(id oid.ID) *EnvironmentDeleteOne {
	builder := c.Delete().Where(environment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EnvironmentDeleteOne{builder}
}

// Query returns a query builder for Environment.
func (c *EnvironmentClient) Query() *EnvironmentQuery {
	return &EnvironmentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEnvironment},
		inters: c.Interceptors(),
	}
}

// Get returns a Environment entity by its id.
func (c *EnvironmentClient) Get(ctx context.Context, id oid.ID) (*Environment, error) {
	return c.Query().Where(environment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EnvironmentClient) GetX(ctx context.Context, id oid.ID) *Environment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProject queries the project edge of a Environment.
func (c *EnvironmentClient) QueryProject(e *Environment) *ProjectQuery {
	query := (&ProjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, environment.ProjectTable, environment.ProjectColumn),
		)
		schemaConfig := e.schemaConfig
		step.To.Schema = schemaConfig.Project
		step.Edge.Schema = schemaConfig.Environment
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryConnectors queries the connectors edge of a Environment.
func (c *EnvironmentClient) QueryConnectors(e *Environment) *EnvironmentConnectorRelationshipQuery {
	query := (&EnvironmentConnectorRelationshipClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, id),
			sqlgraph.To(environmentconnectorrelationship.Table, environmentconnectorrelationship.EnvironmentColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, environment.ConnectorsTable, environment.ConnectorsColumn),
		)
		schemaConfig := e.schemaConfig
		step.To.Schema = schemaConfig.EnvironmentConnectorRelationship
		step.Edge.Schema = schemaConfig.EnvironmentConnectorRelationship
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryServices queries the services edge of a Environment.
func (c *EnvironmentClient) QueryServices(e *Environment) *ServiceQuery {
	query := (&ServiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, id),
			sqlgraph.To(service.Table, service.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, environment.ServicesTable, environment.ServicesColumn),
		)
		schemaConfig := e.schemaConfig
		step.To.Schema = schemaConfig.Service
		step.Edge.Schema = schemaConfig.Service
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryServiceRevisions queries the serviceRevisions edge of a Environment.
func (c *EnvironmentClient) QueryServiceRevisions(e *Environment) *ServiceRevisionQuery {
	query := (&ServiceRevisionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, id),
			sqlgraph.To(servicerevision.Table, servicerevision.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, environment.ServiceRevisionsTable, environment.ServiceRevisionsColumn),
		)
		schemaConfig := e.schemaConfig
		step.To.Schema = schemaConfig.ServiceRevision
		step.Edge.Schema = schemaConfig.ServiceRevision
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EnvironmentClient) Hooks() []Hook {
	hooks := c.hooks.Environment
	return append(hooks[:len(hooks):len(hooks)], environment.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *EnvironmentClient) Interceptors() []Interceptor {
	inters := c.inters.Environment
	return append(inters[:len(inters):len(inters)], environment.Interceptors[:]...)
}

func (c *EnvironmentClient) mutate(ctx context.Context, m *EnvironmentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EnvironmentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EnvironmentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EnvironmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EnvironmentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("model: unknown Environment mutation op: %q", m.Op())
	}
}

// EnvironmentConnectorRelationshipClient is a client for the EnvironmentConnectorRelationship schema.
type EnvironmentConnectorRelationshipClient struct {
	config
}

// NewEnvironmentConnectorRelationshipClient returns a client for the EnvironmentConnectorRelationship from the given config.
func NewEnvironmentConnectorRelationshipClient(c config) *EnvironmentConnectorRelationshipClient {
	return &EnvironmentConnectorRelationshipClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `environmentconnectorrelationship.Hooks(f(g(h())))`.
func (c *EnvironmentConnectorRelationshipClient) Use(hooks ...Hook) {
	c.hooks.EnvironmentConnectorRelationship = append(c.hooks.EnvironmentConnectorRelationship, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `environmentconnectorrelationship.Intercept(f(g(h())))`.
func (c *EnvironmentConnectorRelationshipClient) Intercept(interceptors ...Interceptor) {
	c.inters.EnvironmentConnectorRelationship = append(c.inters.EnvironmentConnectorRelationship, interceptors...)
}

// Create returns a builder for creating a EnvironmentConnectorRelationship entity.
func (c *EnvironmentConnectorRelationshipClient) Create() *EnvironmentConnectorRelationshipCreate {
	mutation := newEnvironmentConnectorRelationshipMutation(c.config, OpCreate)
	return &EnvironmentConnectorRelationshipCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EnvironmentConnectorRelationship entities.
func (c *EnvironmentConnectorRelationshipClient) CreateBulk(builders ...*EnvironmentConnectorRelationshipCreate) *EnvironmentConnectorRelationshipCreateBulk {
	return &EnvironmentConnectorRelationshipCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EnvironmentConnectorRelationship.
func (c *EnvironmentConnectorRelationshipClient) Update() *EnvironmentConnectorRelationshipUpdate {
	mutation := newEnvironmentConnectorRelationshipMutation(c.config, OpUpdate)
	return &EnvironmentConnectorRelationshipUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EnvironmentConnectorRelationshipClient) UpdateOne(ecr *EnvironmentConnectorRelationship) *EnvironmentConnectorRelationshipUpdateOne {
	mutation := newEnvironmentConnectorRelationshipMutation(c.config, OpUpdateOne)
	mutation.environment = &ecr.EnvironmentID
	mutation.connector = &ecr.ConnectorID
	return &EnvironmentConnectorRelationshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EnvironmentConnectorRelationship.
func (c *EnvironmentConnectorRelationshipClient) Delete() *EnvironmentConnectorRelationshipDelete {
	mutation := newEnvironmentConnectorRelationshipMutation(c.config, OpDelete)
	return &EnvironmentConnectorRelationshipDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Query returns a query builder for EnvironmentConnectorRelationship.
func (c *EnvironmentConnectorRelationshipClient) Query() *EnvironmentConnectorRelationshipQuery {
	return &EnvironmentConnectorRelationshipQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEnvironmentConnectorRelationship},
		inters: c.Interceptors(),
	}
}

// QueryEnvironment queries the environment edge of a EnvironmentConnectorRelationship.
func (c *EnvironmentConnectorRelationshipClient) QueryEnvironment(ecr *EnvironmentConnectorRelationship) *EnvironmentQuery {
	return c.Query().
		Where(environmentconnectorrelationship.EnvironmentID(ecr.EnvironmentID), environmentconnectorrelationship.ConnectorID(ecr.ConnectorID)).
		QueryEnvironment()
}

// QueryConnector queries the connector edge of a EnvironmentConnectorRelationship.
func (c *EnvironmentConnectorRelationshipClient) QueryConnector(ecr *EnvironmentConnectorRelationship) *ConnectorQuery {
	return c.Query().
		Where(environmentconnectorrelationship.EnvironmentID(ecr.EnvironmentID), environmentconnectorrelationship.ConnectorID(ecr.ConnectorID)).
		QueryConnector()
}

// Hooks returns the client hooks.
func (c *EnvironmentConnectorRelationshipClient) Hooks() []Hook {
	return c.hooks.EnvironmentConnectorRelationship
}

// Interceptors returns the client interceptors.
func (c *EnvironmentConnectorRelationshipClient) Interceptors() []Interceptor {
	return c.inters.EnvironmentConnectorRelationship
}

func (c *EnvironmentConnectorRelationshipClient) mutate(ctx context.Context, m *EnvironmentConnectorRelationshipMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EnvironmentConnectorRelationshipCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EnvironmentConnectorRelationshipUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EnvironmentConnectorRelationshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EnvironmentConnectorRelationshipDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("model: unknown EnvironmentConnectorRelationship mutation op: %q", m.Op())
	}
}

// PerspectiveClient is a client for the Perspective schema.
type PerspectiveClient struct {
	config
}

// NewPerspectiveClient returns a client for the Perspective from the given config.
func NewPerspectiveClient(c config) *PerspectiveClient {
	return &PerspectiveClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `perspective.Hooks(f(g(h())))`.
func (c *PerspectiveClient) Use(hooks ...Hook) {
	c.hooks.Perspective = append(c.hooks.Perspective, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `perspective.Intercept(f(g(h())))`.
func (c *PerspectiveClient) Intercept(interceptors ...Interceptor) {
	c.inters.Perspective = append(c.inters.Perspective, interceptors...)
}

// Create returns a builder for creating a Perspective entity.
func (c *PerspectiveClient) Create() *PerspectiveCreate {
	mutation := newPerspectiveMutation(c.config, OpCreate)
	return &PerspectiveCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Perspective entities.
func (c *PerspectiveClient) CreateBulk(builders ...*PerspectiveCreate) *PerspectiveCreateBulk {
	return &PerspectiveCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Perspective.
func (c *PerspectiveClient) Update() *PerspectiveUpdate {
	mutation := newPerspectiveMutation(c.config, OpUpdate)
	return &PerspectiveUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PerspectiveClient) UpdateOne(pe *Perspective) *PerspectiveUpdateOne {
	mutation := newPerspectiveMutation(c.config, OpUpdateOne, withPerspective(pe))
	return &PerspectiveUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PerspectiveClient) UpdateOneID(id oid.ID) *PerspectiveUpdateOne {
	mutation := newPerspectiveMutation(c.config, OpUpdateOne, withPerspectiveID(id))
	return &PerspectiveUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Perspective.
func (c *PerspectiveClient) Delete() *PerspectiveDelete {
	mutation := newPerspectiveMutation(c.config, OpDelete)
	return &PerspectiveDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PerspectiveClient) DeleteOne(pe *Perspective) *PerspectiveDeleteOne {
	return c.DeleteOneID(pe.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PerspectiveClient) DeleteOneID(id oid.ID) *PerspectiveDeleteOne {
	builder := c.Delete().Where(perspective.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PerspectiveDeleteOne{builder}
}

// Query returns a query builder for Perspective.
func (c *PerspectiveClient) Query() *PerspectiveQuery {
	return &PerspectiveQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePerspective},
		inters: c.Interceptors(),
	}
}

// Get returns a Perspective entity by its id.
func (c *PerspectiveClient) Get(ctx context.Context, id oid.ID) (*Perspective, error) {
	return c.Query().Where(perspective.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PerspectiveClient) GetX(ctx context.Context, id oid.ID) *Perspective {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PerspectiveClient) Hooks() []Hook {
	hooks := c.hooks.Perspective
	return append(hooks[:len(hooks):len(hooks)], perspective.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *PerspectiveClient) Interceptors() []Interceptor {
	return c.inters.Perspective
}

func (c *PerspectiveClient) mutate(ctx context.Context, m *PerspectiveMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PerspectiveCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PerspectiveUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PerspectiveUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PerspectiveDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("model: unknown Perspective mutation op: %q", m.Op())
	}
}

// ProjectClient is a client for the Project schema.
type ProjectClient struct {
	config
}

// NewProjectClient returns a client for the Project from the given config.
func NewProjectClient(c config) *ProjectClient {
	return &ProjectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `project.Hooks(f(g(h())))`.
func (c *ProjectClient) Use(hooks ...Hook) {
	c.hooks.Project = append(c.hooks.Project, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `project.Intercept(f(g(h())))`.
func (c *ProjectClient) Intercept(interceptors ...Interceptor) {
	c.inters.Project = append(c.inters.Project, interceptors...)
}

// Create returns a builder for creating a Project entity.
func (c *ProjectClient) Create() *ProjectCreate {
	mutation := newProjectMutation(c.config, OpCreate)
	return &ProjectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Project entities.
func (c *ProjectClient) CreateBulk(builders ...*ProjectCreate) *ProjectCreateBulk {
	return &ProjectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Project.
func (c *ProjectClient) Update() *ProjectUpdate {
	mutation := newProjectMutation(c.config, OpUpdate)
	return &ProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectClient) UpdateOne(pr *Project) *ProjectUpdateOne {
	mutation := newProjectMutation(c.config, OpUpdateOne, withProject(pr))
	return &ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectClient) UpdateOneID(id oid.ID) *ProjectUpdateOne {
	mutation := newProjectMutation(c.config, OpUpdateOne, withProjectID(id))
	return &ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Project.
func (c *ProjectClient) Delete() *ProjectDelete {
	mutation := newProjectMutation(c.config, OpDelete)
	return &ProjectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProjectClient) DeleteOne(pr *Project) *ProjectDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProjectClient) DeleteOneID(id oid.ID) *ProjectDeleteOne {
	builder := c.Delete().Where(project.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectDeleteOne{builder}
}

// Query returns a query builder for Project.
func (c *ProjectClient) Query() *ProjectQuery {
	return &ProjectQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProject},
		inters: c.Interceptors(),
	}
}

// Get returns a Project entity by its id.
func (c *ProjectClient) Get(ctx context.Context, id oid.ID) (*Project, error) {
	return c.Query().Where(project.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectClient) GetX(ctx context.Context, id oid.ID) *Project {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEnvironments queries the environments edge of a Project.
func (c *ProjectClient) QueryEnvironments(pr *Project) *EnvironmentQuery {
	query := (&EnvironmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(environment.Table, environment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.EnvironmentsTable, project.EnvironmentsColumn),
		)
		schemaConfig := pr.schemaConfig
		step.To.Schema = schemaConfig.Environment
		step.Edge.Schema = schemaConfig.Environment
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryConnectors queries the connectors edge of a Project.
func (c *ProjectClient) QueryConnectors(pr *Project) *ConnectorQuery {
	query := (&ConnectorClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(connector.Table, connector.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.ConnectorsTable, project.ConnectorsColumn),
		)
		schemaConfig := pr.schemaConfig
		step.To.Schema = schemaConfig.Connector
		step.Edge.Schema = schemaConfig.Connector
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySecrets queries the secrets edge of a Project.
func (c *ProjectClient) QuerySecrets(pr *Project) *SecretQuery {
	query := (&SecretClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(secret.Table, secret.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.SecretsTable, project.SecretsColumn),
		)
		schemaConfig := pr.schemaConfig
		step.To.Schema = schemaConfig.Secret
		step.Edge.Schema = schemaConfig.Secret
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryServices queries the services edge of a Project.
func (c *ProjectClient) QueryServices(pr *Project) *ServiceQuery {
	query := (&ServiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(service.Table, service.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.ServicesTable, project.ServicesColumn),
		)
		schemaConfig := pr.schemaConfig
		step.To.Schema = schemaConfig.Service
		step.Edge.Schema = schemaConfig.Service
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryServiceRevisions queries the serviceRevisions edge of a Project.
func (c *ProjectClient) QueryServiceRevisions(pr *Project) *ServiceRevisionQuery {
	query := (&ServiceRevisionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(servicerevision.Table, servicerevision.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.ServiceRevisionsTable, project.ServiceRevisionsColumn),
		)
		schemaConfig := pr.schemaConfig
		step.To.Schema = schemaConfig.ServiceRevision
		step.Edge.Schema = schemaConfig.ServiceRevision
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubjectRoles queries the subjectRoles edge of a Project.
func (c *ProjectClient) QuerySubjectRoles(pr *Project) *SubjectRoleRelationshipQuery {
	query := (&SubjectRoleRelationshipClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(subjectrolerelationship.Table, subjectrolerelationship.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.SubjectRolesTable, project.SubjectRolesColumn),
		)
		schemaConfig := pr.schemaConfig
		step.To.Schema = schemaConfig.SubjectRoleRelationship
		step.Edge.Schema = schemaConfig.SubjectRoleRelationship
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectClient) Hooks() []Hook {
	hooks := c.hooks.Project
	return append(hooks[:len(hooks):len(hooks)], project.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ProjectClient) Interceptors() []Interceptor {
	return c.inters.Project
}

func (c *ProjectClient) mutate(ctx context.Context, m *ProjectMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProjectCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProjectDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("model: unknown Project mutation op: %q", m.Op())
	}
}

// RoleClient is a client for the Role schema.
type RoleClient struct {
	config
}

// NewRoleClient returns a client for the Role from the given config.
func NewRoleClient(c config) *RoleClient {
	return &RoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `role.Hooks(f(g(h())))`.
func (c *RoleClient) Use(hooks ...Hook) {
	c.hooks.Role = append(c.hooks.Role, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `role.Intercept(f(g(h())))`.
func (c *RoleClient) Intercept(interceptors ...Interceptor) {
	c.inters.Role = append(c.inters.Role, interceptors...)
}

// Create returns a builder for creating a Role entity.
func (c *RoleClient) Create() *RoleCreate {
	mutation := newRoleMutation(c.config, OpCreate)
	return &RoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Role entities.
func (c *RoleClient) CreateBulk(builders ...*RoleCreate) *RoleCreateBulk {
	return &RoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Role.
func (c *RoleClient) Update() *RoleUpdate {
	mutation := newRoleMutation(c.config, OpUpdate)
	return &RoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoleClient) UpdateOne(r *Role) *RoleUpdateOne {
	mutation := newRoleMutation(c.config, OpUpdateOne, withRole(r))
	return &RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoleClient) UpdateOneID(id string) *RoleUpdateOne {
	mutation := newRoleMutation(c.config, OpUpdateOne, withRoleID(id))
	return &RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Role.
func (c *RoleClient) Delete() *RoleDelete {
	mutation := newRoleMutation(c.config, OpDelete)
	return &RoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RoleClient) DeleteOne(r *Role) *RoleDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RoleClient) DeleteOneID(id string) *RoleDeleteOne {
	builder := c.Delete().Where(role.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoleDeleteOne{builder}
}

// Query returns a query builder for Role.
func (c *RoleClient) Query() *RoleQuery {
	return &RoleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRole},
		inters: c.Interceptors(),
	}
}

// Get returns a Role entity by its id.
func (c *RoleClient) Get(ctx context.Context, id string) (*Role, error) {
	return c.Query().Where(role.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoleClient) GetX(ctx context.Context, id string) *Role {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySubjects queries the subjects edge of a Role.
func (c *RoleClient) QuerySubjects(r *Role) *SubjectRoleRelationshipQuery {
	query := (&SubjectRoleRelationshipClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(role.Table, role.FieldID, id),
			sqlgraph.To(subjectrolerelationship.Table, subjectrolerelationship.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, role.SubjectsTable, role.SubjectsColumn),
		)
		schemaConfig := r.schemaConfig
		step.To.Schema = schemaConfig.SubjectRoleRelationship
		step.Edge.Schema = schemaConfig.SubjectRoleRelationship
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoleClient) Hooks() []Hook {
	return c.hooks.Role
}

// Interceptors returns the client interceptors.
func (c *RoleClient) Interceptors() []Interceptor {
	return c.inters.Role
}

func (c *RoleClient) mutate(ctx context.Context, m *RoleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RoleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RoleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RoleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("model: unknown Role mutation op: %q", m.Op())
	}
}

// SecretClient is a client for the Secret schema.
type SecretClient struct {
	config
}

// NewSecretClient returns a client for the Secret from the given config.
func NewSecretClient(c config) *SecretClient {
	return &SecretClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `secret.Hooks(f(g(h())))`.
func (c *SecretClient) Use(hooks ...Hook) {
	c.hooks.Secret = append(c.hooks.Secret, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `secret.Intercept(f(g(h())))`.
func (c *SecretClient) Intercept(interceptors ...Interceptor) {
	c.inters.Secret = append(c.inters.Secret, interceptors...)
}

// Create returns a builder for creating a Secret entity.
func (c *SecretClient) Create() *SecretCreate {
	mutation := newSecretMutation(c.config, OpCreate)
	return &SecretCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Secret entities.
func (c *SecretClient) CreateBulk(builders ...*SecretCreate) *SecretCreateBulk {
	return &SecretCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Secret.
func (c *SecretClient) Update() *SecretUpdate {
	mutation := newSecretMutation(c.config, OpUpdate)
	return &SecretUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SecretClient) UpdateOne(s *Secret) *SecretUpdateOne {
	mutation := newSecretMutation(c.config, OpUpdateOne, withSecret(s))
	return &SecretUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SecretClient) UpdateOneID(id oid.ID) *SecretUpdateOne {
	mutation := newSecretMutation(c.config, OpUpdateOne, withSecretID(id))
	return &SecretUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Secret.
func (c *SecretClient) Delete() *SecretDelete {
	mutation := newSecretMutation(c.config, OpDelete)
	return &SecretDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SecretClient) DeleteOne(s *Secret) *SecretDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SecretClient) DeleteOneID(id oid.ID) *SecretDeleteOne {
	builder := c.Delete().Where(secret.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SecretDeleteOne{builder}
}

// Query returns a query builder for Secret.
func (c *SecretClient) Query() *SecretQuery {
	return &SecretQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSecret},
		inters: c.Interceptors(),
	}
}

// Get returns a Secret entity by its id.
func (c *SecretClient) Get(ctx context.Context, id oid.ID) (*Secret, error) {
	return c.Query().Where(secret.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SecretClient) GetX(ctx context.Context, id oid.ID) *Secret {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProject queries the project edge of a Secret.
func (c *SecretClient) QueryProject(s *Secret) *ProjectQuery {
	query := (&ProjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(secret.Table, secret.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, secret.ProjectTable, secret.ProjectColumn),
		)
		schemaConfig := s.schemaConfig
		step.To.Schema = schemaConfig.Project
		step.Edge.Schema = schemaConfig.Secret
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SecretClient) Hooks() []Hook {
	hooks := c.hooks.Secret
	return append(hooks[:len(hooks):len(hooks)], secret.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *SecretClient) Interceptors() []Interceptor {
	inters := c.inters.Secret
	return append(inters[:len(inters):len(inters)], secret.Interceptors[:]...)
}

func (c *SecretClient) mutate(ctx context.Context, m *SecretMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SecretCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SecretUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SecretUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SecretDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("model: unknown Secret mutation op: %q", m.Op())
	}
}

// ServiceClient is a client for the Service schema.
type ServiceClient struct {
	config
}

// NewServiceClient returns a client for the Service from the given config.
func NewServiceClient(c config) *ServiceClient {
	return &ServiceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `service.Hooks(f(g(h())))`.
func (c *ServiceClient) Use(hooks ...Hook) {
	c.hooks.Service = append(c.hooks.Service, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `service.Intercept(f(g(h())))`.
func (c *ServiceClient) Intercept(interceptors ...Interceptor) {
	c.inters.Service = append(c.inters.Service, interceptors...)
}

// Create returns a builder for creating a Service entity.
func (c *ServiceClient) Create() *ServiceCreate {
	mutation := newServiceMutation(c.config, OpCreate)
	return &ServiceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Service entities.
func (c *ServiceClient) CreateBulk(builders ...*ServiceCreate) *ServiceCreateBulk {
	return &ServiceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Service.
func (c *ServiceClient) Update() *ServiceUpdate {
	mutation := newServiceMutation(c.config, OpUpdate)
	return &ServiceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServiceClient) UpdateOne(s *Service) *ServiceUpdateOne {
	mutation := newServiceMutation(c.config, OpUpdateOne, withService(s))
	return &ServiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServiceClient) UpdateOneID(id oid.ID) *ServiceUpdateOne {
	mutation := newServiceMutation(c.config, OpUpdateOne, withServiceID(id))
	return &ServiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Service.
func (c *ServiceClient) Delete() *ServiceDelete {
	mutation := newServiceMutation(c.config, OpDelete)
	return &ServiceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ServiceClient) DeleteOne(s *Service) *ServiceDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ServiceClient) DeleteOneID(id oid.ID) *ServiceDeleteOne {
	builder := c.Delete().Where(service.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServiceDeleteOne{builder}
}

// Query returns a query builder for Service.
func (c *ServiceClient) Query() *ServiceQuery {
	return &ServiceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeService},
		inters: c.Interceptors(),
	}
}

// Get returns a Service entity by its id.
func (c *ServiceClient) Get(ctx context.Context, id oid.ID) (*Service, error) {
	return c.Query().Where(service.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServiceClient) GetX(ctx context.Context, id oid.ID) *Service {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEnvironment queries the environment edge of a Service.
func (c *ServiceClient) QueryEnvironment(s *Service) *EnvironmentQuery {
	query := (&EnvironmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(service.Table, service.FieldID, id),
			sqlgraph.To(environment.Table, environment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, service.EnvironmentTable, service.EnvironmentColumn),
		)
		schemaConfig := s.schemaConfig
		step.To.Schema = schemaConfig.Environment
		step.Edge.Schema = schemaConfig.Service
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProject queries the project edge of a Service.
func (c *ServiceClient) QueryProject(s *Service) *ProjectQuery {
	query := (&ProjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(service.Table, service.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, service.ProjectTable, service.ProjectColumn),
		)
		schemaConfig := s.schemaConfig
		step.To.Schema = schemaConfig.Project
		step.Edge.Schema = schemaConfig.Service
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRevisions queries the revisions edge of a Service.
func (c *ServiceClient) QueryRevisions(s *Service) *ServiceRevisionQuery {
	query := (&ServiceRevisionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(service.Table, service.FieldID, id),
			sqlgraph.To(servicerevision.Table, servicerevision.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, service.RevisionsTable, service.RevisionsColumn),
		)
		schemaConfig := s.schemaConfig
		step.To.Schema = schemaConfig.ServiceRevision
		step.Edge.Schema = schemaConfig.ServiceRevision
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryResources queries the resources edge of a Service.
func (c *ServiceClient) QueryResources(s *Service) *ServiceResourceQuery {
	query := (&ServiceResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(service.Table, service.FieldID, id),
			sqlgraph.To(serviceresource.Table, serviceresource.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, service.ResourcesTable, service.ResourcesColumn),
		)
		schemaConfig := s.schemaConfig
		step.To.Schema = schemaConfig.ServiceResource
		step.Edge.Schema = schemaConfig.ServiceResource
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ServiceClient) Hooks() []Hook {
	hooks := c.hooks.Service
	return append(hooks[:len(hooks):len(hooks)], service.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ServiceClient) Interceptors() []Interceptor {
	inters := c.inters.Service
	return append(inters[:len(inters):len(inters)], service.Interceptors[:]...)
}

func (c *ServiceClient) mutate(ctx context.Context, m *ServiceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ServiceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ServiceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ServiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ServiceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("model: unknown Service mutation op: %q", m.Op())
	}
}

// ServiceResourceClient is a client for the ServiceResource schema.
type ServiceResourceClient struct {
	config
}

// NewServiceResourceClient returns a client for the ServiceResource from the given config.
func NewServiceResourceClient(c config) *ServiceResourceClient {
	return &ServiceResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `serviceresource.Hooks(f(g(h())))`.
func (c *ServiceResourceClient) Use(hooks ...Hook) {
	c.hooks.ServiceResource = append(c.hooks.ServiceResource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `serviceresource.Intercept(f(g(h())))`.
func (c *ServiceResourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.ServiceResource = append(c.inters.ServiceResource, interceptors...)
}

// Create returns a builder for creating a ServiceResource entity.
func (c *ServiceResourceClient) Create() *ServiceResourceCreate {
	mutation := newServiceResourceMutation(c.config, OpCreate)
	return &ServiceResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ServiceResource entities.
func (c *ServiceResourceClient) CreateBulk(builders ...*ServiceResourceCreate) *ServiceResourceCreateBulk {
	return &ServiceResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ServiceResource.
func (c *ServiceResourceClient) Update() *ServiceResourceUpdate {
	mutation := newServiceResourceMutation(c.config, OpUpdate)
	return &ServiceResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServiceResourceClient) UpdateOne(sr *ServiceResource) *ServiceResourceUpdateOne {
	mutation := newServiceResourceMutation(c.config, OpUpdateOne, withServiceResource(sr))
	return &ServiceResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServiceResourceClient) UpdateOneID(id oid.ID) *ServiceResourceUpdateOne {
	mutation := newServiceResourceMutation(c.config, OpUpdateOne, withServiceResourceID(id))
	return &ServiceResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ServiceResource.
func (c *ServiceResourceClient) Delete() *ServiceResourceDelete {
	mutation := newServiceResourceMutation(c.config, OpDelete)
	return &ServiceResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ServiceResourceClient) DeleteOne(sr *ServiceResource) *ServiceResourceDeleteOne {
	return c.DeleteOneID(sr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ServiceResourceClient) DeleteOneID(id oid.ID) *ServiceResourceDeleteOne {
	builder := c.Delete().Where(serviceresource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServiceResourceDeleteOne{builder}
}

// Query returns a query builder for ServiceResource.
func (c *ServiceResourceClient) Query() *ServiceResourceQuery {
	return &ServiceResourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeServiceResource},
		inters: c.Interceptors(),
	}
}

// Get returns a ServiceResource entity by its id.
func (c *ServiceResourceClient) Get(ctx context.Context, id oid.ID) (*ServiceResource, error) {
	return c.Query().Where(serviceresource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServiceResourceClient) GetX(ctx context.Context, id oid.ID) *ServiceResource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryService queries the service edge of a ServiceResource.
func (c *ServiceResourceClient) QueryService(sr *ServiceResource) *ServiceQuery {
	query := (&ServiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(serviceresource.Table, serviceresource.FieldID, id),
			sqlgraph.To(service.Table, service.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, serviceresource.ServiceTable, serviceresource.ServiceColumn),
		)
		schemaConfig := sr.schemaConfig
		step.To.Schema = schemaConfig.Service
		step.Edge.Schema = schemaConfig.ServiceResource
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryConnector queries the connector edge of a ServiceResource.
func (c *ServiceResourceClient) QueryConnector(sr *ServiceResource) *ConnectorQuery {
	query := (&ConnectorClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(serviceresource.Table, serviceresource.FieldID, id),
			sqlgraph.To(connector.Table, connector.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, serviceresource.ConnectorTable, serviceresource.ConnectorColumn),
		)
		schemaConfig := sr.schemaConfig
		step.To.Schema = schemaConfig.Connector
		step.Edge.Schema = schemaConfig.ServiceResource
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryComposition queries the composition edge of a ServiceResource.
func (c *ServiceResourceClient) QueryComposition(sr *ServiceResource) *ServiceResourceQuery {
	query := (&ServiceResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(serviceresource.Table, serviceresource.FieldID, id),
			sqlgraph.To(serviceresource.Table, serviceresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, serviceresource.CompositionTable, serviceresource.CompositionColumn),
		)
		schemaConfig := sr.schemaConfig
		step.To.Schema = schemaConfig.ServiceResource
		step.Edge.Schema = schemaConfig.ServiceResource
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryComponents queries the components edge of a ServiceResource.
func (c *ServiceResourceClient) QueryComponents(sr *ServiceResource) *ServiceResourceQuery {
	query := (&ServiceResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(serviceresource.Table, serviceresource.FieldID, id),
			sqlgraph.To(serviceresource.Table, serviceresource.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, serviceresource.ComponentsTable, serviceresource.ComponentsColumn),
		)
		schemaConfig := sr.schemaConfig
		step.To.Schema = schemaConfig.ServiceResource
		step.Edge.Schema = schemaConfig.ServiceResource
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ServiceResourceClient) Hooks() []Hook {
	hooks := c.hooks.ServiceResource
	return append(hooks[:len(hooks):len(hooks)], serviceresource.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ServiceResourceClient) Interceptors() []Interceptor {
	inters := c.inters.ServiceResource
	return append(inters[:len(inters):len(inters)], serviceresource.Interceptors[:]...)
}

func (c *ServiceResourceClient) mutate(ctx context.Context, m *ServiceResourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ServiceResourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ServiceResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ServiceResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ServiceResourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("model: unknown ServiceResource mutation op: %q", m.Op())
	}
}

// ServiceRevisionClient is a client for the ServiceRevision schema.
type ServiceRevisionClient struct {
	config
}

// NewServiceRevisionClient returns a client for the ServiceRevision from the given config.
func NewServiceRevisionClient(c config) *ServiceRevisionClient {
	return &ServiceRevisionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `servicerevision.Hooks(f(g(h())))`.
func (c *ServiceRevisionClient) Use(hooks ...Hook) {
	c.hooks.ServiceRevision = append(c.hooks.ServiceRevision, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `servicerevision.Intercept(f(g(h())))`.
func (c *ServiceRevisionClient) Intercept(interceptors ...Interceptor) {
	c.inters.ServiceRevision = append(c.inters.ServiceRevision, interceptors...)
}

// Create returns a builder for creating a ServiceRevision entity.
func (c *ServiceRevisionClient) Create() *ServiceRevisionCreate {
	mutation := newServiceRevisionMutation(c.config, OpCreate)
	return &ServiceRevisionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ServiceRevision entities.
func (c *ServiceRevisionClient) CreateBulk(builders ...*ServiceRevisionCreate) *ServiceRevisionCreateBulk {
	return &ServiceRevisionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ServiceRevision.
func (c *ServiceRevisionClient) Update() *ServiceRevisionUpdate {
	mutation := newServiceRevisionMutation(c.config, OpUpdate)
	return &ServiceRevisionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServiceRevisionClient) UpdateOne(sr *ServiceRevision) *ServiceRevisionUpdateOne {
	mutation := newServiceRevisionMutation(c.config, OpUpdateOne, withServiceRevision(sr))
	return &ServiceRevisionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServiceRevisionClient) UpdateOneID(id oid.ID) *ServiceRevisionUpdateOne {
	mutation := newServiceRevisionMutation(c.config, OpUpdateOne, withServiceRevisionID(id))
	return &ServiceRevisionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ServiceRevision.
func (c *ServiceRevisionClient) Delete() *ServiceRevisionDelete {
	mutation := newServiceRevisionMutation(c.config, OpDelete)
	return &ServiceRevisionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ServiceRevisionClient) DeleteOne(sr *ServiceRevision) *ServiceRevisionDeleteOne {
	return c.DeleteOneID(sr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ServiceRevisionClient) DeleteOneID(id oid.ID) *ServiceRevisionDeleteOne {
	builder := c.Delete().Where(servicerevision.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServiceRevisionDeleteOne{builder}
}

// Query returns a query builder for ServiceRevision.
func (c *ServiceRevisionClient) Query() *ServiceRevisionQuery {
	return &ServiceRevisionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeServiceRevision},
		inters: c.Interceptors(),
	}
}

// Get returns a ServiceRevision entity by its id.
func (c *ServiceRevisionClient) Get(ctx context.Context, id oid.ID) (*ServiceRevision, error) {
	return c.Query().Where(servicerevision.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServiceRevisionClient) GetX(ctx context.Context, id oid.ID) *ServiceRevision {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryService queries the service edge of a ServiceRevision.
func (c *ServiceRevisionClient) QueryService(sr *ServiceRevision) *ServiceQuery {
	query := (&ServiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(servicerevision.Table, servicerevision.FieldID, id),
			sqlgraph.To(service.Table, service.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, servicerevision.ServiceTable, servicerevision.ServiceColumn),
		)
		schemaConfig := sr.schemaConfig
		step.To.Schema = schemaConfig.Service
		step.Edge.Schema = schemaConfig.ServiceRevision
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnvironment queries the environment edge of a ServiceRevision.
func (c *ServiceRevisionClient) QueryEnvironment(sr *ServiceRevision) *EnvironmentQuery {
	query := (&EnvironmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(servicerevision.Table, servicerevision.FieldID, id),
			sqlgraph.To(environment.Table, environment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, servicerevision.EnvironmentTable, servicerevision.EnvironmentColumn),
		)
		schemaConfig := sr.schemaConfig
		step.To.Schema = schemaConfig.Environment
		step.Edge.Schema = schemaConfig.ServiceRevision
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProject queries the project edge of a ServiceRevision.
func (c *ServiceRevisionClient) QueryProject(sr *ServiceRevision) *ProjectQuery {
	query := (&ProjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(servicerevision.Table, servicerevision.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, servicerevision.ProjectTable, servicerevision.ProjectColumn),
		)
		schemaConfig := sr.schemaConfig
		step.To.Schema = schemaConfig.Project
		step.Edge.Schema = schemaConfig.ServiceRevision
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ServiceRevisionClient) Hooks() []Hook {
	hooks := c.hooks.ServiceRevision
	return append(hooks[:len(hooks):len(hooks)], servicerevision.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ServiceRevisionClient) Interceptors() []Interceptor {
	inters := c.inters.ServiceRevision
	return append(inters[:len(inters):len(inters)], servicerevision.Interceptors[:]...)
}

func (c *ServiceRevisionClient) mutate(ctx context.Context, m *ServiceRevisionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ServiceRevisionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ServiceRevisionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ServiceRevisionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ServiceRevisionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("model: unknown ServiceRevision mutation op: %q", m.Op())
	}
}

// SettingClient is a client for the Setting schema.
type SettingClient struct {
	config
}

// NewSettingClient returns a client for the Setting from the given config.
func NewSettingClient(c config) *SettingClient {
	return &SettingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `setting.Hooks(f(g(h())))`.
func (c *SettingClient) Use(hooks ...Hook) {
	c.hooks.Setting = append(c.hooks.Setting, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `setting.Intercept(f(g(h())))`.
func (c *SettingClient) Intercept(interceptors ...Interceptor) {
	c.inters.Setting = append(c.inters.Setting, interceptors...)
}

// Create returns a builder for creating a Setting entity.
func (c *SettingClient) Create() *SettingCreate {
	mutation := newSettingMutation(c.config, OpCreate)
	return &SettingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Setting entities.
func (c *SettingClient) CreateBulk(builders ...*SettingCreate) *SettingCreateBulk {
	return &SettingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Setting.
func (c *SettingClient) Update() *SettingUpdate {
	mutation := newSettingMutation(c.config, OpUpdate)
	return &SettingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SettingClient) UpdateOne(s *Setting) *SettingUpdateOne {
	mutation := newSettingMutation(c.config, OpUpdateOne, withSetting(s))
	return &SettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SettingClient) UpdateOneID(id oid.ID) *SettingUpdateOne {
	mutation := newSettingMutation(c.config, OpUpdateOne, withSettingID(id))
	return &SettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Setting.
func (c *SettingClient) Delete() *SettingDelete {
	mutation := newSettingMutation(c.config, OpDelete)
	return &SettingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SettingClient) DeleteOne(s *Setting) *SettingDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SettingClient) DeleteOneID(id oid.ID) *SettingDeleteOne {
	builder := c.Delete().Where(setting.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SettingDeleteOne{builder}
}

// Query returns a query builder for Setting.
func (c *SettingClient) Query() *SettingQuery {
	return &SettingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSetting},
		inters: c.Interceptors(),
	}
}

// Get returns a Setting entity by its id.
func (c *SettingClient) Get(ctx context.Context, id oid.ID) (*Setting, error) {
	return c.Query().Where(setting.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SettingClient) GetX(ctx context.Context, id oid.ID) *Setting {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SettingClient) Hooks() []Hook {
	hooks := c.hooks.Setting
	return append(hooks[:len(hooks):len(hooks)], setting.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *SettingClient) Interceptors() []Interceptor {
	return c.inters.Setting
}

func (c *SettingClient) mutate(ctx context.Context, m *SettingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SettingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SettingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SettingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("model: unknown Setting mutation op: %q", m.Op())
	}
}

// SubjectClient is a client for the Subject schema.
type SubjectClient struct {
	config
}

// NewSubjectClient returns a client for the Subject from the given config.
func NewSubjectClient(c config) *SubjectClient {
	return &SubjectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `subject.Hooks(f(g(h())))`.
func (c *SubjectClient) Use(hooks ...Hook) {
	c.hooks.Subject = append(c.hooks.Subject, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `subject.Intercept(f(g(h())))`.
func (c *SubjectClient) Intercept(interceptors ...Interceptor) {
	c.inters.Subject = append(c.inters.Subject, interceptors...)
}

// Create returns a builder for creating a Subject entity.
func (c *SubjectClient) Create() *SubjectCreate {
	mutation := newSubjectMutation(c.config, OpCreate)
	return &SubjectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Subject entities.
func (c *SubjectClient) CreateBulk(builders ...*SubjectCreate) *SubjectCreateBulk {
	return &SubjectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Subject.
func (c *SubjectClient) Update() *SubjectUpdate {
	mutation := newSubjectMutation(c.config, OpUpdate)
	return &SubjectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubjectClient) UpdateOne(s *Subject) *SubjectUpdateOne {
	mutation := newSubjectMutation(c.config, OpUpdateOne, withSubject(s))
	return &SubjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubjectClient) UpdateOneID(id oid.ID) *SubjectUpdateOne {
	mutation := newSubjectMutation(c.config, OpUpdateOne, withSubjectID(id))
	return &SubjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Subject.
func (c *SubjectClient) Delete() *SubjectDelete {
	mutation := newSubjectMutation(c.config, OpDelete)
	return &SubjectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SubjectClient) DeleteOne(s *Subject) *SubjectDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SubjectClient) DeleteOneID(id oid.ID) *SubjectDeleteOne {
	builder := c.Delete().Where(subject.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubjectDeleteOne{builder}
}

// Query returns a query builder for Subject.
func (c *SubjectClient) Query() *SubjectQuery {
	return &SubjectQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSubject},
		inters: c.Interceptors(),
	}
}

// Get returns a Subject entity by its id.
func (c *SubjectClient) Get(ctx context.Context, id oid.ID) (*Subject, error) {
	return c.Query().Where(subject.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubjectClient) GetX(ctx context.Context, id oid.ID) *Subject {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTokens queries the tokens edge of a Subject.
func (c *SubjectClient) QueryTokens(s *Subject) *TokenQuery {
	query := (&TokenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subject.Table, subject.FieldID, id),
			sqlgraph.To(token.Table, token.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subject.TokensTable, subject.TokensColumn),
		)
		schemaConfig := s.schemaConfig
		step.To.Schema = schemaConfig.Token
		step.Edge.Schema = schemaConfig.Token
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoles queries the roles edge of a Subject.
func (c *SubjectClient) QueryRoles(s *Subject) *SubjectRoleRelationshipQuery {
	query := (&SubjectRoleRelationshipClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subject.Table, subject.FieldID, id),
			sqlgraph.To(subjectrolerelationship.Table, subjectrolerelationship.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, subject.RolesTable, subject.RolesColumn),
		)
		schemaConfig := s.schemaConfig
		step.To.Schema = schemaConfig.SubjectRoleRelationship
		step.Edge.Schema = schemaConfig.SubjectRoleRelationship
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SubjectClient) Hooks() []Hook {
	hooks := c.hooks.Subject
	return append(hooks[:len(hooks):len(hooks)], subject.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *SubjectClient) Interceptors() []Interceptor {
	return c.inters.Subject
}

func (c *SubjectClient) mutate(ctx context.Context, m *SubjectMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SubjectCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SubjectUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SubjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SubjectDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("model: unknown Subject mutation op: %q", m.Op())
	}
}

// SubjectRoleRelationshipClient is a client for the SubjectRoleRelationship schema.
type SubjectRoleRelationshipClient struct {
	config
}

// NewSubjectRoleRelationshipClient returns a client for the SubjectRoleRelationship from the given config.
func NewSubjectRoleRelationshipClient(c config) *SubjectRoleRelationshipClient {
	return &SubjectRoleRelationshipClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `subjectrolerelationship.Hooks(f(g(h())))`.
func (c *SubjectRoleRelationshipClient) Use(hooks ...Hook) {
	c.hooks.SubjectRoleRelationship = append(c.hooks.SubjectRoleRelationship, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `subjectrolerelationship.Intercept(f(g(h())))`.
func (c *SubjectRoleRelationshipClient) Intercept(interceptors ...Interceptor) {
	c.inters.SubjectRoleRelationship = append(c.inters.SubjectRoleRelationship, interceptors...)
}

// Create returns a builder for creating a SubjectRoleRelationship entity.
func (c *SubjectRoleRelationshipClient) Create() *SubjectRoleRelationshipCreate {
	mutation := newSubjectRoleRelationshipMutation(c.config, OpCreate)
	return &SubjectRoleRelationshipCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SubjectRoleRelationship entities.
func (c *SubjectRoleRelationshipClient) CreateBulk(builders ...*SubjectRoleRelationshipCreate) *SubjectRoleRelationshipCreateBulk {
	return &SubjectRoleRelationshipCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SubjectRoleRelationship.
func (c *SubjectRoleRelationshipClient) Update() *SubjectRoleRelationshipUpdate {
	mutation := newSubjectRoleRelationshipMutation(c.config, OpUpdate)
	return &SubjectRoleRelationshipUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubjectRoleRelationshipClient) UpdateOne(srr *SubjectRoleRelationship) *SubjectRoleRelationshipUpdateOne {
	mutation := newSubjectRoleRelationshipMutation(c.config, OpUpdateOne, withSubjectRoleRelationship(srr))
	return &SubjectRoleRelationshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubjectRoleRelationshipClient) UpdateOneID(id oid.ID) *SubjectRoleRelationshipUpdateOne {
	mutation := newSubjectRoleRelationshipMutation(c.config, OpUpdateOne, withSubjectRoleRelationshipID(id))
	return &SubjectRoleRelationshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SubjectRoleRelationship.
func (c *SubjectRoleRelationshipClient) Delete() *SubjectRoleRelationshipDelete {
	mutation := newSubjectRoleRelationshipMutation(c.config, OpDelete)
	return &SubjectRoleRelationshipDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SubjectRoleRelationshipClient) DeleteOne(srr *SubjectRoleRelationship) *SubjectRoleRelationshipDeleteOne {
	return c.DeleteOneID(srr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SubjectRoleRelationshipClient) DeleteOneID(id oid.ID) *SubjectRoleRelationshipDeleteOne {
	builder := c.Delete().Where(subjectrolerelationship.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubjectRoleRelationshipDeleteOne{builder}
}

// Query returns a query builder for SubjectRoleRelationship.
func (c *SubjectRoleRelationshipClient) Query() *SubjectRoleRelationshipQuery {
	return &SubjectRoleRelationshipQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSubjectRoleRelationship},
		inters: c.Interceptors(),
	}
}

// Get returns a SubjectRoleRelationship entity by its id.
func (c *SubjectRoleRelationshipClient) Get(ctx context.Context, id oid.ID) (*SubjectRoleRelationship, error) {
	return c.Query().Where(subjectrolerelationship.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubjectRoleRelationshipClient) GetX(ctx context.Context, id oid.ID) *SubjectRoleRelationship {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProject queries the project edge of a SubjectRoleRelationship.
func (c *SubjectRoleRelationshipClient) QueryProject(srr *SubjectRoleRelationship) *ProjectQuery {
	query := (&ProjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := srr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subjectrolerelationship.Table, subjectrolerelationship.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subjectrolerelationship.ProjectTable, subjectrolerelationship.ProjectColumn),
		)
		schemaConfig := srr.schemaConfig
		step.To.Schema = schemaConfig.Project
		step.Edge.Schema = schemaConfig.SubjectRoleRelationship
		fromV = sqlgraph.Neighbors(srr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubject queries the subject edge of a SubjectRoleRelationship.
func (c *SubjectRoleRelationshipClient) QuerySubject(srr *SubjectRoleRelationship) *SubjectQuery {
	query := (&SubjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := srr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subjectrolerelationship.Table, subjectrolerelationship.FieldID, id),
			sqlgraph.To(subject.Table, subject.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subjectrolerelationship.SubjectTable, subjectrolerelationship.SubjectColumn),
		)
		schemaConfig := srr.schemaConfig
		step.To.Schema = schemaConfig.Subject
		step.Edge.Schema = schemaConfig.SubjectRoleRelationship
		fromV = sqlgraph.Neighbors(srr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRole queries the role edge of a SubjectRoleRelationship.
func (c *SubjectRoleRelationshipClient) QueryRole(srr *SubjectRoleRelationship) *RoleQuery {
	query := (&RoleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := srr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subjectrolerelationship.Table, subjectrolerelationship.FieldID, id),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subjectrolerelationship.RoleTable, subjectrolerelationship.RoleColumn),
		)
		schemaConfig := srr.schemaConfig
		step.To.Schema = schemaConfig.Role
		step.Edge.Schema = schemaConfig.SubjectRoleRelationship
		fromV = sqlgraph.Neighbors(srr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SubjectRoleRelationshipClient) Hooks() []Hook {
	hooks := c.hooks.SubjectRoleRelationship
	return append(hooks[:len(hooks):len(hooks)], subjectrolerelationship.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *SubjectRoleRelationshipClient) Interceptors() []Interceptor {
	inters := c.inters.SubjectRoleRelationship
	return append(inters[:len(inters):len(inters)], subjectrolerelationship.Interceptors[:]...)
}

func (c *SubjectRoleRelationshipClient) mutate(ctx context.Context, m *SubjectRoleRelationshipMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SubjectRoleRelationshipCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SubjectRoleRelationshipUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SubjectRoleRelationshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SubjectRoleRelationshipDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("model: unknown SubjectRoleRelationship mutation op: %q", m.Op())
	}
}

// TemplateClient is a client for the Template schema.
type TemplateClient struct {
	config
}

// NewTemplateClient returns a client for the Template from the given config.
func NewTemplateClient(c config) *TemplateClient {
	return &TemplateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `template.Hooks(f(g(h())))`.
func (c *TemplateClient) Use(hooks ...Hook) {
	c.hooks.Template = append(c.hooks.Template, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `template.Intercept(f(g(h())))`.
func (c *TemplateClient) Intercept(interceptors ...Interceptor) {
	c.inters.Template = append(c.inters.Template, interceptors...)
}

// Create returns a builder for creating a Template entity.
func (c *TemplateClient) Create() *TemplateCreate {
	mutation := newTemplateMutation(c.config, OpCreate)
	return &TemplateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Template entities.
func (c *TemplateClient) CreateBulk(builders ...*TemplateCreate) *TemplateCreateBulk {
	return &TemplateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Template.
func (c *TemplateClient) Update() *TemplateUpdate {
	mutation := newTemplateMutation(c.config, OpUpdate)
	return &TemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TemplateClient) UpdateOne(t *Template) *TemplateUpdateOne {
	mutation := newTemplateMutation(c.config, OpUpdateOne, withTemplate(t))
	return &TemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TemplateClient) UpdateOneID(id string) *TemplateUpdateOne {
	mutation := newTemplateMutation(c.config, OpUpdateOne, withTemplateID(id))
	return &TemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Template.
func (c *TemplateClient) Delete() *TemplateDelete {
	mutation := newTemplateMutation(c.config, OpDelete)
	return &TemplateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TemplateClient) DeleteOne(t *Template) *TemplateDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TemplateClient) DeleteOneID(id string) *TemplateDeleteOne {
	builder := c.Delete().Where(template.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TemplateDeleteOne{builder}
}

// Query returns a query builder for Template.
func (c *TemplateClient) Query() *TemplateQuery {
	return &TemplateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTemplate},
		inters: c.Interceptors(),
	}
}

// Get returns a Template entity by its id.
func (c *TemplateClient) Get(ctx context.Context, id string) (*Template, error) {
	return c.Query().Where(template.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TemplateClient) GetX(ctx context.Context, id string) *Template {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryVersions queries the versions edge of a Template.
func (c *TemplateClient) QueryVersions(t *Template) *TemplateVersionQuery {
	query := (&TemplateVersionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(template.Table, template.FieldID, id),
			sqlgraph.To(templateversion.Table, templateversion.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, template.VersionsTable, template.VersionsColumn),
		)
		schemaConfig := t.schemaConfig
		step.To.Schema = schemaConfig.TemplateVersion
		step.Edge.Schema = schemaConfig.TemplateVersion
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TemplateClient) Hooks() []Hook {
	return c.hooks.Template
}

// Interceptors returns the client interceptors.
func (c *TemplateClient) Interceptors() []Interceptor {
	return c.inters.Template
}

func (c *TemplateClient) mutate(ctx context.Context, m *TemplateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TemplateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TemplateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("model: unknown Template mutation op: %q", m.Op())
	}
}

// TemplateVersionClient is a client for the TemplateVersion schema.
type TemplateVersionClient struct {
	config
}

// NewTemplateVersionClient returns a client for the TemplateVersion from the given config.
func NewTemplateVersionClient(c config) *TemplateVersionClient {
	return &TemplateVersionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `templateversion.Hooks(f(g(h())))`.
func (c *TemplateVersionClient) Use(hooks ...Hook) {
	c.hooks.TemplateVersion = append(c.hooks.TemplateVersion, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `templateversion.Intercept(f(g(h())))`.
func (c *TemplateVersionClient) Intercept(interceptors ...Interceptor) {
	c.inters.TemplateVersion = append(c.inters.TemplateVersion, interceptors...)
}

// Create returns a builder for creating a TemplateVersion entity.
func (c *TemplateVersionClient) Create() *TemplateVersionCreate {
	mutation := newTemplateVersionMutation(c.config, OpCreate)
	return &TemplateVersionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TemplateVersion entities.
func (c *TemplateVersionClient) CreateBulk(builders ...*TemplateVersionCreate) *TemplateVersionCreateBulk {
	return &TemplateVersionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TemplateVersion.
func (c *TemplateVersionClient) Update() *TemplateVersionUpdate {
	mutation := newTemplateVersionMutation(c.config, OpUpdate)
	return &TemplateVersionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TemplateVersionClient) UpdateOne(tv *TemplateVersion) *TemplateVersionUpdateOne {
	mutation := newTemplateVersionMutation(c.config, OpUpdateOne, withTemplateVersion(tv))
	return &TemplateVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TemplateVersionClient) UpdateOneID(id oid.ID) *TemplateVersionUpdateOne {
	mutation := newTemplateVersionMutation(c.config, OpUpdateOne, withTemplateVersionID(id))
	return &TemplateVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TemplateVersion.
func (c *TemplateVersionClient) Delete() *TemplateVersionDelete {
	mutation := newTemplateVersionMutation(c.config, OpDelete)
	return &TemplateVersionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TemplateVersionClient) DeleteOne(tv *TemplateVersion) *TemplateVersionDeleteOne {
	return c.DeleteOneID(tv.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TemplateVersionClient) DeleteOneID(id oid.ID) *TemplateVersionDeleteOne {
	builder := c.Delete().Where(templateversion.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TemplateVersionDeleteOne{builder}
}

// Query returns a query builder for TemplateVersion.
func (c *TemplateVersionClient) Query() *TemplateVersionQuery {
	return &TemplateVersionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTemplateVersion},
		inters: c.Interceptors(),
	}
}

// Get returns a TemplateVersion entity by its id.
func (c *TemplateVersionClient) Get(ctx context.Context, id oid.ID) (*TemplateVersion, error) {
	return c.Query().Where(templateversion.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TemplateVersionClient) GetX(ctx context.Context, id oid.ID) *TemplateVersion {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTemplate queries the template edge of a TemplateVersion.
func (c *TemplateVersionClient) QueryTemplate(tv *TemplateVersion) *TemplateQuery {
	query := (&TemplateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(templateversion.Table, templateversion.FieldID, id),
			sqlgraph.To(template.Table, template.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, templateversion.TemplateTable, templateversion.TemplateColumn),
		)
		schemaConfig := tv.schemaConfig
		step.To.Schema = schemaConfig.Template
		step.Edge.Schema = schemaConfig.TemplateVersion
		fromV = sqlgraph.Neighbors(tv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TemplateVersionClient) Hooks() []Hook {
	hooks := c.hooks.TemplateVersion
	return append(hooks[:len(hooks):len(hooks)], templateversion.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *TemplateVersionClient) Interceptors() []Interceptor {
	return c.inters.TemplateVersion
}

func (c *TemplateVersionClient) mutate(ctx context.Context, m *TemplateVersionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TemplateVersionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TemplateVersionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TemplateVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TemplateVersionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("model: unknown TemplateVersion mutation op: %q", m.Op())
	}
}

// TokenClient is a client for the Token schema.
type TokenClient struct {
	config
}

// NewTokenClient returns a client for the Token from the given config.
func NewTokenClient(c config) *TokenClient {
	return &TokenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `token.Hooks(f(g(h())))`.
func (c *TokenClient) Use(hooks ...Hook) {
	c.hooks.Token = append(c.hooks.Token, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `token.Intercept(f(g(h())))`.
func (c *TokenClient) Intercept(interceptors ...Interceptor) {
	c.inters.Token = append(c.inters.Token, interceptors...)
}

// Create returns a builder for creating a Token entity.
func (c *TokenClient) Create() *TokenCreate {
	mutation := newTokenMutation(c.config, OpCreate)
	return &TokenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Token entities.
func (c *TokenClient) CreateBulk(builders ...*TokenCreate) *TokenCreateBulk {
	return &TokenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Token.
func (c *TokenClient) Update() *TokenUpdate {
	mutation := newTokenMutation(c.config, OpUpdate)
	return &TokenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TokenClient) UpdateOne(t *Token) *TokenUpdateOne {
	mutation := newTokenMutation(c.config, OpUpdateOne, withToken(t))
	return &TokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TokenClient) UpdateOneID(id oid.ID) *TokenUpdateOne {
	mutation := newTokenMutation(c.config, OpUpdateOne, withTokenID(id))
	return &TokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Token.
func (c *TokenClient) Delete() *TokenDelete {
	mutation := newTokenMutation(c.config, OpDelete)
	return &TokenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TokenClient) DeleteOne(t *Token) *TokenDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TokenClient) DeleteOneID(id oid.ID) *TokenDeleteOne {
	builder := c.Delete().Where(token.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TokenDeleteOne{builder}
}

// Query returns a query builder for Token.
func (c *TokenClient) Query() *TokenQuery {
	return &TokenQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeToken},
		inters: c.Interceptors(),
	}
}

// Get returns a Token entity by its id.
func (c *TokenClient) Get(ctx context.Context, id oid.ID) (*Token, error) {
	return c.Query().Where(token.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TokenClient) GetX(ctx context.Context, id oid.ID) *Token {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySubject queries the subject edge of a Token.
func (c *TokenClient) QuerySubject(t *Token) *SubjectQuery {
	query := (&SubjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(token.Table, token.FieldID, id),
			sqlgraph.To(subject.Table, subject.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, token.SubjectTable, token.SubjectColumn),
		)
		schemaConfig := t.schemaConfig
		step.To.Schema = schemaConfig.Subject
		step.Edge.Schema = schemaConfig.Token
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TokenClient) Hooks() []Hook {
	hooks := c.hooks.Token
	return append(hooks[:len(hooks):len(hooks)], token.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *TokenClient) Interceptors() []Interceptor {
	inters := c.inters.Token
	return append(inters[:len(inters):len(inters)], token.Interceptors[:]...)
}

func (c *TokenClient) mutate(ctx context.Context, m *TokenMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TokenCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TokenUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TokenDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("model: unknown Token mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		AllocationCost, ClusterCost, Connector, Environment,
		EnvironmentConnectorRelationship, Perspective, Project, Role, Secret, Service,
		ServiceResource, ServiceRevision, Setting, Subject, SubjectRoleRelationship,
		Template, TemplateVersion, Token []ent.Hook
	}
	inters struct {
		AllocationCost, ClusterCost, Connector, Environment,
		EnvironmentConnectorRelationship, Perspective, Project, Role, Secret, Service,
		ServiceResource, ServiceRevision, Setting, Subject, SubjectRoleRelationship,
		Template, TemplateVersion, Token []ent.Interceptor
	}
)

// SchemaConfig represents alternative schema names for all tables
// that can be passed at runtime.
type SchemaConfig = internal.SchemaConfig

// AlternateSchemas allows alternate schema names to be
// passed into ent operations.
func AlternateSchema(schemaConfig SchemaConfig) Option {
	return func(c *config) {
		c.schemaConfig = schemaConfig
	}
}

// ExecContext allows calling the underlying ExecContext method of the driver if it is supported by it.
// See, database/sql#DB.ExecContext for more information.
func (c *config) ExecContext(ctx context.Context, query string, args ...any) (stdsql.Result, error) {
	ex, ok := c.driver.(interface {
		ExecContext(context.Context, string, ...any) (stdsql.Result, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.ExecContext is not supported")
	}
	return ex.ExecContext(ctx, query, args...)
}

// QueryContext allows calling the underlying QueryContext method of the driver if it is supported by it.
// See, database/sql#DB.QueryContext for more information.
func (c *config) QueryContext(ctx context.Context, query string, args ...any) (*stdsql.Rows, error) {
	q, ok := c.driver.(interface {
		QueryContext(context.Context, string, ...any) (*stdsql.Rows, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.QueryContext is not supported")
	}
	return q.QueryContext(ctx, query, args...)
}
