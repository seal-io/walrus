// SPDX-FileCopyrightText: 2023 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "ent". DO NOT EDIT.

package model

import (
	"time"

	"github.com/seal-io/seal/pkg/dao/types/object"
)

// SubjectRoleRelationshipQueryInput is the input for the SubjectRoleRelationship query.
type SubjectRoleRelationshipQueryInput struct {
	// ID holds the value of the "id" field.
	ID object.ID `uri:"id,omitempty" json:"id,omitempty"`
}

// Model converts the SubjectRoleRelationshipQueryInput to SubjectRoleRelationship.
func (in SubjectRoleRelationshipQueryInput) Model() *SubjectRoleRelationship {
	return &SubjectRoleRelationship{
		ID: in.ID,
	}
}

// SubjectRoleRelationshipCreateInput is the input for the SubjectRoleRelationship creation.
type SubjectRoleRelationshipCreateInput struct {
	// Subject that connect to the relationship.
	Subject SubjectQueryInput `json:"subject"`
	// Role that connect to the relationship.
	Role RoleQueryInput `json:"role"`
}

// Model converts the SubjectRoleRelationshipCreateInput to SubjectRoleRelationship.
func (in SubjectRoleRelationshipCreateInput) Model() *SubjectRoleRelationship {
	var entity = &SubjectRoleRelationship{}
	entity.SubjectID = in.Subject.ID
	entity.RoleID = in.Role.ID
	return entity
}

// SubjectRoleRelationshipUpdateInput is the input for the SubjectRoleRelationship modification.
type SubjectRoleRelationshipUpdateInput struct {
	// ID holds the value of the "id" field.
	ID object.ID `uri:"id" json:"-"`
	// Subject that connect to the relationship.
	Subject SubjectQueryInput `json:"subject,omitempty"`
	// Role that connect to the relationship.
	Role RoleQueryInput `json:"role,omitempty"`
}

// Model converts the SubjectRoleRelationshipUpdateInput to SubjectRoleRelationship.
func (in SubjectRoleRelationshipUpdateInput) Model() *SubjectRoleRelationship {
	var entity = &SubjectRoleRelationship{
		ID: in.ID,
	}
	entity.SubjectID = in.Subject.ID
	entity.RoleID = in.Role.ID
	return entity
}

// SubjectRoleRelationshipOutput is the output for the SubjectRoleRelationship.
type SubjectRoleRelationshipOutput struct {
	// ID holds the value of the "id" field.
	ID object.ID `json:"id,omitempty"`
	// CreateTime holds the value of the "createTime" field.
	CreateTime *time.Time `json:"createTime,omitempty"`
	// Project to which the subject role belongs.
	Project *ProjectOutput `json:"project,omitempty"`
	// Subject that connect to the relationship.
	Subject *SubjectOutput `json:"subject,omitempty"`
	// Role that connect to the relationship.
	Role *RoleOutput `json:"role,omitempty"`
}

// ExposeSubjectRoleRelationship converts the SubjectRoleRelationship to SubjectRoleRelationshipOutput.
func ExposeSubjectRoleRelationship(in *SubjectRoleRelationship) *SubjectRoleRelationshipOutput {
	if in == nil {
		return nil
	}
	var entity = &SubjectRoleRelationshipOutput{
		ID:         in.ID,
		CreateTime: in.CreateTime,
		Project:    ExposeProject(in.Edges.Project),
		Subject:    ExposeSubject(in.Edges.Subject),
		Role:       ExposeRole(in.Edges.Role),
	}
	if in.ProjectID != "" {
		if entity.Project == nil {
			entity.Project = &ProjectOutput{}
		}
		entity.Project.ID = in.ProjectID
	}
	if in.SubjectID != "" {
		if entity.Subject == nil {
			entity.Subject = &SubjectOutput{}
		}
		entity.Subject.ID = in.SubjectID
	}
	if in.RoleID != "" {
		if entity.Role == nil {
			entity.Role = &RoleOutput{}
		}
		entity.Role.ID = in.RoleID
	}
	return entity
}

// ExposeSubjectRoleRelationships converts the SubjectRoleRelationship slice to SubjectRoleRelationshipOutput pointer slice.
func ExposeSubjectRoleRelationships(in []*SubjectRoleRelationship) []*SubjectRoleRelationshipOutput {
	var out = make([]*SubjectRoleRelationshipOutput, 0, len(in))
	for i := 0; i < len(in); i++ {
		var o = ExposeSubjectRoleRelationship(in[i])
		if o == nil {
			continue
		}
		out = append(out, o)
	}
	if len(out) == 0 {
		return nil
	}
	return out
}
