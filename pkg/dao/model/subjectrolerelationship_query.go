// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus". DO NOT EDIT.

package model

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/seal-io/walrus/pkg/dao/model/internal"
	"github.com/seal-io/walrus/pkg/dao/model/predicate"
	"github.com/seal-io/walrus/pkg/dao/model/project"
	"github.com/seal-io/walrus/pkg/dao/model/role"
	"github.com/seal-io/walrus/pkg/dao/model/subject"
	"github.com/seal-io/walrus/pkg/dao/model/subjectrolerelationship"
	"github.com/seal-io/walrus/pkg/dao/types/object"
)

// SubjectRoleRelationshipQuery is the builder for querying SubjectRoleRelationship entities.
type SubjectRoleRelationshipQuery struct {
	config
	ctx         *QueryContext
	order       []subjectrolerelationship.OrderOption
	inters      []Interceptor
	predicates  []predicate.SubjectRoleRelationship
	withProject *ProjectQuery
	withSubject *SubjectQuery
	withRole    *RoleQuery
	modifiers   []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SubjectRoleRelationshipQuery builder.
func (srrq *SubjectRoleRelationshipQuery) Where(ps ...predicate.SubjectRoleRelationship) *SubjectRoleRelationshipQuery {
	srrq.predicates = append(srrq.predicates, ps...)
	return srrq
}

// Limit the number of records to be returned by this query.
func (srrq *SubjectRoleRelationshipQuery) Limit(limit int) *SubjectRoleRelationshipQuery {
	srrq.ctx.Limit = &limit
	return srrq
}

// Offset to start from.
func (srrq *SubjectRoleRelationshipQuery) Offset(offset int) *SubjectRoleRelationshipQuery {
	srrq.ctx.Offset = &offset
	return srrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (srrq *SubjectRoleRelationshipQuery) Unique(unique bool) *SubjectRoleRelationshipQuery {
	srrq.ctx.Unique = &unique
	return srrq
}

// Order specifies how the records should be ordered.
func (srrq *SubjectRoleRelationshipQuery) Order(o ...subjectrolerelationship.OrderOption) *SubjectRoleRelationshipQuery {
	srrq.order = append(srrq.order, o...)
	return srrq
}

// QueryProject chains the current query on the "project" edge.
func (srrq *SubjectRoleRelationshipQuery) QueryProject() *ProjectQuery {
	query := (&ProjectClient{config: srrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := srrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := srrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subjectrolerelationship.Table, subjectrolerelationship.FieldID, selector),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subjectrolerelationship.ProjectTable, subjectrolerelationship.ProjectColumn),
		)
		schemaConfig := srrq.schemaConfig
		step.To.Schema = schemaConfig.Project
		step.Edge.Schema = schemaConfig.SubjectRoleRelationship
		fromU = sqlgraph.SetNeighbors(srrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubject chains the current query on the "subject" edge.
func (srrq *SubjectRoleRelationshipQuery) QuerySubject() *SubjectQuery {
	query := (&SubjectClient{config: srrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := srrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := srrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subjectrolerelationship.Table, subjectrolerelationship.FieldID, selector),
			sqlgraph.To(subject.Table, subject.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subjectrolerelationship.SubjectTable, subjectrolerelationship.SubjectColumn),
		)
		schemaConfig := srrq.schemaConfig
		step.To.Schema = schemaConfig.Subject
		step.Edge.Schema = schemaConfig.SubjectRoleRelationship
		fromU = sqlgraph.SetNeighbors(srrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRole chains the current query on the "role" edge.
func (srrq *SubjectRoleRelationshipQuery) QueryRole() *RoleQuery {
	query := (&RoleClient{config: srrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := srrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := srrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subjectrolerelationship.Table, subjectrolerelationship.FieldID, selector),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subjectrolerelationship.RoleTable, subjectrolerelationship.RoleColumn),
		)
		schemaConfig := srrq.schemaConfig
		step.To.Schema = schemaConfig.Role
		step.Edge.Schema = schemaConfig.SubjectRoleRelationship
		fromU = sqlgraph.SetNeighbors(srrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SubjectRoleRelationship entity from the query.
// Returns a *NotFoundError when no SubjectRoleRelationship was found.
func (srrq *SubjectRoleRelationshipQuery) First(ctx context.Context) (*SubjectRoleRelationship, error) {
	nodes, err := srrq.Limit(1).All(setContextOp(ctx, srrq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{subjectrolerelationship.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (srrq *SubjectRoleRelationshipQuery) FirstX(ctx context.Context) *SubjectRoleRelationship {
	node, err := srrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SubjectRoleRelationship ID from the query.
// Returns a *NotFoundError when no SubjectRoleRelationship ID was found.
func (srrq *SubjectRoleRelationshipQuery) FirstID(ctx context.Context) (id object.ID, err error) {
	var ids []object.ID
	if ids, err = srrq.Limit(1).IDs(setContextOp(ctx, srrq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{subjectrolerelationship.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (srrq *SubjectRoleRelationshipQuery) FirstIDX(ctx context.Context) object.ID {
	id, err := srrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SubjectRoleRelationship entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SubjectRoleRelationship entity is found.
// Returns a *NotFoundError when no SubjectRoleRelationship entities are found.
func (srrq *SubjectRoleRelationshipQuery) Only(ctx context.Context) (*SubjectRoleRelationship, error) {
	nodes, err := srrq.Limit(2).All(setContextOp(ctx, srrq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{subjectrolerelationship.Label}
	default:
		return nil, &NotSingularError{subjectrolerelationship.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (srrq *SubjectRoleRelationshipQuery) OnlyX(ctx context.Context) *SubjectRoleRelationship {
	node, err := srrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SubjectRoleRelationship ID in the query.
// Returns a *NotSingularError when more than one SubjectRoleRelationship ID is found.
// Returns a *NotFoundError when no entities are found.
func (srrq *SubjectRoleRelationshipQuery) OnlyID(ctx context.Context) (id object.ID, err error) {
	var ids []object.ID
	if ids, err = srrq.Limit(2).IDs(setContextOp(ctx, srrq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{subjectrolerelationship.Label}
	default:
		err = &NotSingularError{subjectrolerelationship.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (srrq *SubjectRoleRelationshipQuery) OnlyIDX(ctx context.Context) object.ID {
	id, err := srrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SubjectRoleRelationships.
func (srrq *SubjectRoleRelationshipQuery) All(ctx context.Context) ([]*SubjectRoleRelationship, error) {
	ctx = setContextOp(ctx, srrq.ctx, "All")
	if err := srrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SubjectRoleRelationship, *SubjectRoleRelationshipQuery]()
	return withInterceptors[[]*SubjectRoleRelationship](ctx, srrq, qr, srrq.inters)
}

// AllX is like All, but panics if an error occurs.
func (srrq *SubjectRoleRelationshipQuery) AllX(ctx context.Context) []*SubjectRoleRelationship {
	nodes, err := srrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SubjectRoleRelationship IDs.
func (srrq *SubjectRoleRelationshipQuery) IDs(ctx context.Context) (ids []object.ID, err error) {
	if srrq.ctx.Unique == nil && srrq.path != nil {
		srrq.Unique(true)
	}
	ctx = setContextOp(ctx, srrq.ctx, "IDs")
	if err = srrq.Select(subjectrolerelationship.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (srrq *SubjectRoleRelationshipQuery) IDsX(ctx context.Context) []object.ID {
	ids, err := srrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (srrq *SubjectRoleRelationshipQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, srrq.ctx, "Count")
	if err := srrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, srrq, querierCount[*SubjectRoleRelationshipQuery](), srrq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (srrq *SubjectRoleRelationshipQuery) CountX(ctx context.Context) int {
	count, err := srrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (srrq *SubjectRoleRelationshipQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, srrq.ctx, "Exist")
	switch _, err := srrq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("model: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (srrq *SubjectRoleRelationshipQuery) ExistX(ctx context.Context) bool {
	exist, err := srrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SubjectRoleRelationshipQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (srrq *SubjectRoleRelationshipQuery) Clone() *SubjectRoleRelationshipQuery {
	if srrq == nil {
		return nil
	}
	return &SubjectRoleRelationshipQuery{
		config:      srrq.config,
		ctx:         srrq.ctx.Clone(),
		order:       append([]subjectrolerelationship.OrderOption{}, srrq.order...),
		inters:      append([]Interceptor{}, srrq.inters...),
		predicates:  append([]predicate.SubjectRoleRelationship{}, srrq.predicates...),
		withProject: srrq.withProject.Clone(),
		withSubject: srrq.withSubject.Clone(),
		withRole:    srrq.withRole.Clone(),
		// clone intermediate query.
		sql:  srrq.sql.Clone(),
		path: srrq.path,
	}
}

// WithProject tells the query-builder to eager-load the nodes that are connected to
// the "project" edge. The optional arguments are used to configure the query builder of the edge.
func (srrq *SubjectRoleRelationshipQuery) WithProject(opts ...func(*ProjectQuery)) *SubjectRoleRelationshipQuery {
	query := (&ProjectClient{config: srrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	srrq.withProject = query
	return srrq
}

// WithSubject tells the query-builder to eager-load the nodes that are connected to
// the "subject" edge. The optional arguments are used to configure the query builder of the edge.
func (srrq *SubjectRoleRelationshipQuery) WithSubject(opts ...func(*SubjectQuery)) *SubjectRoleRelationshipQuery {
	query := (&SubjectClient{config: srrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	srrq.withSubject = query
	return srrq
}

// WithRole tells the query-builder to eager-load the nodes that are connected to
// the "role" edge. The optional arguments are used to configure the query builder of the edge.
func (srrq *SubjectRoleRelationshipQuery) WithRole(opts ...func(*RoleQuery)) *SubjectRoleRelationshipQuery {
	query := (&RoleClient{config: srrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	srrq.withRole = query
	return srrq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SubjectRoleRelationship.Query().
//		GroupBy(subjectrolerelationship.FieldCreateTime).
//		Aggregate(model.Count()).
//		Scan(ctx, &v)
func (srrq *SubjectRoleRelationshipQuery) GroupBy(field string, fields ...string) *SubjectRoleRelationshipGroupBy {
	srrq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SubjectRoleRelationshipGroupBy{build: srrq}
	grbuild.flds = &srrq.ctx.Fields
	grbuild.label = subjectrolerelationship.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.SubjectRoleRelationship.Query().
//		Select(subjectrolerelationship.FieldCreateTime).
//		Scan(ctx, &v)
func (srrq *SubjectRoleRelationshipQuery) Select(fields ...string) *SubjectRoleRelationshipSelect {
	srrq.ctx.Fields = append(srrq.ctx.Fields, fields...)
	sbuild := &SubjectRoleRelationshipSelect{SubjectRoleRelationshipQuery: srrq}
	sbuild.label = subjectrolerelationship.Label
	sbuild.flds, sbuild.scan = &srrq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SubjectRoleRelationshipSelect configured with the given aggregations.
func (srrq *SubjectRoleRelationshipQuery) Aggregate(fns ...AggregateFunc) *SubjectRoleRelationshipSelect {
	return srrq.Select().Aggregate(fns...)
}

func (srrq *SubjectRoleRelationshipQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range srrq.inters {
		if inter == nil {
			return fmt.Errorf("model: uninitialized interceptor (forgotten import model/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, srrq); err != nil {
				return err
			}
		}
	}
	for _, f := range srrq.ctx.Fields {
		if !subjectrolerelationship.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
		}
	}
	if srrq.path != nil {
		prev, err := srrq.path(ctx)
		if err != nil {
			return err
		}
		srrq.sql = prev
	}
	return nil
}

func (srrq *SubjectRoleRelationshipQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SubjectRoleRelationship, error) {
	var (
		nodes       = []*SubjectRoleRelationship{}
		_spec       = srrq.querySpec()
		loadedTypes = [3]bool{
			srrq.withProject != nil,
			srrq.withSubject != nil,
			srrq.withRole != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SubjectRoleRelationship).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SubjectRoleRelationship{config: srrq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = srrq.schemaConfig.SubjectRoleRelationship
	ctx = internal.NewSchemaConfigContext(ctx, srrq.schemaConfig)
	if len(srrq.modifiers) > 0 {
		_spec.Modifiers = srrq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, srrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := srrq.withProject; query != nil {
		if err := srrq.loadProject(ctx, query, nodes, nil,
			func(n *SubjectRoleRelationship, e *Project) { n.Edges.Project = e }); err != nil {
			return nil, err
		}
	}
	if query := srrq.withSubject; query != nil {
		if err := srrq.loadSubject(ctx, query, nodes, nil,
			func(n *SubjectRoleRelationship, e *Subject) { n.Edges.Subject = e }); err != nil {
			return nil, err
		}
	}
	if query := srrq.withRole; query != nil {
		if err := srrq.loadRole(ctx, query, nodes, nil,
			func(n *SubjectRoleRelationship, e *Role) { n.Edges.Role = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (srrq *SubjectRoleRelationshipQuery) loadProject(ctx context.Context, query *ProjectQuery, nodes []*SubjectRoleRelationship, init func(*SubjectRoleRelationship), assign func(*SubjectRoleRelationship, *Project)) error {
	ids := make([]object.ID, 0, len(nodes))
	nodeids := make(map[object.ID][]*SubjectRoleRelationship)
	for i := range nodes {
		fk := nodes[i].ProjectID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(project.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "project_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (srrq *SubjectRoleRelationshipQuery) loadSubject(ctx context.Context, query *SubjectQuery, nodes []*SubjectRoleRelationship, init func(*SubjectRoleRelationship), assign func(*SubjectRoleRelationship, *Subject)) error {
	ids := make([]object.ID, 0, len(nodes))
	nodeids := make(map[object.ID][]*SubjectRoleRelationship)
	for i := range nodes {
		fk := nodes[i].SubjectID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(subject.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "subject_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (srrq *SubjectRoleRelationshipQuery) loadRole(ctx context.Context, query *RoleQuery, nodes []*SubjectRoleRelationship, init func(*SubjectRoleRelationship), assign func(*SubjectRoleRelationship, *Role)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*SubjectRoleRelationship)
	for i := range nodes {
		fk := nodes[i].RoleID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(role.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "role_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (srrq *SubjectRoleRelationshipQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := srrq.querySpec()
	_spec.Node.Schema = srrq.schemaConfig.SubjectRoleRelationship
	ctx = internal.NewSchemaConfigContext(ctx, srrq.schemaConfig)
	if len(srrq.modifiers) > 0 {
		_spec.Modifiers = srrq.modifiers
	}
	_spec.Node.Columns = srrq.ctx.Fields
	if len(srrq.ctx.Fields) > 0 {
		_spec.Unique = srrq.ctx.Unique != nil && *srrq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, srrq.driver, _spec)
}

func (srrq *SubjectRoleRelationshipQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(subjectrolerelationship.Table, subjectrolerelationship.Columns, sqlgraph.NewFieldSpec(subjectrolerelationship.FieldID, field.TypeString))
	_spec.From = srrq.sql
	if unique := srrq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if srrq.path != nil {
		_spec.Unique = true
	}
	if fields := srrq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subjectrolerelationship.FieldID)
		for i := range fields {
			if fields[i] != subjectrolerelationship.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if srrq.withProject != nil {
			_spec.Node.AddColumnOnce(subjectrolerelationship.FieldProjectID)
		}
		if srrq.withSubject != nil {
			_spec.Node.AddColumnOnce(subjectrolerelationship.FieldSubjectID)
		}
		if srrq.withRole != nil {
			_spec.Node.AddColumnOnce(subjectrolerelationship.FieldRoleID)
		}
	}
	if ps := srrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := srrq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := srrq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := srrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (srrq *SubjectRoleRelationshipQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(srrq.driver.Dialect())
	t1 := builder.Table(subjectrolerelationship.Table)
	columns := srrq.ctx.Fields
	if len(columns) == 0 {
		columns = subjectrolerelationship.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if srrq.sql != nil {
		selector = srrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if srrq.ctx.Unique != nil && *srrq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(srrq.schemaConfig.SubjectRoleRelationship)
	ctx = internal.NewSchemaConfigContext(ctx, srrq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range srrq.modifiers {
		m(selector)
	}
	for _, p := range srrq.predicates {
		p(selector)
	}
	for _, p := range srrq.order {
		p(selector)
	}
	if offset := srrq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := srrq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (srrq *SubjectRoleRelationshipQuery) ForUpdate(opts ...sql.LockOption) *SubjectRoleRelationshipQuery {
	if srrq.driver.Dialect() == dialect.Postgres {
		srrq.Unique(false)
	}
	srrq.modifiers = append(srrq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return srrq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (srrq *SubjectRoleRelationshipQuery) ForShare(opts ...sql.LockOption) *SubjectRoleRelationshipQuery {
	if srrq.driver.Dialect() == dialect.Postgres {
		srrq.Unique(false)
	}
	srrq.modifiers = append(srrq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return srrq
}

// Modify adds a query modifier for attaching custom logic to queries.
func (srrq *SubjectRoleRelationshipQuery) Modify(modifiers ...func(s *sql.Selector)) *SubjectRoleRelationshipSelect {
	srrq.modifiers = append(srrq.modifiers, modifiers...)
	return srrq.Select()
}

// WhereP appends storage-level predicates to the SubjectRoleRelationshipQuery builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (srrq *SubjectRoleRelationshipQuery) WhereP(ps ...func(*sql.Selector)) {
	var wps = make([]predicate.SubjectRoleRelationship, 0, len(ps))
	for i := 0; i < len(ps); i++ {
		wps = append(wps, predicate.SubjectRoleRelationship(ps[i]))
	}
	srrq.predicates = append(srrq.predicates, wps...)
}

// SubjectRoleRelationshipGroupBy is the group-by builder for SubjectRoleRelationship entities.
type SubjectRoleRelationshipGroupBy struct {
	selector
	build *SubjectRoleRelationshipQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (srrgb *SubjectRoleRelationshipGroupBy) Aggregate(fns ...AggregateFunc) *SubjectRoleRelationshipGroupBy {
	srrgb.fns = append(srrgb.fns, fns...)
	return srrgb
}

// Scan applies the selector query and scans the result into the given value.
func (srrgb *SubjectRoleRelationshipGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, srrgb.build.ctx, "GroupBy")
	if err := srrgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SubjectRoleRelationshipQuery, *SubjectRoleRelationshipGroupBy](ctx, srrgb.build, srrgb, srrgb.build.inters, v)
}

func (srrgb *SubjectRoleRelationshipGroupBy) sqlScan(ctx context.Context, root *SubjectRoleRelationshipQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(srrgb.fns))
	for _, fn := range srrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*srrgb.flds)+len(srrgb.fns))
		for _, f := range *srrgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*srrgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := srrgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SubjectRoleRelationshipSelect is the builder for selecting fields of SubjectRoleRelationship entities.
type SubjectRoleRelationshipSelect struct {
	*SubjectRoleRelationshipQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (srrs *SubjectRoleRelationshipSelect) Aggregate(fns ...AggregateFunc) *SubjectRoleRelationshipSelect {
	srrs.fns = append(srrs.fns, fns...)
	return srrs
}

// Scan applies the selector query and scans the result into the given value.
func (srrs *SubjectRoleRelationshipSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, srrs.ctx, "Select")
	if err := srrs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SubjectRoleRelationshipQuery, *SubjectRoleRelationshipSelect](ctx, srrs.SubjectRoleRelationshipQuery, srrs, srrs.inters, v)
}

func (srrs *SubjectRoleRelationshipSelect) sqlScan(ctx context.Context, root *SubjectRoleRelationshipQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(srrs.fns))
	for _, fn := range srrs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*srrs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := srrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (srrs *SubjectRoleRelationshipSelect) Modify(modifiers ...func(s *sql.Selector)) *SubjectRoleRelationshipSelect {
	srrs.modifiers = append(srrs.modifiers, modifiers...)
	return srrs
}
