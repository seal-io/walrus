// SPDX-FileCopyrightText: 2023 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus". DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/seal-io/walrus/pkg/dao/model/environment"
	"github.com/seal-io/walrus/pkg/dao/model/project"
	"github.com/seal-io/walrus/pkg/dao/model/resource"
	"github.com/seal-io/walrus/pkg/dao/model/resourcerevision"
	"github.com/seal-io/walrus/pkg/dao/types"
	"github.com/seal-io/walrus/pkg/dao/types/crypto"
	"github.com/seal-io/walrus/pkg/dao/types/object"
	"github.com/seal-io/walrus/pkg/dao/types/property"
	"github.com/seal-io/walrus/pkg/dao/types/status"
)

// ResourceRevisionCreate is the builder for creating a ResourceRevision entity.
type ResourceRevisionCreate struct {
	config
	mutation   *ResourceRevisionMutation
	hooks      []Hook
	conflict   []sql.ConflictOption
	object     *ResourceRevision
	fromUpsert bool
}

// SetCreateTime sets the "create_time" field.
func (rrc *ResourceRevisionCreate) SetCreateTime(t time.Time) *ResourceRevisionCreate {
	rrc.mutation.SetCreateTime(t)
	return rrc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (rrc *ResourceRevisionCreate) SetNillableCreateTime(t *time.Time) *ResourceRevisionCreate {
	if t != nil {
		rrc.SetCreateTime(*t)
	}
	return rrc
}

// SetStatus sets the "status" field.
func (rrc *ResourceRevisionCreate) SetStatus(s status.Status) *ResourceRevisionCreate {
	rrc.mutation.SetStatus(s)
	return rrc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rrc *ResourceRevisionCreate) SetNillableStatus(s *status.Status) *ResourceRevisionCreate {
	if s != nil {
		rrc.SetStatus(*s)
	}
	return rrc
}

// SetProjectID sets the "project_id" field.
func (rrc *ResourceRevisionCreate) SetProjectID(o object.ID) *ResourceRevisionCreate {
	rrc.mutation.SetProjectID(o)
	return rrc
}

// SetEnvironmentID sets the "environment_id" field.
func (rrc *ResourceRevisionCreate) SetEnvironmentID(o object.ID) *ResourceRevisionCreate {
	rrc.mutation.SetEnvironmentID(o)
	return rrc
}

// SetResourceID sets the "resource_id" field.
func (rrc *ResourceRevisionCreate) SetResourceID(o object.ID) *ResourceRevisionCreate {
	rrc.mutation.SetResourceID(o)
	return rrc
}

// SetTemplateName sets the "template_name" field.
func (rrc *ResourceRevisionCreate) SetTemplateName(s string) *ResourceRevisionCreate {
	rrc.mutation.SetTemplateName(s)
	return rrc
}

// SetTemplateVersion sets the "template_version" field.
func (rrc *ResourceRevisionCreate) SetTemplateVersion(s string) *ResourceRevisionCreate {
	rrc.mutation.SetTemplateVersion(s)
	return rrc
}

// SetTemplateID sets the "template_id" field.
func (rrc *ResourceRevisionCreate) SetTemplateID(o object.ID) *ResourceRevisionCreate {
	rrc.mutation.SetTemplateID(o)
	return rrc
}

// SetAttributes sets the "attributes" field.
func (rrc *ResourceRevisionCreate) SetAttributes(pr property.Values) *ResourceRevisionCreate {
	rrc.mutation.SetAttributes(pr)
	return rrc
}

// SetVariables sets the "variables" field.
func (rrc *ResourceRevisionCreate) SetVariables(c crypto.Map[string, string]) *ResourceRevisionCreate {
	rrc.mutation.SetVariables(c)
	return rrc
}

// SetInputPlan sets the "input_plan" field.
func (rrc *ResourceRevisionCreate) SetInputPlan(s string) *ResourceRevisionCreate {
	rrc.mutation.SetInputPlan(s)
	return rrc
}

// SetOutput sets the "output" field.
func (rrc *ResourceRevisionCreate) SetOutput(s string) *ResourceRevisionCreate {
	rrc.mutation.SetOutput(s)
	return rrc
}

// SetDeployerType sets the "deployer_type" field.
func (rrc *ResourceRevisionCreate) SetDeployerType(s string) *ResourceRevisionCreate {
	rrc.mutation.SetDeployerType(s)
	return rrc
}

// SetNillableDeployerType sets the "deployer_type" field if the given value is not nil.
func (rrc *ResourceRevisionCreate) SetNillableDeployerType(s *string) *ResourceRevisionCreate {
	if s != nil {
		rrc.SetDeployerType(*s)
	}
	return rrc
}

// SetDuration sets the "duration" field.
func (rrc *ResourceRevisionCreate) SetDuration(i int) *ResourceRevisionCreate {
	rrc.mutation.SetDuration(i)
	return rrc
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (rrc *ResourceRevisionCreate) SetNillableDuration(i *int) *ResourceRevisionCreate {
	if i != nil {
		rrc.SetDuration(*i)
	}
	return rrc
}

// SetPreviousRequiredProviders sets the "previous_required_providers" field.
func (rrc *ResourceRevisionCreate) SetPreviousRequiredProviders(tr []types.ProviderRequirement) *ResourceRevisionCreate {
	rrc.mutation.SetPreviousRequiredProviders(tr)
	return rrc
}

// SetRecord sets the "record" field.
func (rrc *ResourceRevisionCreate) SetRecord(s string) *ResourceRevisionCreate {
	rrc.mutation.SetRecord(s)
	return rrc
}

// SetNillableRecord sets the "record" field if the given value is not nil.
func (rrc *ResourceRevisionCreate) SetNillableRecord(s *string) *ResourceRevisionCreate {
	if s != nil {
		rrc.SetRecord(*s)
	}
	return rrc
}

// SetChangeComment sets the "change_comment" field.
func (rrc *ResourceRevisionCreate) SetChangeComment(s string) *ResourceRevisionCreate {
	rrc.mutation.SetChangeComment(s)
	return rrc
}

// SetNillableChangeComment sets the "change_comment" field if the given value is not nil.
func (rrc *ResourceRevisionCreate) SetNillableChangeComment(s *string) *ResourceRevisionCreate {
	if s != nil {
		rrc.SetChangeComment(*s)
	}
	return rrc
}

// SetCreatedBy sets the "created_by" field.
func (rrc *ResourceRevisionCreate) SetCreatedBy(s string) *ResourceRevisionCreate {
	rrc.mutation.SetCreatedBy(s)
	return rrc
}

// SetID sets the "id" field.
func (rrc *ResourceRevisionCreate) SetID(o object.ID) *ResourceRevisionCreate {
	rrc.mutation.SetID(o)
	return rrc
}

// SetProject sets the "project" edge to the Project entity.
func (rrc *ResourceRevisionCreate) SetProject(p *Project) *ResourceRevisionCreate {
	return rrc.SetProjectID(p.ID)
}

// SetEnvironment sets the "environment" edge to the Environment entity.
func (rrc *ResourceRevisionCreate) SetEnvironment(e *Environment) *ResourceRevisionCreate {
	return rrc.SetEnvironmentID(e.ID)
}

// SetResource sets the "resource" edge to the Resource entity.
func (rrc *ResourceRevisionCreate) SetResource(r *Resource) *ResourceRevisionCreate {
	return rrc.SetResourceID(r.ID)
}

// Mutation returns the ResourceRevisionMutation object of the builder.
func (rrc *ResourceRevisionCreate) Mutation() *ResourceRevisionMutation {
	return rrc.mutation
}

// Save creates the ResourceRevision in the database.
func (rrc *ResourceRevisionCreate) Save(ctx context.Context) (*ResourceRevision, error) {
	if err := rrc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rrc.sqlSave, rrc.mutation, rrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rrc *ResourceRevisionCreate) SaveX(ctx context.Context) *ResourceRevision {
	v, err := rrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rrc *ResourceRevisionCreate) Exec(ctx context.Context) error {
	_, err := rrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rrc *ResourceRevisionCreate) ExecX(ctx context.Context) {
	if err := rrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rrc *ResourceRevisionCreate) defaults() error {
	if _, ok := rrc.mutation.CreateTime(); !ok {
		if resourcerevision.DefaultCreateTime == nil {
			return fmt.Errorf("model: uninitialized resourcerevision.DefaultCreateTime (forgotten import model/runtime?)")
		}
		v := resourcerevision.DefaultCreateTime()
		rrc.mutation.SetCreateTime(v)
	}
	if _, ok := rrc.mutation.Variables(); !ok {
		v := resourcerevision.DefaultVariables
		rrc.mutation.SetVariables(v)
	}
	if _, ok := rrc.mutation.DeployerType(); !ok {
		v := resourcerevision.DefaultDeployerType
		rrc.mutation.SetDeployerType(v)
	}
	if _, ok := rrc.mutation.Duration(); !ok {
		v := resourcerevision.DefaultDuration
		rrc.mutation.SetDuration(v)
	}
	if _, ok := rrc.mutation.PreviousRequiredProviders(); !ok {
		v := resourcerevision.DefaultPreviousRequiredProviders
		rrc.mutation.SetPreviousRequiredProviders(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rrc *ResourceRevisionCreate) check() error {
	if _, ok := rrc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`model: missing required field "ResourceRevision.create_time"`)}
	}
	if _, ok := rrc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project_id", err: errors.New(`model: missing required field "ResourceRevision.project_id"`)}
	}
	if v, ok := rrc.mutation.ProjectID(); ok {
		if err := resourcerevision.ProjectIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "project_id", err: fmt.Errorf(`model: validator failed for field "ResourceRevision.project_id": %w`, err)}
		}
	}
	if _, ok := rrc.mutation.EnvironmentID(); !ok {
		return &ValidationError{Name: "environment_id", err: errors.New(`model: missing required field "ResourceRevision.environment_id"`)}
	}
	if v, ok := rrc.mutation.EnvironmentID(); ok {
		if err := resourcerevision.EnvironmentIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "environment_id", err: fmt.Errorf(`model: validator failed for field "ResourceRevision.environment_id": %w`, err)}
		}
	}
	if _, ok := rrc.mutation.ResourceID(); !ok {
		return &ValidationError{Name: "resource_id", err: errors.New(`model: missing required field "ResourceRevision.resource_id"`)}
	}
	if v, ok := rrc.mutation.ResourceID(); ok {
		if err := resourcerevision.ResourceIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "resource_id", err: fmt.Errorf(`model: validator failed for field "ResourceRevision.resource_id": %w`, err)}
		}
	}
	if _, ok := rrc.mutation.TemplateName(); !ok {
		return &ValidationError{Name: "template_name", err: errors.New(`model: missing required field "ResourceRevision.template_name"`)}
	}
	if v, ok := rrc.mutation.TemplateName(); ok {
		if err := resourcerevision.TemplateNameValidator(v); err != nil {
			return &ValidationError{Name: "template_name", err: fmt.Errorf(`model: validator failed for field "ResourceRevision.template_name": %w`, err)}
		}
	}
	if _, ok := rrc.mutation.TemplateVersion(); !ok {
		return &ValidationError{Name: "template_version", err: errors.New(`model: missing required field "ResourceRevision.template_version"`)}
	}
	if v, ok := rrc.mutation.TemplateVersion(); ok {
		if err := resourcerevision.TemplateVersionValidator(v); err != nil {
			return &ValidationError{Name: "template_version", err: fmt.Errorf(`model: validator failed for field "ResourceRevision.template_version": %w`, err)}
		}
	}
	if _, ok := rrc.mutation.TemplateID(); !ok {
		return &ValidationError{Name: "template_id", err: errors.New(`model: missing required field "ResourceRevision.template_id"`)}
	}
	if v, ok := rrc.mutation.TemplateID(); ok {
		if err := resourcerevision.TemplateIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "template_id", err: fmt.Errorf(`model: validator failed for field "ResourceRevision.template_id": %w`, err)}
		}
	}
	if _, ok := rrc.mutation.Variables(); !ok {
		return &ValidationError{Name: "variables", err: errors.New(`model: missing required field "ResourceRevision.variables"`)}
	}
	if _, ok := rrc.mutation.InputPlan(); !ok {
		return &ValidationError{Name: "input_plan", err: errors.New(`model: missing required field "ResourceRevision.input_plan"`)}
	}
	if _, ok := rrc.mutation.Output(); !ok {
		return &ValidationError{Name: "output", err: errors.New(`model: missing required field "ResourceRevision.output"`)}
	}
	if _, ok := rrc.mutation.DeployerType(); !ok {
		return &ValidationError{Name: "deployer_type", err: errors.New(`model: missing required field "ResourceRevision.deployer_type"`)}
	}
	if _, ok := rrc.mutation.Duration(); !ok {
		return &ValidationError{Name: "duration", err: errors.New(`model: missing required field "ResourceRevision.duration"`)}
	}
	if _, ok := rrc.mutation.PreviousRequiredProviders(); !ok {
		return &ValidationError{Name: "previous_required_providers", err: errors.New(`model: missing required field "ResourceRevision.previous_required_providers"`)}
	}
	if _, ok := rrc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`model: missing required field "ResourceRevision.created_by"`)}
	}
	if _, ok := rrc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project", err: errors.New(`model: missing required edge "ResourceRevision.project"`)}
	}
	if _, ok := rrc.mutation.EnvironmentID(); !ok {
		return &ValidationError{Name: "environment", err: errors.New(`model: missing required edge "ResourceRevision.environment"`)}
	}
	if _, ok := rrc.mutation.ResourceID(); !ok {
		return &ValidationError{Name: "resource", err: errors.New(`model: missing required edge "ResourceRevision.resource"`)}
	}
	return nil
}

func (rrc *ResourceRevisionCreate) sqlSave(ctx context.Context) (*ResourceRevision, error) {
	if err := rrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*object.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rrc.mutation.id = &_node.ID
	rrc.mutation.done = true
	return _node, nil
}

func (rrc *ResourceRevisionCreate) createSpec() (*ResourceRevision, *sqlgraph.CreateSpec) {
	var (
		_node = &ResourceRevision{config: rrc.config}
		_spec = sqlgraph.NewCreateSpec(resourcerevision.Table, sqlgraph.NewFieldSpec(resourcerevision.FieldID, field.TypeString))
	)
	_spec.Schema = rrc.schemaConfig.ResourceRevision
	_spec.OnConflict = rrc.conflict
	if id, ok := rrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rrc.mutation.CreateTime(); ok {
		_spec.SetField(resourcerevision.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = &value
	}
	if value, ok := rrc.mutation.Status(); ok {
		_spec.SetField(resourcerevision.FieldStatus, field.TypeJSON, value)
		_node.Status = value
	}
	if value, ok := rrc.mutation.TemplateName(); ok {
		_spec.SetField(resourcerevision.FieldTemplateName, field.TypeString, value)
		_node.TemplateName = value
	}
	if value, ok := rrc.mutation.TemplateVersion(); ok {
		_spec.SetField(resourcerevision.FieldTemplateVersion, field.TypeString, value)
		_node.TemplateVersion = value
	}
	if value, ok := rrc.mutation.TemplateID(); ok {
		_spec.SetField(resourcerevision.FieldTemplateID, field.TypeString, value)
		_node.TemplateID = value
	}
	if value, ok := rrc.mutation.Attributes(); ok {
		_spec.SetField(resourcerevision.FieldAttributes, field.TypeOther, value)
		_node.Attributes = value
	}
	if value, ok := rrc.mutation.Variables(); ok {
		_spec.SetField(resourcerevision.FieldVariables, field.TypeOther, value)
		_node.Variables = value
	}
	if value, ok := rrc.mutation.InputPlan(); ok {
		_spec.SetField(resourcerevision.FieldInputPlan, field.TypeString, value)
		_node.InputPlan = value
	}
	if value, ok := rrc.mutation.Output(); ok {
		_spec.SetField(resourcerevision.FieldOutput, field.TypeString, value)
		_node.Output = value
	}
	if value, ok := rrc.mutation.DeployerType(); ok {
		_spec.SetField(resourcerevision.FieldDeployerType, field.TypeString, value)
		_node.DeployerType = value
	}
	if value, ok := rrc.mutation.Duration(); ok {
		_spec.SetField(resourcerevision.FieldDuration, field.TypeInt, value)
		_node.Duration = value
	}
	if value, ok := rrc.mutation.PreviousRequiredProviders(); ok {
		_spec.SetField(resourcerevision.FieldPreviousRequiredProviders, field.TypeJSON, value)
		_node.PreviousRequiredProviders = value
	}
	if value, ok := rrc.mutation.Record(); ok {
		_spec.SetField(resourcerevision.FieldRecord, field.TypeString, value)
		_node.Record = value
	}
	if value, ok := rrc.mutation.ChangeComment(); ok {
		_spec.SetField(resourcerevision.FieldChangeComment, field.TypeString, value)
		_node.ChangeComment = value
	}
	if value, ok := rrc.mutation.CreatedBy(); ok {
		_spec.SetField(resourcerevision.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if nodes := rrc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcerevision.ProjectTable,
			Columns: []string{resourcerevision.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		edge.Schema = rrc.schemaConfig.ResourceRevision
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rrc.mutation.EnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcerevision.EnvironmentTable,
			Columns: []string{resourcerevision.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeString),
			},
		}
		edge.Schema = rrc.schemaConfig.ResourceRevision
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EnvironmentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rrc.mutation.ResourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcerevision.ResourceTable,
			Columns: []string{resourcerevision.ResourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeString),
			},
		}
		edge.Schema = rrc.schemaConfig.ResourceRevision
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ResourceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// Set is different from other Set* methods,
// it sets the value by judging the definition of each field within the entire object.
//
// For required fields, Set calls directly.
//
// For optional fields, Set calls if the value is not zero.
//
// For example:
//
//	## Required
//
//	db.SetX(obj.X)
//
//	## Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (rrc *ResourceRevisionCreate) Set(obj *ResourceRevision) *ResourceRevisionCreate {
	// Required.
	rrc.SetProjectID(obj.ProjectID)
	rrc.SetEnvironmentID(obj.EnvironmentID)
	rrc.SetResourceID(obj.ResourceID)
	rrc.SetTemplateName(obj.TemplateName)
	rrc.SetTemplateVersion(obj.TemplateVersion)
	rrc.SetTemplateID(obj.TemplateID)
	rrc.SetVariables(obj.Variables)
	rrc.SetInputPlan(obj.InputPlan)
	rrc.SetOutput(obj.Output)
	rrc.SetDeployerType(obj.DeployerType)
	rrc.SetDuration(obj.Duration)
	rrc.SetPreviousRequiredProviders(obj.PreviousRequiredProviders)
	rrc.SetCreatedBy(obj.CreatedBy)

	// Optional.
	if obj.CreateTime != nil {
		rrc.SetCreateTime(*obj.CreateTime)
	}
	if !reflect.ValueOf(obj.Status).IsZero() {
		rrc.SetStatus(obj.Status)
	}
	if !reflect.ValueOf(obj.Attributes).IsZero() {
		rrc.SetAttributes(obj.Attributes)
	}
	if obj.Record != "" {
		rrc.SetRecord(obj.Record)
	}
	if obj.ChangeComment != "" {
		rrc.SetChangeComment(obj.ChangeComment)
	}

	// Record the given object.
	rrc.object = obj

	return rrc
}

// getClientSet returns the ClientSet for the given builder.
func (rrc *ResourceRevisionCreate) getClientSet() (mc ClientSet) {
	if _, ok := rrc.config.driver.(*txDriver); ok {
		tx := &Tx{config: rrc.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: rrc.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after created the ResourceRevision entity,
// which is always good for cascading create operations.
func (rrc *ResourceRevisionCreate) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ResourceRevision) error) (*ResourceRevision, error) {
	obj, err := rrc.Save(ctx)
	if err != nil {
		return nil, err
	}

	if len(cbs) == 0 {
		return obj, err
	}

	mc := rrc.getClientSet()

	if x := rrc.object; x != nil {
		if _, set := rrc.mutation.Field(resourcerevision.FieldStatus); set {
			obj.Status = x.Status
		}
		if _, set := rrc.mutation.Field(resourcerevision.FieldProjectID); set {
			obj.ProjectID = x.ProjectID
		}
		if _, set := rrc.mutation.Field(resourcerevision.FieldEnvironmentID); set {
			obj.EnvironmentID = x.EnvironmentID
		}
		if _, set := rrc.mutation.Field(resourcerevision.FieldResourceID); set {
			obj.ResourceID = x.ResourceID
		}
		if _, set := rrc.mutation.Field(resourcerevision.FieldTemplateName); set {
			obj.TemplateName = x.TemplateName
		}
		if _, set := rrc.mutation.Field(resourcerevision.FieldTemplateVersion); set {
			obj.TemplateVersion = x.TemplateVersion
		}
		if _, set := rrc.mutation.Field(resourcerevision.FieldTemplateID); set {
			obj.TemplateID = x.TemplateID
		}
		if _, set := rrc.mutation.Field(resourcerevision.FieldAttributes); set {
			obj.Attributes = x.Attributes
		}
		if _, set := rrc.mutation.Field(resourcerevision.FieldInputPlan); set {
			obj.InputPlan = x.InputPlan
		}
		if _, set := rrc.mutation.Field(resourcerevision.FieldOutput); set {
			obj.Output = x.Output
		}
		if _, set := rrc.mutation.Field(resourcerevision.FieldRecord); set {
			obj.Record = x.Record
		}
		if _, set := rrc.mutation.Field(resourcerevision.FieldChangeComment); set {
			obj.ChangeComment = x.ChangeComment
		}
		if _, set := rrc.mutation.Field(resourcerevision.FieldCreatedBy); set {
			obj.CreatedBy = x.CreatedBy
		}
		obj.Edges = x.Edges
	}

	for i := range cbs {
		if err = cbs[i](ctx, mc, obj); err != nil {
			return nil, err
		}
	}

	return obj, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (rrc *ResourceRevisionCreate) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ResourceRevision) error) *ResourceRevision {
	obj, err := rrc.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return obj
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (rrc *ResourceRevisionCreate) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ResourceRevision) error) error {
	_, err := rrc.SaveE(ctx, cbs...)
	return err
}

// ExecEX is like ExecE, but panics if an error occurs.
func (rrc *ResourceRevisionCreate) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ResourceRevision) error) {
	if err := rrc.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// Set leverages the ResourceRevisionCreate Set method,
// it sets the value by judging the definition of each field within the entire item of the given list.
//
// For required fields, Set calls directly.
//
// For optional fields, Set calls if the value is not zero.
//
// For example:
//
//	## Required
//
//	db.SetX(obj.X)
//
//	## Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (rrcb *ResourceRevisionCreateBulk) Set(objs ...*ResourceRevision) *ResourceRevisionCreateBulk {
	if len(objs) != 0 {
		client := NewResourceRevisionClient(rrcb.config)

		rrcb.builders = make([]*ResourceRevisionCreate, len(objs))
		for i := range objs {
			rrcb.builders[i] = client.Create().Set(objs[i])
		}

		// Record the given objects.
		rrcb.objects = objs
	}

	return rrcb
}

// getClientSet returns the ClientSet for the given builder.
func (rrcb *ResourceRevisionCreateBulk) getClientSet() (mc ClientSet) {
	if _, ok := rrcb.config.driver.(*txDriver); ok {
		tx := &Tx{config: rrcb.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: rrcb.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after created the ResourceRevision entities,
// which is always good for cascading create operations.
func (rrcb *ResourceRevisionCreateBulk) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ResourceRevision) error) ([]*ResourceRevision, error) {
	objs, err := rrcb.Save(ctx)
	if err != nil {
		return nil, err
	}

	if len(cbs) == 0 {
		return objs, err
	}

	mc := rrcb.getClientSet()

	if x := rrcb.objects; x != nil {
		for i := range x {
			if _, set := rrcb.builders[i].mutation.Field(resourcerevision.FieldStatus); set {
				objs[i].Status = x[i].Status
			}
			if _, set := rrcb.builders[i].mutation.Field(resourcerevision.FieldProjectID); set {
				objs[i].ProjectID = x[i].ProjectID
			}
			if _, set := rrcb.builders[i].mutation.Field(resourcerevision.FieldEnvironmentID); set {
				objs[i].EnvironmentID = x[i].EnvironmentID
			}
			if _, set := rrcb.builders[i].mutation.Field(resourcerevision.FieldResourceID); set {
				objs[i].ResourceID = x[i].ResourceID
			}
			if _, set := rrcb.builders[i].mutation.Field(resourcerevision.FieldTemplateName); set {
				objs[i].TemplateName = x[i].TemplateName
			}
			if _, set := rrcb.builders[i].mutation.Field(resourcerevision.FieldTemplateVersion); set {
				objs[i].TemplateVersion = x[i].TemplateVersion
			}
			if _, set := rrcb.builders[i].mutation.Field(resourcerevision.FieldTemplateID); set {
				objs[i].TemplateID = x[i].TemplateID
			}
			if _, set := rrcb.builders[i].mutation.Field(resourcerevision.FieldAttributes); set {
				objs[i].Attributes = x[i].Attributes
			}
			if _, set := rrcb.builders[i].mutation.Field(resourcerevision.FieldInputPlan); set {
				objs[i].InputPlan = x[i].InputPlan
			}
			if _, set := rrcb.builders[i].mutation.Field(resourcerevision.FieldOutput); set {
				objs[i].Output = x[i].Output
			}
			if _, set := rrcb.builders[i].mutation.Field(resourcerevision.FieldRecord); set {
				objs[i].Record = x[i].Record
			}
			if _, set := rrcb.builders[i].mutation.Field(resourcerevision.FieldChangeComment); set {
				objs[i].ChangeComment = x[i].ChangeComment
			}
			if _, set := rrcb.builders[i].mutation.Field(resourcerevision.FieldCreatedBy); set {
				objs[i].CreatedBy = x[i].CreatedBy
			}
			objs[i].Edges = x[i].Edges
		}
	}

	for i := range objs {
		for j := range cbs {
			if err = cbs[j](ctx, mc, objs[i]); err != nil {
				return nil, err
			}
		}
	}

	return objs, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (rrcb *ResourceRevisionCreateBulk) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ResourceRevision) error) []*ResourceRevision {
	objs, err := rrcb.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return objs
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (rrcb *ResourceRevisionCreateBulk) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ResourceRevision) error) error {
	_, err := rrcb.SaveE(ctx, cbs...)
	return err
}

// ExecEX is like ExecE, but panics if an error occurs.
func (rrcb *ResourceRevisionCreateBulk) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ResourceRevision) error) {
	if err := rrcb.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (u *ResourceRevisionUpsertOne) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *ResourceRevision) error) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for ResourceRevisionUpsertOne.OnConflict")
	}
	u.create.fromUpsert = true
	return u.create.ExecE(ctx, cbs...)
}

// ExecEX is like ExecE, but panics if an error occurs.
func (u *ResourceRevisionUpsertOne) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *ResourceRevision) error) {
	if err := u.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (u *ResourceRevisionUpsertBulk) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *ResourceRevision) error) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model: OnConflict was set for builder %d. Set it on the ResourceRevisionUpsertBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for ResourceRevisionUpsertBulk.OnConflict")
	}
	u.create.fromUpsert = true
	return u.create.ExecE(ctx, cbs...)
}

// ExecEX is like ExecE, but panics if an error occurs.
func (u *ResourceRevisionUpsertBulk) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *ResourceRevision) error) {
	if err := u.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ResourceRevision.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ResourceRevisionUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (rrc *ResourceRevisionCreate) OnConflict(opts ...sql.ConflictOption) *ResourceRevisionUpsertOne {
	rrc.conflict = opts
	return &ResourceRevisionUpsertOne{
		create: rrc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ResourceRevision.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rrc *ResourceRevisionCreate) OnConflictColumns(columns ...string) *ResourceRevisionUpsertOne {
	rrc.conflict = append(rrc.conflict, sql.ConflictColumns(columns...))
	return &ResourceRevisionUpsertOne{
		create: rrc,
	}
}

type (
	// ResourceRevisionUpsertOne is the builder for "upsert"-ing
	//  one ResourceRevision node.
	ResourceRevisionUpsertOne struct {
		create *ResourceRevisionCreate
	}

	// ResourceRevisionUpsert is the "OnConflict" setter.
	ResourceRevisionUpsert struct {
		*sql.UpdateSet
	}
)

// SetStatus sets the "status" field.
func (u *ResourceRevisionUpsert) SetStatus(v status.Status) *ResourceRevisionUpsert {
	u.Set(resourcerevision.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ResourceRevisionUpsert) UpdateStatus() *ResourceRevisionUpsert {
	u.SetExcluded(resourcerevision.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *ResourceRevisionUpsert) ClearStatus() *ResourceRevisionUpsert {
	u.SetNull(resourcerevision.FieldStatus)
	return u
}

// SetTemplateVersion sets the "template_version" field.
func (u *ResourceRevisionUpsert) SetTemplateVersion(v string) *ResourceRevisionUpsert {
	u.Set(resourcerevision.FieldTemplateVersion, v)
	return u
}

// UpdateTemplateVersion sets the "template_version" field to the value that was provided on create.
func (u *ResourceRevisionUpsert) UpdateTemplateVersion() *ResourceRevisionUpsert {
	u.SetExcluded(resourcerevision.FieldTemplateVersion)
	return u
}

// SetAttributes sets the "attributes" field.
func (u *ResourceRevisionUpsert) SetAttributes(v property.Values) *ResourceRevisionUpsert {
	u.Set(resourcerevision.FieldAttributes, v)
	return u
}

// UpdateAttributes sets the "attributes" field to the value that was provided on create.
func (u *ResourceRevisionUpsert) UpdateAttributes() *ResourceRevisionUpsert {
	u.SetExcluded(resourcerevision.FieldAttributes)
	return u
}

// ClearAttributes clears the value of the "attributes" field.
func (u *ResourceRevisionUpsert) ClearAttributes() *ResourceRevisionUpsert {
	u.SetNull(resourcerevision.FieldAttributes)
	return u
}

// SetVariables sets the "variables" field.
func (u *ResourceRevisionUpsert) SetVariables(v crypto.Map[string, string]) *ResourceRevisionUpsert {
	u.Set(resourcerevision.FieldVariables, v)
	return u
}

// UpdateVariables sets the "variables" field to the value that was provided on create.
func (u *ResourceRevisionUpsert) UpdateVariables() *ResourceRevisionUpsert {
	u.SetExcluded(resourcerevision.FieldVariables)
	return u
}

// SetInputPlan sets the "input_plan" field.
func (u *ResourceRevisionUpsert) SetInputPlan(v string) *ResourceRevisionUpsert {
	u.Set(resourcerevision.FieldInputPlan, v)
	return u
}

// UpdateInputPlan sets the "input_plan" field to the value that was provided on create.
func (u *ResourceRevisionUpsert) UpdateInputPlan() *ResourceRevisionUpsert {
	u.SetExcluded(resourcerevision.FieldInputPlan)
	return u
}

// SetOutput sets the "output" field.
func (u *ResourceRevisionUpsert) SetOutput(v string) *ResourceRevisionUpsert {
	u.Set(resourcerevision.FieldOutput, v)
	return u
}

// UpdateOutput sets the "output" field to the value that was provided on create.
func (u *ResourceRevisionUpsert) UpdateOutput() *ResourceRevisionUpsert {
	u.SetExcluded(resourcerevision.FieldOutput)
	return u
}

// SetDeployerType sets the "deployer_type" field.
func (u *ResourceRevisionUpsert) SetDeployerType(v string) *ResourceRevisionUpsert {
	u.Set(resourcerevision.FieldDeployerType, v)
	return u
}

// UpdateDeployerType sets the "deployer_type" field to the value that was provided on create.
func (u *ResourceRevisionUpsert) UpdateDeployerType() *ResourceRevisionUpsert {
	u.SetExcluded(resourcerevision.FieldDeployerType)
	return u
}

// SetDuration sets the "duration" field.
func (u *ResourceRevisionUpsert) SetDuration(v int) *ResourceRevisionUpsert {
	u.Set(resourcerevision.FieldDuration, v)
	return u
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *ResourceRevisionUpsert) UpdateDuration() *ResourceRevisionUpsert {
	u.SetExcluded(resourcerevision.FieldDuration)
	return u
}

// AddDuration adds v to the "duration" field.
func (u *ResourceRevisionUpsert) AddDuration(v int) *ResourceRevisionUpsert {
	u.Add(resourcerevision.FieldDuration, v)
	return u
}

// SetPreviousRequiredProviders sets the "previous_required_providers" field.
func (u *ResourceRevisionUpsert) SetPreviousRequiredProviders(v []types.ProviderRequirement) *ResourceRevisionUpsert {
	u.Set(resourcerevision.FieldPreviousRequiredProviders, v)
	return u
}

// UpdatePreviousRequiredProviders sets the "previous_required_providers" field to the value that was provided on create.
func (u *ResourceRevisionUpsert) UpdatePreviousRequiredProviders() *ResourceRevisionUpsert {
	u.SetExcluded(resourcerevision.FieldPreviousRequiredProviders)
	return u
}

// SetRecord sets the "record" field.
func (u *ResourceRevisionUpsert) SetRecord(v string) *ResourceRevisionUpsert {
	u.Set(resourcerevision.FieldRecord, v)
	return u
}

// UpdateRecord sets the "record" field to the value that was provided on create.
func (u *ResourceRevisionUpsert) UpdateRecord() *ResourceRevisionUpsert {
	u.SetExcluded(resourcerevision.FieldRecord)
	return u
}

// ClearRecord clears the value of the "record" field.
func (u *ResourceRevisionUpsert) ClearRecord() *ResourceRevisionUpsert {
	u.SetNull(resourcerevision.FieldRecord)
	return u
}

// SetChangeComment sets the "change_comment" field.
func (u *ResourceRevisionUpsert) SetChangeComment(v string) *ResourceRevisionUpsert {
	u.Set(resourcerevision.FieldChangeComment, v)
	return u
}

// UpdateChangeComment sets the "change_comment" field to the value that was provided on create.
func (u *ResourceRevisionUpsert) UpdateChangeComment() *ResourceRevisionUpsert {
	u.SetExcluded(resourcerevision.FieldChangeComment)
	return u
}

// ClearChangeComment clears the value of the "change_comment" field.
func (u *ResourceRevisionUpsert) ClearChangeComment() *ResourceRevisionUpsert {
	u.SetNull(resourcerevision.FieldChangeComment)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *ResourceRevisionUpsert) SetCreatedBy(v string) *ResourceRevisionUpsert {
	u.Set(resourcerevision.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ResourceRevisionUpsert) UpdateCreatedBy() *ResourceRevisionUpsert {
	u.SetExcluded(resourcerevision.FieldCreatedBy)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ResourceRevision.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(resourcerevision.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ResourceRevisionUpsertOne) UpdateNewValues() *ResourceRevisionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(resourcerevision.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(resourcerevision.FieldCreateTime)
		}
		if _, exists := u.create.mutation.ProjectID(); exists {
			s.SetIgnore(resourcerevision.FieldProjectID)
		}
		if _, exists := u.create.mutation.EnvironmentID(); exists {
			s.SetIgnore(resourcerevision.FieldEnvironmentID)
		}
		if _, exists := u.create.mutation.ResourceID(); exists {
			s.SetIgnore(resourcerevision.FieldResourceID)
		}
		if _, exists := u.create.mutation.TemplateName(); exists {
			s.SetIgnore(resourcerevision.FieldTemplateName)
		}
		if _, exists := u.create.mutation.TemplateID(); exists {
			s.SetIgnore(resourcerevision.FieldTemplateID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ResourceRevision.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ResourceRevisionUpsertOne) Ignore() *ResourceRevisionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ResourceRevisionUpsertOne) DoNothing() *ResourceRevisionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ResourceRevisionCreate.OnConflict
// documentation for more info.
func (u *ResourceRevisionUpsertOne) Update(set func(*ResourceRevisionUpsert)) *ResourceRevisionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ResourceRevisionUpsert{UpdateSet: update})
	}))
	return u
}

// SetStatus sets the "status" field.
func (u *ResourceRevisionUpsertOne) SetStatus(v status.Status) *ResourceRevisionUpsertOne {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ResourceRevisionUpsertOne) UpdateStatus() *ResourceRevisionUpsertOne {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *ResourceRevisionUpsertOne) ClearStatus() *ResourceRevisionUpsertOne {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.ClearStatus()
	})
}

// SetTemplateVersion sets the "template_version" field.
func (u *ResourceRevisionUpsertOne) SetTemplateVersion(v string) *ResourceRevisionUpsertOne {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.SetTemplateVersion(v)
	})
}

// UpdateTemplateVersion sets the "template_version" field to the value that was provided on create.
func (u *ResourceRevisionUpsertOne) UpdateTemplateVersion() *ResourceRevisionUpsertOne {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.UpdateTemplateVersion()
	})
}

// SetAttributes sets the "attributes" field.
func (u *ResourceRevisionUpsertOne) SetAttributes(v property.Values) *ResourceRevisionUpsertOne {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.SetAttributes(v)
	})
}

// UpdateAttributes sets the "attributes" field to the value that was provided on create.
func (u *ResourceRevisionUpsertOne) UpdateAttributes() *ResourceRevisionUpsertOne {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.UpdateAttributes()
	})
}

// ClearAttributes clears the value of the "attributes" field.
func (u *ResourceRevisionUpsertOne) ClearAttributes() *ResourceRevisionUpsertOne {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.ClearAttributes()
	})
}

// SetVariables sets the "variables" field.
func (u *ResourceRevisionUpsertOne) SetVariables(v crypto.Map[string, string]) *ResourceRevisionUpsertOne {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.SetVariables(v)
	})
}

// UpdateVariables sets the "variables" field to the value that was provided on create.
func (u *ResourceRevisionUpsertOne) UpdateVariables() *ResourceRevisionUpsertOne {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.UpdateVariables()
	})
}

// SetInputPlan sets the "input_plan" field.
func (u *ResourceRevisionUpsertOne) SetInputPlan(v string) *ResourceRevisionUpsertOne {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.SetInputPlan(v)
	})
}

// UpdateInputPlan sets the "input_plan" field to the value that was provided on create.
func (u *ResourceRevisionUpsertOne) UpdateInputPlan() *ResourceRevisionUpsertOne {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.UpdateInputPlan()
	})
}

// SetOutput sets the "output" field.
func (u *ResourceRevisionUpsertOne) SetOutput(v string) *ResourceRevisionUpsertOne {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.SetOutput(v)
	})
}

// UpdateOutput sets the "output" field to the value that was provided on create.
func (u *ResourceRevisionUpsertOne) UpdateOutput() *ResourceRevisionUpsertOne {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.UpdateOutput()
	})
}

// SetDeployerType sets the "deployer_type" field.
func (u *ResourceRevisionUpsertOne) SetDeployerType(v string) *ResourceRevisionUpsertOne {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.SetDeployerType(v)
	})
}

// UpdateDeployerType sets the "deployer_type" field to the value that was provided on create.
func (u *ResourceRevisionUpsertOne) UpdateDeployerType() *ResourceRevisionUpsertOne {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.UpdateDeployerType()
	})
}

// SetDuration sets the "duration" field.
func (u *ResourceRevisionUpsertOne) SetDuration(v int) *ResourceRevisionUpsertOne {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.SetDuration(v)
	})
}

// AddDuration adds v to the "duration" field.
func (u *ResourceRevisionUpsertOne) AddDuration(v int) *ResourceRevisionUpsertOne {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.AddDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *ResourceRevisionUpsertOne) UpdateDuration() *ResourceRevisionUpsertOne {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.UpdateDuration()
	})
}

// SetPreviousRequiredProviders sets the "previous_required_providers" field.
func (u *ResourceRevisionUpsertOne) SetPreviousRequiredProviders(v []types.ProviderRequirement) *ResourceRevisionUpsertOne {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.SetPreviousRequiredProviders(v)
	})
}

// UpdatePreviousRequiredProviders sets the "previous_required_providers" field to the value that was provided on create.
func (u *ResourceRevisionUpsertOne) UpdatePreviousRequiredProviders() *ResourceRevisionUpsertOne {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.UpdatePreviousRequiredProviders()
	})
}

// SetRecord sets the "record" field.
func (u *ResourceRevisionUpsertOne) SetRecord(v string) *ResourceRevisionUpsertOne {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.SetRecord(v)
	})
}

// UpdateRecord sets the "record" field to the value that was provided on create.
func (u *ResourceRevisionUpsertOne) UpdateRecord() *ResourceRevisionUpsertOne {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.UpdateRecord()
	})
}

// ClearRecord clears the value of the "record" field.
func (u *ResourceRevisionUpsertOne) ClearRecord() *ResourceRevisionUpsertOne {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.ClearRecord()
	})
}

// SetChangeComment sets the "change_comment" field.
func (u *ResourceRevisionUpsertOne) SetChangeComment(v string) *ResourceRevisionUpsertOne {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.SetChangeComment(v)
	})
}

// UpdateChangeComment sets the "change_comment" field to the value that was provided on create.
func (u *ResourceRevisionUpsertOne) UpdateChangeComment() *ResourceRevisionUpsertOne {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.UpdateChangeComment()
	})
}

// ClearChangeComment clears the value of the "change_comment" field.
func (u *ResourceRevisionUpsertOne) ClearChangeComment() *ResourceRevisionUpsertOne {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.ClearChangeComment()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *ResourceRevisionUpsertOne) SetCreatedBy(v string) *ResourceRevisionUpsertOne {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ResourceRevisionUpsertOne) UpdateCreatedBy() *ResourceRevisionUpsertOne {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.UpdateCreatedBy()
	})
}

// Exec executes the query.
func (u *ResourceRevisionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for ResourceRevisionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ResourceRevisionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ResourceRevisionUpsertOne) ID(ctx context.Context) (id object.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("model: ResourceRevisionUpsertOne.ID is not supported by MySQL driver. Use ResourceRevisionUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ResourceRevisionUpsertOne) IDX(ctx context.Context) object.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ResourceRevisionCreateBulk is the builder for creating many ResourceRevision entities in bulk.
type ResourceRevisionCreateBulk struct {
	config
	builders   []*ResourceRevisionCreate
	conflict   []sql.ConflictOption
	objects    []*ResourceRevision
	fromUpsert bool
}

// Save creates the ResourceRevision entities in the database.
func (rrcb *ResourceRevisionCreateBulk) Save(ctx context.Context) ([]*ResourceRevision, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rrcb.builders))
	nodes := make([]*ResourceRevision, len(rrcb.builders))
	mutators := make([]Mutator, len(rrcb.builders))
	for i := range rrcb.builders {
		func(i int, root context.Context) {
			builder := rrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ResourceRevisionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rrcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rrcb *ResourceRevisionCreateBulk) SaveX(ctx context.Context) []*ResourceRevision {
	v, err := rrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rrcb *ResourceRevisionCreateBulk) Exec(ctx context.Context) error {
	_, err := rrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rrcb *ResourceRevisionCreateBulk) ExecX(ctx context.Context) {
	if err := rrcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ResourceRevision.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ResourceRevisionUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (rrcb *ResourceRevisionCreateBulk) OnConflict(opts ...sql.ConflictOption) *ResourceRevisionUpsertBulk {
	rrcb.conflict = opts
	return &ResourceRevisionUpsertBulk{
		create: rrcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ResourceRevision.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rrcb *ResourceRevisionCreateBulk) OnConflictColumns(columns ...string) *ResourceRevisionUpsertBulk {
	rrcb.conflict = append(rrcb.conflict, sql.ConflictColumns(columns...))
	return &ResourceRevisionUpsertBulk{
		create: rrcb,
	}
}

// ResourceRevisionUpsertBulk is the builder for "upsert"-ing
// a bulk of ResourceRevision nodes.
type ResourceRevisionUpsertBulk struct {
	create *ResourceRevisionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ResourceRevision.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(resourcerevision.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ResourceRevisionUpsertBulk) UpdateNewValues() *ResourceRevisionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(resourcerevision.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(resourcerevision.FieldCreateTime)
			}
			if _, exists := b.mutation.ProjectID(); exists {
				s.SetIgnore(resourcerevision.FieldProjectID)
			}
			if _, exists := b.mutation.EnvironmentID(); exists {
				s.SetIgnore(resourcerevision.FieldEnvironmentID)
			}
			if _, exists := b.mutation.ResourceID(); exists {
				s.SetIgnore(resourcerevision.FieldResourceID)
			}
			if _, exists := b.mutation.TemplateName(); exists {
				s.SetIgnore(resourcerevision.FieldTemplateName)
			}
			if _, exists := b.mutation.TemplateID(); exists {
				s.SetIgnore(resourcerevision.FieldTemplateID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ResourceRevision.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ResourceRevisionUpsertBulk) Ignore() *ResourceRevisionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ResourceRevisionUpsertBulk) DoNothing() *ResourceRevisionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ResourceRevisionCreateBulk.OnConflict
// documentation for more info.
func (u *ResourceRevisionUpsertBulk) Update(set func(*ResourceRevisionUpsert)) *ResourceRevisionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ResourceRevisionUpsert{UpdateSet: update})
	}))
	return u
}

// SetStatus sets the "status" field.
func (u *ResourceRevisionUpsertBulk) SetStatus(v status.Status) *ResourceRevisionUpsertBulk {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ResourceRevisionUpsertBulk) UpdateStatus() *ResourceRevisionUpsertBulk {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *ResourceRevisionUpsertBulk) ClearStatus() *ResourceRevisionUpsertBulk {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.ClearStatus()
	})
}

// SetTemplateVersion sets the "template_version" field.
func (u *ResourceRevisionUpsertBulk) SetTemplateVersion(v string) *ResourceRevisionUpsertBulk {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.SetTemplateVersion(v)
	})
}

// UpdateTemplateVersion sets the "template_version" field to the value that was provided on create.
func (u *ResourceRevisionUpsertBulk) UpdateTemplateVersion() *ResourceRevisionUpsertBulk {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.UpdateTemplateVersion()
	})
}

// SetAttributes sets the "attributes" field.
func (u *ResourceRevisionUpsertBulk) SetAttributes(v property.Values) *ResourceRevisionUpsertBulk {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.SetAttributes(v)
	})
}

// UpdateAttributes sets the "attributes" field to the value that was provided on create.
func (u *ResourceRevisionUpsertBulk) UpdateAttributes() *ResourceRevisionUpsertBulk {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.UpdateAttributes()
	})
}

// ClearAttributes clears the value of the "attributes" field.
func (u *ResourceRevisionUpsertBulk) ClearAttributes() *ResourceRevisionUpsertBulk {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.ClearAttributes()
	})
}

// SetVariables sets the "variables" field.
func (u *ResourceRevisionUpsertBulk) SetVariables(v crypto.Map[string, string]) *ResourceRevisionUpsertBulk {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.SetVariables(v)
	})
}

// UpdateVariables sets the "variables" field to the value that was provided on create.
func (u *ResourceRevisionUpsertBulk) UpdateVariables() *ResourceRevisionUpsertBulk {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.UpdateVariables()
	})
}

// SetInputPlan sets the "input_plan" field.
func (u *ResourceRevisionUpsertBulk) SetInputPlan(v string) *ResourceRevisionUpsertBulk {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.SetInputPlan(v)
	})
}

// UpdateInputPlan sets the "input_plan" field to the value that was provided on create.
func (u *ResourceRevisionUpsertBulk) UpdateInputPlan() *ResourceRevisionUpsertBulk {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.UpdateInputPlan()
	})
}

// SetOutput sets the "output" field.
func (u *ResourceRevisionUpsertBulk) SetOutput(v string) *ResourceRevisionUpsertBulk {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.SetOutput(v)
	})
}

// UpdateOutput sets the "output" field to the value that was provided on create.
func (u *ResourceRevisionUpsertBulk) UpdateOutput() *ResourceRevisionUpsertBulk {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.UpdateOutput()
	})
}

// SetDeployerType sets the "deployer_type" field.
func (u *ResourceRevisionUpsertBulk) SetDeployerType(v string) *ResourceRevisionUpsertBulk {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.SetDeployerType(v)
	})
}

// UpdateDeployerType sets the "deployer_type" field to the value that was provided on create.
func (u *ResourceRevisionUpsertBulk) UpdateDeployerType() *ResourceRevisionUpsertBulk {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.UpdateDeployerType()
	})
}

// SetDuration sets the "duration" field.
func (u *ResourceRevisionUpsertBulk) SetDuration(v int) *ResourceRevisionUpsertBulk {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.SetDuration(v)
	})
}

// AddDuration adds v to the "duration" field.
func (u *ResourceRevisionUpsertBulk) AddDuration(v int) *ResourceRevisionUpsertBulk {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.AddDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *ResourceRevisionUpsertBulk) UpdateDuration() *ResourceRevisionUpsertBulk {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.UpdateDuration()
	})
}

// SetPreviousRequiredProviders sets the "previous_required_providers" field.
func (u *ResourceRevisionUpsertBulk) SetPreviousRequiredProviders(v []types.ProviderRequirement) *ResourceRevisionUpsertBulk {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.SetPreviousRequiredProviders(v)
	})
}

// UpdatePreviousRequiredProviders sets the "previous_required_providers" field to the value that was provided on create.
func (u *ResourceRevisionUpsertBulk) UpdatePreviousRequiredProviders() *ResourceRevisionUpsertBulk {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.UpdatePreviousRequiredProviders()
	})
}

// SetRecord sets the "record" field.
func (u *ResourceRevisionUpsertBulk) SetRecord(v string) *ResourceRevisionUpsertBulk {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.SetRecord(v)
	})
}

// UpdateRecord sets the "record" field to the value that was provided on create.
func (u *ResourceRevisionUpsertBulk) UpdateRecord() *ResourceRevisionUpsertBulk {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.UpdateRecord()
	})
}

// ClearRecord clears the value of the "record" field.
func (u *ResourceRevisionUpsertBulk) ClearRecord() *ResourceRevisionUpsertBulk {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.ClearRecord()
	})
}

// SetChangeComment sets the "change_comment" field.
func (u *ResourceRevisionUpsertBulk) SetChangeComment(v string) *ResourceRevisionUpsertBulk {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.SetChangeComment(v)
	})
}

// UpdateChangeComment sets the "change_comment" field to the value that was provided on create.
func (u *ResourceRevisionUpsertBulk) UpdateChangeComment() *ResourceRevisionUpsertBulk {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.UpdateChangeComment()
	})
}

// ClearChangeComment clears the value of the "change_comment" field.
func (u *ResourceRevisionUpsertBulk) ClearChangeComment() *ResourceRevisionUpsertBulk {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.ClearChangeComment()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *ResourceRevisionUpsertBulk) SetCreatedBy(v string) *ResourceRevisionUpsertBulk {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ResourceRevisionUpsertBulk) UpdateCreatedBy() *ResourceRevisionUpsertBulk {
	return u.Update(func(s *ResourceRevisionUpsert) {
		s.UpdateCreatedBy()
	})
}

// Exec executes the query.
func (u *ResourceRevisionUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model: OnConflict was set for builder %d. Set it on the ResourceRevisionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for ResourceRevisionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ResourceRevisionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
