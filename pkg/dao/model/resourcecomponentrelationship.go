// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus". DO NOT EDIT.

package model

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"

	"github.com/seal-io/walrus/pkg/dao/model/resourcecomponent"
	"github.com/seal-io/walrus/pkg/dao/model/resourcecomponentrelationship"
	"github.com/seal-io/walrus/pkg/dao/types/object"
)

// ResourceComponentRelationship is the model entity for the ResourceComponentRelationship schema.
type ResourceComponentRelationship struct {
	config `json:"-"`
	// ID of the ent.
	ID object.ID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime *time.Time `json:"create_time,omitempty"`
	// ID of the resource component.
	ResourceComponentID object.ID `json:"resource_component_id,omitempty"`
	// ID of the resource that resource depends on.
	DependencyID object.ID `json:"dependency_id,omitempty"`
	// Type of the relationship.
	Type string `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResourceComponentRelationshipQuery when eager-loading is set.
	Edges        ResourceComponentRelationshipEdges `json:"edges,omitempty"`
	selectValues sql.SelectValues
}

// ResourceComponentRelationshipEdges holds the relations/edges for other nodes in the graph.
type ResourceComponentRelationshipEdges struct {
	// ResourceComponent to which it currently belongs.
	ResourceComponent *ResourceComponent `json:"resource_component,omitempty"`
	// ResourceComponent to which the dependency belongs.
	Dependency *ResourceComponent `json:"dependency,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ResourceComponentOrErr returns the ResourceComponent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResourceComponentRelationshipEdges) ResourceComponentOrErr() (*ResourceComponent, error) {
	if e.loadedTypes[0] {
		if e.ResourceComponent == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: resourcecomponent.Label}
		}
		return e.ResourceComponent, nil
	}
	return nil, &NotLoadedError{edge: "resource_component"}
}

// DependencyOrErr returns the Dependency value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResourceComponentRelationshipEdges) DependencyOrErr() (*ResourceComponent, error) {
	if e.loadedTypes[1] {
		if e.Dependency == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: resourcecomponent.Label}
		}
		return e.Dependency, nil
	}
	return nil, &NotLoadedError{edge: "dependency"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ResourceComponentRelationship) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case resourcecomponentrelationship.FieldID, resourcecomponentrelationship.FieldResourceComponentID, resourcecomponentrelationship.FieldDependencyID:
			values[i] = new(object.ID)
		case resourcecomponentrelationship.FieldType:
			values[i] = new(sql.NullString)
		case resourcecomponentrelationship.FieldCreateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ResourceComponentRelationship fields.
func (rcr *ResourceComponentRelationship) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case resourcecomponentrelationship.FieldID:
			if value, ok := values[i].(*object.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				rcr.ID = *value
			}
		case resourcecomponentrelationship.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				rcr.CreateTime = new(time.Time)
				*rcr.CreateTime = value.Time
			}
		case resourcecomponentrelationship.FieldResourceComponentID:
			if value, ok := values[i].(*object.ID); !ok {
				return fmt.Errorf("unexpected type %T for field resource_component_id", values[i])
			} else if value != nil {
				rcr.ResourceComponentID = *value
			}
		case resourcecomponentrelationship.FieldDependencyID:
			if value, ok := values[i].(*object.ID); !ok {
				return fmt.Errorf("unexpected type %T for field dependency_id", values[i])
			} else if value != nil {
				rcr.DependencyID = *value
			}
		case resourcecomponentrelationship.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				rcr.Type = value.String
			}
		default:
			rcr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ResourceComponentRelationship.
// This includes values selected through modifiers, order, etc.
func (rcr *ResourceComponentRelationship) Value(name string) (ent.Value, error) {
	return rcr.selectValues.Get(name)
}

// QueryResourceComponent queries the "resource_component" edge of the ResourceComponentRelationship entity.
func (rcr *ResourceComponentRelationship) QueryResourceComponent() *ResourceComponentQuery {
	return NewResourceComponentRelationshipClient(rcr.config).QueryResourceComponent(rcr)
}

// QueryDependency queries the "dependency" edge of the ResourceComponentRelationship entity.
func (rcr *ResourceComponentRelationship) QueryDependency() *ResourceComponentQuery {
	return NewResourceComponentRelationshipClient(rcr.config).QueryDependency(rcr)
}

// Update returns a builder for updating this ResourceComponentRelationship.
// Note that you need to call ResourceComponentRelationship.Unwrap() before calling this method if this ResourceComponentRelationship
// was returned from a transaction, and the transaction was committed or rolled back.
func (rcr *ResourceComponentRelationship) Update() *ResourceComponentRelationshipUpdateOne {
	return NewResourceComponentRelationshipClient(rcr.config).UpdateOne(rcr)
}

// Unwrap unwraps the ResourceComponentRelationship entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rcr *ResourceComponentRelationship) Unwrap() *ResourceComponentRelationship {
	_tx, ok := rcr.config.driver.(*txDriver)
	if !ok {
		panic("model: ResourceComponentRelationship is not a transactional entity")
	}
	rcr.config.driver = _tx.drv
	return rcr
}

// String implements the fmt.Stringer.
func (rcr *ResourceComponentRelationship) String() string {
	var builder strings.Builder
	builder.WriteString("ResourceComponentRelationship(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rcr.ID))
	if v := rcr.CreateTime; v != nil {
		builder.WriteString("create_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("resource_component_id=")
	builder.WriteString(fmt.Sprintf("%v", rcr.ResourceComponentID))
	builder.WriteString(", ")
	builder.WriteString("dependency_id=")
	builder.WriteString(fmt.Sprintf("%v", rcr.DependencyID))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(rcr.Type)
	builder.WriteByte(')')
	return builder.String()
}

// ResourceComponentRelationships is a parsable slice of ResourceComponentRelationship.
type ResourceComponentRelationships []*ResourceComponentRelationship
