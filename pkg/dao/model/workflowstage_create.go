// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus". DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/seal-io/walrus/pkg/dao/model/project"
	"github.com/seal-io/walrus/pkg/dao/model/workflow"
	"github.com/seal-io/walrus/pkg/dao/model/workflowstage"
	"github.com/seal-io/walrus/pkg/dao/model/workflowstep"
	"github.com/seal-io/walrus/pkg/dao/types/object"
)

// WorkflowStageCreate is the builder for creating a WorkflowStage entity.
type WorkflowStageCreate struct {
	config
	mutation   *WorkflowStageMutation
	hooks      []Hook
	conflict   []sql.ConflictOption
	object     *WorkflowStage
	fromUpsert bool
}

// SetName sets the "name" field.
func (wsc *WorkflowStageCreate) SetName(s string) *WorkflowStageCreate {
	wsc.mutation.SetName(s)
	return wsc
}

// SetDescription sets the "description" field.
func (wsc *WorkflowStageCreate) SetDescription(s string) *WorkflowStageCreate {
	wsc.mutation.SetDescription(s)
	return wsc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (wsc *WorkflowStageCreate) SetNillableDescription(s *string) *WorkflowStageCreate {
	if s != nil {
		wsc.SetDescription(*s)
	}
	return wsc
}

// SetLabels sets the "labels" field.
func (wsc *WorkflowStageCreate) SetLabels(m map[string]string) *WorkflowStageCreate {
	wsc.mutation.SetLabels(m)
	return wsc
}

// SetAnnotations sets the "annotations" field.
func (wsc *WorkflowStageCreate) SetAnnotations(m map[string]string) *WorkflowStageCreate {
	wsc.mutation.SetAnnotations(m)
	return wsc
}

// SetCreateTime sets the "create_time" field.
func (wsc *WorkflowStageCreate) SetCreateTime(t time.Time) *WorkflowStageCreate {
	wsc.mutation.SetCreateTime(t)
	return wsc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (wsc *WorkflowStageCreate) SetNillableCreateTime(t *time.Time) *WorkflowStageCreate {
	if t != nil {
		wsc.SetCreateTime(*t)
	}
	return wsc
}

// SetUpdateTime sets the "update_time" field.
func (wsc *WorkflowStageCreate) SetUpdateTime(t time.Time) *WorkflowStageCreate {
	wsc.mutation.SetUpdateTime(t)
	return wsc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (wsc *WorkflowStageCreate) SetNillableUpdateTime(t *time.Time) *WorkflowStageCreate {
	if t != nil {
		wsc.SetUpdateTime(*t)
	}
	return wsc
}

// SetProjectID sets the "project_id" field.
func (wsc *WorkflowStageCreate) SetProjectID(o object.ID) *WorkflowStageCreate {
	wsc.mutation.SetProjectID(o)
	return wsc
}

// SetWorkflowID sets the "workflow_id" field.
func (wsc *WorkflowStageCreate) SetWorkflowID(o object.ID) *WorkflowStageCreate {
	wsc.mutation.SetWorkflowID(o)
	return wsc
}

// SetDependencies sets the "dependencies" field.
func (wsc *WorkflowStageCreate) SetDependencies(o []object.ID) *WorkflowStageCreate {
	wsc.mutation.SetDependencies(o)
	return wsc
}

// SetOrder sets the "order" field.
func (wsc *WorkflowStageCreate) SetOrder(i int) *WorkflowStageCreate {
	wsc.mutation.SetOrder(i)
	return wsc
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (wsc *WorkflowStageCreate) SetNillableOrder(i *int) *WorkflowStageCreate {
	if i != nil {
		wsc.SetOrder(*i)
	}
	return wsc
}

// SetID sets the "id" field.
func (wsc *WorkflowStageCreate) SetID(o object.ID) *WorkflowStageCreate {
	wsc.mutation.SetID(o)
	return wsc
}

// SetProject sets the "project" edge to the Project entity.
func (wsc *WorkflowStageCreate) SetProject(p *Project) *WorkflowStageCreate {
	return wsc.SetProjectID(p.ID)
}

// AddStepIDs adds the "steps" edge to the WorkflowStep entity by IDs.
func (wsc *WorkflowStageCreate) AddStepIDs(ids ...object.ID) *WorkflowStageCreate {
	wsc.mutation.AddStepIDs(ids...)
	return wsc
}

// AddSteps adds the "steps" edges to the WorkflowStep entity.
func (wsc *WorkflowStageCreate) AddSteps(w ...*WorkflowStep) *WorkflowStageCreate {
	ids := make([]object.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wsc.AddStepIDs(ids...)
}

// SetWorkflow sets the "workflow" edge to the Workflow entity.
func (wsc *WorkflowStageCreate) SetWorkflow(w *Workflow) *WorkflowStageCreate {
	return wsc.SetWorkflowID(w.ID)
}

// Mutation returns the WorkflowStageMutation object of the builder.
func (wsc *WorkflowStageCreate) Mutation() *WorkflowStageMutation {
	return wsc.mutation
}

// Save creates the WorkflowStage in the database.
func (wsc *WorkflowStageCreate) Save(ctx context.Context) (*WorkflowStage, error) {
	if err := wsc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, wsc.sqlSave, wsc.mutation, wsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wsc *WorkflowStageCreate) SaveX(ctx context.Context) *WorkflowStage {
	v, err := wsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wsc *WorkflowStageCreate) Exec(ctx context.Context) error {
	_, err := wsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wsc *WorkflowStageCreate) ExecX(ctx context.Context) {
	if err := wsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wsc *WorkflowStageCreate) defaults() error {
	if _, ok := wsc.mutation.Labels(); !ok {
		v := workflowstage.DefaultLabels
		wsc.mutation.SetLabels(v)
	}
	if _, ok := wsc.mutation.Annotations(); !ok {
		v := workflowstage.DefaultAnnotations
		wsc.mutation.SetAnnotations(v)
	}
	if _, ok := wsc.mutation.CreateTime(); !ok {
		if workflowstage.DefaultCreateTime == nil {
			return fmt.Errorf("model: uninitialized workflowstage.DefaultCreateTime (forgotten import model/runtime?)")
		}
		v := workflowstage.DefaultCreateTime()
		wsc.mutation.SetCreateTime(v)
	}
	if _, ok := wsc.mutation.UpdateTime(); !ok {
		if workflowstage.DefaultUpdateTime == nil {
			return fmt.Errorf("model: uninitialized workflowstage.DefaultUpdateTime (forgotten import model/runtime?)")
		}
		v := workflowstage.DefaultUpdateTime()
		wsc.mutation.SetUpdateTime(v)
	}
	if _, ok := wsc.mutation.Dependencies(); !ok {
		v := workflowstage.DefaultDependencies
		wsc.mutation.SetDependencies(v)
	}
	if _, ok := wsc.mutation.Order(); !ok {
		v := workflowstage.DefaultOrder
		wsc.mutation.SetOrder(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (wsc *WorkflowStageCreate) check() error {
	if _, ok := wsc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`model: missing required field "WorkflowStage.name"`)}
	}
	if v, ok := wsc.mutation.Name(); ok {
		if err := workflowstage.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`model: validator failed for field "WorkflowStage.name": %w`, err)}
		}
	}
	if _, ok := wsc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`model: missing required field "WorkflowStage.create_time"`)}
	}
	if _, ok := wsc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`model: missing required field "WorkflowStage.update_time"`)}
	}
	if _, ok := wsc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project_id", err: errors.New(`model: missing required field "WorkflowStage.project_id"`)}
	}
	if v, ok := wsc.mutation.ProjectID(); ok {
		if err := workflowstage.ProjectIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "project_id", err: fmt.Errorf(`model: validator failed for field "WorkflowStage.project_id": %w`, err)}
		}
	}
	if _, ok := wsc.mutation.WorkflowID(); !ok {
		return &ValidationError{Name: "workflow_id", err: errors.New(`model: missing required field "WorkflowStage.workflow_id"`)}
	}
	if v, ok := wsc.mutation.WorkflowID(); ok {
		if err := workflowstage.WorkflowIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "workflow_id", err: fmt.Errorf(`model: validator failed for field "WorkflowStage.workflow_id": %w`, err)}
		}
	}
	if _, ok := wsc.mutation.Dependencies(); !ok {
		return &ValidationError{Name: "dependencies", err: errors.New(`model: missing required field "WorkflowStage.dependencies"`)}
	}
	if _, ok := wsc.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`model: missing required field "WorkflowStage.order"`)}
	}
	if v, ok := wsc.mutation.Order(); ok {
		if err := workflowstage.OrderValidator(v); err != nil {
			return &ValidationError{Name: "order", err: fmt.Errorf(`model: validator failed for field "WorkflowStage.order": %w`, err)}
		}
	}
	if _, ok := wsc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project", err: errors.New(`model: missing required edge "WorkflowStage.project"`)}
	}
	if _, ok := wsc.mutation.WorkflowID(); !ok {
		return &ValidationError{Name: "workflow", err: errors.New(`model: missing required edge "WorkflowStage.workflow"`)}
	}
	return nil
}

func (wsc *WorkflowStageCreate) sqlSave(ctx context.Context) (*WorkflowStage, error) {
	if err := wsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*object.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	wsc.mutation.id = &_node.ID
	wsc.mutation.done = true
	return _node, nil
}

func (wsc *WorkflowStageCreate) createSpec() (*WorkflowStage, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkflowStage{config: wsc.config}
		_spec = sqlgraph.NewCreateSpec(workflowstage.Table, sqlgraph.NewFieldSpec(workflowstage.FieldID, field.TypeString))
	)
	_spec.Schema = wsc.schemaConfig.WorkflowStage
	_spec.OnConflict = wsc.conflict
	if id, ok := wsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := wsc.mutation.Name(); ok {
		_spec.SetField(workflowstage.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := wsc.mutation.Description(); ok {
		_spec.SetField(workflowstage.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := wsc.mutation.Labels(); ok {
		_spec.SetField(workflowstage.FieldLabels, field.TypeJSON, value)
		_node.Labels = value
	}
	if value, ok := wsc.mutation.Annotations(); ok {
		_spec.SetField(workflowstage.FieldAnnotations, field.TypeJSON, value)
		_node.Annotations = value
	}
	if value, ok := wsc.mutation.CreateTime(); ok {
		_spec.SetField(workflowstage.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = &value
	}
	if value, ok := wsc.mutation.UpdateTime(); ok {
		_spec.SetField(workflowstage.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = &value
	}
	if value, ok := wsc.mutation.Dependencies(); ok {
		_spec.SetField(workflowstage.FieldDependencies, field.TypeJSON, value)
		_node.Dependencies = value
	}
	if value, ok := wsc.mutation.Order(); ok {
		_spec.SetField(workflowstage.FieldOrder, field.TypeInt, value)
		_node.Order = value
	}
	if nodes := wsc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowstage.ProjectTable,
			Columns: []string{workflowstage.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		edge.Schema = wsc.schemaConfig.WorkflowStage
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wsc.mutation.StepsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowstage.StepsTable,
			Columns: []string{workflowstage.StepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowstep.FieldID, field.TypeString),
			},
		}
		edge.Schema = wsc.schemaConfig.WorkflowStep
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wsc.mutation.WorkflowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowstage.WorkflowTable,
			Columns: []string{workflowstage.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeString),
			},
		}
		edge.Schema = wsc.schemaConfig.WorkflowStage
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WorkflowID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// Set is different from other Set* methods,
// it sets the value by judging the definition of each field within the entire object.
//
// For required fields, Set calls directly.
//
// For optional fields, Set calls if the value is not zero.
//
// For example:
//
//	## Required
//
//	db.SetX(obj.X)
//
//	## Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (wsc *WorkflowStageCreate) Set(obj *WorkflowStage) *WorkflowStageCreate {
	// Required.
	wsc.SetName(obj.Name)
	wsc.SetProjectID(obj.ProjectID)
	wsc.SetWorkflowID(obj.WorkflowID)
	wsc.SetDependencies(obj.Dependencies)
	wsc.SetOrder(obj.Order)

	// Optional.
	if obj.Description != "" {
		wsc.SetDescription(obj.Description)
	}
	if !reflect.ValueOf(obj.Labels).IsZero() {
		wsc.SetLabels(obj.Labels)
	}
	if !reflect.ValueOf(obj.Annotations).IsZero() {
		wsc.SetAnnotations(obj.Annotations)
	}
	if obj.CreateTime != nil {
		wsc.SetCreateTime(*obj.CreateTime)
	}
	if obj.UpdateTime != nil {
		wsc.SetUpdateTime(*obj.UpdateTime)
	}

	// Record the given object.
	wsc.object = obj

	return wsc
}

// getClientSet returns the ClientSet for the given builder.
func (wsc *WorkflowStageCreate) getClientSet() (mc ClientSet) {
	if _, ok := wsc.config.driver.(*txDriver); ok {
		tx := &Tx{config: wsc.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: wsc.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after created the WorkflowStage entity,
// which is always good for cascading create operations.
func (wsc *WorkflowStageCreate) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *WorkflowStage) error) (*WorkflowStage, error) {
	obj, err := wsc.Save(ctx)
	if err != nil {
		return nil, err
	}

	if len(cbs) == 0 {
		return obj, err
	}

	mc := wsc.getClientSet()

	if x := wsc.object; x != nil {
		if _, set := wsc.mutation.Field(workflowstage.FieldName); set {
			obj.Name = x.Name
		}
		if _, set := wsc.mutation.Field(workflowstage.FieldDescription); set {
			obj.Description = x.Description
		}
		if _, set := wsc.mutation.Field(workflowstage.FieldProjectID); set {
			obj.ProjectID = x.ProjectID
		}
		if _, set := wsc.mutation.Field(workflowstage.FieldWorkflowID); set {
			obj.WorkflowID = x.WorkflowID
		}
		obj.Edges = x.Edges
	}

	for i := range cbs {
		if err = cbs[i](ctx, mc, obj); err != nil {
			return nil, err
		}
	}

	return obj, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (wsc *WorkflowStageCreate) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *WorkflowStage) error) *WorkflowStage {
	obj, err := wsc.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return obj
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (wsc *WorkflowStageCreate) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *WorkflowStage) error) error {
	_, err := wsc.SaveE(ctx, cbs...)
	return err
}

// ExecEX is like ExecE, but panics if an error occurs.
func (wsc *WorkflowStageCreate) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *WorkflowStage) error) {
	if err := wsc.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// Set leverages the WorkflowStageCreate Set method,
// it sets the value by judging the definition of each field within the entire item of the given list.
//
// For required fields, Set calls directly.
//
// For optional fields, Set calls if the value is not zero.
//
// For example:
//
//	## Required
//
//	db.SetX(obj.X)
//
//	## Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (wscb *WorkflowStageCreateBulk) Set(objs ...*WorkflowStage) *WorkflowStageCreateBulk {
	if len(objs) != 0 {
		client := NewWorkflowStageClient(wscb.config)

		wscb.builders = make([]*WorkflowStageCreate, len(objs))
		for i := range objs {
			wscb.builders[i] = client.Create().Set(objs[i])
		}

		// Record the given objects.
		wscb.objects = objs
	}

	return wscb
}

// getClientSet returns the ClientSet for the given builder.
func (wscb *WorkflowStageCreateBulk) getClientSet() (mc ClientSet) {
	if _, ok := wscb.config.driver.(*txDriver); ok {
		tx := &Tx{config: wscb.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: wscb.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after created the WorkflowStage entities,
// which is always good for cascading create operations.
func (wscb *WorkflowStageCreateBulk) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *WorkflowStage) error) ([]*WorkflowStage, error) {
	objs, err := wscb.Save(ctx)
	if err != nil {
		return nil, err
	}

	if len(cbs) == 0 {
		return objs, err
	}

	mc := wscb.getClientSet()

	if x := wscb.objects; x != nil {
		for i := range x {
			if _, set := wscb.builders[i].mutation.Field(workflowstage.FieldName); set {
				objs[i].Name = x[i].Name
			}
			if _, set := wscb.builders[i].mutation.Field(workflowstage.FieldDescription); set {
				objs[i].Description = x[i].Description
			}
			if _, set := wscb.builders[i].mutation.Field(workflowstage.FieldProjectID); set {
				objs[i].ProjectID = x[i].ProjectID
			}
			if _, set := wscb.builders[i].mutation.Field(workflowstage.FieldWorkflowID); set {
				objs[i].WorkflowID = x[i].WorkflowID
			}
			objs[i].Edges = x[i].Edges
		}
	}

	for i := range objs {
		for j := range cbs {
			if err = cbs[j](ctx, mc, objs[i]); err != nil {
				return nil, err
			}
		}
	}

	return objs, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (wscb *WorkflowStageCreateBulk) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *WorkflowStage) error) []*WorkflowStage {
	objs, err := wscb.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return objs
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (wscb *WorkflowStageCreateBulk) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *WorkflowStage) error) error {
	_, err := wscb.SaveE(ctx, cbs...)
	return err
}

// ExecEX is like ExecE, but panics if an error occurs.
func (wscb *WorkflowStageCreateBulk) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *WorkflowStage) error) {
	if err := wscb.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (u *WorkflowStageUpsertOne) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *WorkflowStage) error) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for WorkflowStageUpsertOne.OnConflict")
	}
	u.create.fromUpsert = true
	return u.create.ExecE(ctx, cbs...)
}

// ExecEX is like ExecE, but panics if an error occurs.
func (u *WorkflowStageUpsertOne) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *WorkflowStage) error) {
	if err := u.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (u *WorkflowStageUpsertBulk) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *WorkflowStage) error) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model: OnConflict was set for builder %d. Set it on the WorkflowStageUpsertBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for WorkflowStageUpsertBulk.OnConflict")
	}
	u.create.fromUpsert = true
	return u.create.ExecE(ctx, cbs...)
}

// ExecEX is like ExecE, but panics if an error occurs.
func (u *WorkflowStageUpsertBulk) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *WorkflowStage) error) {
	if err := u.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WorkflowStage.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WorkflowStageUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (wsc *WorkflowStageCreate) OnConflict(opts ...sql.ConflictOption) *WorkflowStageUpsertOne {
	wsc.conflict = opts
	return &WorkflowStageUpsertOne{
		create: wsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WorkflowStage.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wsc *WorkflowStageCreate) OnConflictColumns(columns ...string) *WorkflowStageUpsertOne {
	wsc.conflict = append(wsc.conflict, sql.ConflictColumns(columns...))
	return &WorkflowStageUpsertOne{
		create: wsc,
	}
}

type (
	// WorkflowStageUpsertOne is the builder for "upsert"-ing
	//  one WorkflowStage node.
	WorkflowStageUpsertOne struct {
		create *WorkflowStageCreate
	}

	// WorkflowStageUpsert is the "OnConflict" setter.
	WorkflowStageUpsert struct {
		*sql.UpdateSet
	}
)

// SetDescription sets the "description" field.
func (u *WorkflowStageUpsert) SetDescription(v string) *WorkflowStageUpsert {
	u.Set(workflowstage.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *WorkflowStageUpsert) UpdateDescription() *WorkflowStageUpsert {
	u.SetExcluded(workflowstage.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *WorkflowStageUpsert) ClearDescription() *WorkflowStageUpsert {
	u.SetNull(workflowstage.FieldDescription)
	return u
}

// SetLabels sets the "labels" field.
func (u *WorkflowStageUpsert) SetLabels(v map[string]string) *WorkflowStageUpsert {
	u.Set(workflowstage.FieldLabels, v)
	return u
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *WorkflowStageUpsert) UpdateLabels() *WorkflowStageUpsert {
	u.SetExcluded(workflowstage.FieldLabels)
	return u
}

// ClearLabels clears the value of the "labels" field.
func (u *WorkflowStageUpsert) ClearLabels() *WorkflowStageUpsert {
	u.SetNull(workflowstage.FieldLabels)
	return u
}

// SetAnnotations sets the "annotations" field.
func (u *WorkflowStageUpsert) SetAnnotations(v map[string]string) *WorkflowStageUpsert {
	u.Set(workflowstage.FieldAnnotations, v)
	return u
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *WorkflowStageUpsert) UpdateAnnotations() *WorkflowStageUpsert {
	u.SetExcluded(workflowstage.FieldAnnotations)
	return u
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *WorkflowStageUpsert) ClearAnnotations() *WorkflowStageUpsert {
	u.SetNull(workflowstage.FieldAnnotations)
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *WorkflowStageUpsert) SetUpdateTime(v time.Time) *WorkflowStageUpsert {
	u.Set(workflowstage.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *WorkflowStageUpsert) UpdateUpdateTime() *WorkflowStageUpsert {
	u.SetExcluded(workflowstage.FieldUpdateTime)
	return u
}

// SetDependencies sets the "dependencies" field.
func (u *WorkflowStageUpsert) SetDependencies(v []object.ID) *WorkflowStageUpsert {
	u.Set(workflowstage.FieldDependencies, v)
	return u
}

// UpdateDependencies sets the "dependencies" field to the value that was provided on create.
func (u *WorkflowStageUpsert) UpdateDependencies() *WorkflowStageUpsert {
	u.SetExcluded(workflowstage.FieldDependencies)
	return u
}

// SetOrder sets the "order" field.
func (u *WorkflowStageUpsert) SetOrder(v int) *WorkflowStageUpsert {
	u.Set(workflowstage.FieldOrder, v)
	return u
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *WorkflowStageUpsert) UpdateOrder() *WorkflowStageUpsert {
	u.SetExcluded(workflowstage.FieldOrder)
	return u
}

// AddOrder adds v to the "order" field.
func (u *WorkflowStageUpsert) AddOrder(v int) *WorkflowStageUpsert {
	u.Add(workflowstage.FieldOrder, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.WorkflowStage.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(workflowstage.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WorkflowStageUpsertOne) UpdateNewValues() *WorkflowStageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(workflowstage.FieldID)
		}
		if _, exists := u.create.mutation.Name(); exists {
			s.SetIgnore(workflowstage.FieldName)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(workflowstage.FieldCreateTime)
		}
		if _, exists := u.create.mutation.ProjectID(); exists {
			s.SetIgnore(workflowstage.FieldProjectID)
		}
		if _, exists := u.create.mutation.WorkflowID(); exists {
			s.SetIgnore(workflowstage.FieldWorkflowID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WorkflowStage.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *WorkflowStageUpsertOne) Ignore() *WorkflowStageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WorkflowStageUpsertOne) DoNothing() *WorkflowStageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WorkflowStageCreate.OnConflict
// documentation for more info.
func (u *WorkflowStageUpsertOne) Update(set func(*WorkflowStageUpsert)) *WorkflowStageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WorkflowStageUpsert{UpdateSet: update})
	}))
	return u
}

// SetDescription sets the "description" field.
func (u *WorkflowStageUpsertOne) SetDescription(v string) *WorkflowStageUpsertOne {
	return u.Update(func(s *WorkflowStageUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *WorkflowStageUpsertOne) UpdateDescription() *WorkflowStageUpsertOne {
	return u.Update(func(s *WorkflowStageUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *WorkflowStageUpsertOne) ClearDescription() *WorkflowStageUpsertOne {
	return u.Update(func(s *WorkflowStageUpsert) {
		s.ClearDescription()
	})
}

// SetLabels sets the "labels" field.
func (u *WorkflowStageUpsertOne) SetLabels(v map[string]string) *WorkflowStageUpsertOne {
	return u.Update(func(s *WorkflowStageUpsert) {
		s.SetLabels(v)
	})
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *WorkflowStageUpsertOne) UpdateLabels() *WorkflowStageUpsertOne {
	return u.Update(func(s *WorkflowStageUpsert) {
		s.UpdateLabels()
	})
}

// ClearLabels clears the value of the "labels" field.
func (u *WorkflowStageUpsertOne) ClearLabels() *WorkflowStageUpsertOne {
	return u.Update(func(s *WorkflowStageUpsert) {
		s.ClearLabels()
	})
}

// SetAnnotations sets the "annotations" field.
func (u *WorkflowStageUpsertOne) SetAnnotations(v map[string]string) *WorkflowStageUpsertOne {
	return u.Update(func(s *WorkflowStageUpsert) {
		s.SetAnnotations(v)
	})
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *WorkflowStageUpsertOne) UpdateAnnotations() *WorkflowStageUpsertOne {
	return u.Update(func(s *WorkflowStageUpsert) {
		s.UpdateAnnotations()
	})
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *WorkflowStageUpsertOne) ClearAnnotations() *WorkflowStageUpsertOne {
	return u.Update(func(s *WorkflowStageUpsert) {
		s.ClearAnnotations()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *WorkflowStageUpsertOne) SetUpdateTime(v time.Time) *WorkflowStageUpsertOne {
	return u.Update(func(s *WorkflowStageUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *WorkflowStageUpsertOne) UpdateUpdateTime() *WorkflowStageUpsertOne {
	return u.Update(func(s *WorkflowStageUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetDependencies sets the "dependencies" field.
func (u *WorkflowStageUpsertOne) SetDependencies(v []object.ID) *WorkflowStageUpsertOne {
	return u.Update(func(s *WorkflowStageUpsert) {
		s.SetDependencies(v)
	})
}

// UpdateDependencies sets the "dependencies" field to the value that was provided on create.
func (u *WorkflowStageUpsertOne) UpdateDependencies() *WorkflowStageUpsertOne {
	return u.Update(func(s *WorkflowStageUpsert) {
		s.UpdateDependencies()
	})
}

// SetOrder sets the "order" field.
func (u *WorkflowStageUpsertOne) SetOrder(v int) *WorkflowStageUpsertOne {
	return u.Update(func(s *WorkflowStageUpsert) {
		s.SetOrder(v)
	})
}

// AddOrder adds v to the "order" field.
func (u *WorkflowStageUpsertOne) AddOrder(v int) *WorkflowStageUpsertOne {
	return u.Update(func(s *WorkflowStageUpsert) {
		s.AddOrder(v)
	})
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *WorkflowStageUpsertOne) UpdateOrder() *WorkflowStageUpsertOne {
	return u.Update(func(s *WorkflowStageUpsert) {
		s.UpdateOrder()
	})
}

// Exec executes the query.
func (u *WorkflowStageUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for WorkflowStageCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WorkflowStageUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *WorkflowStageUpsertOne) ID(ctx context.Context) (id object.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("model: WorkflowStageUpsertOne.ID is not supported by MySQL driver. Use WorkflowStageUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *WorkflowStageUpsertOne) IDX(ctx context.Context) object.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// WorkflowStageCreateBulk is the builder for creating many WorkflowStage entities in bulk.
type WorkflowStageCreateBulk struct {
	config
	err        error
	builders   []*WorkflowStageCreate
	conflict   []sql.ConflictOption
	objects    []*WorkflowStage
	fromUpsert bool
}

// Save creates the WorkflowStage entities in the database.
func (wscb *WorkflowStageCreateBulk) Save(ctx context.Context) ([]*WorkflowStage, error) {
	if wscb.err != nil {
		return nil, wscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wscb.builders))
	nodes := make([]*WorkflowStage, len(wscb.builders))
	mutators := make([]Mutator, len(wscb.builders))
	for i := range wscb.builders {
		func(i int, root context.Context) {
			builder := wscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkflowStageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = wscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wscb *WorkflowStageCreateBulk) SaveX(ctx context.Context) []*WorkflowStage {
	v, err := wscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wscb *WorkflowStageCreateBulk) Exec(ctx context.Context) error {
	_, err := wscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wscb *WorkflowStageCreateBulk) ExecX(ctx context.Context) {
	if err := wscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WorkflowStage.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WorkflowStageUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (wscb *WorkflowStageCreateBulk) OnConflict(opts ...sql.ConflictOption) *WorkflowStageUpsertBulk {
	wscb.conflict = opts
	return &WorkflowStageUpsertBulk{
		create: wscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WorkflowStage.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wscb *WorkflowStageCreateBulk) OnConflictColumns(columns ...string) *WorkflowStageUpsertBulk {
	wscb.conflict = append(wscb.conflict, sql.ConflictColumns(columns...))
	return &WorkflowStageUpsertBulk{
		create: wscb,
	}
}

// WorkflowStageUpsertBulk is the builder for "upsert"-ing
// a bulk of WorkflowStage nodes.
type WorkflowStageUpsertBulk struct {
	create *WorkflowStageCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.WorkflowStage.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(workflowstage.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WorkflowStageUpsertBulk) UpdateNewValues() *WorkflowStageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(workflowstage.FieldID)
			}
			if _, exists := b.mutation.Name(); exists {
				s.SetIgnore(workflowstage.FieldName)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(workflowstage.FieldCreateTime)
			}
			if _, exists := b.mutation.ProjectID(); exists {
				s.SetIgnore(workflowstage.FieldProjectID)
			}
			if _, exists := b.mutation.WorkflowID(); exists {
				s.SetIgnore(workflowstage.FieldWorkflowID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WorkflowStage.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *WorkflowStageUpsertBulk) Ignore() *WorkflowStageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WorkflowStageUpsertBulk) DoNothing() *WorkflowStageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WorkflowStageCreateBulk.OnConflict
// documentation for more info.
func (u *WorkflowStageUpsertBulk) Update(set func(*WorkflowStageUpsert)) *WorkflowStageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WorkflowStageUpsert{UpdateSet: update})
	}))
	return u
}

// SetDescription sets the "description" field.
func (u *WorkflowStageUpsertBulk) SetDescription(v string) *WorkflowStageUpsertBulk {
	return u.Update(func(s *WorkflowStageUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *WorkflowStageUpsertBulk) UpdateDescription() *WorkflowStageUpsertBulk {
	return u.Update(func(s *WorkflowStageUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *WorkflowStageUpsertBulk) ClearDescription() *WorkflowStageUpsertBulk {
	return u.Update(func(s *WorkflowStageUpsert) {
		s.ClearDescription()
	})
}

// SetLabels sets the "labels" field.
func (u *WorkflowStageUpsertBulk) SetLabels(v map[string]string) *WorkflowStageUpsertBulk {
	return u.Update(func(s *WorkflowStageUpsert) {
		s.SetLabels(v)
	})
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *WorkflowStageUpsertBulk) UpdateLabels() *WorkflowStageUpsertBulk {
	return u.Update(func(s *WorkflowStageUpsert) {
		s.UpdateLabels()
	})
}

// ClearLabels clears the value of the "labels" field.
func (u *WorkflowStageUpsertBulk) ClearLabels() *WorkflowStageUpsertBulk {
	return u.Update(func(s *WorkflowStageUpsert) {
		s.ClearLabels()
	})
}

// SetAnnotations sets the "annotations" field.
func (u *WorkflowStageUpsertBulk) SetAnnotations(v map[string]string) *WorkflowStageUpsertBulk {
	return u.Update(func(s *WorkflowStageUpsert) {
		s.SetAnnotations(v)
	})
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *WorkflowStageUpsertBulk) UpdateAnnotations() *WorkflowStageUpsertBulk {
	return u.Update(func(s *WorkflowStageUpsert) {
		s.UpdateAnnotations()
	})
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *WorkflowStageUpsertBulk) ClearAnnotations() *WorkflowStageUpsertBulk {
	return u.Update(func(s *WorkflowStageUpsert) {
		s.ClearAnnotations()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *WorkflowStageUpsertBulk) SetUpdateTime(v time.Time) *WorkflowStageUpsertBulk {
	return u.Update(func(s *WorkflowStageUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *WorkflowStageUpsertBulk) UpdateUpdateTime() *WorkflowStageUpsertBulk {
	return u.Update(func(s *WorkflowStageUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetDependencies sets the "dependencies" field.
func (u *WorkflowStageUpsertBulk) SetDependencies(v []object.ID) *WorkflowStageUpsertBulk {
	return u.Update(func(s *WorkflowStageUpsert) {
		s.SetDependencies(v)
	})
}

// UpdateDependencies sets the "dependencies" field to the value that was provided on create.
func (u *WorkflowStageUpsertBulk) UpdateDependencies() *WorkflowStageUpsertBulk {
	return u.Update(func(s *WorkflowStageUpsert) {
		s.UpdateDependencies()
	})
}

// SetOrder sets the "order" field.
func (u *WorkflowStageUpsertBulk) SetOrder(v int) *WorkflowStageUpsertBulk {
	return u.Update(func(s *WorkflowStageUpsert) {
		s.SetOrder(v)
	})
}

// AddOrder adds v to the "order" field.
func (u *WorkflowStageUpsertBulk) AddOrder(v int) *WorkflowStageUpsertBulk {
	return u.Update(func(s *WorkflowStageUpsert) {
		s.AddOrder(v)
	})
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *WorkflowStageUpsertBulk) UpdateOrder() *WorkflowStageUpsertBulk {
	return u.Update(func(s *WorkflowStageUpsert) {
		s.UpdateOrder()
	})
}

// Exec executes the query.
func (u *WorkflowStageUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model: OnConflict was set for builder %d. Set it on the WorkflowStageCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for WorkflowStageCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WorkflowStageUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
