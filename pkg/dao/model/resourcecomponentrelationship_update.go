// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus". DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/seal-io/walrus/pkg/dao/model/internal"
	"github.com/seal-io/walrus/pkg/dao/model/predicate"
	"github.com/seal-io/walrus/pkg/dao/model/resourcecomponentrelationship"
)

// ResourceComponentRelationshipUpdate is the builder for updating ResourceComponentRelationship entities.
type ResourceComponentRelationshipUpdate struct {
	config
	hooks     []Hook
	mutation  *ResourceComponentRelationshipMutation
	modifiers []func(*sql.UpdateBuilder)
	object    *ResourceComponentRelationship
}

// Where appends a list predicates to the ResourceComponentRelationshipUpdate builder.
func (rcru *ResourceComponentRelationshipUpdate) Where(ps ...predicate.ResourceComponentRelationship) *ResourceComponentRelationshipUpdate {
	rcru.mutation.Where(ps...)
	return rcru
}

// Mutation returns the ResourceComponentRelationshipMutation object of the builder.
func (rcru *ResourceComponentRelationshipUpdate) Mutation() *ResourceComponentRelationshipMutation {
	return rcru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rcru *ResourceComponentRelationshipUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rcru.sqlSave, rcru.mutation, rcru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rcru *ResourceComponentRelationshipUpdate) SaveX(ctx context.Context) int {
	affected, err := rcru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rcru *ResourceComponentRelationshipUpdate) Exec(ctx context.Context) error {
	_, err := rcru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcru *ResourceComponentRelationshipUpdate) ExecX(ctx context.Context) {
	if err := rcru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rcru *ResourceComponentRelationshipUpdate) check() error {
	if _, ok := rcru.mutation.ResourceComponentID(); rcru.mutation.ResourceComponentCleared() && !ok {
		return errors.New(`model: clearing a required unique edge "ResourceComponentRelationship.resource_component"`)
	}
	if _, ok := rcru.mutation.DependencyID(); rcru.mutation.DependencyCleared() && !ok {
		return errors.New(`model: clearing a required unique edge "ResourceComponentRelationship.dependency"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rcru *ResourceComponentRelationshipUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ResourceComponentRelationshipUpdate {
	rcru.modifiers = append(rcru.modifiers, modifiers...)
	return rcru
}

func (rcru *ResourceComponentRelationshipUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rcru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(resourcecomponentrelationship.Table, resourcecomponentrelationship.Columns, sqlgraph.NewFieldSpec(resourcecomponentrelationship.FieldID, field.TypeString))
	if ps := rcru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_spec.Node.Schema = rcru.schemaConfig.ResourceComponentRelationship
	ctx = internal.NewSchemaConfigContext(ctx, rcru.schemaConfig)
	_spec.AddModifiers(rcru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, rcru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resourcecomponentrelationship.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rcru.mutation.done = true
	return n, nil
}

// ResourceComponentRelationshipUpdateOne is the builder for updating a single ResourceComponentRelationship entity.
type ResourceComponentRelationshipUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ResourceComponentRelationshipMutation
	modifiers []func(*sql.UpdateBuilder)
	object    *ResourceComponentRelationship
}

// Mutation returns the ResourceComponentRelationshipMutation object of the builder.
func (rcruo *ResourceComponentRelationshipUpdateOne) Mutation() *ResourceComponentRelationshipMutation {
	return rcruo.mutation
}

// Where appends a list predicates to the ResourceComponentRelationshipUpdate builder.
func (rcruo *ResourceComponentRelationshipUpdateOne) Where(ps ...predicate.ResourceComponentRelationship) *ResourceComponentRelationshipUpdateOne {
	rcruo.mutation.Where(ps...)
	return rcruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rcruo *ResourceComponentRelationshipUpdateOne) Select(field string, fields ...string) *ResourceComponentRelationshipUpdateOne {
	rcruo.fields = append([]string{field}, fields...)
	return rcruo
}

// Save executes the query and returns the updated ResourceComponentRelationship entity.
func (rcruo *ResourceComponentRelationshipUpdateOne) Save(ctx context.Context) (*ResourceComponentRelationship, error) {
	return withHooks(ctx, rcruo.sqlSave, rcruo.mutation, rcruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rcruo *ResourceComponentRelationshipUpdateOne) SaveX(ctx context.Context) *ResourceComponentRelationship {
	node, err := rcruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rcruo *ResourceComponentRelationshipUpdateOne) Exec(ctx context.Context) error {
	_, err := rcruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcruo *ResourceComponentRelationshipUpdateOne) ExecX(ctx context.Context) {
	if err := rcruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rcruo *ResourceComponentRelationshipUpdateOne) check() error {
	if _, ok := rcruo.mutation.ResourceComponentID(); rcruo.mutation.ResourceComponentCleared() && !ok {
		return errors.New(`model: clearing a required unique edge "ResourceComponentRelationship.resource_component"`)
	}
	if _, ok := rcruo.mutation.DependencyID(); rcruo.mutation.DependencyCleared() && !ok {
		return errors.New(`model: clearing a required unique edge "ResourceComponentRelationship.dependency"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rcruo *ResourceComponentRelationshipUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ResourceComponentRelationshipUpdateOne {
	rcruo.modifiers = append(rcruo.modifiers, modifiers...)
	return rcruo
}

func (rcruo *ResourceComponentRelationshipUpdateOne) sqlSave(ctx context.Context) (_node *ResourceComponentRelationship, err error) {
	if err := rcruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(resourcecomponentrelationship.Table, resourcecomponentrelationship.Columns, sqlgraph.NewFieldSpec(resourcecomponentrelationship.FieldID, field.TypeString))
	id, ok := rcruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`model: missing "ResourceComponentRelationship.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rcruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, resourcecomponentrelationship.FieldID)
		for _, f := range fields {
			if !resourcecomponentrelationship.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
			}
			if f != resourcecomponentrelationship.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rcruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_spec.Node.Schema = rcruo.schemaConfig.ResourceComponentRelationship
	ctx = internal.NewSchemaConfigContext(ctx, rcruo.schemaConfig)
	_spec.AddModifiers(rcruo.modifiers...)
	_node = &ResourceComponentRelationship{config: rcruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rcruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resourcecomponentrelationship.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rcruo.mutation.done = true
	return _node, nil
}
