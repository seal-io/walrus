// SPDX-FileCopyrightText: 2023 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "seal". DO NOT EDIT.

package model

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"

	"github.com/seal-io/walrus/pkg/dao/model/distributelock"
)

// DistributeLock is the model entity for the DistributeLock schema.
type DistributeLock struct {
	config `json:"-"`
	// ID of the ent.
	// ID is the lock key.
	ID string `json:"id,omitempty"`
	// Expiration timestamp to prevent the lock be occupied for long time.
	ExpireAt int64 `json:"expireAt,omitempty"`
	// Holder is the id for current key owner
	Holder       string `json:"holder,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DistributeLock) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case distributelock.FieldExpireAt:
			values[i] = new(sql.NullInt64)
		case distributelock.FieldID, distributelock.FieldHolder:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DistributeLock fields.
func (dl *DistributeLock) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case distributelock.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				dl.ID = value.String
			}
		case distributelock.FieldExpireAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field expireAt", values[i])
			} else if value.Valid {
				dl.ExpireAt = value.Int64
			}
		case distributelock.FieldHolder:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field holder", values[i])
			} else if value.Valid {
				dl.Holder = value.String
			}
		default:
			dl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DistributeLock.
// This includes values selected through modifiers, order, etc.
func (dl *DistributeLock) Value(name string) (ent.Value, error) {
	return dl.selectValues.Get(name)
}

// Update returns a builder for updating this DistributeLock.
// Note that you need to call DistributeLock.Unwrap() before calling this method if this DistributeLock
// was returned from a transaction, and the transaction was committed or rolled back.
func (dl *DistributeLock) Update() *DistributeLockUpdateOne {
	return NewDistributeLockClient(dl.config).UpdateOne(dl)
}

// Unwrap unwraps the DistributeLock entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dl *DistributeLock) Unwrap() *DistributeLock {
	_tx, ok := dl.config.driver.(*txDriver)
	if !ok {
		panic("model: DistributeLock is not a transactional entity")
	}
	dl.config.driver = _tx.drv
	return dl
}

// String implements the fmt.Stringer.
func (dl *DistributeLock) String() string {
	var builder strings.Builder
	builder.WriteString("DistributeLock(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dl.ID))
	builder.WriteString("expireAt=")
	builder.WriteString(fmt.Sprintf("%v", dl.ExpireAt))
	builder.WriteString(", ")
	builder.WriteString("holder=")
	builder.WriteString(dl.Holder)
	builder.WriteByte(')')
	return builder.String()
}

// DistributeLocks is a parsable slice of DistributeLock.
type DistributeLocks []*DistributeLock
