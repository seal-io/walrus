// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus". DO NOT EDIT.

package model

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/seal-io/walrus/pkg/dao/model/internal"
	"github.com/seal-io/walrus/pkg/dao/model/predicate"
	"github.com/seal-io/walrus/pkg/dao/model/resourcerelationship"
)

// ResourceRelationshipDelete is the builder for deleting a ResourceRelationship entity.
type ResourceRelationshipDelete struct {
	config
	hooks    []Hook
	mutation *ResourceRelationshipMutation
}

// Where appends a list predicates to the ResourceRelationshipDelete builder.
func (rrd *ResourceRelationshipDelete) Where(ps ...predicate.ResourceRelationship) *ResourceRelationshipDelete {
	rrd.mutation.Where(ps...)
	return rrd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rrd *ResourceRelationshipDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, rrd.sqlExec, rrd.mutation, rrd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rrd *ResourceRelationshipDelete) ExecX(ctx context.Context) int {
	n, err := rrd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rrd *ResourceRelationshipDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(resourcerelationship.Table, sqlgraph.NewFieldSpec(resourcerelationship.FieldID, field.TypeString))
	_spec.Node.Schema = rrd.schemaConfig.ResourceRelationship
	ctx = internal.NewSchemaConfigContext(ctx, rrd.schemaConfig)
	if ps := rrd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rrd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rrd.mutation.done = true
	return affected, err
}

// ResourceRelationshipDeleteOne is the builder for deleting a single ResourceRelationship entity.
type ResourceRelationshipDeleteOne struct {
	rrd *ResourceRelationshipDelete
}

// Where appends a list predicates to the ResourceRelationshipDelete builder.
func (rrdo *ResourceRelationshipDeleteOne) Where(ps ...predicate.ResourceRelationship) *ResourceRelationshipDeleteOne {
	rrdo.rrd.mutation.Where(ps...)
	return rrdo
}

// Exec executes the deletion query.
func (rrdo *ResourceRelationshipDeleteOne) Exec(ctx context.Context) error {
	n, err := rrdo.rrd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{resourcerelationship.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rrdo *ResourceRelationshipDeleteOne) ExecX(ctx context.Context) {
	if err := rrdo.Exec(ctx); err != nil {
		panic(err)
	}
}
