// SPDX-FileCopyrightText: 2023 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus". DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/seal-io/walrus/pkg/dao/model/environment"
	"github.com/seal-io/walrus/pkg/dao/model/project"
	"github.com/seal-io/walrus/pkg/dao/model/resource"
	"github.com/seal-io/walrus/pkg/dao/model/resourcecomponent"
	"github.com/seal-io/walrus/pkg/dao/model/resourcedefinition"
	"github.com/seal-io/walrus/pkg/dao/model/resourcedefinitionmatchingrule"
	"github.com/seal-io/walrus/pkg/dao/model/resourcerelationship"
	"github.com/seal-io/walrus/pkg/dao/model/resourcerevision"
	"github.com/seal-io/walrus/pkg/dao/model/templateversion"
	"github.com/seal-io/walrus/pkg/dao/types"
	"github.com/seal-io/walrus/pkg/dao/types/object"
	"github.com/seal-io/walrus/pkg/dao/types/property"
	"github.com/seal-io/walrus/pkg/dao/types/status"
)

// ResourceCreate is the builder for creating a Resource entity.
type ResourceCreate struct {
	config
	mutation   *ResourceMutation
	hooks      []Hook
	conflict   []sql.ConflictOption
	object     *Resource
	fromUpsert bool
}

// SetName sets the "name" field.
func (rc *ResourceCreate) SetName(s string) *ResourceCreate {
	rc.mutation.SetName(s)
	return rc
}

// SetDescription sets the "description" field.
func (rc *ResourceCreate) SetDescription(s string) *ResourceCreate {
	rc.mutation.SetDescription(s)
	return rc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rc *ResourceCreate) SetNillableDescription(s *string) *ResourceCreate {
	if s != nil {
		rc.SetDescription(*s)
	}
	return rc
}

// SetLabels sets the "labels" field.
func (rc *ResourceCreate) SetLabels(m map[string]string) *ResourceCreate {
	rc.mutation.SetLabels(m)
	return rc
}

// SetAnnotations sets the "annotations" field.
func (rc *ResourceCreate) SetAnnotations(m map[string]string) *ResourceCreate {
	rc.mutation.SetAnnotations(m)
	return rc
}

// SetCreateTime sets the "create_time" field.
func (rc *ResourceCreate) SetCreateTime(t time.Time) *ResourceCreate {
	rc.mutation.SetCreateTime(t)
	return rc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (rc *ResourceCreate) SetNillableCreateTime(t *time.Time) *ResourceCreate {
	if t != nil {
		rc.SetCreateTime(*t)
	}
	return rc
}

// SetUpdateTime sets the "update_time" field.
func (rc *ResourceCreate) SetUpdateTime(t time.Time) *ResourceCreate {
	rc.mutation.SetUpdateTime(t)
	return rc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (rc *ResourceCreate) SetNillableUpdateTime(t *time.Time) *ResourceCreate {
	if t != nil {
		rc.SetUpdateTime(*t)
	}
	return rc
}

// SetStatus sets the "status" field.
func (rc *ResourceCreate) SetStatus(s status.Status) *ResourceCreate {
	rc.mutation.SetStatus(s)
	return rc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rc *ResourceCreate) SetNillableStatus(s *status.Status) *ResourceCreate {
	if s != nil {
		rc.SetStatus(*s)
	}
	return rc
}

// SetProjectID sets the "project_id" field.
func (rc *ResourceCreate) SetProjectID(o object.ID) *ResourceCreate {
	rc.mutation.SetProjectID(o)
	return rc
}

// SetEnvironmentID sets the "environment_id" field.
func (rc *ResourceCreate) SetEnvironmentID(o object.ID) *ResourceCreate {
	rc.mutation.SetEnvironmentID(o)
	return rc
}

// SetTemplateID sets the "template_id" field.
func (rc *ResourceCreate) SetTemplateID(o object.ID) *ResourceCreate {
	rc.mutation.SetTemplateID(o)
	return rc
}

// SetNillableTemplateID sets the "template_id" field if the given value is not nil.
func (rc *ResourceCreate) SetNillableTemplateID(o *object.ID) *ResourceCreate {
	if o != nil {
		rc.SetTemplateID(*o)
	}
	return rc
}

// SetType sets the "type" field.
func (rc *ResourceCreate) SetType(s string) *ResourceCreate {
	rc.mutation.SetType(s)
	return rc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (rc *ResourceCreate) SetNillableType(s *string) *ResourceCreate {
	if s != nil {
		rc.SetType(*s)
	}
	return rc
}

// SetResourceDefinitionID sets the "resource_definition_id" field.
func (rc *ResourceCreate) SetResourceDefinitionID(o object.ID) *ResourceCreate {
	rc.mutation.SetResourceDefinitionID(o)
	return rc
}

// SetNillableResourceDefinitionID sets the "resource_definition_id" field if the given value is not nil.
func (rc *ResourceCreate) SetNillableResourceDefinitionID(o *object.ID) *ResourceCreate {
	if o != nil {
		rc.SetResourceDefinitionID(*o)
	}
	return rc
}

// SetResourceDefinitionMatchingRuleID sets the "resource_definition_matching_rule_id" field.
func (rc *ResourceCreate) SetResourceDefinitionMatchingRuleID(o object.ID) *ResourceCreate {
	rc.mutation.SetResourceDefinitionMatchingRuleID(o)
	return rc
}

// SetNillableResourceDefinitionMatchingRuleID sets the "resource_definition_matching_rule_id" field if the given value is not nil.
func (rc *ResourceCreate) SetNillableResourceDefinitionMatchingRuleID(o *object.ID) *ResourceCreate {
	if o != nil {
		rc.SetResourceDefinitionMatchingRuleID(*o)
	}
	return rc
}

// SetAttributes sets the "attributes" field.
func (rc *ResourceCreate) SetAttributes(pr property.Values) *ResourceCreate {
	rc.mutation.SetAttributes(pr)
	return rc
}

// SetEndpoints sets the "endpoints" field.
func (rc *ResourceCreate) SetEndpoints(te types.ResourceEndpoints) *ResourceCreate {
	rc.mutation.SetEndpoints(te)
	return rc
}

// SetChangeComment sets the "change_comment" field.
func (rc *ResourceCreate) SetChangeComment(s string) *ResourceCreate {
	rc.mutation.SetChangeComment(s)
	return rc
}

// SetNillableChangeComment sets the "change_comment" field if the given value is not nil.
func (rc *ResourceCreate) SetNillableChangeComment(s *string) *ResourceCreate {
	if s != nil {
		rc.SetChangeComment(*s)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *ResourceCreate) SetID(o object.ID) *ResourceCreate {
	rc.mutation.SetID(o)
	return rc
}

// SetProject sets the "project" edge to the Project entity.
func (rc *ResourceCreate) SetProject(p *Project) *ResourceCreate {
	return rc.SetProjectID(p.ID)
}

// SetEnvironment sets the "environment" edge to the Environment entity.
func (rc *ResourceCreate) SetEnvironment(e *Environment) *ResourceCreate {
	return rc.SetEnvironmentID(e.ID)
}

// SetTemplate sets the "template" edge to the TemplateVersion entity.
func (rc *ResourceCreate) SetTemplate(t *TemplateVersion) *ResourceCreate {
	return rc.SetTemplateID(t.ID)
}

// SetResourceDefinition sets the "resource_definition" edge to the ResourceDefinition entity.
func (rc *ResourceCreate) SetResourceDefinition(r *ResourceDefinition) *ResourceCreate {
	return rc.SetResourceDefinitionID(r.ID)
}

// SetResourceDefinitionMatchingRule sets the "resource_definition_matching_rule" edge to the ResourceDefinitionMatchingRule entity.
func (rc *ResourceCreate) SetResourceDefinitionMatchingRule(r *ResourceDefinitionMatchingRule) *ResourceCreate {
	return rc.SetResourceDefinitionMatchingRuleID(r.ID)
}

// AddRevisionIDs adds the "revisions" edge to the ResourceRevision entity by IDs.
func (rc *ResourceCreate) AddRevisionIDs(ids ...object.ID) *ResourceCreate {
	rc.mutation.AddRevisionIDs(ids...)
	return rc
}

// AddRevisions adds the "revisions" edges to the ResourceRevision entity.
func (rc *ResourceCreate) AddRevisions(r ...*ResourceRevision) *ResourceCreate {
	ids := make([]object.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rc.AddRevisionIDs(ids...)
}

// AddComponentIDs adds the "components" edge to the ResourceComponent entity by IDs.
func (rc *ResourceCreate) AddComponentIDs(ids ...object.ID) *ResourceCreate {
	rc.mutation.AddComponentIDs(ids...)
	return rc
}

// AddComponents adds the "components" edges to the ResourceComponent entity.
func (rc *ResourceCreate) AddComponents(r ...*ResourceComponent) *ResourceCreate {
	ids := make([]object.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rc.AddComponentIDs(ids...)
}

// AddDependencyIDs adds the "dependencies" edge to the ResourceRelationship entity by IDs.
func (rc *ResourceCreate) AddDependencyIDs(ids ...object.ID) *ResourceCreate {
	rc.mutation.AddDependencyIDs(ids...)
	return rc
}

// AddDependencies adds the "dependencies" edges to the ResourceRelationship entity.
func (rc *ResourceCreate) AddDependencies(r ...*ResourceRelationship) *ResourceCreate {
	ids := make([]object.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rc.AddDependencyIDs(ids...)
}

// Mutation returns the ResourceMutation object of the builder.
func (rc *ResourceCreate) Mutation() *ResourceMutation {
	return rc.mutation
}

// Save creates the Resource in the database.
func (rc *ResourceCreate) Save(ctx context.Context) (*Resource, error) {
	if err := rc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ResourceCreate) SaveX(ctx context.Context) *Resource {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *ResourceCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *ResourceCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *ResourceCreate) defaults() error {
	if _, ok := rc.mutation.Labels(); !ok {
		v := resource.DefaultLabels
		rc.mutation.SetLabels(v)
	}
	if _, ok := rc.mutation.Annotations(); !ok {
		v := resource.DefaultAnnotations
		rc.mutation.SetAnnotations(v)
	}
	if _, ok := rc.mutation.CreateTime(); !ok {
		if resource.DefaultCreateTime == nil {
			return fmt.Errorf("model: uninitialized resource.DefaultCreateTime (forgotten import model/runtime?)")
		}
		v := resource.DefaultCreateTime()
		rc.mutation.SetCreateTime(v)
	}
	if _, ok := rc.mutation.UpdateTime(); !ok {
		if resource.DefaultUpdateTime == nil {
			return fmt.Errorf("model: uninitialized resource.DefaultUpdateTime (forgotten import model/runtime?)")
		}
		v := resource.DefaultUpdateTime()
		rc.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rc *ResourceCreate) check() error {
	if _, ok := rc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`model: missing required field "Resource.name"`)}
	}
	if v, ok := rc.mutation.Name(); ok {
		if err := resource.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`model: validator failed for field "Resource.name": %w`, err)}
		}
	}
	if _, ok := rc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`model: missing required field "Resource.create_time"`)}
	}
	if _, ok := rc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`model: missing required field "Resource.update_time"`)}
	}
	if _, ok := rc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project_id", err: errors.New(`model: missing required field "Resource.project_id"`)}
	}
	if v, ok := rc.mutation.ProjectID(); ok {
		if err := resource.ProjectIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "project_id", err: fmt.Errorf(`model: validator failed for field "Resource.project_id": %w`, err)}
		}
	}
	if _, ok := rc.mutation.EnvironmentID(); !ok {
		return &ValidationError{Name: "environment_id", err: errors.New(`model: missing required field "Resource.environment_id"`)}
	}
	if v, ok := rc.mutation.EnvironmentID(); ok {
		if err := resource.EnvironmentIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "environment_id", err: fmt.Errorf(`model: validator failed for field "Resource.environment_id": %w`, err)}
		}
	}
	if _, ok := rc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project", err: errors.New(`model: missing required edge "Resource.project"`)}
	}
	if _, ok := rc.mutation.EnvironmentID(); !ok {
		return &ValidationError{Name: "environment", err: errors.New(`model: missing required edge "Resource.environment"`)}
	}
	return nil
}

func (rc *ResourceCreate) sqlSave(ctx context.Context) (*Resource, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*object.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *ResourceCreate) createSpec() (*Resource, *sqlgraph.CreateSpec) {
	var (
		_node = &Resource{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(resource.Table, sqlgraph.NewFieldSpec(resource.FieldID, field.TypeString))
	)
	_spec.Schema = rc.schemaConfig.Resource
	_spec.OnConflict = rc.conflict
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rc.mutation.Name(); ok {
		_spec.SetField(resource.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rc.mutation.Description(); ok {
		_spec.SetField(resource.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := rc.mutation.Labels(); ok {
		_spec.SetField(resource.FieldLabels, field.TypeJSON, value)
		_node.Labels = value
	}
	if value, ok := rc.mutation.Annotations(); ok {
		_spec.SetField(resource.FieldAnnotations, field.TypeJSON, value)
		_node.Annotations = value
	}
	if value, ok := rc.mutation.CreateTime(); ok {
		_spec.SetField(resource.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = &value
	}
	if value, ok := rc.mutation.UpdateTime(); ok {
		_spec.SetField(resource.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = &value
	}
	if value, ok := rc.mutation.Status(); ok {
		_spec.SetField(resource.FieldStatus, field.TypeJSON, value)
		_node.Status = value
	}
	if value, ok := rc.mutation.GetType(); ok {
		_spec.SetField(resource.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := rc.mutation.Attributes(); ok {
		_spec.SetField(resource.FieldAttributes, field.TypeOther, value)
		_node.Attributes = value
	}
	if value, ok := rc.mutation.Endpoints(); ok {
		_spec.SetField(resource.FieldEndpoints, field.TypeJSON, value)
		_node.Endpoints = value
	}
	if value, ok := rc.mutation.ChangeComment(); ok {
		_spec.SetField(resource.FieldChangeComment, field.TypeString, value)
		_node.ChangeComment = value
	}
	if nodes := rc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resource.ProjectTable,
			Columns: []string{resource.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		edge.Schema = rc.schemaConfig.Resource
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.EnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resource.EnvironmentTable,
			Columns: []string{resource.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeString),
			},
		}
		edge.Schema = rc.schemaConfig.Resource
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EnvironmentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.TemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resource.TemplateTable,
			Columns: []string{resource.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(templateversion.FieldID, field.TypeString),
			},
		}
		edge.Schema = rc.schemaConfig.Resource
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TemplateID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ResourceDefinitionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resource.ResourceDefinitionTable,
			Columns: []string{resource.ResourceDefinitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourcedefinition.FieldID, field.TypeString),
			},
		}
		edge.Schema = rc.schemaConfig.Resource
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ResourceDefinitionID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ResourceDefinitionMatchingRuleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resource.ResourceDefinitionMatchingRuleTable,
			Columns: []string{resource.ResourceDefinitionMatchingRuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourcedefinitionmatchingrule.FieldID, field.TypeString),
			},
		}
		edge.Schema = rc.schemaConfig.Resource
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ResourceDefinitionMatchingRuleID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.RevisionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.RevisionsTable,
			Columns: []string{resource.RevisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourcerevision.FieldID, field.TypeString),
			},
		}
		edge.Schema = rc.schemaConfig.ResourceRevision
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ComponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.ComponentsTable,
			Columns: []string{resource.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourcecomponent.FieldID, field.TypeString),
			},
		}
		edge.Schema = rc.schemaConfig.ResourceComponent
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.DependenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   resource.DependenciesTable,
			Columns: []string{resource.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourcerelationship.FieldID, field.TypeString),
			},
		}
		edge.Schema = rc.schemaConfig.ResourceRelationship
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// Set is different from other Set* methods,
// it sets the value by judging the definition of each field within the entire object.
//
// For required fields, Set calls directly.
//
// For optional fields, Set calls if the value is not zero.
//
// For example:
//
//	## Required
//
//	db.SetX(obj.X)
//
//	## Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (rc *ResourceCreate) Set(obj *Resource) *ResourceCreate {
	// Required.
	rc.SetName(obj.Name)
	rc.SetProjectID(obj.ProjectID)
	rc.SetEnvironmentID(obj.EnvironmentID)

	// Optional.
	if obj.Description != "" {
		rc.SetDescription(obj.Description)
	}
	if !reflect.ValueOf(obj.Labels).IsZero() {
		rc.SetLabels(obj.Labels)
	}
	if !reflect.ValueOf(obj.Annotations).IsZero() {
		rc.SetAnnotations(obj.Annotations)
	}
	if obj.CreateTime != nil {
		rc.SetCreateTime(*obj.CreateTime)
	}
	if obj.UpdateTime != nil {
		rc.SetUpdateTime(*obj.UpdateTime)
	}
	if !reflect.ValueOf(obj.Status).IsZero() {
		rc.SetStatus(obj.Status)
	}
	if obj.TemplateID != nil {
		rc.SetTemplateID(*obj.TemplateID)
	}
	if obj.Type != "" {
		rc.SetType(obj.Type)
	}
	if obj.ResourceDefinitionID != nil {
		rc.SetResourceDefinitionID(*obj.ResourceDefinitionID)
	}
	if obj.ResourceDefinitionMatchingRuleID != nil {
		rc.SetResourceDefinitionMatchingRuleID(*obj.ResourceDefinitionMatchingRuleID)
	}
	if !reflect.ValueOf(obj.Attributes).IsZero() {
		rc.SetAttributes(obj.Attributes)
	}
	if !reflect.ValueOf(obj.Endpoints).IsZero() {
		rc.SetEndpoints(obj.Endpoints)
	}
	if obj.ChangeComment != "" {
		rc.SetChangeComment(obj.ChangeComment)
	}

	// Record the given object.
	rc.object = obj

	return rc
}

// getClientSet returns the ClientSet for the given builder.
func (rc *ResourceCreate) getClientSet() (mc ClientSet) {
	if _, ok := rc.config.driver.(*txDriver); ok {
		tx := &Tx{config: rc.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: rc.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after created the Resource entity,
// which is always good for cascading create operations.
func (rc *ResourceCreate) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *Resource) error) (*Resource, error) {
	obj, err := rc.Save(ctx)
	if err != nil {
		return nil, err
	}

	if len(cbs) == 0 {
		return obj, err
	}

	mc := rc.getClientSet()
	if rc.fromUpsert {
		q := mc.Resources().Query().
			Where(
				resource.ProjectID(obj.ProjectID),
				resource.EnvironmentID(obj.EnvironmentID),
				resource.Name(obj.Name),
			)
		obj.ID, err = q.OnlyID(ctx)
		if err != nil {
			return nil, fmt.Errorf("model: failed to query id of Resource entity: %w", err)
		}
	}

	if x := rc.object; x != nil {
		if _, set := rc.mutation.Field(resource.FieldName); set {
			obj.Name = x.Name
		}
		if _, set := rc.mutation.Field(resource.FieldDescription); set {
			obj.Description = x.Description
		}
		if _, set := rc.mutation.Field(resource.FieldStatus); set {
			obj.Status = x.Status
		}
		if _, set := rc.mutation.Field(resource.FieldProjectID); set {
			obj.ProjectID = x.ProjectID
		}
		if _, set := rc.mutation.Field(resource.FieldEnvironmentID); set {
			obj.EnvironmentID = x.EnvironmentID
		}
		if _, set := rc.mutation.Field(resource.FieldTemplateID); set {
			obj.TemplateID = x.TemplateID
		}
		if _, set := rc.mutation.Field(resource.FieldType); set {
			obj.Type = x.Type
		}
		if _, set := rc.mutation.Field(resource.FieldResourceDefinitionID); set {
			obj.ResourceDefinitionID = x.ResourceDefinitionID
		}
		if _, set := rc.mutation.Field(resource.FieldResourceDefinitionMatchingRuleID); set {
			obj.ResourceDefinitionMatchingRuleID = x.ResourceDefinitionMatchingRuleID
		}
		if _, set := rc.mutation.Field(resource.FieldAttributes); set {
			obj.Attributes = x.Attributes
		}
		if _, set := rc.mutation.Field(resource.FieldEndpoints); set {
			obj.Endpoints = x.Endpoints
		}
		if _, set := rc.mutation.Field(resource.FieldChangeComment); set {
			obj.ChangeComment = x.ChangeComment
		}
		obj.Edges = x.Edges
	}

	for i := range cbs {
		if err = cbs[i](ctx, mc, obj); err != nil {
			return nil, err
		}
	}

	return obj, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (rc *ResourceCreate) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *Resource) error) *Resource {
	obj, err := rc.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return obj
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (rc *ResourceCreate) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *Resource) error) error {
	_, err := rc.SaveE(ctx, cbs...)
	return err
}

// ExecEX is like ExecE, but panics if an error occurs.
func (rc *ResourceCreate) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *Resource) error) {
	if err := rc.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// Set leverages the ResourceCreate Set method,
// it sets the value by judging the definition of each field within the entire item of the given list.
//
// For required fields, Set calls directly.
//
// For optional fields, Set calls if the value is not zero.
//
// For example:
//
//	## Required
//
//	db.SetX(obj.X)
//
//	## Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (rcb *ResourceCreateBulk) Set(objs ...*Resource) *ResourceCreateBulk {
	if len(objs) != 0 {
		client := NewResourceClient(rcb.config)

		rcb.builders = make([]*ResourceCreate, len(objs))
		for i := range objs {
			rcb.builders[i] = client.Create().Set(objs[i])
		}

		// Record the given objects.
		rcb.objects = objs
	}

	return rcb
}

// getClientSet returns the ClientSet for the given builder.
func (rcb *ResourceCreateBulk) getClientSet() (mc ClientSet) {
	if _, ok := rcb.config.driver.(*txDriver); ok {
		tx := &Tx{config: rcb.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: rcb.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after created the Resource entities,
// which is always good for cascading create operations.
func (rcb *ResourceCreateBulk) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *Resource) error) ([]*Resource, error) {
	objs, err := rcb.Save(ctx)
	if err != nil {
		return nil, err
	}

	if len(cbs) == 0 {
		return objs, err
	}

	mc := rcb.getClientSet()
	if rcb.fromUpsert {
		for i := range objs {
			obj := objs[i]
			q := mc.Resources().Query().
				Where(
					resource.ProjectID(obj.ProjectID),
					resource.EnvironmentID(obj.EnvironmentID),
					resource.Name(obj.Name),
				)
			objs[i].ID, err = q.OnlyID(ctx)
			if err != nil {
				return nil, fmt.Errorf("model: failed to query id of Resource entity: %w", err)
			}
		}
	}

	if x := rcb.objects; x != nil {
		for i := range x {
			if _, set := rcb.builders[i].mutation.Field(resource.FieldName); set {
				objs[i].Name = x[i].Name
			}
			if _, set := rcb.builders[i].mutation.Field(resource.FieldDescription); set {
				objs[i].Description = x[i].Description
			}
			if _, set := rcb.builders[i].mutation.Field(resource.FieldStatus); set {
				objs[i].Status = x[i].Status
			}
			if _, set := rcb.builders[i].mutation.Field(resource.FieldProjectID); set {
				objs[i].ProjectID = x[i].ProjectID
			}
			if _, set := rcb.builders[i].mutation.Field(resource.FieldEnvironmentID); set {
				objs[i].EnvironmentID = x[i].EnvironmentID
			}
			if _, set := rcb.builders[i].mutation.Field(resource.FieldTemplateID); set {
				objs[i].TemplateID = x[i].TemplateID
			}
			if _, set := rcb.builders[i].mutation.Field(resource.FieldType); set {
				objs[i].Type = x[i].Type
			}
			if _, set := rcb.builders[i].mutation.Field(resource.FieldResourceDefinitionID); set {
				objs[i].ResourceDefinitionID = x[i].ResourceDefinitionID
			}
			if _, set := rcb.builders[i].mutation.Field(resource.FieldResourceDefinitionMatchingRuleID); set {
				objs[i].ResourceDefinitionMatchingRuleID = x[i].ResourceDefinitionMatchingRuleID
			}
			if _, set := rcb.builders[i].mutation.Field(resource.FieldAttributes); set {
				objs[i].Attributes = x[i].Attributes
			}
			if _, set := rcb.builders[i].mutation.Field(resource.FieldEndpoints); set {
				objs[i].Endpoints = x[i].Endpoints
			}
			if _, set := rcb.builders[i].mutation.Field(resource.FieldChangeComment); set {
				objs[i].ChangeComment = x[i].ChangeComment
			}
			objs[i].Edges = x[i].Edges
		}
	}

	for i := range objs {
		for j := range cbs {
			if err = cbs[j](ctx, mc, objs[i]); err != nil {
				return nil, err
			}
		}
	}

	return objs, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (rcb *ResourceCreateBulk) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *Resource) error) []*Resource {
	objs, err := rcb.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return objs
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (rcb *ResourceCreateBulk) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *Resource) error) error {
	_, err := rcb.SaveE(ctx, cbs...)
	return err
}

// ExecEX is like ExecE, but panics if an error occurs.
func (rcb *ResourceCreateBulk) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *Resource) error) {
	if err := rcb.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (u *ResourceUpsertOne) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *Resource) error) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for ResourceUpsertOne.OnConflict")
	}
	u.create.fromUpsert = true
	return u.create.ExecE(ctx, cbs...)
}

// ExecEX is like ExecE, but panics if an error occurs.
func (u *ResourceUpsertOne) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *Resource) error) {
	if err := u.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (u *ResourceUpsertBulk) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *Resource) error) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model: OnConflict was set for builder %d. Set it on the ResourceUpsertBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for ResourceUpsertBulk.OnConflict")
	}
	u.create.fromUpsert = true
	return u.create.ExecE(ctx, cbs...)
}

// ExecEX is like ExecE, but panics if an error occurs.
func (u *ResourceUpsertBulk) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *Resource) error) {
	if err := u.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Resource.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ResourceUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (rc *ResourceCreate) OnConflict(opts ...sql.ConflictOption) *ResourceUpsertOne {
	rc.conflict = opts
	return &ResourceUpsertOne{
		create: rc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Resource.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rc *ResourceCreate) OnConflictColumns(columns ...string) *ResourceUpsertOne {
	rc.conflict = append(rc.conflict, sql.ConflictColumns(columns...))
	return &ResourceUpsertOne{
		create: rc,
	}
}

type (
	// ResourceUpsertOne is the builder for "upsert"-ing
	//  one Resource node.
	ResourceUpsertOne struct {
		create *ResourceCreate
	}

	// ResourceUpsert is the "OnConflict" setter.
	ResourceUpsert struct {
		*sql.UpdateSet
	}
)

// SetDescription sets the "description" field.
func (u *ResourceUpsert) SetDescription(v string) *ResourceUpsert {
	u.Set(resource.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ResourceUpsert) UpdateDescription() *ResourceUpsert {
	u.SetExcluded(resource.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *ResourceUpsert) ClearDescription() *ResourceUpsert {
	u.SetNull(resource.FieldDescription)
	return u
}

// SetLabels sets the "labels" field.
func (u *ResourceUpsert) SetLabels(v map[string]string) *ResourceUpsert {
	u.Set(resource.FieldLabels, v)
	return u
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *ResourceUpsert) UpdateLabels() *ResourceUpsert {
	u.SetExcluded(resource.FieldLabels)
	return u
}

// ClearLabels clears the value of the "labels" field.
func (u *ResourceUpsert) ClearLabels() *ResourceUpsert {
	u.SetNull(resource.FieldLabels)
	return u
}

// SetAnnotations sets the "annotations" field.
func (u *ResourceUpsert) SetAnnotations(v map[string]string) *ResourceUpsert {
	u.Set(resource.FieldAnnotations, v)
	return u
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *ResourceUpsert) UpdateAnnotations() *ResourceUpsert {
	u.SetExcluded(resource.FieldAnnotations)
	return u
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *ResourceUpsert) ClearAnnotations() *ResourceUpsert {
	u.SetNull(resource.FieldAnnotations)
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *ResourceUpsert) SetUpdateTime(v time.Time) *ResourceUpsert {
	u.Set(resource.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *ResourceUpsert) UpdateUpdateTime() *ResourceUpsert {
	u.SetExcluded(resource.FieldUpdateTime)
	return u
}

// SetStatus sets the "status" field.
func (u *ResourceUpsert) SetStatus(v status.Status) *ResourceUpsert {
	u.Set(resource.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ResourceUpsert) UpdateStatus() *ResourceUpsert {
	u.SetExcluded(resource.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *ResourceUpsert) ClearStatus() *ResourceUpsert {
	u.SetNull(resource.FieldStatus)
	return u
}

// SetTemplateID sets the "template_id" field.
func (u *ResourceUpsert) SetTemplateID(v object.ID) *ResourceUpsert {
	u.Set(resource.FieldTemplateID, v)
	return u
}

// UpdateTemplateID sets the "template_id" field to the value that was provided on create.
func (u *ResourceUpsert) UpdateTemplateID() *ResourceUpsert {
	u.SetExcluded(resource.FieldTemplateID)
	return u
}

// ClearTemplateID clears the value of the "template_id" field.
func (u *ResourceUpsert) ClearTemplateID() *ResourceUpsert {
	u.SetNull(resource.FieldTemplateID)
	return u
}

// SetResourceDefinitionMatchingRuleID sets the "resource_definition_matching_rule_id" field.
func (u *ResourceUpsert) SetResourceDefinitionMatchingRuleID(v object.ID) *ResourceUpsert {
	u.Set(resource.FieldResourceDefinitionMatchingRuleID, v)
	return u
}

// UpdateResourceDefinitionMatchingRuleID sets the "resource_definition_matching_rule_id" field to the value that was provided on create.
func (u *ResourceUpsert) UpdateResourceDefinitionMatchingRuleID() *ResourceUpsert {
	u.SetExcluded(resource.FieldResourceDefinitionMatchingRuleID)
	return u
}

// ClearResourceDefinitionMatchingRuleID clears the value of the "resource_definition_matching_rule_id" field.
func (u *ResourceUpsert) ClearResourceDefinitionMatchingRuleID() *ResourceUpsert {
	u.SetNull(resource.FieldResourceDefinitionMatchingRuleID)
	return u
}

// SetAttributes sets the "attributes" field.
func (u *ResourceUpsert) SetAttributes(v property.Values) *ResourceUpsert {
	u.Set(resource.FieldAttributes, v)
	return u
}

// UpdateAttributes sets the "attributes" field to the value that was provided on create.
func (u *ResourceUpsert) UpdateAttributes() *ResourceUpsert {
	u.SetExcluded(resource.FieldAttributes)
	return u
}

// ClearAttributes clears the value of the "attributes" field.
func (u *ResourceUpsert) ClearAttributes() *ResourceUpsert {
	u.SetNull(resource.FieldAttributes)
	return u
}

// SetEndpoints sets the "endpoints" field.
func (u *ResourceUpsert) SetEndpoints(v types.ResourceEndpoints) *ResourceUpsert {
	u.Set(resource.FieldEndpoints, v)
	return u
}

// UpdateEndpoints sets the "endpoints" field to the value that was provided on create.
func (u *ResourceUpsert) UpdateEndpoints() *ResourceUpsert {
	u.SetExcluded(resource.FieldEndpoints)
	return u
}

// ClearEndpoints clears the value of the "endpoints" field.
func (u *ResourceUpsert) ClearEndpoints() *ResourceUpsert {
	u.SetNull(resource.FieldEndpoints)
	return u
}

// SetChangeComment sets the "change_comment" field.
func (u *ResourceUpsert) SetChangeComment(v string) *ResourceUpsert {
	u.Set(resource.FieldChangeComment, v)
	return u
}

// UpdateChangeComment sets the "change_comment" field to the value that was provided on create.
func (u *ResourceUpsert) UpdateChangeComment() *ResourceUpsert {
	u.SetExcluded(resource.FieldChangeComment)
	return u
}

// ClearChangeComment clears the value of the "change_comment" field.
func (u *ResourceUpsert) ClearChangeComment() *ResourceUpsert {
	u.SetNull(resource.FieldChangeComment)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Resource.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(resource.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ResourceUpsertOne) UpdateNewValues() *ResourceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(resource.FieldID)
		}
		if _, exists := u.create.mutation.Name(); exists {
			s.SetIgnore(resource.FieldName)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(resource.FieldCreateTime)
		}
		if _, exists := u.create.mutation.ProjectID(); exists {
			s.SetIgnore(resource.FieldProjectID)
		}
		if _, exists := u.create.mutation.EnvironmentID(); exists {
			s.SetIgnore(resource.FieldEnvironmentID)
		}
		if _, exists := u.create.mutation.GetType(); exists {
			s.SetIgnore(resource.FieldType)
		}
		if _, exists := u.create.mutation.ResourceDefinitionID(); exists {
			s.SetIgnore(resource.FieldResourceDefinitionID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Resource.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ResourceUpsertOne) Ignore() *ResourceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ResourceUpsertOne) DoNothing() *ResourceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ResourceCreate.OnConflict
// documentation for more info.
func (u *ResourceUpsertOne) Update(set func(*ResourceUpsert)) *ResourceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ResourceUpsert{UpdateSet: update})
	}))
	return u
}

// SetDescription sets the "description" field.
func (u *ResourceUpsertOne) SetDescription(v string) *ResourceUpsertOne {
	return u.Update(func(s *ResourceUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ResourceUpsertOne) UpdateDescription() *ResourceUpsertOne {
	return u.Update(func(s *ResourceUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ResourceUpsertOne) ClearDescription() *ResourceUpsertOne {
	return u.Update(func(s *ResourceUpsert) {
		s.ClearDescription()
	})
}

// SetLabels sets the "labels" field.
func (u *ResourceUpsertOne) SetLabels(v map[string]string) *ResourceUpsertOne {
	return u.Update(func(s *ResourceUpsert) {
		s.SetLabels(v)
	})
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *ResourceUpsertOne) UpdateLabels() *ResourceUpsertOne {
	return u.Update(func(s *ResourceUpsert) {
		s.UpdateLabels()
	})
}

// ClearLabels clears the value of the "labels" field.
func (u *ResourceUpsertOne) ClearLabels() *ResourceUpsertOne {
	return u.Update(func(s *ResourceUpsert) {
		s.ClearLabels()
	})
}

// SetAnnotations sets the "annotations" field.
func (u *ResourceUpsertOne) SetAnnotations(v map[string]string) *ResourceUpsertOne {
	return u.Update(func(s *ResourceUpsert) {
		s.SetAnnotations(v)
	})
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *ResourceUpsertOne) UpdateAnnotations() *ResourceUpsertOne {
	return u.Update(func(s *ResourceUpsert) {
		s.UpdateAnnotations()
	})
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *ResourceUpsertOne) ClearAnnotations() *ResourceUpsertOne {
	return u.Update(func(s *ResourceUpsert) {
		s.ClearAnnotations()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *ResourceUpsertOne) SetUpdateTime(v time.Time) *ResourceUpsertOne {
	return u.Update(func(s *ResourceUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *ResourceUpsertOne) UpdateUpdateTime() *ResourceUpsertOne {
	return u.Update(func(s *ResourceUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetStatus sets the "status" field.
func (u *ResourceUpsertOne) SetStatus(v status.Status) *ResourceUpsertOne {
	return u.Update(func(s *ResourceUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ResourceUpsertOne) UpdateStatus() *ResourceUpsertOne {
	return u.Update(func(s *ResourceUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *ResourceUpsertOne) ClearStatus() *ResourceUpsertOne {
	return u.Update(func(s *ResourceUpsert) {
		s.ClearStatus()
	})
}

// SetTemplateID sets the "template_id" field.
func (u *ResourceUpsertOne) SetTemplateID(v object.ID) *ResourceUpsertOne {
	return u.Update(func(s *ResourceUpsert) {
		s.SetTemplateID(v)
	})
}

// UpdateTemplateID sets the "template_id" field to the value that was provided on create.
func (u *ResourceUpsertOne) UpdateTemplateID() *ResourceUpsertOne {
	return u.Update(func(s *ResourceUpsert) {
		s.UpdateTemplateID()
	})
}

// ClearTemplateID clears the value of the "template_id" field.
func (u *ResourceUpsertOne) ClearTemplateID() *ResourceUpsertOne {
	return u.Update(func(s *ResourceUpsert) {
		s.ClearTemplateID()
	})
}

// SetResourceDefinitionMatchingRuleID sets the "resource_definition_matching_rule_id" field.
func (u *ResourceUpsertOne) SetResourceDefinitionMatchingRuleID(v object.ID) *ResourceUpsertOne {
	return u.Update(func(s *ResourceUpsert) {
		s.SetResourceDefinitionMatchingRuleID(v)
	})
}

// UpdateResourceDefinitionMatchingRuleID sets the "resource_definition_matching_rule_id" field to the value that was provided on create.
func (u *ResourceUpsertOne) UpdateResourceDefinitionMatchingRuleID() *ResourceUpsertOne {
	return u.Update(func(s *ResourceUpsert) {
		s.UpdateResourceDefinitionMatchingRuleID()
	})
}

// ClearResourceDefinitionMatchingRuleID clears the value of the "resource_definition_matching_rule_id" field.
func (u *ResourceUpsertOne) ClearResourceDefinitionMatchingRuleID() *ResourceUpsertOne {
	return u.Update(func(s *ResourceUpsert) {
		s.ClearResourceDefinitionMatchingRuleID()
	})
}

// SetAttributes sets the "attributes" field.
func (u *ResourceUpsertOne) SetAttributes(v property.Values) *ResourceUpsertOne {
	return u.Update(func(s *ResourceUpsert) {
		s.SetAttributes(v)
	})
}

// UpdateAttributes sets the "attributes" field to the value that was provided on create.
func (u *ResourceUpsertOne) UpdateAttributes() *ResourceUpsertOne {
	return u.Update(func(s *ResourceUpsert) {
		s.UpdateAttributes()
	})
}

// ClearAttributes clears the value of the "attributes" field.
func (u *ResourceUpsertOne) ClearAttributes() *ResourceUpsertOne {
	return u.Update(func(s *ResourceUpsert) {
		s.ClearAttributes()
	})
}

// SetEndpoints sets the "endpoints" field.
func (u *ResourceUpsertOne) SetEndpoints(v types.ResourceEndpoints) *ResourceUpsertOne {
	return u.Update(func(s *ResourceUpsert) {
		s.SetEndpoints(v)
	})
}

// UpdateEndpoints sets the "endpoints" field to the value that was provided on create.
func (u *ResourceUpsertOne) UpdateEndpoints() *ResourceUpsertOne {
	return u.Update(func(s *ResourceUpsert) {
		s.UpdateEndpoints()
	})
}

// ClearEndpoints clears the value of the "endpoints" field.
func (u *ResourceUpsertOne) ClearEndpoints() *ResourceUpsertOne {
	return u.Update(func(s *ResourceUpsert) {
		s.ClearEndpoints()
	})
}

// SetChangeComment sets the "change_comment" field.
func (u *ResourceUpsertOne) SetChangeComment(v string) *ResourceUpsertOne {
	return u.Update(func(s *ResourceUpsert) {
		s.SetChangeComment(v)
	})
}

// UpdateChangeComment sets the "change_comment" field to the value that was provided on create.
func (u *ResourceUpsertOne) UpdateChangeComment() *ResourceUpsertOne {
	return u.Update(func(s *ResourceUpsert) {
		s.UpdateChangeComment()
	})
}

// ClearChangeComment clears the value of the "change_comment" field.
func (u *ResourceUpsertOne) ClearChangeComment() *ResourceUpsertOne {
	return u.Update(func(s *ResourceUpsert) {
		s.ClearChangeComment()
	})
}

// Exec executes the query.
func (u *ResourceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for ResourceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ResourceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ResourceUpsertOne) ID(ctx context.Context) (id object.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("model: ResourceUpsertOne.ID is not supported by MySQL driver. Use ResourceUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ResourceUpsertOne) IDX(ctx context.Context) object.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ResourceCreateBulk is the builder for creating many Resource entities in bulk.
type ResourceCreateBulk struct {
	config
	builders   []*ResourceCreate
	conflict   []sql.ConflictOption
	objects    []*Resource
	fromUpsert bool
}

// Save creates the Resource entities in the database.
func (rcb *ResourceCreateBulk) Save(ctx context.Context) ([]*Resource, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Resource, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ResourceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *ResourceCreateBulk) SaveX(ctx context.Context) []*Resource {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *ResourceCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *ResourceCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Resource.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ResourceUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (rcb *ResourceCreateBulk) OnConflict(opts ...sql.ConflictOption) *ResourceUpsertBulk {
	rcb.conflict = opts
	return &ResourceUpsertBulk{
		create: rcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Resource.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcb *ResourceCreateBulk) OnConflictColumns(columns ...string) *ResourceUpsertBulk {
	rcb.conflict = append(rcb.conflict, sql.ConflictColumns(columns...))
	return &ResourceUpsertBulk{
		create: rcb,
	}
}

// ResourceUpsertBulk is the builder for "upsert"-ing
// a bulk of Resource nodes.
type ResourceUpsertBulk struct {
	create *ResourceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Resource.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(resource.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ResourceUpsertBulk) UpdateNewValues() *ResourceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(resource.FieldID)
			}
			if _, exists := b.mutation.Name(); exists {
				s.SetIgnore(resource.FieldName)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(resource.FieldCreateTime)
			}
			if _, exists := b.mutation.ProjectID(); exists {
				s.SetIgnore(resource.FieldProjectID)
			}
			if _, exists := b.mutation.EnvironmentID(); exists {
				s.SetIgnore(resource.FieldEnvironmentID)
			}
			if _, exists := b.mutation.GetType(); exists {
				s.SetIgnore(resource.FieldType)
			}
			if _, exists := b.mutation.ResourceDefinitionID(); exists {
				s.SetIgnore(resource.FieldResourceDefinitionID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Resource.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ResourceUpsertBulk) Ignore() *ResourceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ResourceUpsertBulk) DoNothing() *ResourceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ResourceCreateBulk.OnConflict
// documentation for more info.
func (u *ResourceUpsertBulk) Update(set func(*ResourceUpsert)) *ResourceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ResourceUpsert{UpdateSet: update})
	}))
	return u
}

// SetDescription sets the "description" field.
func (u *ResourceUpsertBulk) SetDescription(v string) *ResourceUpsertBulk {
	return u.Update(func(s *ResourceUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ResourceUpsertBulk) UpdateDescription() *ResourceUpsertBulk {
	return u.Update(func(s *ResourceUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ResourceUpsertBulk) ClearDescription() *ResourceUpsertBulk {
	return u.Update(func(s *ResourceUpsert) {
		s.ClearDescription()
	})
}

// SetLabels sets the "labels" field.
func (u *ResourceUpsertBulk) SetLabels(v map[string]string) *ResourceUpsertBulk {
	return u.Update(func(s *ResourceUpsert) {
		s.SetLabels(v)
	})
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *ResourceUpsertBulk) UpdateLabels() *ResourceUpsertBulk {
	return u.Update(func(s *ResourceUpsert) {
		s.UpdateLabels()
	})
}

// ClearLabels clears the value of the "labels" field.
func (u *ResourceUpsertBulk) ClearLabels() *ResourceUpsertBulk {
	return u.Update(func(s *ResourceUpsert) {
		s.ClearLabels()
	})
}

// SetAnnotations sets the "annotations" field.
func (u *ResourceUpsertBulk) SetAnnotations(v map[string]string) *ResourceUpsertBulk {
	return u.Update(func(s *ResourceUpsert) {
		s.SetAnnotations(v)
	})
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *ResourceUpsertBulk) UpdateAnnotations() *ResourceUpsertBulk {
	return u.Update(func(s *ResourceUpsert) {
		s.UpdateAnnotations()
	})
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *ResourceUpsertBulk) ClearAnnotations() *ResourceUpsertBulk {
	return u.Update(func(s *ResourceUpsert) {
		s.ClearAnnotations()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *ResourceUpsertBulk) SetUpdateTime(v time.Time) *ResourceUpsertBulk {
	return u.Update(func(s *ResourceUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *ResourceUpsertBulk) UpdateUpdateTime() *ResourceUpsertBulk {
	return u.Update(func(s *ResourceUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetStatus sets the "status" field.
func (u *ResourceUpsertBulk) SetStatus(v status.Status) *ResourceUpsertBulk {
	return u.Update(func(s *ResourceUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ResourceUpsertBulk) UpdateStatus() *ResourceUpsertBulk {
	return u.Update(func(s *ResourceUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *ResourceUpsertBulk) ClearStatus() *ResourceUpsertBulk {
	return u.Update(func(s *ResourceUpsert) {
		s.ClearStatus()
	})
}

// SetTemplateID sets the "template_id" field.
func (u *ResourceUpsertBulk) SetTemplateID(v object.ID) *ResourceUpsertBulk {
	return u.Update(func(s *ResourceUpsert) {
		s.SetTemplateID(v)
	})
}

// UpdateTemplateID sets the "template_id" field to the value that was provided on create.
func (u *ResourceUpsertBulk) UpdateTemplateID() *ResourceUpsertBulk {
	return u.Update(func(s *ResourceUpsert) {
		s.UpdateTemplateID()
	})
}

// ClearTemplateID clears the value of the "template_id" field.
func (u *ResourceUpsertBulk) ClearTemplateID() *ResourceUpsertBulk {
	return u.Update(func(s *ResourceUpsert) {
		s.ClearTemplateID()
	})
}

// SetResourceDefinitionMatchingRuleID sets the "resource_definition_matching_rule_id" field.
func (u *ResourceUpsertBulk) SetResourceDefinitionMatchingRuleID(v object.ID) *ResourceUpsertBulk {
	return u.Update(func(s *ResourceUpsert) {
		s.SetResourceDefinitionMatchingRuleID(v)
	})
}

// UpdateResourceDefinitionMatchingRuleID sets the "resource_definition_matching_rule_id" field to the value that was provided on create.
func (u *ResourceUpsertBulk) UpdateResourceDefinitionMatchingRuleID() *ResourceUpsertBulk {
	return u.Update(func(s *ResourceUpsert) {
		s.UpdateResourceDefinitionMatchingRuleID()
	})
}

// ClearResourceDefinitionMatchingRuleID clears the value of the "resource_definition_matching_rule_id" field.
func (u *ResourceUpsertBulk) ClearResourceDefinitionMatchingRuleID() *ResourceUpsertBulk {
	return u.Update(func(s *ResourceUpsert) {
		s.ClearResourceDefinitionMatchingRuleID()
	})
}

// SetAttributes sets the "attributes" field.
func (u *ResourceUpsertBulk) SetAttributes(v property.Values) *ResourceUpsertBulk {
	return u.Update(func(s *ResourceUpsert) {
		s.SetAttributes(v)
	})
}

// UpdateAttributes sets the "attributes" field to the value that was provided on create.
func (u *ResourceUpsertBulk) UpdateAttributes() *ResourceUpsertBulk {
	return u.Update(func(s *ResourceUpsert) {
		s.UpdateAttributes()
	})
}

// ClearAttributes clears the value of the "attributes" field.
func (u *ResourceUpsertBulk) ClearAttributes() *ResourceUpsertBulk {
	return u.Update(func(s *ResourceUpsert) {
		s.ClearAttributes()
	})
}

// SetEndpoints sets the "endpoints" field.
func (u *ResourceUpsertBulk) SetEndpoints(v types.ResourceEndpoints) *ResourceUpsertBulk {
	return u.Update(func(s *ResourceUpsert) {
		s.SetEndpoints(v)
	})
}

// UpdateEndpoints sets the "endpoints" field to the value that was provided on create.
func (u *ResourceUpsertBulk) UpdateEndpoints() *ResourceUpsertBulk {
	return u.Update(func(s *ResourceUpsert) {
		s.UpdateEndpoints()
	})
}

// ClearEndpoints clears the value of the "endpoints" field.
func (u *ResourceUpsertBulk) ClearEndpoints() *ResourceUpsertBulk {
	return u.Update(func(s *ResourceUpsert) {
		s.ClearEndpoints()
	})
}

// SetChangeComment sets the "change_comment" field.
func (u *ResourceUpsertBulk) SetChangeComment(v string) *ResourceUpsertBulk {
	return u.Update(func(s *ResourceUpsert) {
		s.SetChangeComment(v)
	})
}

// UpdateChangeComment sets the "change_comment" field to the value that was provided on create.
func (u *ResourceUpsertBulk) UpdateChangeComment() *ResourceUpsertBulk {
	return u.Update(func(s *ResourceUpsert) {
		s.UpdateChangeComment()
	})
}

// ClearChangeComment clears the value of the "change_comment" field.
func (u *ResourceUpsertBulk) ClearChangeComment() *ResourceUpsertBulk {
	return u.Update(func(s *ResourceUpsert) {
		s.ClearChangeComment()
	})
}

// Exec executes the query.
func (u *ResourceUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model: OnConflict was set for builder %d. Set it on the ResourceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for ResourceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ResourceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
