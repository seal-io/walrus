// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus". DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/seal-io/walrus/pkg/dao/model/resource"
	"github.com/seal-io/walrus/pkg/dao/model/resourcedefinition"
	"github.com/seal-io/walrus/pkg/dao/model/resourcedefinitionmatchingrule"
	"github.com/seal-io/walrus/pkg/dao/types"
	"github.com/seal-io/walrus/pkg/dao/types/object"
)

// ResourceDefinitionCreate is the builder for creating a ResourceDefinition entity.
type ResourceDefinitionCreate struct {
	config
	mutation   *ResourceDefinitionMutation
	hooks      []Hook
	conflict   []sql.ConflictOption
	object     *ResourceDefinition
	fromUpsert bool
}

// SetName sets the "name" field.
func (rdc *ResourceDefinitionCreate) SetName(s string) *ResourceDefinitionCreate {
	rdc.mutation.SetName(s)
	return rdc
}

// SetDescription sets the "description" field.
func (rdc *ResourceDefinitionCreate) SetDescription(s string) *ResourceDefinitionCreate {
	rdc.mutation.SetDescription(s)
	return rdc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rdc *ResourceDefinitionCreate) SetNillableDescription(s *string) *ResourceDefinitionCreate {
	if s != nil {
		rdc.SetDescription(*s)
	}
	return rdc
}

// SetLabels sets the "labels" field.
func (rdc *ResourceDefinitionCreate) SetLabels(m map[string]string) *ResourceDefinitionCreate {
	rdc.mutation.SetLabels(m)
	return rdc
}

// SetAnnotations sets the "annotations" field.
func (rdc *ResourceDefinitionCreate) SetAnnotations(m map[string]string) *ResourceDefinitionCreate {
	rdc.mutation.SetAnnotations(m)
	return rdc
}

// SetCreateTime sets the "create_time" field.
func (rdc *ResourceDefinitionCreate) SetCreateTime(t time.Time) *ResourceDefinitionCreate {
	rdc.mutation.SetCreateTime(t)
	return rdc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (rdc *ResourceDefinitionCreate) SetNillableCreateTime(t *time.Time) *ResourceDefinitionCreate {
	if t != nil {
		rdc.SetCreateTime(*t)
	}
	return rdc
}

// SetUpdateTime sets the "update_time" field.
func (rdc *ResourceDefinitionCreate) SetUpdateTime(t time.Time) *ResourceDefinitionCreate {
	rdc.mutation.SetUpdateTime(t)
	return rdc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (rdc *ResourceDefinitionCreate) SetNillableUpdateTime(t *time.Time) *ResourceDefinitionCreate {
	if t != nil {
		rdc.SetUpdateTime(*t)
	}
	return rdc
}

// SetType sets the "type" field.
func (rdc *ResourceDefinitionCreate) SetType(s string) *ResourceDefinitionCreate {
	rdc.mutation.SetType(s)
	return rdc
}

// SetSchema sets the "schema" field.
func (rdc *ResourceDefinitionCreate) SetSchema(t types.Schema) *ResourceDefinitionCreate {
	rdc.mutation.SetSchema(t)
	return rdc
}

// SetNillableSchema sets the "schema" field if the given value is not nil.
func (rdc *ResourceDefinitionCreate) SetNillableSchema(t *types.Schema) *ResourceDefinitionCreate {
	if t != nil {
		rdc.SetSchema(*t)
	}
	return rdc
}

// SetUiSchema sets the "uiSchema" field.
func (rdc *ResourceDefinitionCreate) SetUiSchema(ts *types.UISchema) *ResourceDefinitionCreate {
	rdc.mutation.SetUiSchema(ts)
	return rdc
}

// SetBuiltin sets the "builtin" field.
func (rdc *ResourceDefinitionCreate) SetBuiltin(b bool) *ResourceDefinitionCreate {
	rdc.mutation.SetBuiltin(b)
	return rdc
}

// SetNillableBuiltin sets the "builtin" field if the given value is not nil.
func (rdc *ResourceDefinitionCreate) SetNillableBuiltin(b *bool) *ResourceDefinitionCreate {
	if b != nil {
		rdc.SetBuiltin(*b)
	}
	return rdc
}

// SetID sets the "id" field.
func (rdc *ResourceDefinitionCreate) SetID(o object.ID) *ResourceDefinitionCreate {
	rdc.mutation.SetID(o)
	return rdc
}

// AddMatchingRuleIDs adds the "matching_rules" edge to the ResourceDefinitionMatchingRule entity by IDs.
func (rdc *ResourceDefinitionCreate) AddMatchingRuleIDs(ids ...object.ID) *ResourceDefinitionCreate {
	rdc.mutation.AddMatchingRuleIDs(ids...)
	return rdc
}

// AddMatchingRules adds the "matching_rules" edges to the ResourceDefinitionMatchingRule entity.
func (rdc *ResourceDefinitionCreate) AddMatchingRules(r ...*ResourceDefinitionMatchingRule) *ResourceDefinitionCreate {
	ids := make([]object.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdc.AddMatchingRuleIDs(ids...)
}

// AddResourceIDs adds the "resources" edge to the Resource entity by IDs.
func (rdc *ResourceDefinitionCreate) AddResourceIDs(ids ...object.ID) *ResourceDefinitionCreate {
	rdc.mutation.AddResourceIDs(ids...)
	return rdc
}

// AddResources adds the "resources" edges to the Resource entity.
func (rdc *ResourceDefinitionCreate) AddResources(r ...*Resource) *ResourceDefinitionCreate {
	ids := make([]object.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdc.AddResourceIDs(ids...)
}

// Mutation returns the ResourceDefinitionMutation object of the builder.
func (rdc *ResourceDefinitionCreate) Mutation() *ResourceDefinitionMutation {
	return rdc.mutation
}

// Save creates the ResourceDefinition in the database.
func (rdc *ResourceDefinitionCreate) Save(ctx context.Context) (*ResourceDefinition, error) {
	if err := rdc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rdc.sqlSave, rdc.mutation, rdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rdc *ResourceDefinitionCreate) SaveX(ctx context.Context) *ResourceDefinition {
	v, err := rdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rdc *ResourceDefinitionCreate) Exec(ctx context.Context) error {
	_, err := rdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rdc *ResourceDefinitionCreate) ExecX(ctx context.Context) {
	if err := rdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rdc *ResourceDefinitionCreate) defaults() error {
	if _, ok := rdc.mutation.Labels(); !ok {
		v := resourcedefinition.DefaultLabels
		rdc.mutation.SetLabels(v)
	}
	if _, ok := rdc.mutation.Annotations(); !ok {
		v := resourcedefinition.DefaultAnnotations
		rdc.mutation.SetAnnotations(v)
	}
	if _, ok := rdc.mutation.CreateTime(); !ok {
		if resourcedefinition.DefaultCreateTime == nil {
			return fmt.Errorf("model: uninitialized resourcedefinition.DefaultCreateTime (forgotten import model/runtime?)")
		}
		v := resourcedefinition.DefaultCreateTime()
		rdc.mutation.SetCreateTime(v)
	}
	if _, ok := rdc.mutation.UpdateTime(); !ok {
		if resourcedefinition.DefaultUpdateTime == nil {
			return fmt.Errorf("model: uninitialized resourcedefinition.DefaultUpdateTime (forgotten import model/runtime?)")
		}
		v := resourcedefinition.DefaultUpdateTime()
		rdc.mutation.SetUpdateTime(v)
	}
	if _, ok := rdc.mutation.Schema(); !ok {
		v := resourcedefinition.DefaultSchema
		rdc.mutation.SetSchema(v)
	}
	if _, ok := rdc.mutation.UiSchema(); !ok {
		v := resourcedefinition.DefaultUiSchema
		rdc.mutation.SetUiSchema(v)
	}
	if _, ok := rdc.mutation.Builtin(); !ok {
		v := resourcedefinition.DefaultBuiltin
		rdc.mutation.SetBuiltin(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rdc *ResourceDefinitionCreate) check() error {
	if _, ok := rdc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`model: missing required field "ResourceDefinition.name"`)}
	}
	if v, ok := rdc.mutation.Name(); ok {
		if err := resourcedefinition.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`model: validator failed for field "ResourceDefinition.name": %w`, err)}
		}
	}
	if _, ok := rdc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`model: missing required field "ResourceDefinition.create_time"`)}
	}
	if _, ok := rdc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`model: missing required field "ResourceDefinition.update_time"`)}
	}
	if _, ok := rdc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`model: missing required field "ResourceDefinition.type"`)}
	}
	if _, ok := rdc.mutation.Schema(); !ok {
		return &ValidationError{Name: "schema", err: errors.New(`model: missing required field "ResourceDefinition.schema"`)}
	}
	if v, ok := rdc.mutation.Schema(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "schema", err: fmt.Errorf(`model: validator failed for field "ResourceDefinition.schema": %w`, err)}
		}
	}
	if v, ok := rdc.mutation.UiSchema(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "uiSchema", err: fmt.Errorf(`model: validator failed for field "ResourceDefinition.uiSchema": %w`, err)}
		}
	}
	if _, ok := rdc.mutation.Builtin(); !ok {
		return &ValidationError{Name: "builtin", err: errors.New(`model: missing required field "ResourceDefinition.builtin"`)}
	}
	return nil
}

func (rdc *ResourceDefinitionCreate) sqlSave(ctx context.Context) (*ResourceDefinition, error) {
	if err := rdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*object.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rdc.mutation.id = &_node.ID
	rdc.mutation.done = true
	return _node, nil
}

func (rdc *ResourceDefinitionCreate) createSpec() (*ResourceDefinition, *sqlgraph.CreateSpec) {
	var (
		_node = &ResourceDefinition{config: rdc.config}
		_spec = sqlgraph.NewCreateSpec(resourcedefinition.Table, sqlgraph.NewFieldSpec(resourcedefinition.FieldID, field.TypeString))
	)
	_spec.Schema = rdc.schemaConfig.ResourceDefinition
	_spec.OnConflict = rdc.conflict
	if id, ok := rdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rdc.mutation.Name(); ok {
		_spec.SetField(resourcedefinition.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rdc.mutation.Description(); ok {
		_spec.SetField(resourcedefinition.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := rdc.mutation.Labels(); ok {
		_spec.SetField(resourcedefinition.FieldLabels, field.TypeJSON, value)
		_node.Labels = value
	}
	if value, ok := rdc.mutation.Annotations(); ok {
		_spec.SetField(resourcedefinition.FieldAnnotations, field.TypeJSON, value)
		_node.Annotations = value
	}
	if value, ok := rdc.mutation.CreateTime(); ok {
		_spec.SetField(resourcedefinition.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = &value
	}
	if value, ok := rdc.mutation.UpdateTime(); ok {
		_spec.SetField(resourcedefinition.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = &value
	}
	if value, ok := rdc.mutation.GetType(); ok {
		_spec.SetField(resourcedefinition.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := rdc.mutation.Schema(); ok {
		_spec.SetField(resourcedefinition.FieldSchema, field.TypeJSON, value)
		_node.Schema = value
	}
	if value, ok := rdc.mutation.UiSchema(); ok {
		_spec.SetField(resourcedefinition.FieldUiSchema, field.TypeJSON, value)
		_node.UiSchema = value
	}
	if value, ok := rdc.mutation.Builtin(); ok {
		_spec.SetField(resourcedefinition.FieldBuiltin, field.TypeBool, value)
		_node.Builtin = value
	}
	if nodes := rdc.mutation.MatchingRulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   resourcedefinition.MatchingRulesTable,
			Columns: []string{resourcedefinition.MatchingRulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourcedefinitionmatchingrule.FieldID, field.TypeString),
			},
		}
		edge.Schema = rdc.schemaConfig.ResourceDefinitionMatchingRule
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rdc.mutation.ResourcesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcedefinition.ResourcesTable,
			Columns: []string{resourcedefinition.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeString),
			},
		}
		edge.Schema = rdc.schemaConfig.Resource
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// Set is different from other Set* methods,
// it sets the value by judging the definition of each field within the entire object.
//
// For required fields, Set calls directly.
//
// For optional fields, Set calls if the value is not zero.
//
// For example:
//
//	## Required
//
//	db.SetX(obj.X)
//
//	## Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (rdc *ResourceDefinitionCreate) Set(obj *ResourceDefinition) *ResourceDefinitionCreate {
	// Required.
	rdc.SetName(obj.Name)
	rdc.SetType(obj.Type)
	rdc.SetSchema(obj.Schema)
	rdc.SetBuiltin(obj.Builtin)

	// Optional.
	if obj.Description != "" {
		rdc.SetDescription(obj.Description)
	}
	if !reflect.ValueOf(obj.Labels).IsZero() {
		rdc.SetLabels(obj.Labels)
	}
	if !reflect.ValueOf(obj.Annotations).IsZero() {
		rdc.SetAnnotations(obj.Annotations)
	}
	if obj.CreateTime != nil {
		rdc.SetCreateTime(*obj.CreateTime)
	}
	if obj.UpdateTime != nil {
		rdc.SetUpdateTime(*obj.UpdateTime)
	}
	if !reflect.ValueOf(obj.UiSchema).IsZero() {
		rdc.SetUiSchema(obj.UiSchema)
	}

	// Record the given object.
	rdc.object = obj

	return rdc
}

// getClientSet returns the ClientSet for the given builder.
func (rdc *ResourceDefinitionCreate) getClientSet() (mc ClientSet) {
	if _, ok := rdc.config.driver.(*txDriver); ok {
		tx := &Tx{config: rdc.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: rdc.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after created the ResourceDefinition entity,
// which is always good for cascading create operations.
func (rdc *ResourceDefinitionCreate) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ResourceDefinition) error) (*ResourceDefinition, error) {
	obj, err := rdc.Save(ctx)
	if err != nil {
		return nil, err
	}

	if len(cbs) == 0 {
		return obj, err
	}

	mc := rdc.getClientSet()
	if rdc.fromUpsert {
		q := mc.ResourceDefinitions().Query().
			Where(
				resourcedefinition.Name(obj.Name),
			)
		obj.ID, err = q.OnlyID(ctx)
		if err != nil {
			return nil, fmt.Errorf("model: failed to query id of ResourceDefinition entity: %w", err)
		}
	}

	if x := rdc.object; x != nil {
		if _, set := rdc.mutation.Field(resourcedefinition.FieldName); set {
			obj.Name = x.Name
		}
		if _, set := rdc.mutation.Field(resourcedefinition.FieldDescription); set {
			obj.Description = x.Description
		}
		if _, set := rdc.mutation.Field(resourcedefinition.FieldType); set {
			obj.Type = x.Type
		}
		obj.Edges = x.Edges
	}

	for i := range cbs {
		if err = cbs[i](ctx, mc, obj); err != nil {
			return nil, err
		}
	}

	return obj, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (rdc *ResourceDefinitionCreate) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ResourceDefinition) error) *ResourceDefinition {
	obj, err := rdc.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return obj
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (rdc *ResourceDefinitionCreate) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ResourceDefinition) error) error {
	_, err := rdc.SaveE(ctx, cbs...)
	return err
}

// ExecEX is like ExecE, but panics if an error occurs.
func (rdc *ResourceDefinitionCreate) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ResourceDefinition) error) {
	if err := rdc.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// Set leverages the ResourceDefinitionCreate Set method,
// it sets the value by judging the definition of each field within the entire item of the given list.
//
// For required fields, Set calls directly.
//
// For optional fields, Set calls if the value is not zero.
//
// For example:
//
//	## Required
//
//	db.SetX(obj.X)
//
//	## Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (rdcb *ResourceDefinitionCreateBulk) Set(objs ...*ResourceDefinition) *ResourceDefinitionCreateBulk {
	if len(objs) != 0 {
		client := NewResourceDefinitionClient(rdcb.config)

		rdcb.builders = make([]*ResourceDefinitionCreate, len(objs))
		for i := range objs {
			rdcb.builders[i] = client.Create().Set(objs[i])
		}

		// Record the given objects.
		rdcb.objects = objs
	}

	return rdcb
}

// getClientSet returns the ClientSet for the given builder.
func (rdcb *ResourceDefinitionCreateBulk) getClientSet() (mc ClientSet) {
	if _, ok := rdcb.config.driver.(*txDriver); ok {
		tx := &Tx{config: rdcb.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: rdcb.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after created the ResourceDefinition entities,
// which is always good for cascading create operations.
func (rdcb *ResourceDefinitionCreateBulk) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ResourceDefinition) error) ([]*ResourceDefinition, error) {
	objs, err := rdcb.Save(ctx)
	if err != nil {
		return nil, err
	}

	if len(cbs) == 0 {
		return objs, err
	}

	mc := rdcb.getClientSet()
	if rdcb.fromUpsert {
		for i := range objs {
			obj := objs[i]
			q := mc.ResourceDefinitions().Query().
				Where(
					resourcedefinition.Name(obj.Name),
				)
			objs[i].ID, err = q.OnlyID(ctx)
			if err != nil {
				return nil, fmt.Errorf("model: failed to query id of ResourceDefinition entity: %w", err)
			}
		}
	}

	if x := rdcb.objects; x != nil {
		for i := range x {
			if _, set := rdcb.builders[i].mutation.Field(resourcedefinition.FieldName); set {
				objs[i].Name = x[i].Name
			}
			if _, set := rdcb.builders[i].mutation.Field(resourcedefinition.FieldDescription); set {
				objs[i].Description = x[i].Description
			}
			if _, set := rdcb.builders[i].mutation.Field(resourcedefinition.FieldType); set {
				objs[i].Type = x[i].Type
			}
			objs[i].Edges = x[i].Edges
		}
	}

	for i := range objs {
		for j := range cbs {
			if err = cbs[j](ctx, mc, objs[i]); err != nil {
				return nil, err
			}
		}
	}

	return objs, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (rdcb *ResourceDefinitionCreateBulk) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ResourceDefinition) error) []*ResourceDefinition {
	objs, err := rdcb.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return objs
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (rdcb *ResourceDefinitionCreateBulk) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ResourceDefinition) error) error {
	_, err := rdcb.SaveE(ctx, cbs...)
	return err
}

// ExecEX is like ExecE, but panics if an error occurs.
func (rdcb *ResourceDefinitionCreateBulk) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ResourceDefinition) error) {
	if err := rdcb.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (u *ResourceDefinitionUpsertOne) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *ResourceDefinition) error) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for ResourceDefinitionUpsertOne.OnConflict")
	}
	u.create.fromUpsert = true
	return u.create.ExecE(ctx, cbs...)
}

// ExecEX is like ExecE, but panics if an error occurs.
func (u *ResourceDefinitionUpsertOne) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *ResourceDefinition) error) {
	if err := u.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (u *ResourceDefinitionUpsertBulk) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *ResourceDefinition) error) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model: OnConflict was set for builder %d. Set it on the ResourceDefinitionUpsertBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for ResourceDefinitionUpsertBulk.OnConflict")
	}
	u.create.fromUpsert = true
	return u.create.ExecE(ctx, cbs...)
}

// ExecEX is like ExecE, but panics if an error occurs.
func (u *ResourceDefinitionUpsertBulk) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *ResourceDefinition) error) {
	if err := u.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ResourceDefinition.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ResourceDefinitionUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (rdc *ResourceDefinitionCreate) OnConflict(opts ...sql.ConflictOption) *ResourceDefinitionUpsertOne {
	rdc.conflict = opts
	return &ResourceDefinitionUpsertOne{
		create: rdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ResourceDefinition.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rdc *ResourceDefinitionCreate) OnConflictColumns(columns ...string) *ResourceDefinitionUpsertOne {
	rdc.conflict = append(rdc.conflict, sql.ConflictColumns(columns...))
	return &ResourceDefinitionUpsertOne{
		create: rdc,
	}
}

type (
	// ResourceDefinitionUpsertOne is the builder for "upsert"-ing
	//  one ResourceDefinition node.
	ResourceDefinitionUpsertOne struct {
		create *ResourceDefinitionCreate
	}

	// ResourceDefinitionUpsert is the "OnConflict" setter.
	ResourceDefinitionUpsert struct {
		*sql.UpdateSet
	}
)

// SetDescription sets the "description" field.
func (u *ResourceDefinitionUpsert) SetDescription(v string) *ResourceDefinitionUpsert {
	u.Set(resourcedefinition.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ResourceDefinitionUpsert) UpdateDescription() *ResourceDefinitionUpsert {
	u.SetExcluded(resourcedefinition.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *ResourceDefinitionUpsert) ClearDescription() *ResourceDefinitionUpsert {
	u.SetNull(resourcedefinition.FieldDescription)
	return u
}

// SetLabels sets the "labels" field.
func (u *ResourceDefinitionUpsert) SetLabels(v map[string]string) *ResourceDefinitionUpsert {
	u.Set(resourcedefinition.FieldLabels, v)
	return u
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *ResourceDefinitionUpsert) UpdateLabels() *ResourceDefinitionUpsert {
	u.SetExcluded(resourcedefinition.FieldLabels)
	return u
}

// ClearLabels clears the value of the "labels" field.
func (u *ResourceDefinitionUpsert) ClearLabels() *ResourceDefinitionUpsert {
	u.SetNull(resourcedefinition.FieldLabels)
	return u
}

// SetAnnotations sets the "annotations" field.
func (u *ResourceDefinitionUpsert) SetAnnotations(v map[string]string) *ResourceDefinitionUpsert {
	u.Set(resourcedefinition.FieldAnnotations, v)
	return u
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *ResourceDefinitionUpsert) UpdateAnnotations() *ResourceDefinitionUpsert {
	u.SetExcluded(resourcedefinition.FieldAnnotations)
	return u
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *ResourceDefinitionUpsert) ClearAnnotations() *ResourceDefinitionUpsert {
	u.SetNull(resourcedefinition.FieldAnnotations)
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *ResourceDefinitionUpsert) SetUpdateTime(v time.Time) *ResourceDefinitionUpsert {
	u.Set(resourcedefinition.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *ResourceDefinitionUpsert) UpdateUpdateTime() *ResourceDefinitionUpsert {
	u.SetExcluded(resourcedefinition.FieldUpdateTime)
	return u
}

// SetSchema sets the "schema" field.
func (u *ResourceDefinitionUpsert) SetSchema(v types.Schema) *ResourceDefinitionUpsert {
	u.Set(resourcedefinition.FieldSchema, v)
	return u
}

// UpdateSchema sets the "schema" field to the value that was provided on create.
func (u *ResourceDefinitionUpsert) UpdateSchema() *ResourceDefinitionUpsert {
	u.SetExcluded(resourcedefinition.FieldSchema)
	return u
}

// SetUiSchema sets the "uiSchema" field.
func (u *ResourceDefinitionUpsert) SetUiSchema(v *types.UISchema) *ResourceDefinitionUpsert {
	u.Set(resourcedefinition.FieldUiSchema, v)
	return u
}

// UpdateUiSchema sets the "uiSchema" field to the value that was provided on create.
func (u *ResourceDefinitionUpsert) UpdateUiSchema() *ResourceDefinitionUpsert {
	u.SetExcluded(resourcedefinition.FieldUiSchema)
	return u
}

// ClearUiSchema clears the value of the "uiSchema" field.
func (u *ResourceDefinitionUpsert) ClearUiSchema() *ResourceDefinitionUpsert {
	u.SetNull(resourcedefinition.FieldUiSchema)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ResourceDefinition.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(resourcedefinition.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ResourceDefinitionUpsertOne) UpdateNewValues() *ResourceDefinitionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(resourcedefinition.FieldID)
		}
		if _, exists := u.create.mutation.Name(); exists {
			s.SetIgnore(resourcedefinition.FieldName)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(resourcedefinition.FieldCreateTime)
		}
		if _, exists := u.create.mutation.GetType(); exists {
			s.SetIgnore(resourcedefinition.FieldType)
		}
		if _, exists := u.create.mutation.Builtin(); exists {
			s.SetIgnore(resourcedefinition.FieldBuiltin)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ResourceDefinition.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ResourceDefinitionUpsertOne) Ignore() *ResourceDefinitionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ResourceDefinitionUpsertOne) DoNothing() *ResourceDefinitionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ResourceDefinitionCreate.OnConflict
// documentation for more info.
func (u *ResourceDefinitionUpsertOne) Update(set func(*ResourceDefinitionUpsert)) *ResourceDefinitionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ResourceDefinitionUpsert{UpdateSet: update})
	}))
	return u
}

// SetDescription sets the "description" field.
func (u *ResourceDefinitionUpsertOne) SetDescription(v string) *ResourceDefinitionUpsertOne {
	return u.Update(func(s *ResourceDefinitionUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ResourceDefinitionUpsertOne) UpdateDescription() *ResourceDefinitionUpsertOne {
	return u.Update(func(s *ResourceDefinitionUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ResourceDefinitionUpsertOne) ClearDescription() *ResourceDefinitionUpsertOne {
	return u.Update(func(s *ResourceDefinitionUpsert) {
		s.ClearDescription()
	})
}

// SetLabels sets the "labels" field.
func (u *ResourceDefinitionUpsertOne) SetLabels(v map[string]string) *ResourceDefinitionUpsertOne {
	return u.Update(func(s *ResourceDefinitionUpsert) {
		s.SetLabels(v)
	})
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *ResourceDefinitionUpsertOne) UpdateLabels() *ResourceDefinitionUpsertOne {
	return u.Update(func(s *ResourceDefinitionUpsert) {
		s.UpdateLabels()
	})
}

// ClearLabels clears the value of the "labels" field.
func (u *ResourceDefinitionUpsertOne) ClearLabels() *ResourceDefinitionUpsertOne {
	return u.Update(func(s *ResourceDefinitionUpsert) {
		s.ClearLabels()
	})
}

// SetAnnotations sets the "annotations" field.
func (u *ResourceDefinitionUpsertOne) SetAnnotations(v map[string]string) *ResourceDefinitionUpsertOne {
	return u.Update(func(s *ResourceDefinitionUpsert) {
		s.SetAnnotations(v)
	})
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *ResourceDefinitionUpsertOne) UpdateAnnotations() *ResourceDefinitionUpsertOne {
	return u.Update(func(s *ResourceDefinitionUpsert) {
		s.UpdateAnnotations()
	})
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *ResourceDefinitionUpsertOne) ClearAnnotations() *ResourceDefinitionUpsertOne {
	return u.Update(func(s *ResourceDefinitionUpsert) {
		s.ClearAnnotations()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *ResourceDefinitionUpsertOne) SetUpdateTime(v time.Time) *ResourceDefinitionUpsertOne {
	return u.Update(func(s *ResourceDefinitionUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *ResourceDefinitionUpsertOne) UpdateUpdateTime() *ResourceDefinitionUpsertOne {
	return u.Update(func(s *ResourceDefinitionUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetSchema sets the "schema" field.
func (u *ResourceDefinitionUpsertOne) SetSchema(v types.Schema) *ResourceDefinitionUpsertOne {
	return u.Update(func(s *ResourceDefinitionUpsert) {
		s.SetSchema(v)
	})
}

// UpdateSchema sets the "schema" field to the value that was provided on create.
func (u *ResourceDefinitionUpsertOne) UpdateSchema() *ResourceDefinitionUpsertOne {
	return u.Update(func(s *ResourceDefinitionUpsert) {
		s.UpdateSchema()
	})
}

// SetUiSchema sets the "uiSchema" field.
func (u *ResourceDefinitionUpsertOne) SetUiSchema(v *types.UISchema) *ResourceDefinitionUpsertOne {
	return u.Update(func(s *ResourceDefinitionUpsert) {
		s.SetUiSchema(v)
	})
}

// UpdateUiSchema sets the "uiSchema" field to the value that was provided on create.
func (u *ResourceDefinitionUpsertOne) UpdateUiSchema() *ResourceDefinitionUpsertOne {
	return u.Update(func(s *ResourceDefinitionUpsert) {
		s.UpdateUiSchema()
	})
}

// ClearUiSchema clears the value of the "uiSchema" field.
func (u *ResourceDefinitionUpsertOne) ClearUiSchema() *ResourceDefinitionUpsertOne {
	return u.Update(func(s *ResourceDefinitionUpsert) {
		s.ClearUiSchema()
	})
}

// Exec executes the query.
func (u *ResourceDefinitionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for ResourceDefinitionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ResourceDefinitionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ResourceDefinitionUpsertOne) ID(ctx context.Context) (id object.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("model: ResourceDefinitionUpsertOne.ID is not supported by MySQL driver. Use ResourceDefinitionUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ResourceDefinitionUpsertOne) IDX(ctx context.Context) object.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ResourceDefinitionCreateBulk is the builder for creating many ResourceDefinition entities in bulk.
type ResourceDefinitionCreateBulk struct {
	config
	err        error
	builders   []*ResourceDefinitionCreate
	conflict   []sql.ConflictOption
	objects    []*ResourceDefinition
	fromUpsert bool
}

// Save creates the ResourceDefinition entities in the database.
func (rdcb *ResourceDefinitionCreateBulk) Save(ctx context.Context) ([]*ResourceDefinition, error) {
	if rdcb.err != nil {
		return nil, rdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rdcb.builders))
	nodes := make([]*ResourceDefinition, len(rdcb.builders))
	mutators := make([]Mutator, len(rdcb.builders))
	for i := range rdcb.builders {
		func(i int, root context.Context) {
			builder := rdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ResourceDefinitionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rdcb *ResourceDefinitionCreateBulk) SaveX(ctx context.Context) []*ResourceDefinition {
	v, err := rdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rdcb *ResourceDefinitionCreateBulk) Exec(ctx context.Context) error {
	_, err := rdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rdcb *ResourceDefinitionCreateBulk) ExecX(ctx context.Context) {
	if err := rdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ResourceDefinition.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ResourceDefinitionUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (rdcb *ResourceDefinitionCreateBulk) OnConflict(opts ...sql.ConflictOption) *ResourceDefinitionUpsertBulk {
	rdcb.conflict = opts
	return &ResourceDefinitionUpsertBulk{
		create: rdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ResourceDefinition.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rdcb *ResourceDefinitionCreateBulk) OnConflictColumns(columns ...string) *ResourceDefinitionUpsertBulk {
	rdcb.conflict = append(rdcb.conflict, sql.ConflictColumns(columns...))
	return &ResourceDefinitionUpsertBulk{
		create: rdcb,
	}
}

// ResourceDefinitionUpsertBulk is the builder for "upsert"-ing
// a bulk of ResourceDefinition nodes.
type ResourceDefinitionUpsertBulk struct {
	create *ResourceDefinitionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ResourceDefinition.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(resourcedefinition.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ResourceDefinitionUpsertBulk) UpdateNewValues() *ResourceDefinitionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(resourcedefinition.FieldID)
			}
			if _, exists := b.mutation.Name(); exists {
				s.SetIgnore(resourcedefinition.FieldName)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(resourcedefinition.FieldCreateTime)
			}
			if _, exists := b.mutation.GetType(); exists {
				s.SetIgnore(resourcedefinition.FieldType)
			}
			if _, exists := b.mutation.Builtin(); exists {
				s.SetIgnore(resourcedefinition.FieldBuiltin)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ResourceDefinition.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ResourceDefinitionUpsertBulk) Ignore() *ResourceDefinitionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ResourceDefinitionUpsertBulk) DoNothing() *ResourceDefinitionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ResourceDefinitionCreateBulk.OnConflict
// documentation for more info.
func (u *ResourceDefinitionUpsertBulk) Update(set func(*ResourceDefinitionUpsert)) *ResourceDefinitionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ResourceDefinitionUpsert{UpdateSet: update})
	}))
	return u
}

// SetDescription sets the "description" field.
func (u *ResourceDefinitionUpsertBulk) SetDescription(v string) *ResourceDefinitionUpsertBulk {
	return u.Update(func(s *ResourceDefinitionUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ResourceDefinitionUpsertBulk) UpdateDescription() *ResourceDefinitionUpsertBulk {
	return u.Update(func(s *ResourceDefinitionUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ResourceDefinitionUpsertBulk) ClearDescription() *ResourceDefinitionUpsertBulk {
	return u.Update(func(s *ResourceDefinitionUpsert) {
		s.ClearDescription()
	})
}

// SetLabels sets the "labels" field.
func (u *ResourceDefinitionUpsertBulk) SetLabels(v map[string]string) *ResourceDefinitionUpsertBulk {
	return u.Update(func(s *ResourceDefinitionUpsert) {
		s.SetLabels(v)
	})
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *ResourceDefinitionUpsertBulk) UpdateLabels() *ResourceDefinitionUpsertBulk {
	return u.Update(func(s *ResourceDefinitionUpsert) {
		s.UpdateLabels()
	})
}

// ClearLabels clears the value of the "labels" field.
func (u *ResourceDefinitionUpsertBulk) ClearLabels() *ResourceDefinitionUpsertBulk {
	return u.Update(func(s *ResourceDefinitionUpsert) {
		s.ClearLabels()
	})
}

// SetAnnotations sets the "annotations" field.
func (u *ResourceDefinitionUpsertBulk) SetAnnotations(v map[string]string) *ResourceDefinitionUpsertBulk {
	return u.Update(func(s *ResourceDefinitionUpsert) {
		s.SetAnnotations(v)
	})
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *ResourceDefinitionUpsertBulk) UpdateAnnotations() *ResourceDefinitionUpsertBulk {
	return u.Update(func(s *ResourceDefinitionUpsert) {
		s.UpdateAnnotations()
	})
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *ResourceDefinitionUpsertBulk) ClearAnnotations() *ResourceDefinitionUpsertBulk {
	return u.Update(func(s *ResourceDefinitionUpsert) {
		s.ClearAnnotations()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *ResourceDefinitionUpsertBulk) SetUpdateTime(v time.Time) *ResourceDefinitionUpsertBulk {
	return u.Update(func(s *ResourceDefinitionUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *ResourceDefinitionUpsertBulk) UpdateUpdateTime() *ResourceDefinitionUpsertBulk {
	return u.Update(func(s *ResourceDefinitionUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetSchema sets the "schema" field.
func (u *ResourceDefinitionUpsertBulk) SetSchema(v types.Schema) *ResourceDefinitionUpsertBulk {
	return u.Update(func(s *ResourceDefinitionUpsert) {
		s.SetSchema(v)
	})
}

// UpdateSchema sets the "schema" field to the value that was provided on create.
func (u *ResourceDefinitionUpsertBulk) UpdateSchema() *ResourceDefinitionUpsertBulk {
	return u.Update(func(s *ResourceDefinitionUpsert) {
		s.UpdateSchema()
	})
}

// SetUiSchema sets the "uiSchema" field.
func (u *ResourceDefinitionUpsertBulk) SetUiSchema(v *types.UISchema) *ResourceDefinitionUpsertBulk {
	return u.Update(func(s *ResourceDefinitionUpsert) {
		s.SetUiSchema(v)
	})
}

// UpdateUiSchema sets the "uiSchema" field to the value that was provided on create.
func (u *ResourceDefinitionUpsertBulk) UpdateUiSchema() *ResourceDefinitionUpsertBulk {
	return u.Update(func(s *ResourceDefinitionUpsert) {
		s.UpdateUiSchema()
	})
}

// ClearUiSchema clears the value of the "uiSchema" field.
func (u *ResourceDefinitionUpsertBulk) ClearUiSchema() *ResourceDefinitionUpsertBulk {
	return u.Update(func(s *ResourceDefinitionUpsert) {
		s.ClearUiSchema()
	})
}

// Exec executes the query.
func (u *ResourceDefinitionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model: OnConflict was set for builder %d. Set it on the ResourceDefinitionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for ResourceDefinitionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ResourceDefinitionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
