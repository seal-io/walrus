// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus". DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/seal-io/walrus/pkg/dao/model/project"
	"github.com/seal-io/walrus/pkg/dao/model/workflowstage"
	"github.com/seal-io/walrus/pkg/dao/model/workflowstep"
	"github.com/seal-io/walrus/pkg/dao/types"
	"github.com/seal-io/walrus/pkg/dao/types/object"
)

// WorkflowStepCreate is the builder for creating a WorkflowStep entity.
type WorkflowStepCreate struct {
	config
	mutation   *WorkflowStepMutation
	hooks      []Hook
	conflict   []sql.ConflictOption
	object     *WorkflowStep
	fromUpsert bool
}

// SetName sets the "name" field.
func (wsc *WorkflowStepCreate) SetName(s string) *WorkflowStepCreate {
	wsc.mutation.SetName(s)
	return wsc
}

// SetDescription sets the "description" field.
func (wsc *WorkflowStepCreate) SetDescription(s string) *WorkflowStepCreate {
	wsc.mutation.SetDescription(s)
	return wsc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (wsc *WorkflowStepCreate) SetNillableDescription(s *string) *WorkflowStepCreate {
	if s != nil {
		wsc.SetDescription(*s)
	}
	return wsc
}

// SetLabels sets the "labels" field.
func (wsc *WorkflowStepCreate) SetLabels(m map[string]string) *WorkflowStepCreate {
	wsc.mutation.SetLabels(m)
	return wsc
}

// SetAnnotations sets the "annotations" field.
func (wsc *WorkflowStepCreate) SetAnnotations(m map[string]string) *WorkflowStepCreate {
	wsc.mutation.SetAnnotations(m)
	return wsc
}

// SetCreateTime sets the "create_time" field.
func (wsc *WorkflowStepCreate) SetCreateTime(t time.Time) *WorkflowStepCreate {
	wsc.mutation.SetCreateTime(t)
	return wsc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (wsc *WorkflowStepCreate) SetNillableCreateTime(t *time.Time) *WorkflowStepCreate {
	if t != nil {
		wsc.SetCreateTime(*t)
	}
	return wsc
}

// SetUpdateTime sets the "update_time" field.
func (wsc *WorkflowStepCreate) SetUpdateTime(t time.Time) *WorkflowStepCreate {
	wsc.mutation.SetUpdateTime(t)
	return wsc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (wsc *WorkflowStepCreate) SetNillableUpdateTime(t *time.Time) *WorkflowStepCreate {
	if t != nil {
		wsc.SetUpdateTime(*t)
	}
	return wsc
}

// SetType sets the "type" field.
func (wsc *WorkflowStepCreate) SetType(s string) *WorkflowStepCreate {
	wsc.mutation.SetType(s)
	return wsc
}

// SetProjectID sets the "project_id" field.
func (wsc *WorkflowStepCreate) SetProjectID(o object.ID) *WorkflowStepCreate {
	wsc.mutation.SetProjectID(o)
	return wsc
}

// SetWorkflowID sets the "workflow_id" field.
func (wsc *WorkflowStepCreate) SetWorkflowID(o object.ID) *WorkflowStepCreate {
	wsc.mutation.SetWorkflowID(o)
	return wsc
}

// SetWorkflowStageID sets the "workflow_stage_id" field.
func (wsc *WorkflowStepCreate) SetWorkflowStageID(o object.ID) *WorkflowStepCreate {
	wsc.mutation.SetWorkflowStageID(o)
	return wsc
}

// SetAttributes sets the "attributes" field.
func (wsc *WorkflowStepCreate) SetAttributes(m map[string]interface{}) *WorkflowStepCreate {
	wsc.mutation.SetAttributes(m)
	return wsc
}

// SetInputs sets the "inputs" field.
func (wsc *WorkflowStepCreate) SetInputs(m map[string]interface{}) *WorkflowStepCreate {
	wsc.mutation.SetInputs(m)
	return wsc
}

// SetOutputs sets the "outputs" field.
func (wsc *WorkflowStepCreate) SetOutputs(m map[string]interface{}) *WorkflowStepCreate {
	wsc.mutation.SetOutputs(m)
	return wsc
}

// SetOrder sets the "order" field.
func (wsc *WorkflowStepCreate) SetOrder(i int) *WorkflowStepCreate {
	wsc.mutation.SetOrder(i)
	return wsc
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (wsc *WorkflowStepCreate) SetNillableOrder(i *int) *WorkflowStepCreate {
	if i != nil {
		wsc.SetOrder(*i)
	}
	return wsc
}

// SetDependencies sets the "dependencies" field.
func (wsc *WorkflowStepCreate) SetDependencies(o []object.ID) *WorkflowStepCreate {
	wsc.mutation.SetDependencies(o)
	return wsc
}

// SetRetryStrategy sets the "retryStrategy" field.
func (wsc *WorkflowStepCreate) SetRetryStrategy(ts *types.RetryStrategy) *WorkflowStepCreate {
	wsc.mutation.SetRetryStrategy(ts)
	return wsc
}

// SetTimeout sets the "timeout" field.
func (wsc *WorkflowStepCreate) SetTimeout(i int) *WorkflowStepCreate {
	wsc.mutation.SetTimeout(i)
	return wsc
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (wsc *WorkflowStepCreate) SetNillableTimeout(i *int) *WorkflowStepCreate {
	if i != nil {
		wsc.SetTimeout(*i)
	}
	return wsc
}

// SetID sets the "id" field.
func (wsc *WorkflowStepCreate) SetID(o object.ID) *WorkflowStepCreate {
	wsc.mutation.SetID(o)
	return wsc
}

// SetProject sets the "project" edge to the Project entity.
func (wsc *WorkflowStepCreate) SetProject(p *Project) *WorkflowStepCreate {
	return wsc.SetProjectID(p.ID)
}

// SetStageID sets the "stage" edge to the WorkflowStage entity by ID.
func (wsc *WorkflowStepCreate) SetStageID(id object.ID) *WorkflowStepCreate {
	wsc.mutation.SetStageID(id)
	return wsc
}

// SetStage sets the "stage" edge to the WorkflowStage entity.
func (wsc *WorkflowStepCreate) SetStage(w *WorkflowStage) *WorkflowStepCreate {
	return wsc.SetStageID(w.ID)
}

// Mutation returns the WorkflowStepMutation object of the builder.
func (wsc *WorkflowStepCreate) Mutation() *WorkflowStepMutation {
	return wsc.mutation
}

// Save creates the WorkflowStep in the database.
func (wsc *WorkflowStepCreate) Save(ctx context.Context) (*WorkflowStep, error) {
	if err := wsc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, wsc.sqlSave, wsc.mutation, wsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wsc *WorkflowStepCreate) SaveX(ctx context.Context) *WorkflowStep {
	v, err := wsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wsc *WorkflowStepCreate) Exec(ctx context.Context) error {
	_, err := wsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wsc *WorkflowStepCreate) ExecX(ctx context.Context) {
	if err := wsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wsc *WorkflowStepCreate) defaults() error {
	if _, ok := wsc.mutation.Labels(); !ok {
		v := workflowstep.DefaultLabels
		wsc.mutation.SetLabels(v)
	}
	if _, ok := wsc.mutation.Annotations(); !ok {
		v := workflowstep.DefaultAnnotations
		wsc.mutation.SetAnnotations(v)
	}
	if _, ok := wsc.mutation.CreateTime(); !ok {
		if workflowstep.DefaultCreateTime == nil {
			return fmt.Errorf("model: uninitialized workflowstep.DefaultCreateTime (forgotten import model/runtime?)")
		}
		v := workflowstep.DefaultCreateTime()
		wsc.mutation.SetCreateTime(v)
	}
	if _, ok := wsc.mutation.UpdateTime(); !ok {
		if workflowstep.DefaultUpdateTime == nil {
			return fmt.Errorf("model: uninitialized workflowstep.DefaultUpdateTime (forgotten import model/runtime?)")
		}
		v := workflowstep.DefaultUpdateTime()
		wsc.mutation.SetUpdateTime(v)
	}
	if _, ok := wsc.mutation.Order(); !ok {
		v := workflowstep.DefaultOrder
		wsc.mutation.SetOrder(v)
	}
	if _, ok := wsc.mutation.Dependencies(); !ok {
		v := workflowstep.DefaultDependencies
		wsc.mutation.SetDependencies(v)
	}
	if _, ok := wsc.mutation.Timeout(); !ok {
		v := workflowstep.DefaultTimeout
		wsc.mutation.SetTimeout(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (wsc *WorkflowStepCreate) check() error {
	if _, ok := wsc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`model: missing required field "WorkflowStep.name"`)}
	}
	if v, ok := wsc.mutation.Name(); ok {
		if err := workflowstep.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`model: validator failed for field "WorkflowStep.name": %w`, err)}
		}
	}
	if _, ok := wsc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`model: missing required field "WorkflowStep.create_time"`)}
	}
	if _, ok := wsc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`model: missing required field "WorkflowStep.update_time"`)}
	}
	if _, ok := wsc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`model: missing required field "WorkflowStep.type"`)}
	}
	if v, ok := wsc.mutation.GetType(); ok {
		if err := workflowstep.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`model: validator failed for field "WorkflowStep.type": %w`, err)}
		}
	}
	if _, ok := wsc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project_id", err: errors.New(`model: missing required field "WorkflowStep.project_id"`)}
	}
	if v, ok := wsc.mutation.ProjectID(); ok {
		if err := workflowstep.ProjectIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "project_id", err: fmt.Errorf(`model: validator failed for field "WorkflowStep.project_id": %w`, err)}
		}
	}
	if _, ok := wsc.mutation.WorkflowID(); !ok {
		return &ValidationError{Name: "workflow_id", err: errors.New(`model: missing required field "WorkflowStep.workflow_id"`)}
	}
	if v, ok := wsc.mutation.WorkflowID(); ok {
		if err := workflowstep.WorkflowIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "workflow_id", err: fmt.Errorf(`model: validator failed for field "WorkflowStep.workflow_id": %w`, err)}
		}
	}
	if _, ok := wsc.mutation.WorkflowStageID(); !ok {
		return &ValidationError{Name: "workflow_stage_id", err: errors.New(`model: missing required field "WorkflowStep.workflow_stage_id"`)}
	}
	if _, ok := wsc.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`model: missing required field "WorkflowStep.order"`)}
	}
	if v, ok := wsc.mutation.Order(); ok {
		if err := workflowstep.OrderValidator(v); err != nil {
			return &ValidationError{Name: "order", err: fmt.Errorf(`model: validator failed for field "WorkflowStep.order": %w`, err)}
		}
	}
	if _, ok := wsc.mutation.Dependencies(); !ok {
		return &ValidationError{Name: "dependencies", err: errors.New(`model: missing required field "WorkflowStep.dependencies"`)}
	}
	if _, ok := wsc.mutation.Timeout(); !ok {
		return &ValidationError{Name: "timeout", err: errors.New(`model: missing required field "WorkflowStep.timeout"`)}
	}
	if v, ok := wsc.mutation.Timeout(); ok {
		if err := workflowstep.TimeoutValidator(v); err != nil {
			return &ValidationError{Name: "timeout", err: fmt.Errorf(`model: validator failed for field "WorkflowStep.timeout": %w`, err)}
		}
	}
	if _, ok := wsc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project", err: errors.New(`model: missing required edge "WorkflowStep.project"`)}
	}
	if _, ok := wsc.mutation.StageID(); !ok {
		return &ValidationError{Name: "stage", err: errors.New(`model: missing required edge "WorkflowStep.stage"`)}
	}
	return nil
}

func (wsc *WorkflowStepCreate) sqlSave(ctx context.Context) (*WorkflowStep, error) {
	if err := wsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*object.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	wsc.mutation.id = &_node.ID
	wsc.mutation.done = true
	return _node, nil
}

func (wsc *WorkflowStepCreate) createSpec() (*WorkflowStep, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkflowStep{config: wsc.config}
		_spec = sqlgraph.NewCreateSpec(workflowstep.Table, sqlgraph.NewFieldSpec(workflowstep.FieldID, field.TypeString))
	)
	_spec.Schema = wsc.schemaConfig.WorkflowStep
	_spec.OnConflict = wsc.conflict
	if id, ok := wsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := wsc.mutation.Name(); ok {
		_spec.SetField(workflowstep.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := wsc.mutation.Description(); ok {
		_spec.SetField(workflowstep.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := wsc.mutation.Labels(); ok {
		_spec.SetField(workflowstep.FieldLabels, field.TypeJSON, value)
		_node.Labels = value
	}
	if value, ok := wsc.mutation.Annotations(); ok {
		_spec.SetField(workflowstep.FieldAnnotations, field.TypeJSON, value)
		_node.Annotations = value
	}
	if value, ok := wsc.mutation.CreateTime(); ok {
		_spec.SetField(workflowstep.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = &value
	}
	if value, ok := wsc.mutation.UpdateTime(); ok {
		_spec.SetField(workflowstep.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = &value
	}
	if value, ok := wsc.mutation.GetType(); ok {
		_spec.SetField(workflowstep.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := wsc.mutation.WorkflowID(); ok {
		_spec.SetField(workflowstep.FieldWorkflowID, field.TypeString, value)
		_node.WorkflowID = value
	}
	if value, ok := wsc.mutation.Attributes(); ok {
		_spec.SetField(workflowstep.FieldAttributes, field.TypeJSON, value)
		_node.Attributes = value
	}
	if value, ok := wsc.mutation.Inputs(); ok {
		_spec.SetField(workflowstep.FieldInputs, field.TypeJSON, value)
		_node.Inputs = value
	}
	if value, ok := wsc.mutation.Outputs(); ok {
		_spec.SetField(workflowstep.FieldOutputs, field.TypeJSON, value)
		_node.Outputs = value
	}
	if value, ok := wsc.mutation.Order(); ok {
		_spec.SetField(workflowstep.FieldOrder, field.TypeInt, value)
		_node.Order = value
	}
	if value, ok := wsc.mutation.Dependencies(); ok {
		_spec.SetField(workflowstep.FieldDependencies, field.TypeJSON, value)
		_node.Dependencies = value
	}
	if value, ok := wsc.mutation.RetryStrategy(); ok {
		_spec.SetField(workflowstep.FieldRetryStrategy, field.TypeJSON, value)
		_node.RetryStrategy = value
	}
	if value, ok := wsc.mutation.Timeout(); ok {
		_spec.SetField(workflowstep.FieldTimeout, field.TypeInt, value)
		_node.Timeout = value
	}
	if nodes := wsc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowstep.ProjectTable,
			Columns: []string{workflowstep.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		edge.Schema = wsc.schemaConfig.WorkflowStep
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wsc.mutation.StageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowstep.StageTable,
			Columns: []string{workflowstep.StageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowstage.FieldID, field.TypeString),
			},
		}
		edge.Schema = wsc.schemaConfig.WorkflowStep
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WorkflowStageID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// Set is different from other Set* methods,
// it sets the value by judging the definition of each field within the entire object.
//
// For required fields, Set calls directly.
//
// For optional fields, Set calls if the value is not zero.
//
// For example:
//
//	## Required
//
//	db.SetX(obj.X)
//
//	## Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (wsc *WorkflowStepCreate) Set(obj *WorkflowStep) *WorkflowStepCreate {
	// Required.
	wsc.SetName(obj.Name)
	wsc.SetType(obj.Type)
	wsc.SetProjectID(obj.ProjectID)
	wsc.SetWorkflowID(obj.WorkflowID)
	wsc.SetWorkflowStageID(obj.WorkflowStageID)
	wsc.SetOrder(obj.Order)
	wsc.SetDependencies(obj.Dependencies)
	wsc.SetTimeout(obj.Timeout)

	// Optional.
	if obj.Description != "" {
		wsc.SetDescription(obj.Description)
	}
	if !reflect.ValueOf(obj.Labels).IsZero() {
		wsc.SetLabels(obj.Labels)
	}
	if !reflect.ValueOf(obj.Annotations).IsZero() {
		wsc.SetAnnotations(obj.Annotations)
	}
	if obj.CreateTime != nil {
		wsc.SetCreateTime(*obj.CreateTime)
	}
	if obj.UpdateTime != nil {
		wsc.SetUpdateTime(*obj.UpdateTime)
	}
	if !reflect.ValueOf(obj.Attributes).IsZero() {
		wsc.SetAttributes(obj.Attributes)
	}
	if !reflect.ValueOf(obj.Inputs).IsZero() {
		wsc.SetInputs(obj.Inputs)
	}
	if !reflect.ValueOf(obj.Outputs).IsZero() {
		wsc.SetOutputs(obj.Outputs)
	}
	if !reflect.ValueOf(obj.RetryStrategy).IsZero() {
		wsc.SetRetryStrategy(obj.RetryStrategy)
	}

	// Record the given object.
	wsc.object = obj

	return wsc
}

// getClientSet returns the ClientSet for the given builder.
func (wsc *WorkflowStepCreate) getClientSet() (mc ClientSet) {
	if _, ok := wsc.config.driver.(*txDriver); ok {
		tx := &Tx{config: wsc.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: wsc.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after created the WorkflowStep entity,
// which is always good for cascading create operations.
func (wsc *WorkflowStepCreate) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *WorkflowStep) error) (*WorkflowStep, error) {
	obj, err := wsc.Save(ctx)
	if err != nil {
		return nil, err
	}

	if len(cbs) == 0 {
		return obj, err
	}

	mc := wsc.getClientSet()

	if x := wsc.object; x != nil {
		if _, set := wsc.mutation.Field(workflowstep.FieldName); set {
			obj.Name = x.Name
		}
		if _, set := wsc.mutation.Field(workflowstep.FieldDescription); set {
			obj.Description = x.Description
		}
		if _, set := wsc.mutation.Field(workflowstep.FieldType); set {
			obj.Type = x.Type
		}
		if _, set := wsc.mutation.Field(workflowstep.FieldProjectID); set {
			obj.ProjectID = x.ProjectID
		}
		if _, set := wsc.mutation.Field(workflowstep.FieldWorkflowID); set {
			obj.WorkflowID = x.WorkflowID
		}
		if _, set := wsc.mutation.Field(workflowstep.FieldWorkflowStageID); set {
			obj.WorkflowStageID = x.WorkflowStageID
		}
		if _, set := wsc.mutation.Field(workflowstep.FieldAttributes); set {
			obj.Attributes = x.Attributes
		}
		if _, set := wsc.mutation.Field(workflowstep.FieldInputs); set {
			obj.Inputs = x.Inputs
		}
		if _, set := wsc.mutation.Field(workflowstep.FieldOutputs); set {
			obj.Outputs = x.Outputs
		}
		if _, set := wsc.mutation.Field(workflowstep.FieldRetryStrategy); set {
			obj.RetryStrategy = x.RetryStrategy
		}
		obj.Edges = x.Edges
	}

	for i := range cbs {
		if err = cbs[i](ctx, mc, obj); err != nil {
			return nil, err
		}
	}

	return obj, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (wsc *WorkflowStepCreate) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *WorkflowStep) error) *WorkflowStep {
	obj, err := wsc.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return obj
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (wsc *WorkflowStepCreate) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *WorkflowStep) error) error {
	_, err := wsc.SaveE(ctx, cbs...)
	return err
}

// ExecEX is like ExecE, but panics if an error occurs.
func (wsc *WorkflowStepCreate) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *WorkflowStep) error) {
	if err := wsc.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// Set leverages the WorkflowStepCreate Set method,
// it sets the value by judging the definition of each field within the entire item of the given list.
//
// For required fields, Set calls directly.
//
// For optional fields, Set calls if the value is not zero.
//
// For example:
//
//	## Required
//
//	db.SetX(obj.X)
//
//	## Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (wscb *WorkflowStepCreateBulk) Set(objs ...*WorkflowStep) *WorkflowStepCreateBulk {
	if len(objs) != 0 {
		client := NewWorkflowStepClient(wscb.config)

		wscb.builders = make([]*WorkflowStepCreate, len(objs))
		for i := range objs {
			wscb.builders[i] = client.Create().Set(objs[i])
		}

		// Record the given objects.
		wscb.objects = objs
	}

	return wscb
}

// getClientSet returns the ClientSet for the given builder.
func (wscb *WorkflowStepCreateBulk) getClientSet() (mc ClientSet) {
	if _, ok := wscb.config.driver.(*txDriver); ok {
		tx := &Tx{config: wscb.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: wscb.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after created the WorkflowStep entities,
// which is always good for cascading create operations.
func (wscb *WorkflowStepCreateBulk) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *WorkflowStep) error) ([]*WorkflowStep, error) {
	objs, err := wscb.Save(ctx)
	if err != nil {
		return nil, err
	}

	if len(cbs) == 0 {
		return objs, err
	}

	mc := wscb.getClientSet()

	if x := wscb.objects; x != nil {
		for i := range x {
			if _, set := wscb.builders[i].mutation.Field(workflowstep.FieldName); set {
				objs[i].Name = x[i].Name
			}
			if _, set := wscb.builders[i].mutation.Field(workflowstep.FieldDescription); set {
				objs[i].Description = x[i].Description
			}
			if _, set := wscb.builders[i].mutation.Field(workflowstep.FieldType); set {
				objs[i].Type = x[i].Type
			}
			if _, set := wscb.builders[i].mutation.Field(workflowstep.FieldProjectID); set {
				objs[i].ProjectID = x[i].ProjectID
			}
			if _, set := wscb.builders[i].mutation.Field(workflowstep.FieldWorkflowID); set {
				objs[i].WorkflowID = x[i].WorkflowID
			}
			if _, set := wscb.builders[i].mutation.Field(workflowstep.FieldWorkflowStageID); set {
				objs[i].WorkflowStageID = x[i].WorkflowStageID
			}
			if _, set := wscb.builders[i].mutation.Field(workflowstep.FieldAttributes); set {
				objs[i].Attributes = x[i].Attributes
			}
			if _, set := wscb.builders[i].mutation.Field(workflowstep.FieldInputs); set {
				objs[i].Inputs = x[i].Inputs
			}
			if _, set := wscb.builders[i].mutation.Field(workflowstep.FieldOutputs); set {
				objs[i].Outputs = x[i].Outputs
			}
			if _, set := wscb.builders[i].mutation.Field(workflowstep.FieldRetryStrategy); set {
				objs[i].RetryStrategy = x[i].RetryStrategy
			}
			objs[i].Edges = x[i].Edges
		}
	}

	for i := range objs {
		for j := range cbs {
			if err = cbs[j](ctx, mc, objs[i]); err != nil {
				return nil, err
			}
		}
	}

	return objs, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (wscb *WorkflowStepCreateBulk) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *WorkflowStep) error) []*WorkflowStep {
	objs, err := wscb.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return objs
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (wscb *WorkflowStepCreateBulk) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *WorkflowStep) error) error {
	_, err := wscb.SaveE(ctx, cbs...)
	return err
}

// ExecEX is like ExecE, but panics if an error occurs.
func (wscb *WorkflowStepCreateBulk) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *WorkflowStep) error) {
	if err := wscb.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (u *WorkflowStepUpsertOne) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *WorkflowStep) error) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for WorkflowStepUpsertOne.OnConflict")
	}
	u.create.fromUpsert = true
	return u.create.ExecE(ctx, cbs...)
}

// ExecEX is like ExecE, but panics if an error occurs.
func (u *WorkflowStepUpsertOne) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *WorkflowStep) error) {
	if err := u.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (u *WorkflowStepUpsertBulk) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *WorkflowStep) error) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model: OnConflict was set for builder %d. Set it on the WorkflowStepUpsertBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for WorkflowStepUpsertBulk.OnConflict")
	}
	u.create.fromUpsert = true
	return u.create.ExecE(ctx, cbs...)
}

// ExecEX is like ExecE, but panics if an error occurs.
func (u *WorkflowStepUpsertBulk) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *WorkflowStep) error) {
	if err := u.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WorkflowStep.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WorkflowStepUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (wsc *WorkflowStepCreate) OnConflict(opts ...sql.ConflictOption) *WorkflowStepUpsertOne {
	wsc.conflict = opts
	return &WorkflowStepUpsertOne{
		create: wsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WorkflowStep.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wsc *WorkflowStepCreate) OnConflictColumns(columns ...string) *WorkflowStepUpsertOne {
	wsc.conflict = append(wsc.conflict, sql.ConflictColumns(columns...))
	return &WorkflowStepUpsertOne{
		create: wsc,
	}
}

type (
	// WorkflowStepUpsertOne is the builder for "upsert"-ing
	//  one WorkflowStep node.
	WorkflowStepUpsertOne struct {
		create *WorkflowStepCreate
	}

	// WorkflowStepUpsert is the "OnConflict" setter.
	WorkflowStepUpsert struct {
		*sql.UpdateSet
	}
)

// SetDescription sets the "description" field.
func (u *WorkflowStepUpsert) SetDescription(v string) *WorkflowStepUpsert {
	u.Set(workflowstep.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *WorkflowStepUpsert) UpdateDescription() *WorkflowStepUpsert {
	u.SetExcluded(workflowstep.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *WorkflowStepUpsert) ClearDescription() *WorkflowStepUpsert {
	u.SetNull(workflowstep.FieldDescription)
	return u
}

// SetLabels sets the "labels" field.
func (u *WorkflowStepUpsert) SetLabels(v map[string]string) *WorkflowStepUpsert {
	u.Set(workflowstep.FieldLabels, v)
	return u
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *WorkflowStepUpsert) UpdateLabels() *WorkflowStepUpsert {
	u.SetExcluded(workflowstep.FieldLabels)
	return u
}

// ClearLabels clears the value of the "labels" field.
func (u *WorkflowStepUpsert) ClearLabels() *WorkflowStepUpsert {
	u.SetNull(workflowstep.FieldLabels)
	return u
}

// SetAnnotations sets the "annotations" field.
func (u *WorkflowStepUpsert) SetAnnotations(v map[string]string) *WorkflowStepUpsert {
	u.Set(workflowstep.FieldAnnotations, v)
	return u
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *WorkflowStepUpsert) UpdateAnnotations() *WorkflowStepUpsert {
	u.SetExcluded(workflowstep.FieldAnnotations)
	return u
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *WorkflowStepUpsert) ClearAnnotations() *WorkflowStepUpsert {
	u.SetNull(workflowstep.FieldAnnotations)
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *WorkflowStepUpsert) SetUpdateTime(v time.Time) *WorkflowStepUpsert {
	u.Set(workflowstep.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *WorkflowStepUpsert) UpdateUpdateTime() *WorkflowStepUpsert {
	u.SetExcluded(workflowstep.FieldUpdateTime)
	return u
}

// SetAttributes sets the "attributes" field.
func (u *WorkflowStepUpsert) SetAttributes(v map[string]interface{}) *WorkflowStepUpsert {
	u.Set(workflowstep.FieldAttributes, v)
	return u
}

// UpdateAttributes sets the "attributes" field to the value that was provided on create.
func (u *WorkflowStepUpsert) UpdateAttributes() *WorkflowStepUpsert {
	u.SetExcluded(workflowstep.FieldAttributes)
	return u
}

// ClearAttributes clears the value of the "attributes" field.
func (u *WorkflowStepUpsert) ClearAttributes() *WorkflowStepUpsert {
	u.SetNull(workflowstep.FieldAttributes)
	return u
}

// SetInputs sets the "inputs" field.
func (u *WorkflowStepUpsert) SetInputs(v map[string]interface{}) *WorkflowStepUpsert {
	u.Set(workflowstep.FieldInputs, v)
	return u
}

// UpdateInputs sets the "inputs" field to the value that was provided on create.
func (u *WorkflowStepUpsert) UpdateInputs() *WorkflowStepUpsert {
	u.SetExcluded(workflowstep.FieldInputs)
	return u
}

// ClearInputs clears the value of the "inputs" field.
func (u *WorkflowStepUpsert) ClearInputs() *WorkflowStepUpsert {
	u.SetNull(workflowstep.FieldInputs)
	return u
}

// SetOutputs sets the "outputs" field.
func (u *WorkflowStepUpsert) SetOutputs(v map[string]interface{}) *WorkflowStepUpsert {
	u.Set(workflowstep.FieldOutputs, v)
	return u
}

// UpdateOutputs sets the "outputs" field to the value that was provided on create.
func (u *WorkflowStepUpsert) UpdateOutputs() *WorkflowStepUpsert {
	u.SetExcluded(workflowstep.FieldOutputs)
	return u
}

// ClearOutputs clears the value of the "outputs" field.
func (u *WorkflowStepUpsert) ClearOutputs() *WorkflowStepUpsert {
	u.SetNull(workflowstep.FieldOutputs)
	return u
}

// SetOrder sets the "order" field.
func (u *WorkflowStepUpsert) SetOrder(v int) *WorkflowStepUpsert {
	u.Set(workflowstep.FieldOrder, v)
	return u
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *WorkflowStepUpsert) UpdateOrder() *WorkflowStepUpsert {
	u.SetExcluded(workflowstep.FieldOrder)
	return u
}

// AddOrder adds v to the "order" field.
func (u *WorkflowStepUpsert) AddOrder(v int) *WorkflowStepUpsert {
	u.Add(workflowstep.FieldOrder, v)
	return u
}

// SetDependencies sets the "dependencies" field.
func (u *WorkflowStepUpsert) SetDependencies(v []object.ID) *WorkflowStepUpsert {
	u.Set(workflowstep.FieldDependencies, v)
	return u
}

// UpdateDependencies sets the "dependencies" field to the value that was provided on create.
func (u *WorkflowStepUpsert) UpdateDependencies() *WorkflowStepUpsert {
	u.SetExcluded(workflowstep.FieldDependencies)
	return u
}

// SetRetryStrategy sets the "retryStrategy" field.
func (u *WorkflowStepUpsert) SetRetryStrategy(v *types.RetryStrategy) *WorkflowStepUpsert {
	u.Set(workflowstep.FieldRetryStrategy, v)
	return u
}

// UpdateRetryStrategy sets the "retryStrategy" field to the value that was provided on create.
func (u *WorkflowStepUpsert) UpdateRetryStrategy() *WorkflowStepUpsert {
	u.SetExcluded(workflowstep.FieldRetryStrategy)
	return u
}

// ClearRetryStrategy clears the value of the "retryStrategy" field.
func (u *WorkflowStepUpsert) ClearRetryStrategy() *WorkflowStepUpsert {
	u.SetNull(workflowstep.FieldRetryStrategy)
	return u
}

// SetTimeout sets the "timeout" field.
func (u *WorkflowStepUpsert) SetTimeout(v int) *WorkflowStepUpsert {
	u.Set(workflowstep.FieldTimeout, v)
	return u
}

// UpdateTimeout sets the "timeout" field to the value that was provided on create.
func (u *WorkflowStepUpsert) UpdateTimeout() *WorkflowStepUpsert {
	u.SetExcluded(workflowstep.FieldTimeout)
	return u
}

// AddTimeout adds v to the "timeout" field.
func (u *WorkflowStepUpsert) AddTimeout(v int) *WorkflowStepUpsert {
	u.Add(workflowstep.FieldTimeout, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.WorkflowStep.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(workflowstep.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WorkflowStepUpsertOne) UpdateNewValues() *WorkflowStepUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(workflowstep.FieldID)
		}
		if _, exists := u.create.mutation.Name(); exists {
			s.SetIgnore(workflowstep.FieldName)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(workflowstep.FieldCreateTime)
		}
		if _, exists := u.create.mutation.GetType(); exists {
			s.SetIgnore(workflowstep.FieldType)
		}
		if _, exists := u.create.mutation.ProjectID(); exists {
			s.SetIgnore(workflowstep.FieldProjectID)
		}
		if _, exists := u.create.mutation.WorkflowID(); exists {
			s.SetIgnore(workflowstep.FieldWorkflowID)
		}
		if _, exists := u.create.mutation.WorkflowStageID(); exists {
			s.SetIgnore(workflowstep.FieldWorkflowStageID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WorkflowStep.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *WorkflowStepUpsertOne) Ignore() *WorkflowStepUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WorkflowStepUpsertOne) DoNothing() *WorkflowStepUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WorkflowStepCreate.OnConflict
// documentation for more info.
func (u *WorkflowStepUpsertOne) Update(set func(*WorkflowStepUpsert)) *WorkflowStepUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WorkflowStepUpsert{UpdateSet: update})
	}))
	return u
}

// SetDescription sets the "description" field.
func (u *WorkflowStepUpsertOne) SetDescription(v string) *WorkflowStepUpsertOne {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *WorkflowStepUpsertOne) UpdateDescription() *WorkflowStepUpsertOne {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *WorkflowStepUpsertOne) ClearDescription() *WorkflowStepUpsertOne {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.ClearDescription()
	})
}

// SetLabels sets the "labels" field.
func (u *WorkflowStepUpsertOne) SetLabels(v map[string]string) *WorkflowStepUpsertOne {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.SetLabels(v)
	})
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *WorkflowStepUpsertOne) UpdateLabels() *WorkflowStepUpsertOne {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.UpdateLabels()
	})
}

// ClearLabels clears the value of the "labels" field.
func (u *WorkflowStepUpsertOne) ClearLabels() *WorkflowStepUpsertOne {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.ClearLabels()
	})
}

// SetAnnotations sets the "annotations" field.
func (u *WorkflowStepUpsertOne) SetAnnotations(v map[string]string) *WorkflowStepUpsertOne {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.SetAnnotations(v)
	})
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *WorkflowStepUpsertOne) UpdateAnnotations() *WorkflowStepUpsertOne {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.UpdateAnnotations()
	})
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *WorkflowStepUpsertOne) ClearAnnotations() *WorkflowStepUpsertOne {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.ClearAnnotations()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *WorkflowStepUpsertOne) SetUpdateTime(v time.Time) *WorkflowStepUpsertOne {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *WorkflowStepUpsertOne) UpdateUpdateTime() *WorkflowStepUpsertOne {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetAttributes sets the "attributes" field.
func (u *WorkflowStepUpsertOne) SetAttributes(v map[string]interface{}) *WorkflowStepUpsertOne {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.SetAttributes(v)
	})
}

// UpdateAttributes sets the "attributes" field to the value that was provided on create.
func (u *WorkflowStepUpsertOne) UpdateAttributes() *WorkflowStepUpsertOne {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.UpdateAttributes()
	})
}

// ClearAttributes clears the value of the "attributes" field.
func (u *WorkflowStepUpsertOne) ClearAttributes() *WorkflowStepUpsertOne {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.ClearAttributes()
	})
}

// SetInputs sets the "inputs" field.
func (u *WorkflowStepUpsertOne) SetInputs(v map[string]interface{}) *WorkflowStepUpsertOne {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.SetInputs(v)
	})
}

// UpdateInputs sets the "inputs" field to the value that was provided on create.
func (u *WorkflowStepUpsertOne) UpdateInputs() *WorkflowStepUpsertOne {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.UpdateInputs()
	})
}

// ClearInputs clears the value of the "inputs" field.
func (u *WorkflowStepUpsertOne) ClearInputs() *WorkflowStepUpsertOne {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.ClearInputs()
	})
}

// SetOutputs sets the "outputs" field.
func (u *WorkflowStepUpsertOne) SetOutputs(v map[string]interface{}) *WorkflowStepUpsertOne {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.SetOutputs(v)
	})
}

// UpdateOutputs sets the "outputs" field to the value that was provided on create.
func (u *WorkflowStepUpsertOne) UpdateOutputs() *WorkflowStepUpsertOne {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.UpdateOutputs()
	})
}

// ClearOutputs clears the value of the "outputs" field.
func (u *WorkflowStepUpsertOne) ClearOutputs() *WorkflowStepUpsertOne {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.ClearOutputs()
	})
}

// SetOrder sets the "order" field.
func (u *WorkflowStepUpsertOne) SetOrder(v int) *WorkflowStepUpsertOne {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.SetOrder(v)
	})
}

// AddOrder adds v to the "order" field.
func (u *WorkflowStepUpsertOne) AddOrder(v int) *WorkflowStepUpsertOne {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.AddOrder(v)
	})
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *WorkflowStepUpsertOne) UpdateOrder() *WorkflowStepUpsertOne {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.UpdateOrder()
	})
}

// SetDependencies sets the "dependencies" field.
func (u *WorkflowStepUpsertOne) SetDependencies(v []object.ID) *WorkflowStepUpsertOne {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.SetDependencies(v)
	})
}

// UpdateDependencies sets the "dependencies" field to the value that was provided on create.
func (u *WorkflowStepUpsertOne) UpdateDependencies() *WorkflowStepUpsertOne {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.UpdateDependencies()
	})
}

// SetRetryStrategy sets the "retryStrategy" field.
func (u *WorkflowStepUpsertOne) SetRetryStrategy(v *types.RetryStrategy) *WorkflowStepUpsertOne {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.SetRetryStrategy(v)
	})
}

// UpdateRetryStrategy sets the "retryStrategy" field to the value that was provided on create.
func (u *WorkflowStepUpsertOne) UpdateRetryStrategy() *WorkflowStepUpsertOne {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.UpdateRetryStrategy()
	})
}

// ClearRetryStrategy clears the value of the "retryStrategy" field.
func (u *WorkflowStepUpsertOne) ClearRetryStrategy() *WorkflowStepUpsertOne {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.ClearRetryStrategy()
	})
}

// SetTimeout sets the "timeout" field.
func (u *WorkflowStepUpsertOne) SetTimeout(v int) *WorkflowStepUpsertOne {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.SetTimeout(v)
	})
}

// AddTimeout adds v to the "timeout" field.
func (u *WorkflowStepUpsertOne) AddTimeout(v int) *WorkflowStepUpsertOne {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.AddTimeout(v)
	})
}

// UpdateTimeout sets the "timeout" field to the value that was provided on create.
func (u *WorkflowStepUpsertOne) UpdateTimeout() *WorkflowStepUpsertOne {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.UpdateTimeout()
	})
}

// Exec executes the query.
func (u *WorkflowStepUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for WorkflowStepCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WorkflowStepUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *WorkflowStepUpsertOne) ID(ctx context.Context) (id object.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("model: WorkflowStepUpsertOne.ID is not supported by MySQL driver. Use WorkflowStepUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *WorkflowStepUpsertOne) IDX(ctx context.Context) object.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// WorkflowStepCreateBulk is the builder for creating many WorkflowStep entities in bulk.
type WorkflowStepCreateBulk struct {
	config
	err        error
	builders   []*WorkflowStepCreate
	conflict   []sql.ConflictOption
	objects    []*WorkflowStep
	fromUpsert bool
}

// Save creates the WorkflowStep entities in the database.
func (wscb *WorkflowStepCreateBulk) Save(ctx context.Context) ([]*WorkflowStep, error) {
	if wscb.err != nil {
		return nil, wscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wscb.builders))
	nodes := make([]*WorkflowStep, len(wscb.builders))
	mutators := make([]Mutator, len(wscb.builders))
	for i := range wscb.builders {
		func(i int, root context.Context) {
			builder := wscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkflowStepMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = wscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wscb *WorkflowStepCreateBulk) SaveX(ctx context.Context) []*WorkflowStep {
	v, err := wscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wscb *WorkflowStepCreateBulk) Exec(ctx context.Context) error {
	_, err := wscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wscb *WorkflowStepCreateBulk) ExecX(ctx context.Context) {
	if err := wscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WorkflowStep.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WorkflowStepUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (wscb *WorkflowStepCreateBulk) OnConflict(opts ...sql.ConflictOption) *WorkflowStepUpsertBulk {
	wscb.conflict = opts
	return &WorkflowStepUpsertBulk{
		create: wscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WorkflowStep.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wscb *WorkflowStepCreateBulk) OnConflictColumns(columns ...string) *WorkflowStepUpsertBulk {
	wscb.conflict = append(wscb.conflict, sql.ConflictColumns(columns...))
	return &WorkflowStepUpsertBulk{
		create: wscb,
	}
}

// WorkflowStepUpsertBulk is the builder for "upsert"-ing
// a bulk of WorkflowStep nodes.
type WorkflowStepUpsertBulk struct {
	create *WorkflowStepCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.WorkflowStep.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(workflowstep.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WorkflowStepUpsertBulk) UpdateNewValues() *WorkflowStepUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(workflowstep.FieldID)
			}
			if _, exists := b.mutation.Name(); exists {
				s.SetIgnore(workflowstep.FieldName)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(workflowstep.FieldCreateTime)
			}
			if _, exists := b.mutation.GetType(); exists {
				s.SetIgnore(workflowstep.FieldType)
			}
			if _, exists := b.mutation.ProjectID(); exists {
				s.SetIgnore(workflowstep.FieldProjectID)
			}
			if _, exists := b.mutation.WorkflowID(); exists {
				s.SetIgnore(workflowstep.FieldWorkflowID)
			}
			if _, exists := b.mutation.WorkflowStageID(); exists {
				s.SetIgnore(workflowstep.FieldWorkflowStageID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WorkflowStep.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *WorkflowStepUpsertBulk) Ignore() *WorkflowStepUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WorkflowStepUpsertBulk) DoNothing() *WorkflowStepUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WorkflowStepCreateBulk.OnConflict
// documentation for more info.
func (u *WorkflowStepUpsertBulk) Update(set func(*WorkflowStepUpsert)) *WorkflowStepUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WorkflowStepUpsert{UpdateSet: update})
	}))
	return u
}

// SetDescription sets the "description" field.
func (u *WorkflowStepUpsertBulk) SetDescription(v string) *WorkflowStepUpsertBulk {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *WorkflowStepUpsertBulk) UpdateDescription() *WorkflowStepUpsertBulk {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *WorkflowStepUpsertBulk) ClearDescription() *WorkflowStepUpsertBulk {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.ClearDescription()
	})
}

// SetLabels sets the "labels" field.
func (u *WorkflowStepUpsertBulk) SetLabels(v map[string]string) *WorkflowStepUpsertBulk {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.SetLabels(v)
	})
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *WorkflowStepUpsertBulk) UpdateLabels() *WorkflowStepUpsertBulk {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.UpdateLabels()
	})
}

// ClearLabels clears the value of the "labels" field.
func (u *WorkflowStepUpsertBulk) ClearLabels() *WorkflowStepUpsertBulk {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.ClearLabels()
	})
}

// SetAnnotations sets the "annotations" field.
func (u *WorkflowStepUpsertBulk) SetAnnotations(v map[string]string) *WorkflowStepUpsertBulk {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.SetAnnotations(v)
	})
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *WorkflowStepUpsertBulk) UpdateAnnotations() *WorkflowStepUpsertBulk {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.UpdateAnnotations()
	})
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *WorkflowStepUpsertBulk) ClearAnnotations() *WorkflowStepUpsertBulk {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.ClearAnnotations()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *WorkflowStepUpsertBulk) SetUpdateTime(v time.Time) *WorkflowStepUpsertBulk {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *WorkflowStepUpsertBulk) UpdateUpdateTime() *WorkflowStepUpsertBulk {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetAttributes sets the "attributes" field.
func (u *WorkflowStepUpsertBulk) SetAttributes(v map[string]interface{}) *WorkflowStepUpsertBulk {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.SetAttributes(v)
	})
}

// UpdateAttributes sets the "attributes" field to the value that was provided on create.
func (u *WorkflowStepUpsertBulk) UpdateAttributes() *WorkflowStepUpsertBulk {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.UpdateAttributes()
	})
}

// ClearAttributes clears the value of the "attributes" field.
func (u *WorkflowStepUpsertBulk) ClearAttributes() *WorkflowStepUpsertBulk {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.ClearAttributes()
	})
}

// SetInputs sets the "inputs" field.
func (u *WorkflowStepUpsertBulk) SetInputs(v map[string]interface{}) *WorkflowStepUpsertBulk {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.SetInputs(v)
	})
}

// UpdateInputs sets the "inputs" field to the value that was provided on create.
func (u *WorkflowStepUpsertBulk) UpdateInputs() *WorkflowStepUpsertBulk {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.UpdateInputs()
	})
}

// ClearInputs clears the value of the "inputs" field.
func (u *WorkflowStepUpsertBulk) ClearInputs() *WorkflowStepUpsertBulk {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.ClearInputs()
	})
}

// SetOutputs sets the "outputs" field.
func (u *WorkflowStepUpsertBulk) SetOutputs(v map[string]interface{}) *WorkflowStepUpsertBulk {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.SetOutputs(v)
	})
}

// UpdateOutputs sets the "outputs" field to the value that was provided on create.
func (u *WorkflowStepUpsertBulk) UpdateOutputs() *WorkflowStepUpsertBulk {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.UpdateOutputs()
	})
}

// ClearOutputs clears the value of the "outputs" field.
func (u *WorkflowStepUpsertBulk) ClearOutputs() *WorkflowStepUpsertBulk {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.ClearOutputs()
	})
}

// SetOrder sets the "order" field.
func (u *WorkflowStepUpsertBulk) SetOrder(v int) *WorkflowStepUpsertBulk {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.SetOrder(v)
	})
}

// AddOrder adds v to the "order" field.
func (u *WorkflowStepUpsertBulk) AddOrder(v int) *WorkflowStepUpsertBulk {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.AddOrder(v)
	})
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *WorkflowStepUpsertBulk) UpdateOrder() *WorkflowStepUpsertBulk {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.UpdateOrder()
	})
}

// SetDependencies sets the "dependencies" field.
func (u *WorkflowStepUpsertBulk) SetDependencies(v []object.ID) *WorkflowStepUpsertBulk {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.SetDependencies(v)
	})
}

// UpdateDependencies sets the "dependencies" field to the value that was provided on create.
func (u *WorkflowStepUpsertBulk) UpdateDependencies() *WorkflowStepUpsertBulk {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.UpdateDependencies()
	})
}

// SetRetryStrategy sets the "retryStrategy" field.
func (u *WorkflowStepUpsertBulk) SetRetryStrategy(v *types.RetryStrategy) *WorkflowStepUpsertBulk {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.SetRetryStrategy(v)
	})
}

// UpdateRetryStrategy sets the "retryStrategy" field to the value that was provided on create.
func (u *WorkflowStepUpsertBulk) UpdateRetryStrategy() *WorkflowStepUpsertBulk {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.UpdateRetryStrategy()
	})
}

// ClearRetryStrategy clears the value of the "retryStrategy" field.
func (u *WorkflowStepUpsertBulk) ClearRetryStrategy() *WorkflowStepUpsertBulk {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.ClearRetryStrategy()
	})
}

// SetTimeout sets the "timeout" field.
func (u *WorkflowStepUpsertBulk) SetTimeout(v int) *WorkflowStepUpsertBulk {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.SetTimeout(v)
	})
}

// AddTimeout adds v to the "timeout" field.
func (u *WorkflowStepUpsertBulk) AddTimeout(v int) *WorkflowStepUpsertBulk {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.AddTimeout(v)
	})
}

// UpdateTimeout sets the "timeout" field to the value that was provided on create.
func (u *WorkflowStepUpsertBulk) UpdateTimeout() *WorkflowStepUpsertBulk {
	return u.Update(func(s *WorkflowStepUpsert) {
		s.UpdateTimeout()
	})
}

// Exec executes the query.
func (u *WorkflowStepUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model: OnConflict was set for builder %d. Set it on the WorkflowStepCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for WorkflowStepCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WorkflowStepUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
