// SPDX-FileCopyrightText: 2023 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "ent". DO NOT EDIT.

package model

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/seal-io/seal/pkg/dao/model/internal"
	"github.com/seal-io/seal/pkg/dao/model/predicate"
	"github.com/seal-io/seal/pkg/dao/model/servicedependency"
)

// ServiceDependencyDelete is the builder for deleting a ServiceDependency entity.
type ServiceDependencyDelete struct {
	config
	hooks    []Hook
	mutation *ServiceDependencyMutation
}

// Where appends a list predicates to the ServiceDependencyDelete builder.
func (sdd *ServiceDependencyDelete) Where(ps ...predicate.ServiceDependency) *ServiceDependencyDelete {
	sdd.mutation.Where(ps...)
	return sdd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sdd *ServiceDependencyDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, ServiceDependencyMutation](ctx, sdd.sqlExec, sdd.mutation, sdd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sdd *ServiceDependencyDelete) ExecX(ctx context.Context) int {
	n, err := sdd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sdd *ServiceDependencyDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(servicedependency.Table, sqlgraph.NewFieldSpec(servicedependency.FieldID, field.TypeString))
	_spec.Node.Schema = sdd.schemaConfig.ServiceDependency
	ctx = internal.NewSchemaConfigContext(ctx, sdd.schemaConfig)
	if ps := sdd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, sdd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	sdd.mutation.done = true
	return affected, err
}

// ServiceDependencyDeleteOne is the builder for deleting a single ServiceDependency entity.
type ServiceDependencyDeleteOne struct {
	sdd *ServiceDependencyDelete
}

// Where appends a list predicates to the ServiceDependencyDelete builder.
func (sddo *ServiceDependencyDeleteOne) Where(ps ...predicate.ServiceDependency) *ServiceDependencyDeleteOne {
	sddo.sdd.mutation.Where(ps...)
	return sddo
}

// Exec executes the deletion query.
func (sddo *ServiceDependencyDeleteOne) Exec(ctx context.Context) error {
	n, err := sddo.sdd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{servicedependency.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sddo *ServiceDependencyDeleteOne) ExecX(ctx context.Context) {
	if err := sddo.Exec(ctx); err != nil {
		panic(err)
	}
}
