// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus". DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/seal-io/walrus/pkg/dao/model/environment"
	"github.com/seal-io/walrus/pkg/dao/model/project"
	"github.com/seal-io/walrus/pkg/dao/model/resource"
	"github.com/seal-io/walrus/pkg/dao/model/resourcerun"
	"github.com/seal-io/walrus/pkg/dao/types"
	"github.com/seal-io/walrus/pkg/dao/types/crypto"
	"github.com/seal-io/walrus/pkg/dao/types/object"
	"github.com/seal-io/walrus/pkg/dao/types/property"
	"github.com/seal-io/walrus/pkg/dao/types/status"
)

// ResourceRunCreate is the builder for creating a ResourceRun entity.
type ResourceRunCreate struct {
	config
	mutation   *ResourceRunMutation
	hooks      []Hook
	conflict   []sql.ConflictOption
	object     *ResourceRun
	fromUpsert bool
}

// SetCreateTime sets the "create_time" field.
func (rrc *ResourceRunCreate) SetCreateTime(t time.Time) *ResourceRunCreate {
	rrc.mutation.SetCreateTime(t)
	return rrc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (rrc *ResourceRunCreate) SetNillableCreateTime(t *time.Time) *ResourceRunCreate {
	if t != nil {
		rrc.SetCreateTime(*t)
	}
	return rrc
}

// SetStatus sets the "status" field.
func (rrc *ResourceRunCreate) SetStatus(s status.Status) *ResourceRunCreate {
	rrc.mutation.SetStatus(s)
	return rrc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rrc *ResourceRunCreate) SetNillableStatus(s *status.Status) *ResourceRunCreate {
	if s != nil {
		rrc.SetStatus(*s)
	}
	return rrc
}

// SetProjectID sets the "project_id" field.
func (rrc *ResourceRunCreate) SetProjectID(o object.ID) *ResourceRunCreate {
	rrc.mutation.SetProjectID(o)
	return rrc
}

// SetEnvironmentID sets the "environment_id" field.
func (rrc *ResourceRunCreate) SetEnvironmentID(o object.ID) *ResourceRunCreate {
	rrc.mutation.SetEnvironmentID(o)
	return rrc
}

// SetResourceID sets the "resource_id" field.
func (rrc *ResourceRunCreate) SetResourceID(o object.ID) *ResourceRunCreate {
	rrc.mutation.SetResourceID(o)
	return rrc
}

// SetTemplateName sets the "template_name" field.
func (rrc *ResourceRunCreate) SetTemplateName(s string) *ResourceRunCreate {
	rrc.mutation.SetTemplateName(s)
	return rrc
}

// SetTemplateVersion sets the "template_version" field.
func (rrc *ResourceRunCreate) SetTemplateVersion(s string) *ResourceRunCreate {
	rrc.mutation.SetTemplateVersion(s)
	return rrc
}

// SetTemplateID sets the "template_id" field.
func (rrc *ResourceRunCreate) SetTemplateID(o object.ID) *ResourceRunCreate {
	rrc.mutation.SetTemplateID(o)
	return rrc
}

// SetAttributes sets the "attributes" field.
func (rrc *ResourceRunCreate) SetAttributes(pr property.Values) *ResourceRunCreate {
	rrc.mutation.SetAttributes(pr)
	return rrc
}

// SetComputedAttributes sets the "computed_attributes" field.
func (rrc *ResourceRunCreate) SetComputedAttributes(pr property.Values) *ResourceRunCreate {
	rrc.mutation.SetComputedAttributes(pr)
	return rrc
}

// SetVariables sets the "variables" field.
func (rrc *ResourceRunCreate) SetVariables(c crypto.Map[string, string]) *ResourceRunCreate {
	rrc.mutation.SetVariables(c)
	return rrc
}

// SetInputConfigs sets the "input_configs" field.
func (rrc *ResourceRunCreate) SetInputConfigs(m map[string][]uint8) *ResourceRunCreate {
	rrc.mutation.SetInputConfigs(m)
	return rrc
}

// SetDeployerType sets the "deployer_type" field.
func (rrc *ResourceRunCreate) SetDeployerType(s string) *ResourceRunCreate {
	rrc.mutation.SetDeployerType(s)
	return rrc
}

// SetNillableDeployerType sets the "deployer_type" field if the given value is not nil.
func (rrc *ResourceRunCreate) SetNillableDeployerType(s *string) *ResourceRunCreate {
	if s != nil {
		rrc.SetDeployerType(*s)
	}
	return rrc
}

// SetDuration sets the "duration" field.
func (rrc *ResourceRunCreate) SetDuration(i int) *ResourceRunCreate {
	rrc.mutation.SetDuration(i)
	return rrc
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (rrc *ResourceRunCreate) SetNillableDuration(i *int) *ResourceRunCreate {
	if i != nil {
		rrc.SetDuration(*i)
	}
	return rrc
}

// SetPreviousRequiredProviders sets the "previous_required_providers" field.
func (rrc *ResourceRunCreate) SetPreviousRequiredProviders(tr []types.ProviderRequirement) *ResourceRunCreate {
	rrc.mutation.SetPreviousRequiredProviders(tr)
	return rrc
}

// SetPlanRecord sets the "plan_record" field.
func (rrc *ResourceRunCreate) SetPlanRecord(s string) *ResourceRunCreate {
	rrc.mutation.SetPlanRecord(s)
	return rrc
}

// SetNillablePlanRecord sets the "plan_record" field if the given value is not nil.
func (rrc *ResourceRunCreate) SetNillablePlanRecord(s *string) *ResourceRunCreate {
	if s != nil {
		rrc.SetPlanRecord(*s)
	}
	return rrc
}

// SetRecord sets the "record" field.
func (rrc *ResourceRunCreate) SetRecord(s string) *ResourceRunCreate {
	rrc.mutation.SetRecord(s)
	return rrc
}

// SetNillableRecord sets the "record" field if the given value is not nil.
func (rrc *ResourceRunCreate) SetNillableRecord(s *string) *ResourceRunCreate {
	if s != nil {
		rrc.SetRecord(*s)
	}
	return rrc
}

// SetChangeComment sets the "change_comment" field.
func (rrc *ResourceRunCreate) SetChangeComment(s string) *ResourceRunCreate {
	rrc.mutation.SetChangeComment(s)
	return rrc
}

// SetNillableChangeComment sets the "change_comment" field if the given value is not nil.
func (rrc *ResourceRunCreate) SetNillableChangeComment(s *string) *ResourceRunCreate {
	if s != nil {
		rrc.SetChangeComment(*s)
	}
	return rrc
}

// SetCreatedBy sets the "created_by" field.
func (rrc *ResourceRunCreate) SetCreatedBy(s string) *ResourceRunCreate {
	rrc.mutation.SetCreatedBy(s)
	return rrc
}

// SetType sets the "type" field.
func (rrc *ResourceRunCreate) SetType(s string) *ResourceRunCreate {
	rrc.mutation.SetType(s)
	return rrc
}

// SetPreview sets the "preview" field.
func (rrc *ResourceRunCreate) SetPreview(b bool) *ResourceRunCreate {
	rrc.mutation.SetPreview(b)
	return rrc
}

// SetNillablePreview sets the "preview" field if the given value is not nil.
func (rrc *ResourceRunCreate) SetNillablePreview(b *bool) *ResourceRunCreate {
	if b != nil {
		rrc.SetPreview(*b)
	}
	return rrc
}

// SetAnnotations sets the "annotations" field.
func (rrc *ResourceRunCreate) SetAnnotations(m map[string]string) *ResourceRunCreate {
	rrc.mutation.SetAnnotations(m)
	return rrc
}

// SetLabels sets the "labels" field.
func (rrc *ResourceRunCreate) SetLabels(m map[string]string) *ResourceRunCreate {
	rrc.mutation.SetLabels(m)
	return rrc
}

// SetComponentChanges sets the "component_changes" field.
func (rrc *ResourceRunCreate) SetComponentChanges(tcc []*types.ResourceComponentChange) *ResourceRunCreate {
	rrc.mutation.SetComponentChanges(tcc)
	return rrc
}

// SetComponentChangeSummary sets the "component_change_summary" field.
func (rrc *ResourceRunCreate) SetComponentChangeSummary(tccs types.ResourceComponentChangeSummary) *ResourceRunCreate {
	rrc.mutation.SetComponentChangeSummary(tccs)
	return rrc
}

// SetNillableComponentChangeSummary sets the "component_change_summary" field if the given value is not nil.
func (rrc *ResourceRunCreate) SetNillableComponentChangeSummary(tccs *types.ResourceComponentChangeSummary) *ResourceRunCreate {
	if tccs != nil {
		rrc.SetComponentChangeSummary(*tccs)
	}
	return rrc
}

// SetID sets the "id" field.
func (rrc *ResourceRunCreate) SetID(o object.ID) *ResourceRunCreate {
	rrc.mutation.SetID(o)
	return rrc
}

// SetProject sets the "project" edge to the Project entity.
func (rrc *ResourceRunCreate) SetProject(p *Project) *ResourceRunCreate {
	return rrc.SetProjectID(p.ID)
}

// SetEnvironment sets the "environment" edge to the Environment entity.
func (rrc *ResourceRunCreate) SetEnvironment(e *Environment) *ResourceRunCreate {
	return rrc.SetEnvironmentID(e.ID)
}

// SetResource sets the "resource" edge to the Resource entity.
func (rrc *ResourceRunCreate) SetResource(r *Resource) *ResourceRunCreate {
	return rrc.SetResourceID(r.ID)
}

// Mutation returns the ResourceRunMutation object of the builder.
func (rrc *ResourceRunCreate) Mutation() *ResourceRunMutation {
	return rrc.mutation
}

// Save creates the ResourceRun in the database.
func (rrc *ResourceRunCreate) Save(ctx context.Context) (*ResourceRun, error) {
	if err := rrc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rrc.sqlSave, rrc.mutation, rrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rrc *ResourceRunCreate) SaveX(ctx context.Context) *ResourceRun {
	v, err := rrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rrc *ResourceRunCreate) Exec(ctx context.Context) error {
	_, err := rrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rrc *ResourceRunCreate) ExecX(ctx context.Context) {
	if err := rrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rrc *ResourceRunCreate) defaults() error {
	if _, ok := rrc.mutation.CreateTime(); !ok {
		if resourcerun.DefaultCreateTime == nil {
			return fmt.Errorf("model: uninitialized resourcerun.DefaultCreateTime (forgotten import model/runtime?)")
		}
		v := resourcerun.DefaultCreateTime()
		rrc.mutation.SetCreateTime(v)
	}
	if _, ok := rrc.mutation.Variables(); !ok {
		v := resourcerun.DefaultVariables
		rrc.mutation.SetVariables(v)
	}
	if _, ok := rrc.mutation.DeployerType(); !ok {
		v := resourcerun.DefaultDeployerType
		rrc.mutation.SetDeployerType(v)
	}
	if _, ok := rrc.mutation.Duration(); !ok {
		v := resourcerun.DefaultDuration
		rrc.mutation.SetDuration(v)
	}
	if _, ok := rrc.mutation.PreviousRequiredProviders(); !ok {
		v := resourcerun.DefaultPreviousRequiredProviders
		rrc.mutation.SetPreviousRequiredProviders(v)
	}
	if _, ok := rrc.mutation.Preview(); !ok {
		v := resourcerun.DefaultPreview
		rrc.mutation.SetPreview(v)
	}
	if _, ok := rrc.mutation.Annotations(); !ok {
		v := resourcerun.DefaultAnnotations
		rrc.mutation.SetAnnotations(v)
	}
	if _, ok := rrc.mutation.Labels(); !ok {
		v := resourcerun.DefaultLabels
		rrc.mutation.SetLabels(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rrc *ResourceRunCreate) check() error {
	if _, ok := rrc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`model: missing required field "ResourceRun.create_time"`)}
	}
	if _, ok := rrc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project_id", err: errors.New(`model: missing required field "ResourceRun.project_id"`)}
	}
	if v, ok := rrc.mutation.ProjectID(); ok {
		if err := resourcerun.ProjectIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "project_id", err: fmt.Errorf(`model: validator failed for field "ResourceRun.project_id": %w`, err)}
		}
	}
	if _, ok := rrc.mutation.EnvironmentID(); !ok {
		return &ValidationError{Name: "environment_id", err: errors.New(`model: missing required field "ResourceRun.environment_id"`)}
	}
	if v, ok := rrc.mutation.EnvironmentID(); ok {
		if err := resourcerun.EnvironmentIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "environment_id", err: fmt.Errorf(`model: validator failed for field "ResourceRun.environment_id": %w`, err)}
		}
	}
	if _, ok := rrc.mutation.ResourceID(); !ok {
		return &ValidationError{Name: "resource_id", err: errors.New(`model: missing required field "ResourceRun.resource_id"`)}
	}
	if v, ok := rrc.mutation.ResourceID(); ok {
		if err := resourcerun.ResourceIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "resource_id", err: fmt.Errorf(`model: validator failed for field "ResourceRun.resource_id": %w`, err)}
		}
	}
	if _, ok := rrc.mutation.TemplateName(); !ok {
		return &ValidationError{Name: "template_name", err: errors.New(`model: missing required field "ResourceRun.template_name"`)}
	}
	if v, ok := rrc.mutation.TemplateName(); ok {
		if err := resourcerun.TemplateNameValidator(v); err != nil {
			return &ValidationError{Name: "template_name", err: fmt.Errorf(`model: validator failed for field "ResourceRun.template_name": %w`, err)}
		}
	}
	if _, ok := rrc.mutation.TemplateVersion(); !ok {
		return &ValidationError{Name: "template_version", err: errors.New(`model: missing required field "ResourceRun.template_version"`)}
	}
	if v, ok := rrc.mutation.TemplateVersion(); ok {
		if err := resourcerun.TemplateVersionValidator(v); err != nil {
			return &ValidationError{Name: "template_version", err: fmt.Errorf(`model: validator failed for field "ResourceRun.template_version": %w`, err)}
		}
	}
	if _, ok := rrc.mutation.TemplateID(); !ok {
		return &ValidationError{Name: "template_id", err: errors.New(`model: missing required field "ResourceRun.template_id"`)}
	}
	if v, ok := rrc.mutation.TemplateID(); ok {
		if err := resourcerun.TemplateIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "template_id", err: fmt.Errorf(`model: validator failed for field "ResourceRun.template_id": %w`, err)}
		}
	}
	if _, ok := rrc.mutation.Variables(); !ok {
		return &ValidationError{Name: "variables", err: errors.New(`model: missing required field "ResourceRun.variables"`)}
	}
	if _, ok := rrc.mutation.InputConfigs(); !ok {
		return &ValidationError{Name: "input_configs", err: errors.New(`model: missing required field "ResourceRun.input_configs"`)}
	}
	if _, ok := rrc.mutation.DeployerType(); !ok {
		return &ValidationError{Name: "deployer_type", err: errors.New(`model: missing required field "ResourceRun.deployer_type"`)}
	}
	if _, ok := rrc.mutation.Duration(); !ok {
		return &ValidationError{Name: "duration", err: errors.New(`model: missing required field "ResourceRun.duration"`)}
	}
	if _, ok := rrc.mutation.PreviousRequiredProviders(); !ok {
		return &ValidationError{Name: "previous_required_providers", err: errors.New(`model: missing required field "ResourceRun.previous_required_providers"`)}
	}
	if _, ok := rrc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`model: missing required field "ResourceRun.created_by"`)}
	}
	if _, ok := rrc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`model: missing required field "ResourceRun.type"`)}
	}
	if _, ok := rrc.mutation.Preview(); !ok {
		return &ValidationError{Name: "preview", err: errors.New(`model: missing required field "ResourceRun.preview"`)}
	}
	if _, ok := rrc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project", err: errors.New(`model: missing required edge "ResourceRun.project"`)}
	}
	if _, ok := rrc.mutation.EnvironmentID(); !ok {
		return &ValidationError{Name: "environment", err: errors.New(`model: missing required edge "ResourceRun.environment"`)}
	}
	if _, ok := rrc.mutation.ResourceID(); !ok {
		return &ValidationError{Name: "resource", err: errors.New(`model: missing required edge "ResourceRun.resource"`)}
	}
	return nil
}

func (rrc *ResourceRunCreate) sqlSave(ctx context.Context) (*ResourceRun, error) {
	if err := rrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*object.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rrc.mutation.id = &_node.ID
	rrc.mutation.done = true
	return _node, nil
}

func (rrc *ResourceRunCreate) createSpec() (*ResourceRun, *sqlgraph.CreateSpec) {
	var (
		_node = &ResourceRun{config: rrc.config}
		_spec = sqlgraph.NewCreateSpec(resourcerun.Table, sqlgraph.NewFieldSpec(resourcerun.FieldID, field.TypeString))
	)
	_spec.Schema = rrc.schemaConfig.ResourceRun
	_spec.OnConflict = rrc.conflict
	if id, ok := rrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rrc.mutation.CreateTime(); ok {
		_spec.SetField(resourcerun.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = &value
	}
	if value, ok := rrc.mutation.Status(); ok {
		_spec.SetField(resourcerun.FieldStatus, field.TypeJSON, value)
		_node.Status = value
	}
	if value, ok := rrc.mutation.TemplateName(); ok {
		_spec.SetField(resourcerun.FieldTemplateName, field.TypeString, value)
		_node.TemplateName = value
	}
	if value, ok := rrc.mutation.TemplateVersion(); ok {
		_spec.SetField(resourcerun.FieldTemplateVersion, field.TypeString, value)
		_node.TemplateVersion = value
	}
	if value, ok := rrc.mutation.TemplateID(); ok {
		_spec.SetField(resourcerun.FieldTemplateID, field.TypeString, value)
		_node.TemplateID = value
	}
	if value, ok := rrc.mutation.Attributes(); ok {
		_spec.SetField(resourcerun.FieldAttributes, field.TypeOther, value)
		_node.Attributes = value
	}
	if value, ok := rrc.mutation.ComputedAttributes(); ok {
		_spec.SetField(resourcerun.FieldComputedAttributes, field.TypeOther, value)
		_node.ComputedAttributes = value
	}
	if value, ok := rrc.mutation.Variables(); ok {
		_spec.SetField(resourcerun.FieldVariables, field.TypeOther, value)
		_node.Variables = value
	}
	if value, ok := rrc.mutation.InputConfigs(); ok {
		_spec.SetField(resourcerun.FieldInputConfigs, field.TypeJSON, value)
		_node.InputConfigs = value
	}
	if value, ok := rrc.mutation.DeployerType(); ok {
		_spec.SetField(resourcerun.FieldDeployerType, field.TypeString, value)
		_node.DeployerType = value
	}
	if value, ok := rrc.mutation.Duration(); ok {
		_spec.SetField(resourcerun.FieldDuration, field.TypeInt, value)
		_node.Duration = value
	}
	if value, ok := rrc.mutation.PreviousRequiredProviders(); ok {
		_spec.SetField(resourcerun.FieldPreviousRequiredProviders, field.TypeJSON, value)
		_node.PreviousRequiredProviders = value
	}
	if value, ok := rrc.mutation.PlanRecord(); ok {
		_spec.SetField(resourcerun.FieldPlanRecord, field.TypeString, value)
		_node.PlanRecord = value
	}
	if value, ok := rrc.mutation.Record(); ok {
		_spec.SetField(resourcerun.FieldRecord, field.TypeString, value)
		_node.Record = value
	}
	if value, ok := rrc.mutation.ChangeComment(); ok {
		_spec.SetField(resourcerun.FieldChangeComment, field.TypeString, value)
		_node.ChangeComment = value
	}
	if value, ok := rrc.mutation.CreatedBy(); ok {
		_spec.SetField(resourcerun.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := rrc.mutation.GetType(); ok {
		_spec.SetField(resourcerun.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := rrc.mutation.Preview(); ok {
		_spec.SetField(resourcerun.FieldPreview, field.TypeBool, value)
		_node.Preview = value
	}
	if value, ok := rrc.mutation.Annotations(); ok {
		_spec.SetField(resourcerun.FieldAnnotations, field.TypeJSON, value)
		_node.Annotations = value
	}
	if value, ok := rrc.mutation.Labels(); ok {
		_spec.SetField(resourcerun.FieldLabels, field.TypeJSON, value)
		_node.Labels = value
	}
	if value, ok := rrc.mutation.ComponentChanges(); ok {
		_spec.SetField(resourcerun.FieldComponentChanges, field.TypeJSON, value)
		_node.ComponentChanges = value
	}
	if value, ok := rrc.mutation.ComponentChangeSummary(); ok {
		_spec.SetField(resourcerun.FieldComponentChangeSummary, field.TypeJSON, value)
		_node.ComponentChangeSummary = value
	}
	if nodes := rrc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcerun.ProjectTable,
			Columns: []string{resourcerun.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		edge.Schema = rrc.schemaConfig.ResourceRun
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rrc.mutation.EnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcerun.EnvironmentTable,
			Columns: []string{resourcerun.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeString),
			},
		}
		edge.Schema = rrc.schemaConfig.ResourceRun
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EnvironmentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rrc.mutation.ResourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resourcerun.ResourceTable,
			Columns: []string{resourcerun.ResourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeString),
			},
		}
		edge.Schema = rrc.schemaConfig.ResourceRun
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ResourceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// Set is different from other Set* methods,
// it sets the value by judging the definition of each field within the entire object.
//
// For required fields, Set calls directly.
//
// For optional fields, Set calls if the value is not zero.
//
// For example:
//
//	## Required
//
//	db.SetX(obj.X)
//
//	## Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (rrc *ResourceRunCreate) Set(obj *ResourceRun) *ResourceRunCreate {
	// Required.
	rrc.SetProjectID(obj.ProjectID)
	rrc.SetEnvironmentID(obj.EnvironmentID)
	rrc.SetResourceID(obj.ResourceID)
	rrc.SetTemplateName(obj.TemplateName)
	rrc.SetTemplateVersion(obj.TemplateVersion)
	rrc.SetTemplateID(obj.TemplateID)
	rrc.SetVariables(obj.Variables)
	rrc.SetInputConfigs(obj.InputConfigs)
	rrc.SetDeployerType(obj.DeployerType)
	rrc.SetDuration(obj.Duration)
	rrc.SetPreviousRequiredProviders(obj.PreviousRequiredProviders)
	rrc.SetCreatedBy(obj.CreatedBy)
	rrc.SetType(obj.Type)
	rrc.SetPreview(obj.Preview)

	// Optional.
	if obj.CreateTime != nil {
		rrc.SetCreateTime(*obj.CreateTime)
	}
	if !reflect.ValueOf(obj.Status).IsZero() {
		rrc.SetStatus(obj.Status)
	}
	if !reflect.ValueOf(obj.Attributes).IsZero() {
		rrc.SetAttributes(obj.Attributes)
	}
	if !reflect.ValueOf(obj.ComputedAttributes).IsZero() {
		rrc.SetComputedAttributes(obj.ComputedAttributes)
	}
	if obj.PlanRecord != "" {
		rrc.SetPlanRecord(obj.PlanRecord)
	}
	if obj.Record != "" {
		rrc.SetRecord(obj.Record)
	}
	if obj.ChangeComment != "" {
		rrc.SetChangeComment(obj.ChangeComment)
	}
	if !reflect.ValueOf(obj.Annotations).IsZero() {
		rrc.SetAnnotations(obj.Annotations)
	}
	if !reflect.ValueOf(obj.Labels).IsZero() {
		rrc.SetLabels(obj.Labels)
	}
	if !reflect.ValueOf(obj.ComponentChanges).IsZero() {
		rrc.SetComponentChanges(obj.ComponentChanges)
	}
	if !reflect.ValueOf(obj.ComponentChangeSummary).IsZero() {
		rrc.SetComponentChangeSummary(obj.ComponentChangeSummary)
	}

	// Record the given object.
	rrc.object = obj

	return rrc
}

// getClientSet returns the ClientSet for the given builder.
func (rrc *ResourceRunCreate) getClientSet() (mc ClientSet) {
	if _, ok := rrc.config.driver.(*txDriver); ok {
		tx := &Tx{config: rrc.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: rrc.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after created the ResourceRun entity,
// which is always good for cascading create operations.
func (rrc *ResourceRunCreate) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ResourceRun) error) (*ResourceRun, error) {
	obj, err := rrc.Save(ctx)
	if err != nil {
		return nil, err
	}

	if len(cbs) == 0 {
		return obj, err
	}

	mc := rrc.getClientSet()

	if x := rrc.object; x != nil {
		if _, set := rrc.mutation.Field(resourcerun.FieldStatus); set {
			obj.Status = x.Status
		}
		if _, set := rrc.mutation.Field(resourcerun.FieldProjectID); set {
			obj.ProjectID = x.ProjectID
		}
		if _, set := rrc.mutation.Field(resourcerun.FieldEnvironmentID); set {
			obj.EnvironmentID = x.EnvironmentID
		}
		if _, set := rrc.mutation.Field(resourcerun.FieldResourceID); set {
			obj.ResourceID = x.ResourceID
		}
		if _, set := rrc.mutation.Field(resourcerun.FieldTemplateName); set {
			obj.TemplateName = x.TemplateName
		}
		if _, set := rrc.mutation.Field(resourcerun.FieldTemplateVersion); set {
			obj.TemplateVersion = x.TemplateVersion
		}
		if _, set := rrc.mutation.Field(resourcerun.FieldTemplateID); set {
			obj.TemplateID = x.TemplateID
		}
		if _, set := rrc.mutation.Field(resourcerun.FieldAttributes); set {
			obj.Attributes = x.Attributes
		}
		if _, set := rrc.mutation.Field(resourcerun.FieldComputedAttributes); set {
			obj.ComputedAttributes = x.ComputedAttributes
		}
		if _, set := rrc.mutation.Field(resourcerun.FieldInputConfigs); set {
			obj.InputConfigs = x.InputConfigs
		}
		if _, set := rrc.mutation.Field(resourcerun.FieldPlanRecord); set {
			obj.PlanRecord = x.PlanRecord
		}
		if _, set := rrc.mutation.Field(resourcerun.FieldRecord); set {
			obj.Record = x.Record
		}
		if _, set := rrc.mutation.Field(resourcerun.FieldChangeComment); set {
			obj.ChangeComment = x.ChangeComment
		}
		if _, set := rrc.mutation.Field(resourcerun.FieldCreatedBy); set {
			obj.CreatedBy = x.CreatedBy
		}
		if _, set := rrc.mutation.Field(resourcerun.FieldType); set {
			obj.Type = x.Type
		}
		if _, set := rrc.mutation.Field(resourcerun.FieldComponentChanges); set {
			obj.ComponentChanges = x.ComponentChanges
		}
		if _, set := rrc.mutation.Field(resourcerun.FieldComponentChangeSummary); set {
			obj.ComponentChangeSummary = x.ComponentChangeSummary
		}
		obj.Edges = x.Edges
	}

	for i := range cbs {
		if err = cbs[i](ctx, mc, obj); err != nil {
			return nil, err
		}
	}

	return obj, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (rrc *ResourceRunCreate) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ResourceRun) error) *ResourceRun {
	obj, err := rrc.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return obj
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (rrc *ResourceRunCreate) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ResourceRun) error) error {
	_, err := rrc.SaveE(ctx, cbs...)
	return err
}

// ExecEX is like ExecE, but panics if an error occurs.
func (rrc *ResourceRunCreate) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ResourceRun) error) {
	if err := rrc.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// Set leverages the ResourceRunCreate Set method,
// it sets the value by judging the definition of each field within the entire item of the given list.
//
// For required fields, Set calls directly.
//
// For optional fields, Set calls if the value is not zero.
//
// For example:
//
//	## Required
//
//	db.SetX(obj.X)
//
//	## Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (rrcb *ResourceRunCreateBulk) Set(objs ...*ResourceRun) *ResourceRunCreateBulk {
	if len(objs) != 0 {
		client := NewResourceRunClient(rrcb.config)

		rrcb.builders = make([]*ResourceRunCreate, len(objs))
		for i := range objs {
			rrcb.builders[i] = client.Create().Set(objs[i])
		}

		// Record the given objects.
		rrcb.objects = objs
	}

	return rrcb
}

// getClientSet returns the ClientSet for the given builder.
func (rrcb *ResourceRunCreateBulk) getClientSet() (mc ClientSet) {
	if _, ok := rrcb.config.driver.(*txDriver); ok {
		tx := &Tx{config: rrcb.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: rrcb.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after created the ResourceRun entities,
// which is always good for cascading create operations.
func (rrcb *ResourceRunCreateBulk) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ResourceRun) error) ([]*ResourceRun, error) {
	objs, err := rrcb.Save(ctx)
	if err != nil {
		return nil, err
	}

	if len(cbs) == 0 {
		return objs, err
	}

	mc := rrcb.getClientSet()

	if x := rrcb.objects; x != nil {
		for i := range x {
			if _, set := rrcb.builders[i].mutation.Field(resourcerun.FieldStatus); set {
				objs[i].Status = x[i].Status
			}
			if _, set := rrcb.builders[i].mutation.Field(resourcerun.FieldProjectID); set {
				objs[i].ProjectID = x[i].ProjectID
			}
			if _, set := rrcb.builders[i].mutation.Field(resourcerun.FieldEnvironmentID); set {
				objs[i].EnvironmentID = x[i].EnvironmentID
			}
			if _, set := rrcb.builders[i].mutation.Field(resourcerun.FieldResourceID); set {
				objs[i].ResourceID = x[i].ResourceID
			}
			if _, set := rrcb.builders[i].mutation.Field(resourcerun.FieldTemplateName); set {
				objs[i].TemplateName = x[i].TemplateName
			}
			if _, set := rrcb.builders[i].mutation.Field(resourcerun.FieldTemplateVersion); set {
				objs[i].TemplateVersion = x[i].TemplateVersion
			}
			if _, set := rrcb.builders[i].mutation.Field(resourcerun.FieldTemplateID); set {
				objs[i].TemplateID = x[i].TemplateID
			}
			if _, set := rrcb.builders[i].mutation.Field(resourcerun.FieldAttributes); set {
				objs[i].Attributes = x[i].Attributes
			}
			if _, set := rrcb.builders[i].mutation.Field(resourcerun.FieldComputedAttributes); set {
				objs[i].ComputedAttributes = x[i].ComputedAttributes
			}
			if _, set := rrcb.builders[i].mutation.Field(resourcerun.FieldInputConfigs); set {
				objs[i].InputConfigs = x[i].InputConfigs
			}
			if _, set := rrcb.builders[i].mutation.Field(resourcerun.FieldPlanRecord); set {
				objs[i].PlanRecord = x[i].PlanRecord
			}
			if _, set := rrcb.builders[i].mutation.Field(resourcerun.FieldRecord); set {
				objs[i].Record = x[i].Record
			}
			if _, set := rrcb.builders[i].mutation.Field(resourcerun.FieldChangeComment); set {
				objs[i].ChangeComment = x[i].ChangeComment
			}
			if _, set := rrcb.builders[i].mutation.Field(resourcerun.FieldCreatedBy); set {
				objs[i].CreatedBy = x[i].CreatedBy
			}
			if _, set := rrcb.builders[i].mutation.Field(resourcerun.FieldType); set {
				objs[i].Type = x[i].Type
			}
			if _, set := rrcb.builders[i].mutation.Field(resourcerun.FieldComponentChanges); set {
				objs[i].ComponentChanges = x[i].ComponentChanges
			}
			if _, set := rrcb.builders[i].mutation.Field(resourcerun.FieldComponentChangeSummary); set {
				objs[i].ComponentChangeSummary = x[i].ComponentChangeSummary
			}
			objs[i].Edges = x[i].Edges
		}
	}

	for i := range objs {
		for j := range cbs {
			if err = cbs[j](ctx, mc, objs[i]); err != nil {
				return nil, err
			}
		}
	}

	return objs, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (rrcb *ResourceRunCreateBulk) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ResourceRun) error) []*ResourceRun {
	objs, err := rrcb.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return objs
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (rrcb *ResourceRunCreateBulk) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ResourceRun) error) error {
	_, err := rrcb.SaveE(ctx, cbs...)
	return err
}

// ExecEX is like ExecE, but panics if an error occurs.
func (rrcb *ResourceRunCreateBulk) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ResourceRun) error) {
	if err := rrcb.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (u *ResourceRunUpsertOne) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *ResourceRun) error) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for ResourceRunUpsertOne.OnConflict")
	}
	u.create.fromUpsert = true
	return u.create.ExecE(ctx, cbs...)
}

// ExecEX is like ExecE, but panics if an error occurs.
func (u *ResourceRunUpsertOne) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *ResourceRun) error) {
	if err := u.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (u *ResourceRunUpsertBulk) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *ResourceRun) error) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model: OnConflict was set for builder %d. Set it on the ResourceRunUpsertBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for ResourceRunUpsertBulk.OnConflict")
	}
	u.create.fromUpsert = true
	return u.create.ExecE(ctx, cbs...)
}

// ExecEX is like ExecE, but panics if an error occurs.
func (u *ResourceRunUpsertBulk) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *ResourceRun) error) {
	if err := u.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ResourceRun.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ResourceRunUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (rrc *ResourceRunCreate) OnConflict(opts ...sql.ConflictOption) *ResourceRunUpsertOne {
	rrc.conflict = opts
	return &ResourceRunUpsertOne{
		create: rrc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ResourceRun.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rrc *ResourceRunCreate) OnConflictColumns(columns ...string) *ResourceRunUpsertOne {
	rrc.conflict = append(rrc.conflict, sql.ConflictColumns(columns...))
	return &ResourceRunUpsertOne{
		create: rrc,
	}
}

type (
	// ResourceRunUpsertOne is the builder for "upsert"-ing
	//  one ResourceRun node.
	ResourceRunUpsertOne struct {
		create *ResourceRunCreate
	}

	// ResourceRunUpsert is the "OnConflict" setter.
	ResourceRunUpsert struct {
		*sql.UpdateSet
	}
)

// SetStatus sets the "status" field.
func (u *ResourceRunUpsert) SetStatus(v status.Status) *ResourceRunUpsert {
	u.Set(resourcerun.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ResourceRunUpsert) UpdateStatus() *ResourceRunUpsert {
	u.SetExcluded(resourcerun.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *ResourceRunUpsert) ClearStatus() *ResourceRunUpsert {
	u.SetNull(resourcerun.FieldStatus)
	return u
}

// SetTemplateVersion sets the "template_version" field.
func (u *ResourceRunUpsert) SetTemplateVersion(v string) *ResourceRunUpsert {
	u.Set(resourcerun.FieldTemplateVersion, v)
	return u
}

// UpdateTemplateVersion sets the "template_version" field to the value that was provided on create.
func (u *ResourceRunUpsert) UpdateTemplateVersion() *ResourceRunUpsert {
	u.SetExcluded(resourcerun.FieldTemplateVersion)
	return u
}

// SetAttributes sets the "attributes" field.
func (u *ResourceRunUpsert) SetAttributes(v property.Values) *ResourceRunUpsert {
	u.Set(resourcerun.FieldAttributes, v)
	return u
}

// UpdateAttributes sets the "attributes" field to the value that was provided on create.
func (u *ResourceRunUpsert) UpdateAttributes() *ResourceRunUpsert {
	u.SetExcluded(resourcerun.FieldAttributes)
	return u
}

// ClearAttributes clears the value of the "attributes" field.
func (u *ResourceRunUpsert) ClearAttributes() *ResourceRunUpsert {
	u.SetNull(resourcerun.FieldAttributes)
	return u
}

// SetComputedAttributes sets the "computed_attributes" field.
func (u *ResourceRunUpsert) SetComputedAttributes(v property.Values) *ResourceRunUpsert {
	u.Set(resourcerun.FieldComputedAttributes, v)
	return u
}

// UpdateComputedAttributes sets the "computed_attributes" field to the value that was provided on create.
func (u *ResourceRunUpsert) UpdateComputedAttributes() *ResourceRunUpsert {
	u.SetExcluded(resourcerun.FieldComputedAttributes)
	return u
}

// ClearComputedAttributes clears the value of the "computed_attributes" field.
func (u *ResourceRunUpsert) ClearComputedAttributes() *ResourceRunUpsert {
	u.SetNull(resourcerun.FieldComputedAttributes)
	return u
}

// SetVariables sets the "variables" field.
func (u *ResourceRunUpsert) SetVariables(v crypto.Map[string, string]) *ResourceRunUpsert {
	u.Set(resourcerun.FieldVariables, v)
	return u
}

// UpdateVariables sets the "variables" field to the value that was provided on create.
func (u *ResourceRunUpsert) UpdateVariables() *ResourceRunUpsert {
	u.SetExcluded(resourcerun.FieldVariables)
	return u
}

// SetInputConfigs sets the "input_configs" field.
func (u *ResourceRunUpsert) SetInputConfigs(v map[string][]uint8) *ResourceRunUpsert {
	u.Set(resourcerun.FieldInputConfigs, v)
	return u
}

// UpdateInputConfigs sets the "input_configs" field to the value that was provided on create.
func (u *ResourceRunUpsert) UpdateInputConfigs() *ResourceRunUpsert {
	u.SetExcluded(resourcerun.FieldInputConfigs)
	return u
}

// SetDeployerType sets the "deployer_type" field.
func (u *ResourceRunUpsert) SetDeployerType(v string) *ResourceRunUpsert {
	u.Set(resourcerun.FieldDeployerType, v)
	return u
}

// UpdateDeployerType sets the "deployer_type" field to the value that was provided on create.
func (u *ResourceRunUpsert) UpdateDeployerType() *ResourceRunUpsert {
	u.SetExcluded(resourcerun.FieldDeployerType)
	return u
}

// SetDuration sets the "duration" field.
func (u *ResourceRunUpsert) SetDuration(v int) *ResourceRunUpsert {
	u.Set(resourcerun.FieldDuration, v)
	return u
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *ResourceRunUpsert) UpdateDuration() *ResourceRunUpsert {
	u.SetExcluded(resourcerun.FieldDuration)
	return u
}

// AddDuration adds v to the "duration" field.
func (u *ResourceRunUpsert) AddDuration(v int) *ResourceRunUpsert {
	u.Add(resourcerun.FieldDuration, v)
	return u
}

// SetPreviousRequiredProviders sets the "previous_required_providers" field.
func (u *ResourceRunUpsert) SetPreviousRequiredProviders(v []types.ProviderRequirement) *ResourceRunUpsert {
	u.Set(resourcerun.FieldPreviousRequiredProviders, v)
	return u
}

// UpdatePreviousRequiredProviders sets the "previous_required_providers" field to the value that was provided on create.
func (u *ResourceRunUpsert) UpdatePreviousRequiredProviders() *ResourceRunUpsert {
	u.SetExcluded(resourcerun.FieldPreviousRequiredProviders)
	return u
}

// SetPlanRecord sets the "plan_record" field.
func (u *ResourceRunUpsert) SetPlanRecord(v string) *ResourceRunUpsert {
	u.Set(resourcerun.FieldPlanRecord, v)
	return u
}

// UpdatePlanRecord sets the "plan_record" field to the value that was provided on create.
func (u *ResourceRunUpsert) UpdatePlanRecord() *ResourceRunUpsert {
	u.SetExcluded(resourcerun.FieldPlanRecord)
	return u
}

// ClearPlanRecord clears the value of the "plan_record" field.
func (u *ResourceRunUpsert) ClearPlanRecord() *ResourceRunUpsert {
	u.SetNull(resourcerun.FieldPlanRecord)
	return u
}

// SetRecord sets the "record" field.
func (u *ResourceRunUpsert) SetRecord(v string) *ResourceRunUpsert {
	u.Set(resourcerun.FieldRecord, v)
	return u
}

// UpdateRecord sets the "record" field to the value that was provided on create.
func (u *ResourceRunUpsert) UpdateRecord() *ResourceRunUpsert {
	u.SetExcluded(resourcerun.FieldRecord)
	return u
}

// ClearRecord clears the value of the "record" field.
func (u *ResourceRunUpsert) ClearRecord() *ResourceRunUpsert {
	u.SetNull(resourcerun.FieldRecord)
	return u
}

// SetChangeComment sets the "change_comment" field.
func (u *ResourceRunUpsert) SetChangeComment(v string) *ResourceRunUpsert {
	u.Set(resourcerun.FieldChangeComment, v)
	return u
}

// UpdateChangeComment sets the "change_comment" field to the value that was provided on create.
func (u *ResourceRunUpsert) UpdateChangeComment() *ResourceRunUpsert {
	u.SetExcluded(resourcerun.FieldChangeComment)
	return u
}

// ClearChangeComment clears the value of the "change_comment" field.
func (u *ResourceRunUpsert) ClearChangeComment() *ResourceRunUpsert {
	u.SetNull(resourcerun.FieldChangeComment)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *ResourceRunUpsert) SetCreatedBy(v string) *ResourceRunUpsert {
	u.Set(resourcerun.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ResourceRunUpsert) UpdateCreatedBy() *ResourceRunUpsert {
	u.SetExcluded(resourcerun.FieldCreatedBy)
	return u
}

// SetType sets the "type" field.
func (u *ResourceRunUpsert) SetType(v string) *ResourceRunUpsert {
	u.Set(resourcerun.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ResourceRunUpsert) UpdateType() *ResourceRunUpsert {
	u.SetExcluded(resourcerun.FieldType)
	return u
}

// SetPreview sets the "preview" field.
func (u *ResourceRunUpsert) SetPreview(v bool) *ResourceRunUpsert {
	u.Set(resourcerun.FieldPreview, v)
	return u
}

// UpdatePreview sets the "preview" field to the value that was provided on create.
func (u *ResourceRunUpsert) UpdatePreview() *ResourceRunUpsert {
	u.SetExcluded(resourcerun.FieldPreview)
	return u
}

// SetAnnotations sets the "annotations" field.
func (u *ResourceRunUpsert) SetAnnotations(v map[string]string) *ResourceRunUpsert {
	u.Set(resourcerun.FieldAnnotations, v)
	return u
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *ResourceRunUpsert) UpdateAnnotations() *ResourceRunUpsert {
	u.SetExcluded(resourcerun.FieldAnnotations)
	return u
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *ResourceRunUpsert) ClearAnnotations() *ResourceRunUpsert {
	u.SetNull(resourcerun.FieldAnnotations)
	return u
}

// SetLabels sets the "labels" field.
func (u *ResourceRunUpsert) SetLabels(v map[string]string) *ResourceRunUpsert {
	u.Set(resourcerun.FieldLabels, v)
	return u
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *ResourceRunUpsert) UpdateLabels() *ResourceRunUpsert {
	u.SetExcluded(resourcerun.FieldLabels)
	return u
}

// ClearLabels clears the value of the "labels" field.
func (u *ResourceRunUpsert) ClearLabels() *ResourceRunUpsert {
	u.SetNull(resourcerun.FieldLabels)
	return u
}

// SetComponentChanges sets the "component_changes" field.
func (u *ResourceRunUpsert) SetComponentChanges(v []*types.ResourceComponentChange) *ResourceRunUpsert {
	u.Set(resourcerun.FieldComponentChanges, v)
	return u
}

// UpdateComponentChanges sets the "component_changes" field to the value that was provided on create.
func (u *ResourceRunUpsert) UpdateComponentChanges() *ResourceRunUpsert {
	u.SetExcluded(resourcerun.FieldComponentChanges)
	return u
}

// ClearComponentChanges clears the value of the "component_changes" field.
func (u *ResourceRunUpsert) ClearComponentChanges() *ResourceRunUpsert {
	u.SetNull(resourcerun.FieldComponentChanges)
	return u
}

// SetComponentChangeSummary sets the "component_change_summary" field.
func (u *ResourceRunUpsert) SetComponentChangeSummary(v types.ResourceComponentChangeSummary) *ResourceRunUpsert {
	u.Set(resourcerun.FieldComponentChangeSummary, v)
	return u
}

// UpdateComponentChangeSummary sets the "component_change_summary" field to the value that was provided on create.
func (u *ResourceRunUpsert) UpdateComponentChangeSummary() *ResourceRunUpsert {
	u.SetExcluded(resourcerun.FieldComponentChangeSummary)
	return u
}

// ClearComponentChangeSummary clears the value of the "component_change_summary" field.
func (u *ResourceRunUpsert) ClearComponentChangeSummary() *ResourceRunUpsert {
	u.SetNull(resourcerun.FieldComponentChangeSummary)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ResourceRun.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(resourcerun.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ResourceRunUpsertOne) UpdateNewValues() *ResourceRunUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(resourcerun.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(resourcerun.FieldCreateTime)
		}
		if _, exists := u.create.mutation.ProjectID(); exists {
			s.SetIgnore(resourcerun.FieldProjectID)
		}
		if _, exists := u.create.mutation.EnvironmentID(); exists {
			s.SetIgnore(resourcerun.FieldEnvironmentID)
		}
		if _, exists := u.create.mutation.ResourceID(); exists {
			s.SetIgnore(resourcerun.FieldResourceID)
		}
		if _, exists := u.create.mutation.TemplateName(); exists {
			s.SetIgnore(resourcerun.FieldTemplateName)
		}
		if _, exists := u.create.mutation.TemplateID(); exists {
			s.SetIgnore(resourcerun.FieldTemplateID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ResourceRun.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ResourceRunUpsertOne) Ignore() *ResourceRunUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ResourceRunUpsertOne) DoNothing() *ResourceRunUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ResourceRunCreate.OnConflict
// documentation for more info.
func (u *ResourceRunUpsertOne) Update(set func(*ResourceRunUpsert)) *ResourceRunUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ResourceRunUpsert{UpdateSet: update})
	}))
	return u
}

// SetStatus sets the "status" field.
func (u *ResourceRunUpsertOne) SetStatus(v status.Status) *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ResourceRunUpsertOne) UpdateStatus() *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *ResourceRunUpsertOne) ClearStatus() *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.ClearStatus()
	})
}

// SetTemplateVersion sets the "template_version" field.
func (u *ResourceRunUpsertOne) SetTemplateVersion(v string) *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.SetTemplateVersion(v)
	})
}

// UpdateTemplateVersion sets the "template_version" field to the value that was provided on create.
func (u *ResourceRunUpsertOne) UpdateTemplateVersion() *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.UpdateTemplateVersion()
	})
}

// SetAttributes sets the "attributes" field.
func (u *ResourceRunUpsertOne) SetAttributes(v property.Values) *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.SetAttributes(v)
	})
}

// UpdateAttributes sets the "attributes" field to the value that was provided on create.
func (u *ResourceRunUpsertOne) UpdateAttributes() *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.UpdateAttributes()
	})
}

// ClearAttributes clears the value of the "attributes" field.
func (u *ResourceRunUpsertOne) ClearAttributes() *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.ClearAttributes()
	})
}

// SetComputedAttributes sets the "computed_attributes" field.
func (u *ResourceRunUpsertOne) SetComputedAttributes(v property.Values) *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.SetComputedAttributes(v)
	})
}

// UpdateComputedAttributes sets the "computed_attributes" field to the value that was provided on create.
func (u *ResourceRunUpsertOne) UpdateComputedAttributes() *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.UpdateComputedAttributes()
	})
}

// ClearComputedAttributes clears the value of the "computed_attributes" field.
func (u *ResourceRunUpsertOne) ClearComputedAttributes() *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.ClearComputedAttributes()
	})
}

// SetVariables sets the "variables" field.
func (u *ResourceRunUpsertOne) SetVariables(v crypto.Map[string, string]) *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.SetVariables(v)
	})
}

// UpdateVariables sets the "variables" field to the value that was provided on create.
func (u *ResourceRunUpsertOne) UpdateVariables() *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.UpdateVariables()
	})
}

// SetInputConfigs sets the "input_configs" field.
func (u *ResourceRunUpsertOne) SetInputConfigs(v map[string][]uint8) *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.SetInputConfigs(v)
	})
}

// UpdateInputConfigs sets the "input_configs" field to the value that was provided on create.
func (u *ResourceRunUpsertOne) UpdateInputConfigs() *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.UpdateInputConfigs()
	})
}

// SetDeployerType sets the "deployer_type" field.
func (u *ResourceRunUpsertOne) SetDeployerType(v string) *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.SetDeployerType(v)
	})
}

// UpdateDeployerType sets the "deployer_type" field to the value that was provided on create.
func (u *ResourceRunUpsertOne) UpdateDeployerType() *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.UpdateDeployerType()
	})
}

// SetDuration sets the "duration" field.
func (u *ResourceRunUpsertOne) SetDuration(v int) *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.SetDuration(v)
	})
}

// AddDuration adds v to the "duration" field.
func (u *ResourceRunUpsertOne) AddDuration(v int) *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.AddDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *ResourceRunUpsertOne) UpdateDuration() *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.UpdateDuration()
	})
}

// SetPreviousRequiredProviders sets the "previous_required_providers" field.
func (u *ResourceRunUpsertOne) SetPreviousRequiredProviders(v []types.ProviderRequirement) *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.SetPreviousRequiredProviders(v)
	})
}

// UpdatePreviousRequiredProviders sets the "previous_required_providers" field to the value that was provided on create.
func (u *ResourceRunUpsertOne) UpdatePreviousRequiredProviders() *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.UpdatePreviousRequiredProviders()
	})
}

// SetPlanRecord sets the "plan_record" field.
func (u *ResourceRunUpsertOne) SetPlanRecord(v string) *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.SetPlanRecord(v)
	})
}

// UpdatePlanRecord sets the "plan_record" field to the value that was provided on create.
func (u *ResourceRunUpsertOne) UpdatePlanRecord() *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.UpdatePlanRecord()
	})
}

// ClearPlanRecord clears the value of the "plan_record" field.
func (u *ResourceRunUpsertOne) ClearPlanRecord() *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.ClearPlanRecord()
	})
}

// SetRecord sets the "record" field.
func (u *ResourceRunUpsertOne) SetRecord(v string) *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.SetRecord(v)
	})
}

// UpdateRecord sets the "record" field to the value that was provided on create.
func (u *ResourceRunUpsertOne) UpdateRecord() *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.UpdateRecord()
	})
}

// ClearRecord clears the value of the "record" field.
func (u *ResourceRunUpsertOne) ClearRecord() *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.ClearRecord()
	})
}

// SetChangeComment sets the "change_comment" field.
func (u *ResourceRunUpsertOne) SetChangeComment(v string) *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.SetChangeComment(v)
	})
}

// UpdateChangeComment sets the "change_comment" field to the value that was provided on create.
func (u *ResourceRunUpsertOne) UpdateChangeComment() *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.UpdateChangeComment()
	})
}

// ClearChangeComment clears the value of the "change_comment" field.
func (u *ResourceRunUpsertOne) ClearChangeComment() *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.ClearChangeComment()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *ResourceRunUpsertOne) SetCreatedBy(v string) *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ResourceRunUpsertOne) UpdateCreatedBy() *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetType sets the "type" field.
func (u *ResourceRunUpsertOne) SetType(v string) *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ResourceRunUpsertOne) UpdateType() *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.UpdateType()
	})
}

// SetPreview sets the "preview" field.
func (u *ResourceRunUpsertOne) SetPreview(v bool) *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.SetPreview(v)
	})
}

// UpdatePreview sets the "preview" field to the value that was provided on create.
func (u *ResourceRunUpsertOne) UpdatePreview() *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.UpdatePreview()
	})
}

// SetAnnotations sets the "annotations" field.
func (u *ResourceRunUpsertOne) SetAnnotations(v map[string]string) *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.SetAnnotations(v)
	})
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *ResourceRunUpsertOne) UpdateAnnotations() *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.UpdateAnnotations()
	})
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *ResourceRunUpsertOne) ClearAnnotations() *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.ClearAnnotations()
	})
}

// SetLabels sets the "labels" field.
func (u *ResourceRunUpsertOne) SetLabels(v map[string]string) *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.SetLabels(v)
	})
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *ResourceRunUpsertOne) UpdateLabels() *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.UpdateLabels()
	})
}

// ClearLabels clears the value of the "labels" field.
func (u *ResourceRunUpsertOne) ClearLabels() *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.ClearLabels()
	})
}

// SetComponentChanges sets the "component_changes" field.
func (u *ResourceRunUpsertOne) SetComponentChanges(v []*types.ResourceComponentChange) *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.SetComponentChanges(v)
	})
}

// UpdateComponentChanges sets the "component_changes" field to the value that was provided on create.
func (u *ResourceRunUpsertOne) UpdateComponentChanges() *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.UpdateComponentChanges()
	})
}

// ClearComponentChanges clears the value of the "component_changes" field.
func (u *ResourceRunUpsertOne) ClearComponentChanges() *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.ClearComponentChanges()
	})
}

// SetComponentChangeSummary sets the "component_change_summary" field.
func (u *ResourceRunUpsertOne) SetComponentChangeSummary(v types.ResourceComponentChangeSummary) *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.SetComponentChangeSummary(v)
	})
}

// UpdateComponentChangeSummary sets the "component_change_summary" field to the value that was provided on create.
func (u *ResourceRunUpsertOne) UpdateComponentChangeSummary() *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.UpdateComponentChangeSummary()
	})
}

// ClearComponentChangeSummary clears the value of the "component_change_summary" field.
func (u *ResourceRunUpsertOne) ClearComponentChangeSummary() *ResourceRunUpsertOne {
	return u.Update(func(s *ResourceRunUpsert) {
		s.ClearComponentChangeSummary()
	})
}

// Exec executes the query.
func (u *ResourceRunUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for ResourceRunCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ResourceRunUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ResourceRunUpsertOne) ID(ctx context.Context) (id object.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("model: ResourceRunUpsertOne.ID is not supported by MySQL driver. Use ResourceRunUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ResourceRunUpsertOne) IDX(ctx context.Context) object.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ResourceRunCreateBulk is the builder for creating many ResourceRun entities in bulk.
type ResourceRunCreateBulk struct {
	config
	err        error
	builders   []*ResourceRunCreate
	conflict   []sql.ConflictOption
	objects    []*ResourceRun
	fromUpsert bool
}

// Save creates the ResourceRun entities in the database.
func (rrcb *ResourceRunCreateBulk) Save(ctx context.Context) ([]*ResourceRun, error) {
	if rrcb.err != nil {
		return nil, rrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rrcb.builders))
	nodes := make([]*ResourceRun, len(rrcb.builders))
	mutators := make([]Mutator, len(rrcb.builders))
	for i := range rrcb.builders {
		func(i int, root context.Context) {
			builder := rrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ResourceRunMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rrcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rrcb *ResourceRunCreateBulk) SaveX(ctx context.Context) []*ResourceRun {
	v, err := rrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rrcb *ResourceRunCreateBulk) Exec(ctx context.Context) error {
	_, err := rrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rrcb *ResourceRunCreateBulk) ExecX(ctx context.Context) {
	if err := rrcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ResourceRun.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ResourceRunUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (rrcb *ResourceRunCreateBulk) OnConflict(opts ...sql.ConflictOption) *ResourceRunUpsertBulk {
	rrcb.conflict = opts
	return &ResourceRunUpsertBulk{
		create: rrcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ResourceRun.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rrcb *ResourceRunCreateBulk) OnConflictColumns(columns ...string) *ResourceRunUpsertBulk {
	rrcb.conflict = append(rrcb.conflict, sql.ConflictColumns(columns...))
	return &ResourceRunUpsertBulk{
		create: rrcb,
	}
}

// ResourceRunUpsertBulk is the builder for "upsert"-ing
// a bulk of ResourceRun nodes.
type ResourceRunUpsertBulk struct {
	create *ResourceRunCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ResourceRun.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(resourcerun.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ResourceRunUpsertBulk) UpdateNewValues() *ResourceRunUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(resourcerun.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(resourcerun.FieldCreateTime)
			}
			if _, exists := b.mutation.ProjectID(); exists {
				s.SetIgnore(resourcerun.FieldProjectID)
			}
			if _, exists := b.mutation.EnvironmentID(); exists {
				s.SetIgnore(resourcerun.FieldEnvironmentID)
			}
			if _, exists := b.mutation.ResourceID(); exists {
				s.SetIgnore(resourcerun.FieldResourceID)
			}
			if _, exists := b.mutation.TemplateName(); exists {
				s.SetIgnore(resourcerun.FieldTemplateName)
			}
			if _, exists := b.mutation.TemplateID(); exists {
				s.SetIgnore(resourcerun.FieldTemplateID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ResourceRun.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ResourceRunUpsertBulk) Ignore() *ResourceRunUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ResourceRunUpsertBulk) DoNothing() *ResourceRunUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ResourceRunCreateBulk.OnConflict
// documentation for more info.
func (u *ResourceRunUpsertBulk) Update(set func(*ResourceRunUpsert)) *ResourceRunUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ResourceRunUpsert{UpdateSet: update})
	}))
	return u
}

// SetStatus sets the "status" field.
func (u *ResourceRunUpsertBulk) SetStatus(v status.Status) *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ResourceRunUpsertBulk) UpdateStatus() *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *ResourceRunUpsertBulk) ClearStatus() *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.ClearStatus()
	})
}

// SetTemplateVersion sets the "template_version" field.
func (u *ResourceRunUpsertBulk) SetTemplateVersion(v string) *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.SetTemplateVersion(v)
	})
}

// UpdateTemplateVersion sets the "template_version" field to the value that was provided on create.
func (u *ResourceRunUpsertBulk) UpdateTemplateVersion() *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.UpdateTemplateVersion()
	})
}

// SetAttributes sets the "attributes" field.
func (u *ResourceRunUpsertBulk) SetAttributes(v property.Values) *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.SetAttributes(v)
	})
}

// UpdateAttributes sets the "attributes" field to the value that was provided on create.
func (u *ResourceRunUpsertBulk) UpdateAttributes() *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.UpdateAttributes()
	})
}

// ClearAttributes clears the value of the "attributes" field.
func (u *ResourceRunUpsertBulk) ClearAttributes() *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.ClearAttributes()
	})
}

// SetComputedAttributes sets the "computed_attributes" field.
func (u *ResourceRunUpsertBulk) SetComputedAttributes(v property.Values) *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.SetComputedAttributes(v)
	})
}

// UpdateComputedAttributes sets the "computed_attributes" field to the value that was provided on create.
func (u *ResourceRunUpsertBulk) UpdateComputedAttributes() *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.UpdateComputedAttributes()
	})
}

// ClearComputedAttributes clears the value of the "computed_attributes" field.
func (u *ResourceRunUpsertBulk) ClearComputedAttributes() *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.ClearComputedAttributes()
	})
}

// SetVariables sets the "variables" field.
func (u *ResourceRunUpsertBulk) SetVariables(v crypto.Map[string, string]) *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.SetVariables(v)
	})
}

// UpdateVariables sets the "variables" field to the value that was provided on create.
func (u *ResourceRunUpsertBulk) UpdateVariables() *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.UpdateVariables()
	})
}

// SetInputConfigs sets the "input_configs" field.
func (u *ResourceRunUpsertBulk) SetInputConfigs(v map[string][]uint8) *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.SetInputConfigs(v)
	})
}

// UpdateInputConfigs sets the "input_configs" field to the value that was provided on create.
func (u *ResourceRunUpsertBulk) UpdateInputConfigs() *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.UpdateInputConfigs()
	})
}

// SetDeployerType sets the "deployer_type" field.
func (u *ResourceRunUpsertBulk) SetDeployerType(v string) *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.SetDeployerType(v)
	})
}

// UpdateDeployerType sets the "deployer_type" field to the value that was provided on create.
func (u *ResourceRunUpsertBulk) UpdateDeployerType() *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.UpdateDeployerType()
	})
}

// SetDuration sets the "duration" field.
func (u *ResourceRunUpsertBulk) SetDuration(v int) *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.SetDuration(v)
	})
}

// AddDuration adds v to the "duration" field.
func (u *ResourceRunUpsertBulk) AddDuration(v int) *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.AddDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *ResourceRunUpsertBulk) UpdateDuration() *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.UpdateDuration()
	})
}

// SetPreviousRequiredProviders sets the "previous_required_providers" field.
func (u *ResourceRunUpsertBulk) SetPreviousRequiredProviders(v []types.ProviderRequirement) *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.SetPreviousRequiredProviders(v)
	})
}

// UpdatePreviousRequiredProviders sets the "previous_required_providers" field to the value that was provided on create.
func (u *ResourceRunUpsertBulk) UpdatePreviousRequiredProviders() *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.UpdatePreviousRequiredProviders()
	})
}

// SetPlanRecord sets the "plan_record" field.
func (u *ResourceRunUpsertBulk) SetPlanRecord(v string) *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.SetPlanRecord(v)
	})
}

// UpdatePlanRecord sets the "plan_record" field to the value that was provided on create.
func (u *ResourceRunUpsertBulk) UpdatePlanRecord() *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.UpdatePlanRecord()
	})
}

// ClearPlanRecord clears the value of the "plan_record" field.
func (u *ResourceRunUpsertBulk) ClearPlanRecord() *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.ClearPlanRecord()
	})
}

// SetRecord sets the "record" field.
func (u *ResourceRunUpsertBulk) SetRecord(v string) *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.SetRecord(v)
	})
}

// UpdateRecord sets the "record" field to the value that was provided on create.
func (u *ResourceRunUpsertBulk) UpdateRecord() *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.UpdateRecord()
	})
}

// ClearRecord clears the value of the "record" field.
func (u *ResourceRunUpsertBulk) ClearRecord() *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.ClearRecord()
	})
}

// SetChangeComment sets the "change_comment" field.
func (u *ResourceRunUpsertBulk) SetChangeComment(v string) *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.SetChangeComment(v)
	})
}

// UpdateChangeComment sets the "change_comment" field to the value that was provided on create.
func (u *ResourceRunUpsertBulk) UpdateChangeComment() *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.UpdateChangeComment()
	})
}

// ClearChangeComment clears the value of the "change_comment" field.
func (u *ResourceRunUpsertBulk) ClearChangeComment() *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.ClearChangeComment()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *ResourceRunUpsertBulk) SetCreatedBy(v string) *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ResourceRunUpsertBulk) UpdateCreatedBy() *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetType sets the "type" field.
func (u *ResourceRunUpsertBulk) SetType(v string) *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ResourceRunUpsertBulk) UpdateType() *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.UpdateType()
	})
}

// SetPreview sets the "preview" field.
func (u *ResourceRunUpsertBulk) SetPreview(v bool) *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.SetPreview(v)
	})
}

// UpdatePreview sets the "preview" field to the value that was provided on create.
func (u *ResourceRunUpsertBulk) UpdatePreview() *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.UpdatePreview()
	})
}

// SetAnnotations sets the "annotations" field.
func (u *ResourceRunUpsertBulk) SetAnnotations(v map[string]string) *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.SetAnnotations(v)
	})
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *ResourceRunUpsertBulk) UpdateAnnotations() *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.UpdateAnnotations()
	})
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *ResourceRunUpsertBulk) ClearAnnotations() *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.ClearAnnotations()
	})
}

// SetLabels sets the "labels" field.
func (u *ResourceRunUpsertBulk) SetLabels(v map[string]string) *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.SetLabels(v)
	})
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *ResourceRunUpsertBulk) UpdateLabels() *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.UpdateLabels()
	})
}

// ClearLabels clears the value of the "labels" field.
func (u *ResourceRunUpsertBulk) ClearLabels() *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.ClearLabels()
	})
}

// SetComponentChanges sets the "component_changes" field.
func (u *ResourceRunUpsertBulk) SetComponentChanges(v []*types.ResourceComponentChange) *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.SetComponentChanges(v)
	})
}

// UpdateComponentChanges sets the "component_changes" field to the value that was provided on create.
func (u *ResourceRunUpsertBulk) UpdateComponentChanges() *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.UpdateComponentChanges()
	})
}

// ClearComponentChanges clears the value of the "component_changes" field.
func (u *ResourceRunUpsertBulk) ClearComponentChanges() *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.ClearComponentChanges()
	})
}

// SetComponentChangeSummary sets the "component_change_summary" field.
func (u *ResourceRunUpsertBulk) SetComponentChangeSummary(v types.ResourceComponentChangeSummary) *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.SetComponentChangeSummary(v)
	})
}

// UpdateComponentChangeSummary sets the "component_change_summary" field to the value that was provided on create.
func (u *ResourceRunUpsertBulk) UpdateComponentChangeSummary() *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.UpdateComponentChangeSummary()
	})
}

// ClearComponentChangeSummary clears the value of the "component_change_summary" field.
func (u *ResourceRunUpsertBulk) ClearComponentChangeSummary() *ResourceRunUpsertBulk {
	return u.Update(func(s *ResourceRunUpsert) {
		s.ClearComponentChangeSummary()
	})
}

// Exec executes the query.
func (u *ResourceRunUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model: OnConflict was set for builder %d. Set it on the ResourceRunCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for ResourceRunCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ResourceRunUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
