// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus". DO NOT EDIT.

package model

import (
	"context"
	stdsql "database/sql"
	"errors"
	"fmt"
	"reflect"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/seal-io/walrus/pkg/dao/model/internal"
	"github.com/seal-io/walrus/pkg/dao/model/predicate"
	"github.com/seal-io/walrus/pkg/dao/model/resource"
	"github.com/seal-io/walrus/pkg/dao/model/resourcedefinition"
	"github.com/seal-io/walrus/pkg/dao/model/resourcedefinitionmatchingrule"
	"github.com/seal-io/walrus/pkg/dao/types"
	"github.com/seal-io/walrus/pkg/dao/types/object"
)

// ResourceDefinitionUpdate is the builder for updating ResourceDefinition entities.
type ResourceDefinitionUpdate struct {
	config
	hooks     []Hook
	mutation  *ResourceDefinitionMutation
	modifiers []func(*sql.UpdateBuilder)
	object    *ResourceDefinition
}

// Where appends a list predicates to the ResourceDefinitionUpdate builder.
func (rdu *ResourceDefinitionUpdate) Where(ps ...predicate.ResourceDefinition) *ResourceDefinitionUpdate {
	rdu.mutation.Where(ps...)
	return rdu
}

// SetDescription sets the "description" field.
func (rdu *ResourceDefinitionUpdate) SetDescription(s string) *ResourceDefinitionUpdate {
	rdu.mutation.SetDescription(s)
	return rdu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rdu *ResourceDefinitionUpdate) SetNillableDescription(s *string) *ResourceDefinitionUpdate {
	if s != nil {
		rdu.SetDescription(*s)
	}
	return rdu
}

// ClearDescription clears the value of the "description" field.
func (rdu *ResourceDefinitionUpdate) ClearDescription() *ResourceDefinitionUpdate {
	rdu.mutation.ClearDescription()
	return rdu
}

// SetLabels sets the "labels" field.
func (rdu *ResourceDefinitionUpdate) SetLabels(m map[string]string) *ResourceDefinitionUpdate {
	rdu.mutation.SetLabels(m)
	return rdu
}

// ClearLabels clears the value of the "labels" field.
func (rdu *ResourceDefinitionUpdate) ClearLabels() *ResourceDefinitionUpdate {
	rdu.mutation.ClearLabels()
	return rdu
}

// SetAnnotations sets the "annotations" field.
func (rdu *ResourceDefinitionUpdate) SetAnnotations(m map[string]string) *ResourceDefinitionUpdate {
	rdu.mutation.SetAnnotations(m)
	return rdu
}

// ClearAnnotations clears the value of the "annotations" field.
func (rdu *ResourceDefinitionUpdate) ClearAnnotations() *ResourceDefinitionUpdate {
	rdu.mutation.ClearAnnotations()
	return rdu
}

// SetUpdateTime sets the "update_time" field.
func (rdu *ResourceDefinitionUpdate) SetUpdateTime(t time.Time) *ResourceDefinitionUpdate {
	rdu.mutation.SetUpdateTime(t)
	return rdu
}

// SetSchema sets the "schema" field.
func (rdu *ResourceDefinitionUpdate) SetSchema(t types.Schema) *ResourceDefinitionUpdate {
	rdu.mutation.SetSchema(t)
	return rdu
}

// SetNillableSchema sets the "schema" field if the given value is not nil.
func (rdu *ResourceDefinitionUpdate) SetNillableSchema(t *types.Schema) *ResourceDefinitionUpdate {
	if t != nil {
		rdu.SetSchema(*t)
	}
	return rdu
}

// SetUiSchema sets the "uiSchema" field.
func (rdu *ResourceDefinitionUpdate) SetUiSchema(ts *types.UISchema) *ResourceDefinitionUpdate {
	rdu.mutation.SetUiSchema(ts)
	return rdu
}

// ClearUiSchema clears the value of the "uiSchema" field.
func (rdu *ResourceDefinitionUpdate) ClearUiSchema() *ResourceDefinitionUpdate {
	rdu.mutation.ClearUiSchema()
	return rdu
}

// AddMatchingRuleIDs adds the "matching_rules" edge to the ResourceDefinitionMatchingRule entity by IDs.
func (rdu *ResourceDefinitionUpdate) AddMatchingRuleIDs(ids ...object.ID) *ResourceDefinitionUpdate {
	rdu.mutation.AddMatchingRuleIDs(ids...)
	return rdu
}

// AddMatchingRules adds the "matching_rules" edges to the ResourceDefinitionMatchingRule entity.
func (rdu *ResourceDefinitionUpdate) AddMatchingRules(r ...*ResourceDefinitionMatchingRule) *ResourceDefinitionUpdate {
	ids := make([]object.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdu.AddMatchingRuleIDs(ids...)
}

// AddResourceIDs adds the "resources" edge to the Resource entity by IDs.
func (rdu *ResourceDefinitionUpdate) AddResourceIDs(ids ...object.ID) *ResourceDefinitionUpdate {
	rdu.mutation.AddResourceIDs(ids...)
	return rdu
}

// AddResources adds the "resources" edges to the Resource entity.
func (rdu *ResourceDefinitionUpdate) AddResources(r ...*Resource) *ResourceDefinitionUpdate {
	ids := make([]object.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdu.AddResourceIDs(ids...)
}

// Mutation returns the ResourceDefinitionMutation object of the builder.
func (rdu *ResourceDefinitionUpdate) Mutation() *ResourceDefinitionMutation {
	return rdu.mutation
}

// ClearMatchingRules clears all "matching_rules" edges to the ResourceDefinitionMatchingRule entity.
func (rdu *ResourceDefinitionUpdate) ClearMatchingRules() *ResourceDefinitionUpdate {
	rdu.mutation.ClearMatchingRules()
	return rdu
}

// RemoveMatchingRuleIDs removes the "matching_rules" edge to ResourceDefinitionMatchingRule entities by IDs.
func (rdu *ResourceDefinitionUpdate) RemoveMatchingRuleIDs(ids ...object.ID) *ResourceDefinitionUpdate {
	rdu.mutation.RemoveMatchingRuleIDs(ids...)
	return rdu
}

// RemoveMatchingRules removes "matching_rules" edges to ResourceDefinitionMatchingRule entities.
func (rdu *ResourceDefinitionUpdate) RemoveMatchingRules(r ...*ResourceDefinitionMatchingRule) *ResourceDefinitionUpdate {
	ids := make([]object.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdu.RemoveMatchingRuleIDs(ids...)
}

// ClearResources clears all "resources" edges to the Resource entity.
func (rdu *ResourceDefinitionUpdate) ClearResources() *ResourceDefinitionUpdate {
	rdu.mutation.ClearResources()
	return rdu
}

// RemoveResourceIDs removes the "resources" edge to Resource entities by IDs.
func (rdu *ResourceDefinitionUpdate) RemoveResourceIDs(ids ...object.ID) *ResourceDefinitionUpdate {
	rdu.mutation.RemoveResourceIDs(ids...)
	return rdu
}

// RemoveResources removes "resources" edges to Resource entities.
func (rdu *ResourceDefinitionUpdate) RemoveResources(r ...*Resource) *ResourceDefinitionUpdate {
	ids := make([]object.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdu.RemoveResourceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rdu *ResourceDefinitionUpdate) Save(ctx context.Context) (int, error) {
	if err := rdu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, rdu.sqlSave, rdu.mutation, rdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rdu *ResourceDefinitionUpdate) SaveX(ctx context.Context) int {
	affected, err := rdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rdu *ResourceDefinitionUpdate) Exec(ctx context.Context) error {
	_, err := rdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rdu *ResourceDefinitionUpdate) ExecX(ctx context.Context) {
	if err := rdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rdu *ResourceDefinitionUpdate) defaults() error {
	if _, ok := rdu.mutation.UpdateTime(); !ok {
		if resourcedefinition.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("model: uninitialized resourcedefinition.UpdateDefaultUpdateTime (forgotten import model/runtime?)")
		}
		v := resourcedefinition.UpdateDefaultUpdateTime()
		rdu.mutation.SetUpdateTime(v)
	}
	return nil
}

// Set is different from other Set* methods,
// it sets the value by judging the definition of each field within the entire object.
//
// For default fields, Set calls if the value is not zero.
//
// For no default but required fields, Set calls directly.
//
// For no default but optional fields, Set calls if the value is not zero,
// or clears if the value is zero.
//
// For example:
//
//	## Without Default
//
//	### Required
//
//	db.SetX(obj.X)
//
//	### Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	} else {
//	   db.ClearX()
//	}
//
//	## With Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (rdu *ResourceDefinitionUpdate) Set(obj *ResourceDefinition) *ResourceDefinitionUpdate {
	// Without Default.
	if obj.Description != "" {
		rdu.SetDescription(obj.Description)
	} else {
		rdu.ClearDescription()
	}
	if !reflect.ValueOf(obj.Labels).IsZero() {
		rdu.SetLabels(obj.Labels)
	}
	if !reflect.ValueOf(obj.Annotations).IsZero() {
		rdu.SetAnnotations(obj.Annotations)
	}
	rdu.SetSchema(obj.Schema)
	if !reflect.ValueOf(obj.UiSchema).IsZero() {
		rdu.SetUiSchema(obj.UiSchema)
	}

	// With Default.
	if obj.UpdateTime != nil {
		rdu.SetUpdateTime(*obj.UpdateTime)
	}

	// Record the given object.
	rdu.object = obj

	return rdu
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rdu *ResourceDefinitionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ResourceDefinitionUpdate {
	rdu.modifiers = append(rdu.modifiers, modifiers...)
	return rdu
}

func (rdu *ResourceDefinitionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(resourcedefinition.Table, resourcedefinition.Columns, sqlgraph.NewFieldSpec(resourcedefinition.FieldID, field.TypeString))
	if ps := rdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rdu.mutation.Description(); ok {
		_spec.SetField(resourcedefinition.FieldDescription, field.TypeString, value)
	}
	if rdu.mutation.DescriptionCleared() {
		_spec.ClearField(resourcedefinition.FieldDescription, field.TypeString)
	}
	if value, ok := rdu.mutation.Labels(); ok {
		_spec.SetField(resourcedefinition.FieldLabels, field.TypeJSON, value)
	}
	if rdu.mutation.LabelsCleared() {
		_spec.ClearField(resourcedefinition.FieldLabels, field.TypeJSON)
	}
	if value, ok := rdu.mutation.Annotations(); ok {
		_spec.SetField(resourcedefinition.FieldAnnotations, field.TypeJSON, value)
	}
	if rdu.mutation.AnnotationsCleared() {
		_spec.ClearField(resourcedefinition.FieldAnnotations, field.TypeJSON)
	}
	if value, ok := rdu.mutation.UpdateTime(); ok {
		_spec.SetField(resourcedefinition.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := rdu.mutation.Schema(); ok {
		_spec.SetField(resourcedefinition.FieldSchema, field.TypeJSON, value)
	}
	if value, ok := rdu.mutation.UiSchema(); ok {
		_spec.SetField(resourcedefinition.FieldUiSchema, field.TypeJSON, value)
	}
	if rdu.mutation.UiSchemaCleared() {
		_spec.ClearField(resourcedefinition.FieldUiSchema, field.TypeJSON)
	}
	if rdu.mutation.MatchingRulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   resourcedefinition.MatchingRulesTable,
			Columns: []string{resourcedefinition.MatchingRulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourcedefinitionmatchingrule.FieldID, field.TypeString),
			},
		}
		edge.Schema = rdu.schemaConfig.ResourceDefinitionMatchingRule
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdu.mutation.RemovedMatchingRulesIDs(); len(nodes) > 0 && !rdu.mutation.MatchingRulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   resourcedefinition.MatchingRulesTable,
			Columns: []string{resourcedefinition.MatchingRulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourcedefinitionmatchingrule.FieldID, field.TypeString),
			},
		}
		edge.Schema = rdu.schemaConfig.ResourceDefinitionMatchingRule
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdu.mutation.MatchingRulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   resourcedefinition.MatchingRulesTable,
			Columns: []string{resourcedefinition.MatchingRulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourcedefinitionmatchingrule.FieldID, field.TypeString),
			},
		}
		edge.Schema = rdu.schemaConfig.ResourceDefinitionMatchingRule
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rdu.mutation.ResourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcedefinition.ResourcesTable,
			Columns: []string{resourcedefinition.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeString),
			},
		}
		edge.Schema = rdu.schemaConfig.Resource
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdu.mutation.RemovedResourcesIDs(); len(nodes) > 0 && !rdu.mutation.ResourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcedefinition.ResourcesTable,
			Columns: []string{resourcedefinition.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeString),
			},
		}
		edge.Schema = rdu.schemaConfig.Resource
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdu.mutation.ResourcesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcedefinition.ResourcesTable,
			Columns: []string{resourcedefinition.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeString),
			},
		}
		edge.Schema = rdu.schemaConfig.Resource
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = rdu.schemaConfig.ResourceDefinition
	ctx = internal.NewSchemaConfigContext(ctx, rdu.schemaConfig)
	_spec.AddModifiers(rdu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, rdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resourcedefinition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rdu.mutation.done = true
	return n, nil
}

// ResourceDefinitionUpdateOne is the builder for updating a single ResourceDefinition entity.
type ResourceDefinitionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ResourceDefinitionMutation
	modifiers []func(*sql.UpdateBuilder)
	object    *ResourceDefinition
}

// SetDescription sets the "description" field.
func (rduo *ResourceDefinitionUpdateOne) SetDescription(s string) *ResourceDefinitionUpdateOne {
	rduo.mutation.SetDescription(s)
	return rduo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rduo *ResourceDefinitionUpdateOne) SetNillableDescription(s *string) *ResourceDefinitionUpdateOne {
	if s != nil {
		rduo.SetDescription(*s)
	}
	return rduo
}

// ClearDescription clears the value of the "description" field.
func (rduo *ResourceDefinitionUpdateOne) ClearDescription() *ResourceDefinitionUpdateOne {
	rduo.mutation.ClearDescription()
	return rduo
}

// SetLabels sets the "labels" field.
func (rduo *ResourceDefinitionUpdateOne) SetLabels(m map[string]string) *ResourceDefinitionUpdateOne {
	rduo.mutation.SetLabels(m)
	return rduo
}

// ClearLabels clears the value of the "labels" field.
func (rduo *ResourceDefinitionUpdateOne) ClearLabels() *ResourceDefinitionUpdateOne {
	rduo.mutation.ClearLabels()
	return rduo
}

// SetAnnotations sets the "annotations" field.
func (rduo *ResourceDefinitionUpdateOne) SetAnnotations(m map[string]string) *ResourceDefinitionUpdateOne {
	rduo.mutation.SetAnnotations(m)
	return rduo
}

// ClearAnnotations clears the value of the "annotations" field.
func (rduo *ResourceDefinitionUpdateOne) ClearAnnotations() *ResourceDefinitionUpdateOne {
	rduo.mutation.ClearAnnotations()
	return rduo
}

// SetUpdateTime sets the "update_time" field.
func (rduo *ResourceDefinitionUpdateOne) SetUpdateTime(t time.Time) *ResourceDefinitionUpdateOne {
	rduo.mutation.SetUpdateTime(t)
	return rduo
}

// SetSchema sets the "schema" field.
func (rduo *ResourceDefinitionUpdateOne) SetSchema(t types.Schema) *ResourceDefinitionUpdateOne {
	rduo.mutation.SetSchema(t)
	return rduo
}

// SetNillableSchema sets the "schema" field if the given value is not nil.
func (rduo *ResourceDefinitionUpdateOne) SetNillableSchema(t *types.Schema) *ResourceDefinitionUpdateOne {
	if t != nil {
		rduo.SetSchema(*t)
	}
	return rduo
}

// SetUiSchema sets the "uiSchema" field.
func (rduo *ResourceDefinitionUpdateOne) SetUiSchema(ts *types.UISchema) *ResourceDefinitionUpdateOne {
	rduo.mutation.SetUiSchema(ts)
	return rduo
}

// ClearUiSchema clears the value of the "uiSchema" field.
func (rduo *ResourceDefinitionUpdateOne) ClearUiSchema() *ResourceDefinitionUpdateOne {
	rduo.mutation.ClearUiSchema()
	return rduo
}

// AddMatchingRuleIDs adds the "matching_rules" edge to the ResourceDefinitionMatchingRule entity by IDs.
func (rduo *ResourceDefinitionUpdateOne) AddMatchingRuleIDs(ids ...object.ID) *ResourceDefinitionUpdateOne {
	rduo.mutation.AddMatchingRuleIDs(ids...)
	return rduo
}

// AddMatchingRules adds the "matching_rules" edges to the ResourceDefinitionMatchingRule entity.
func (rduo *ResourceDefinitionUpdateOne) AddMatchingRules(r ...*ResourceDefinitionMatchingRule) *ResourceDefinitionUpdateOne {
	ids := make([]object.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rduo.AddMatchingRuleIDs(ids...)
}

// AddResourceIDs adds the "resources" edge to the Resource entity by IDs.
func (rduo *ResourceDefinitionUpdateOne) AddResourceIDs(ids ...object.ID) *ResourceDefinitionUpdateOne {
	rduo.mutation.AddResourceIDs(ids...)
	return rduo
}

// AddResources adds the "resources" edges to the Resource entity.
func (rduo *ResourceDefinitionUpdateOne) AddResources(r ...*Resource) *ResourceDefinitionUpdateOne {
	ids := make([]object.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rduo.AddResourceIDs(ids...)
}

// Mutation returns the ResourceDefinitionMutation object of the builder.
func (rduo *ResourceDefinitionUpdateOne) Mutation() *ResourceDefinitionMutation {
	return rduo.mutation
}

// ClearMatchingRules clears all "matching_rules" edges to the ResourceDefinitionMatchingRule entity.
func (rduo *ResourceDefinitionUpdateOne) ClearMatchingRules() *ResourceDefinitionUpdateOne {
	rduo.mutation.ClearMatchingRules()
	return rduo
}

// RemoveMatchingRuleIDs removes the "matching_rules" edge to ResourceDefinitionMatchingRule entities by IDs.
func (rduo *ResourceDefinitionUpdateOne) RemoveMatchingRuleIDs(ids ...object.ID) *ResourceDefinitionUpdateOne {
	rduo.mutation.RemoveMatchingRuleIDs(ids...)
	return rduo
}

// RemoveMatchingRules removes "matching_rules" edges to ResourceDefinitionMatchingRule entities.
func (rduo *ResourceDefinitionUpdateOne) RemoveMatchingRules(r ...*ResourceDefinitionMatchingRule) *ResourceDefinitionUpdateOne {
	ids := make([]object.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rduo.RemoveMatchingRuleIDs(ids...)
}

// ClearResources clears all "resources" edges to the Resource entity.
func (rduo *ResourceDefinitionUpdateOne) ClearResources() *ResourceDefinitionUpdateOne {
	rduo.mutation.ClearResources()
	return rduo
}

// RemoveResourceIDs removes the "resources" edge to Resource entities by IDs.
func (rduo *ResourceDefinitionUpdateOne) RemoveResourceIDs(ids ...object.ID) *ResourceDefinitionUpdateOne {
	rduo.mutation.RemoveResourceIDs(ids...)
	return rduo
}

// RemoveResources removes "resources" edges to Resource entities.
func (rduo *ResourceDefinitionUpdateOne) RemoveResources(r ...*Resource) *ResourceDefinitionUpdateOne {
	ids := make([]object.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rduo.RemoveResourceIDs(ids...)
}

// Where appends a list predicates to the ResourceDefinitionUpdate builder.
func (rduo *ResourceDefinitionUpdateOne) Where(ps ...predicate.ResourceDefinition) *ResourceDefinitionUpdateOne {
	rduo.mutation.Where(ps...)
	return rduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rduo *ResourceDefinitionUpdateOne) Select(field string, fields ...string) *ResourceDefinitionUpdateOne {
	rduo.fields = append([]string{field}, fields...)
	return rduo
}

// Save executes the query and returns the updated ResourceDefinition entity.
func (rduo *ResourceDefinitionUpdateOne) Save(ctx context.Context) (*ResourceDefinition, error) {
	if err := rduo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rduo.sqlSave, rduo.mutation, rduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rduo *ResourceDefinitionUpdateOne) SaveX(ctx context.Context) *ResourceDefinition {
	node, err := rduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rduo *ResourceDefinitionUpdateOne) Exec(ctx context.Context) error {
	_, err := rduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rduo *ResourceDefinitionUpdateOne) ExecX(ctx context.Context) {
	if err := rduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rduo *ResourceDefinitionUpdateOne) defaults() error {
	if _, ok := rduo.mutation.UpdateTime(); !ok {
		if resourcedefinition.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("model: uninitialized resourcedefinition.UpdateDefaultUpdateTime (forgotten import model/runtime?)")
		}
		v := resourcedefinition.UpdateDefaultUpdateTime()
		rduo.mutation.SetUpdateTime(v)
	}
	return nil
}

// Set is different from other Set* methods,
// it sets the value by judging the definition of each field within the entire object.
//
// For default fields, Set calls if the value changes from the original.
//
// For no default but required fields, Set calls if the value changes from the original.
//
// For no default but optional fields, Set calls if the value changes from the original,
// or clears if changes to zero.
//
// For example:
//
//	## Without Default
//
//	### Required
//
//	db.SetX(obj.X)
//
//	### Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   if _is_not_equal_(db.X, obj.X) {
//	      db.SetX(obj.X)
//	   }
//	} else {
//	   db.ClearX()
//	}
//
//	## With Default
//
//	if _is_zero_value_(obj.X) && _is_not_equal_(db.X, obj.X) {
//	   db.SetX(obj.X)
//	}
func (rduo *ResourceDefinitionUpdateOne) Set(obj *ResourceDefinition) *ResourceDefinitionUpdateOne {
	h := func(n ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			mt := m.(*ResourceDefinitionMutation)
			db, err := mt.Client().ResourceDefinition.Get(ctx, *mt.id)
			if err != nil {
				return nil, fmt.Errorf("failed getting ResourceDefinition with id: %v", *mt.id)
			}

			// Without Default.
			if obj.Description != "" {
				if db.Description != obj.Description {
					rduo.SetDescription(obj.Description)
				}
			} else {
				rduo.ClearDescription()
			}
			if !reflect.ValueOf(obj.Labels).IsZero() {
				if !reflect.DeepEqual(db.Labels, obj.Labels) {
					rduo.SetLabels(obj.Labels)
				}
			}
			if !reflect.ValueOf(obj.Annotations).IsZero() {
				if !reflect.DeepEqual(db.Annotations, obj.Annotations) {
					rduo.SetAnnotations(obj.Annotations)
				}
			}
			if !reflect.DeepEqual(db.Schema, obj.Schema) {
				rduo.SetSchema(obj.Schema)
			}
			if !reflect.ValueOf(obj.UiSchema).IsZero() {
				if !reflect.DeepEqual(db.UiSchema, obj.UiSchema) {
					rduo.SetUiSchema(obj.UiSchema)
				}
			}

			// With Default.
			if (obj.UpdateTime != nil) && (!reflect.DeepEqual(db.UpdateTime, obj.UpdateTime)) {
				rduo.SetUpdateTime(*obj.UpdateTime)
			}

			// Record the given object.
			rduo.object = obj

			return n.Mutate(ctx, m)
		})
	}

	rduo.hooks = append(rduo.hooks, h)

	return rduo
}

// getClientSet returns the ClientSet for the given builder.
func (rduo *ResourceDefinitionUpdateOne) getClientSet() (mc ClientSet) {
	if _, ok := rduo.config.driver.(*txDriver); ok {
		tx := &Tx{config: rduo.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: rduo.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after updated the ResourceDefinition entity,
// which is always good for cascading update operations.
func (rduo *ResourceDefinitionUpdateOne) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *ResourceDefinition) error) (*ResourceDefinition, error) {
	obj, err := rduo.Save(ctx)
	if err != nil &&
		(rduo.object == nil || !errors.Is(err, stdsql.ErrNoRows)) {
		return nil, err
	}

	if len(cbs) == 0 {
		return obj, err
	}

	mc := rduo.getClientSet()

	if obj == nil {
		obj = rduo.object
	} else if x := rduo.object; x != nil {
		if _, set := rduo.mutation.Field(resourcedefinition.FieldDescription); set {
			obj.Description = x.Description
		}
		if _, set := rduo.mutation.Field(resourcedefinition.FieldLabels); set {
			obj.Labels = x.Labels
		}
		if _, set := rduo.mutation.Field(resourcedefinition.FieldAnnotations); set {
			obj.Annotations = x.Annotations
		}
		if _, set := rduo.mutation.Field(resourcedefinition.FieldSchema); set {
			obj.Schema = x.Schema
		}
		if _, set := rduo.mutation.Field(resourcedefinition.FieldUiSchema); set {
			obj.UiSchema = x.UiSchema
		}
		obj.Edges = x.Edges
	}

	for i := range cbs {
		if err = cbs[i](ctx, mc, obj); err != nil {
			return nil, err
		}
	}

	return obj, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (rduo *ResourceDefinitionUpdateOne) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *ResourceDefinition) error) *ResourceDefinition {
	obj, err := rduo.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return obj
}

// ExecE calls the given function after executed the query,
// which is always good for cascading update operations.
func (rduo *ResourceDefinitionUpdateOne) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *ResourceDefinition) error) error {
	_, err := rduo.SaveE(ctx, cbs...)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rduo *ResourceDefinitionUpdateOne) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *ResourceDefinition) error) {
	if err := rduo.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rduo *ResourceDefinitionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ResourceDefinitionUpdateOne {
	rduo.modifiers = append(rduo.modifiers, modifiers...)
	return rduo
}

func (rduo *ResourceDefinitionUpdateOne) sqlSave(ctx context.Context) (_node *ResourceDefinition, err error) {
	_spec := sqlgraph.NewUpdateSpec(resourcedefinition.Table, resourcedefinition.Columns, sqlgraph.NewFieldSpec(resourcedefinition.FieldID, field.TypeString))
	id, ok := rduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`model: missing "ResourceDefinition.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, resourcedefinition.FieldID)
		for _, f := range fields {
			if !resourcedefinition.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
			}
			if f != resourcedefinition.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rduo.mutation.Description(); ok {
		_spec.SetField(resourcedefinition.FieldDescription, field.TypeString, value)
	}
	if rduo.mutation.DescriptionCleared() {
		_spec.ClearField(resourcedefinition.FieldDescription, field.TypeString)
	}
	if value, ok := rduo.mutation.Labels(); ok {
		_spec.SetField(resourcedefinition.FieldLabels, field.TypeJSON, value)
	}
	if rduo.mutation.LabelsCleared() {
		_spec.ClearField(resourcedefinition.FieldLabels, field.TypeJSON)
	}
	if value, ok := rduo.mutation.Annotations(); ok {
		_spec.SetField(resourcedefinition.FieldAnnotations, field.TypeJSON, value)
	}
	if rduo.mutation.AnnotationsCleared() {
		_spec.ClearField(resourcedefinition.FieldAnnotations, field.TypeJSON)
	}
	if value, ok := rduo.mutation.UpdateTime(); ok {
		_spec.SetField(resourcedefinition.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := rduo.mutation.Schema(); ok {
		_spec.SetField(resourcedefinition.FieldSchema, field.TypeJSON, value)
	}
	if value, ok := rduo.mutation.UiSchema(); ok {
		_spec.SetField(resourcedefinition.FieldUiSchema, field.TypeJSON, value)
	}
	if rduo.mutation.UiSchemaCleared() {
		_spec.ClearField(resourcedefinition.FieldUiSchema, field.TypeJSON)
	}
	if rduo.mutation.MatchingRulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   resourcedefinition.MatchingRulesTable,
			Columns: []string{resourcedefinition.MatchingRulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourcedefinitionmatchingrule.FieldID, field.TypeString),
			},
		}
		edge.Schema = rduo.schemaConfig.ResourceDefinitionMatchingRule
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rduo.mutation.RemovedMatchingRulesIDs(); len(nodes) > 0 && !rduo.mutation.MatchingRulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   resourcedefinition.MatchingRulesTable,
			Columns: []string{resourcedefinition.MatchingRulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourcedefinitionmatchingrule.FieldID, field.TypeString),
			},
		}
		edge.Schema = rduo.schemaConfig.ResourceDefinitionMatchingRule
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rduo.mutation.MatchingRulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   resourcedefinition.MatchingRulesTable,
			Columns: []string{resourcedefinition.MatchingRulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourcedefinitionmatchingrule.FieldID, field.TypeString),
			},
		}
		edge.Schema = rduo.schemaConfig.ResourceDefinitionMatchingRule
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rduo.mutation.ResourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcedefinition.ResourcesTable,
			Columns: []string{resourcedefinition.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeString),
			},
		}
		edge.Schema = rduo.schemaConfig.Resource
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rduo.mutation.RemovedResourcesIDs(); len(nodes) > 0 && !rduo.mutation.ResourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcedefinition.ResourcesTable,
			Columns: []string{resourcedefinition.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeString),
			},
		}
		edge.Schema = rduo.schemaConfig.Resource
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rduo.mutation.ResourcesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcedefinition.ResourcesTable,
			Columns: []string{resourcedefinition.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeString),
			},
		}
		edge.Schema = rduo.schemaConfig.Resource
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = rduo.schemaConfig.ResourceDefinition
	ctx = internal.NewSchemaConfigContext(ctx, rduo.schemaConfig)
	_spec.AddModifiers(rduo.modifiers...)
	_node = &ResourceDefinition{config: rduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resourcedefinition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rduo.mutation.done = true
	return _node, nil
}
