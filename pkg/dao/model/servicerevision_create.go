// SPDX-FileCopyrightText: 2023 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus". DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/seal-io/walrus/pkg/dao/model/environment"
	"github.com/seal-io/walrus/pkg/dao/model/project"
	"github.com/seal-io/walrus/pkg/dao/model/service"
	"github.com/seal-io/walrus/pkg/dao/model/servicerevision"
	"github.com/seal-io/walrus/pkg/dao/types"
	"github.com/seal-io/walrus/pkg/dao/types/crypto"
	"github.com/seal-io/walrus/pkg/dao/types/object"
	"github.com/seal-io/walrus/pkg/dao/types/property"
	"github.com/seal-io/walrus/pkg/dao/types/status"
)

// ServiceRevisionCreate is the builder for creating a ServiceRevision entity.
type ServiceRevisionCreate struct {
	config
	mutation   *ServiceRevisionMutation
	hooks      []Hook
	conflict   []sql.ConflictOption
	object     *ServiceRevision
	fromUpsert bool
}

// SetCreateTime sets the "create_time" field.
func (src *ServiceRevisionCreate) SetCreateTime(t time.Time) *ServiceRevisionCreate {
	src.mutation.SetCreateTime(t)
	return src
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (src *ServiceRevisionCreate) SetNillableCreateTime(t *time.Time) *ServiceRevisionCreate {
	if t != nil {
		src.SetCreateTime(*t)
	}
	return src
}

// SetStatus sets the "status" field.
func (src *ServiceRevisionCreate) SetStatus(s status.Status) *ServiceRevisionCreate {
	src.mutation.SetStatus(s)
	return src
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (src *ServiceRevisionCreate) SetNillableStatus(s *status.Status) *ServiceRevisionCreate {
	if s != nil {
		src.SetStatus(*s)
	}
	return src
}

// SetProjectID sets the "project_id" field.
func (src *ServiceRevisionCreate) SetProjectID(o object.ID) *ServiceRevisionCreate {
	src.mutation.SetProjectID(o)
	return src
}

// SetEnvironmentID sets the "environment_id" field.
func (src *ServiceRevisionCreate) SetEnvironmentID(o object.ID) *ServiceRevisionCreate {
	src.mutation.SetEnvironmentID(o)
	return src
}

// SetServiceID sets the "service_id" field.
func (src *ServiceRevisionCreate) SetServiceID(o object.ID) *ServiceRevisionCreate {
	src.mutation.SetServiceID(o)
	return src
}

// SetTemplateName sets the "template_name" field.
func (src *ServiceRevisionCreate) SetTemplateName(s string) *ServiceRevisionCreate {
	src.mutation.SetTemplateName(s)
	return src
}

// SetTemplateVersion sets the "template_version" field.
func (src *ServiceRevisionCreate) SetTemplateVersion(s string) *ServiceRevisionCreate {
	src.mutation.SetTemplateVersion(s)
	return src
}

// SetAttributes sets the "attributes" field.
func (src *ServiceRevisionCreate) SetAttributes(pr property.Values) *ServiceRevisionCreate {
	src.mutation.SetAttributes(pr)
	return src
}

// SetVariables sets the "variables" field.
func (src *ServiceRevisionCreate) SetVariables(c crypto.Map[string, string]) *ServiceRevisionCreate {
	src.mutation.SetVariables(c)
	return src
}

// SetInputPlan sets the "input_plan" field.
func (src *ServiceRevisionCreate) SetInputPlan(s string) *ServiceRevisionCreate {
	src.mutation.SetInputPlan(s)
	return src
}

// SetOutput sets the "output" field.
func (src *ServiceRevisionCreate) SetOutput(s string) *ServiceRevisionCreate {
	src.mutation.SetOutput(s)
	return src
}

// SetDeployerType sets the "deployer_type" field.
func (src *ServiceRevisionCreate) SetDeployerType(s string) *ServiceRevisionCreate {
	src.mutation.SetDeployerType(s)
	return src
}

// SetNillableDeployerType sets the "deployer_type" field if the given value is not nil.
func (src *ServiceRevisionCreate) SetNillableDeployerType(s *string) *ServiceRevisionCreate {
	if s != nil {
		src.SetDeployerType(*s)
	}
	return src
}

// SetDuration sets the "duration" field.
func (src *ServiceRevisionCreate) SetDuration(i int) *ServiceRevisionCreate {
	src.mutation.SetDuration(i)
	return src
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (src *ServiceRevisionCreate) SetNillableDuration(i *int) *ServiceRevisionCreate {
	if i != nil {
		src.SetDuration(*i)
	}
	return src
}

// SetPreviousRequiredProviders sets the "previous_required_providers" field.
func (src *ServiceRevisionCreate) SetPreviousRequiredProviders(tr []types.ProviderRequirement) *ServiceRevisionCreate {
	src.mutation.SetPreviousRequiredProviders(tr)
	return src
}

// SetRecord sets the "record" field.
func (src *ServiceRevisionCreate) SetRecord(s string) *ServiceRevisionCreate {
	src.mutation.SetRecord(s)
	return src
}

// SetNillableRecord sets the "record" field if the given value is not nil.
func (src *ServiceRevisionCreate) SetNillableRecord(s *string) *ServiceRevisionCreate {
	if s != nil {
		src.SetRecord(*s)
	}
	return src
}

// SetID sets the "id" field.
func (src *ServiceRevisionCreate) SetID(o object.ID) *ServiceRevisionCreate {
	src.mutation.SetID(o)
	return src
}

// SetProject sets the "project" edge to the Project entity.
func (src *ServiceRevisionCreate) SetProject(p *Project) *ServiceRevisionCreate {
	return src.SetProjectID(p.ID)
}

// SetEnvironment sets the "environment" edge to the Environment entity.
func (src *ServiceRevisionCreate) SetEnvironment(e *Environment) *ServiceRevisionCreate {
	return src.SetEnvironmentID(e.ID)
}

// SetService sets the "service" edge to the Service entity.
func (src *ServiceRevisionCreate) SetService(s *Service) *ServiceRevisionCreate {
	return src.SetServiceID(s.ID)
}

// Mutation returns the ServiceRevisionMutation object of the builder.
func (src *ServiceRevisionCreate) Mutation() *ServiceRevisionMutation {
	return src.mutation
}

// Save creates the ServiceRevision in the database.
func (src *ServiceRevisionCreate) Save(ctx context.Context) (*ServiceRevision, error) {
	if err := src.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, src.sqlSave, src.mutation, src.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (src *ServiceRevisionCreate) SaveX(ctx context.Context) *ServiceRevision {
	v, err := src.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (src *ServiceRevisionCreate) Exec(ctx context.Context) error {
	_, err := src.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (src *ServiceRevisionCreate) ExecX(ctx context.Context) {
	if err := src.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (src *ServiceRevisionCreate) defaults() error {
	if _, ok := src.mutation.CreateTime(); !ok {
		if servicerevision.DefaultCreateTime == nil {
			return fmt.Errorf("model: uninitialized servicerevision.DefaultCreateTime (forgotten import model/runtime?)")
		}
		v := servicerevision.DefaultCreateTime()
		src.mutation.SetCreateTime(v)
	}
	if _, ok := src.mutation.Variables(); !ok {
		v := servicerevision.DefaultVariables
		src.mutation.SetVariables(v)
	}
	if _, ok := src.mutation.DeployerType(); !ok {
		v := servicerevision.DefaultDeployerType
		src.mutation.SetDeployerType(v)
	}
	if _, ok := src.mutation.Duration(); !ok {
		v := servicerevision.DefaultDuration
		src.mutation.SetDuration(v)
	}
	if _, ok := src.mutation.PreviousRequiredProviders(); !ok {
		v := servicerevision.DefaultPreviousRequiredProviders
		src.mutation.SetPreviousRequiredProviders(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (src *ServiceRevisionCreate) check() error {
	if _, ok := src.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`model: missing required field "ServiceRevision.create_time"`)}
	}
	if _, ok := src.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project_id", err: errors.New(`model: missing required field "ServiceRevision.project_id"`)}
	}
	if v, ok := src.mutation.ProjectID(); ok {
		if err := servicerevision.ProjectIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "project_id", err: fmt.Errorf(`model: validator failed for field "ServiceRevision.project_id": %w`, err)}
		}
	}
	if _, ok := src.mutation.EnvironmentID(); !ok {
		return &ValidationError{Name: "environment_id", err: errors.New(`model: missing required field "ServiceRevision.environment_id"`)}
	}
	if v, ok := src.mutation.EnvironmentID(); ok {
		if err := servicerevision.EnvironmentIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "environment_id", err: fmt.Errorf(`model: validator failed for field "ServiceRevision.environment_id": %w`, err)}
		}
	}
	if _, ok := src.mutation.ServiceID(); !ok {
		return &ValidationError{Name: "service_id", err: errors.New(`model: missing required field "ServiceRevision.service_id"`)}
	}
	if v, ok := src.mutation.ServiceID(); ok {
		if err := servicerevision.ServiceIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "service_id", err: fmt.Errorf(`model: validator failed for field "ServiceRevision.service_id": %w`, err)}
		}
	}
	if _, ok := src.mutation.TemplateName(); !ok {
		return &ValidationError{Name: "template_name", err: errors.New(`model: missing required field "ServiceRevision.template_name"`)}
	}
	if v, ok := src.mutation.TemplateName(); ok {
		if err := servicerevision.TemplateNameValidator(v); err != nil {
			return &ValidationError{Name: "template_name", err: fmt.Errorf(`model: validator failed for field "ServiceRevision.template_name": %w`, err)}
		}
	}
	if _, ok := src.mutation.TemplateVersion(); !ok {
		return &ValidationError{Name: "template_version", err: errors.New(`model: missing required field "ServiceRevision.template_version"`)}
	}
	if v, ok := src.mutation.TemplateVersion(); ok {
		if err := servicerevision.TemplateVersionValidator(v); err != nil {
			return &ValidationError{Name: "template_version", err: fmt.Errorf(`model: validator failed for field "ServiceRevision.template_version": %w`, err)}
		}
	}
	if _, ok := src.mutation.Variables(); !ok {
		return &ValidationError{Name: "variables", err: errors.New(`model: missing required field "ServiceRevision.variables"`)}
	}
	if _, ok := src.mutation.InputPlan(); !ok {
		return &ValidationError{Name: "input_plan", err: errors.New(`model: missing required field "ServiceRevision.input_plan"`)}
	}
	if _, ok := src.mutation.Output(); !ok {
		return &ValidationError{Name: "output", err: errors.New(`model: missing required field "ServiceRevision.output"`)}
	}
	if _, ok := src.mutation.DeployerType(); !ok {
		return &ValidationError{Name: "deployer_type", err: errors.New(`model: missing required field "ServiceRevision.deployer_type"`)}
	}
	if _, ok := src.mutation.Duration(); !ok {
		return &ValidationError{Name: "duration", err: errors.New(`model: missing required field "ServiceRevision.duration"`)}
	}
	if _, ok := src.mutation.PreviousRequiredProviders(); !ok {
		return &ValidationError{Name: "previous_required_providers", err: errors.New(`model: missing required field "ServiceRevision.previous_required_providers"`)}
	}
	if _, ok := src.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project", err: errors.New(`model: missing required edge "ServiceRevision.project"`)}
	}
	if _, ok := src.mutation.EnvironmentID(); !ok {
		return &ValidationError{Name: "environment", err: errors.New(`model: missing required edge "ServiceRevision.environment"`)}
	}
	if _, ok := src.mutation.ServiceID(); !ok {
		return &ValidationError{Name: "service", err: errors.New(`model: missing required edge "ServiceRevision.service"`)}
	}
	return nil
}

func (src *ServiceRevisionCreate) sqlSave(ctx context.Context) (*ServiceRevision, error) {
	if err := src.check(); err != nil {
		return nil, err
	}
	_node, _spec := src.createSpec()
	if err := sqlgraph.CreateNode(ctx, src.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*object.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	src.mutation.id = &_node.ID
	src.mutation.done = true
	return _node, nil
}

func (src *ServiceRevisionCreate) createSpec() (*ServiceRevision, *sqlgraph.CreateSpec) {
	var (
		_node = &ServiceRevision{config: src.config}
		_spec = sqlgraph.NewCreateSpec(servicerevision.Table, sqlgraph.NewFieldSpec(servicerevision.FieldID, field.TypeString))
	)
	_spec.Schema = src.schemaConfig.ServiceRevision
	_spec.OnConflict = src.conflict
	if id, ok := src.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := src.mutation.CreateTime(); ok {
		_spec.SetField(servicerevision.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = &value
	}
	if value, ok := src.mutation.Status(); ok {
		_spec.SetField(servicerevision.FieldStatus, field.TypeJSON, value)
		_node.Status = value
	}
	if value, ok := src.mutation.TemplateName(); ok {
		_spec.SetField(servicerevision.FieldTemplateName, field.TypeString, value)
		_node.TemplateName = value
	}
	if value, ok := src.mutation.TemplateVersion(); ok {
		_spec.SetField(servicerevision.FieldTemplateVersion, field.TypeString, value)
		_node.TemplateVersion = value
	}
	if value, ok := src.mutation.Attributes(); ok {
		_spec.SetField(servicerevision.FieldAttributes, field.TypeOther, value)
		_node.Attributes = value
	}
	if value, ok := src.mutation.Variables(); ok {
		_spec.SetField(servicerevision.FieldVariables, field.TypeOther, value)
		_node.Variables = value
	}
	if value, ok := src.mutation.InputPlan(); ok {
		_spec.SetField(servicerevision.FieldInputPlan, field.TypeString, value)
		_node.InputPlan = value
	}
	if value, ok := src.mutation.Output(); ok {
		_spec.SetField(servicerevision.FieldOutput, field.TypeString, value)
		_node.Output = value
	}
	if value, ok := src.mutation.DeployerType(); ok {
		_spec.SetField(servicerevision.FieldDeployerType, field.TypeString, value)
		_node.DeployerType = value
	}
	if value, ok := src.mutation.Duration(); ok {
		_spec.SetField(servicerevision.FieldDuration, field.TypeInt, value)
		_node.Duration = value
	}
	if value, ok := src.mutation.PreviousRequiredProviders(); ok {
		_spec.SetField(servicerevision.FieldPreviousRequiredProviders, field.TypeJSON, value)
		_node.PreviousRequiredProviders = value
	}
	if value, ok := src.mutation.Record(); ok {
		_spec.SetField(servicerevision.FieldRecord, field.TypeString, value)
		_node.Record = value
	}
	if nodes := src.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servicerevision.ProjectTable,
			Columns: []string{servicerevision.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		edge.Schema = src.schemaConfig.ServiceRevision
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := src.mutation.EnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servicerevision.EnvironmentTable,
			Columns: []string{servicerevision.EnvironmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeString),
			},
		}
		edge.Schema = src.schemaConfig.ServiceRevision
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EnvironmentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := src.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servicerevision.ServiceTable,
			Columns: []string{servicerevision.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		edge.Schema = src.schemaConfig.ServiceRevision
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ServiceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// Set is different from other Set* methods,
// it sets the value by judging the definition of each field within the entire object.
//
// For required fields, Set calls directly.
//
// For optional fields, Set calls if the value is not zero.
//
// For example:
//
//	## Required
//
//	db.SetX(obj.X)
//
//	## Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (src *ServiceRevisionCreate) Set(obj *ServiceRevision) *ServiceRevisionCreate {
	// Required.
	src.SetProjectID(obj.ProjectID)
	src.SetEnvironmentID(obj.EnvironmentID)
	src.SetServiceID(obj.ServiceID)
	src.SetTemplateName(obj.TemplateName)
	src.SetTemplateVersion(obj.TemplateVersion)
	src.SetVariables(obj.Variables)
	src.SetInputPlan(obj.InputPlan)
	src.SetOutput(obj.Output)
	src.SetDeployerType(obj.DeployerType)
	src.SetDuration(obj.Duration)
	src.SetPreviousRequiredProviders(obj.PreviousRequiredProviders)

	// Optional.
	if obj.CreateTime != nil {
		src.SetCreateTime(*obj.CreateTime)
	}
	if !reflect.ValueOf(obj.Status).IsZero() {
		src.SetStatus(obj.Status)
	}
	if !reflect.ValueOf(obj.Attributes).IsZero() {
		src.SetAttributes(obj.Attributes)
	}
	if obj.Record != "" {
		src.SetRecord(obj.Record)
	}

	// Record the given object.
	src.object = obj

	return src
}

// getClientSet returns the ClientSet for the given builder.
func (src *ServiceRevisionCreate) getClientSet() (mc ClientSet) {
	if _, ok := src.config.driver.(*txDriver); ok {
		tx := &Tx{config: src.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: src.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after created the ServiceRevision entity,
// which is always good for cascading create operations.
func (src *ServiceRevisionCreate) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ServiceRevision) error) (*ServiceRevision, error) {
	obj, err := src.Save(ctx)
	if err != nil {
		return nil, err
	}

	if len(cbs) == 0 {
		return obj, err
	}

	mc := src.getClientSet()

	if x := src.object; x != nil {
		if _, set := src.mutation.Field(servicerevision.FieldStatus); set {
			obj.Status = x.Status
		}
		if _, set := src.mutation.Field(servicerevision.FieldProjectID); set {
			obj.ProjectID = x.ProjectID
		}
		if _, set := src.mutation.Field(servicerevision.FieldEnvironmentID); set {
			obj.EnvironmentID = x.EnvironmentID
		}
		if _, set := src.mutation.Field(servicerevision.FieldServiceID); set {
			obj.ServiceID = x.ServiceID
		}
		if _, set := src.mutation.Field(servicerevision.FieldTemplateName); set {
			obj.TemplateName = x.TemplateName
		}
		if _, set := src.mutation.Field(servicerevision.FieldTemplateVersion); set {
			obj.TemplateVersion = x.TemplateVersion
		}
		if _, set := src.mutation.Field(servicerevision.FieldAttributes); set {
			obj.Attributes = x.Attributes
		}
		if _, set := src.mutation.Field(servicerevision.FieldInputPlan); set {
			obj.InputPlan = x.InputPlan
		}
		if _, set := src.mutation.Field(servicerevision.FieldOutput); set {
			obj.Output = x.Output
		}
		if _, set := src.mutation.Field(servicerevision.FieldRecord); set {
			obj.Record = x.Record
		}
		obj.Edges = x.Edges
	}

	for i := range cbs {
		if err = cbs[i](ctx, mc, obj); err != nil {
			return nil, err
		}
	}

	return obj, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (src *ServiceRevisionCreate) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ServiceRevision) error) *ServiceRevision {
	obj, err := src.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return obj
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (src *ServiceRevisionCreate) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ServiceRevision) error) error {
	_, err := src.SaveE(ctx, cbs...)
	return err
}

// ExecEX is like ExecE, but panics if an error occurs.
func (src *ServiceRevisionCreate) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ServiceRevision) error) {
	if err := src.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// Set leverages the ServiceRevisionCreate Set method,
// it sets the value by judging the definition of each field within the entire item of the given list.
//
// For required fields, Set calls directly.
//
// For optional fields, Set calls if the value is not zero.
//
// For example:
//
//	## Required
//
//	db.SetX(obj.X)
//
//	## Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (srcb *ServiceRevisionCreateBulk) Set(objs ...*ServiceRevision) *ServiceRevisionCreateBulk {
	if len(objs) != 0 {
		client := NewServiceRevisionClient(srcb.config)

		srcb.builders = make([]*ServiceRevisionCreate, len(objs))
		for i := range objs {
			srcb.builders[i] = client.Create().Set(objs[i])
		}

		// Record the given objects.
		srcb.objects = objs
	}

	return srcb
}

// getClientSet returns the ClientSet for the given builder.
func (srcb *ServiceRevisionCreateBulk) getClientSet() (mc ClientSet) {
	if _, ok := srcb.config.driver.(*txDriver); ok {
		tx := &Tx{config: srcb.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: srcb.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after created the ServiceRevision entities,
// which is always good for cascading create operations.
func (srcb *ServiceRevisionCreateBulk) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ServiceRevision) error) ([]*ServiceRevision, error) {
	objs, err := srcb.Save(ctx)
	if err != nil {
		return nil, err
	}

	if len(cbs) == 0 {
		return objs, err
	}

	mc := srcb.getClientSet()

	if x := srcb.objects; x != nil {
		for i := range x {
			if _, set := srcb.builders[i].mutation.Field(servicerevision.FieldStatus); set {
				objs[i].Status = x[i].Status
			}
			if _, set := srcb.builders[i].mutation.Field(servicerevision.FieldProjectID); set {
				objs[i].ProjectID = x[i].ProjectID
			}
			if _, set := srcb.builders[i].mutation.Field(servicerevision.FieldEnvironmentID); set {
				objs[i].EnvironmentID = x[i].EnvironmentID
			}
			if _, set := srcb.builders[i].mutation.Field(servicerevision.FieldServiceID); set {
				objs[i].ServiceID = x[i].ServiceID
			}
			if _, set := srcb.builders[i].mutation.Field(servicerevision.FieldTemplateName); set {
				objs[i].TemplateName = x[i].TemplateName
			}
			if _, set := srcb.builders[i].mutation.Field(servicerevision.FieldTemplateVersion); set {
				objs[i].TemplateVersion = x[i].TemplateVersion
			}
			if _, set := srcb.builders[i].mutation.Field(servicerevision.FieldAttributes); set {
				objs[i].Attributes = x[i].Attributes
			}
			if _, set := srcb.builders[i].mutation.Field(servicerevision.FieldInputPlan); set {
				objs[i].InputPlan = x[i].InputPlan
			}
			if _, set := srcb.builders[i].mutation.Field(servicerevision.FieldOutput); set {
				objs[i].Output = x[i].Output
			}
			if _, set := srcb.builders[i].mutation.Field(servicerevision.FieldRecord); set {
				objs[i].Record = x[i].Record
			}
			objs[i].Edges = x[i].Edges
		}
	}

	for i := range objs {
		for j := range cbs {
			if err = cbs[j](ctx, mc, objs[i]); err != nil {
				return nil, err
			}
		}
	}

	return objs, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (srcb *ServiceRevisionCreateBulk) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ServiceRevision) error) []*ServiceRevision {
	objs, err := srcb.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return objs
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (srcb *ServiceRevisionCreateBulk) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ServiceRevision) error) error {
	_, err := srcb.SaveE(ctx, cbs...)
	return err
}

// ExecEX is like ExecE, but panics if an error occurs.
func (srcb *ServiceRevisionCreateBulk) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ServiceRevision) error) {
	if err := srcb.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (u *ServiceRevisionUpsertOne) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *ServiceRevision) error) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for ServiceRevisionUpsertOne.OnConflict")
	}
	u.create.fromUpsert = true
	return u.create.ExecE(ctx, cbs...)
}

// ExecEX is like ExecE, but panics if an error occurs.
func (u *ServiceRevisionUpsertOne) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *ServiceRevision) error) {
	if err := u.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (u *ServiceRevisionUpsertBulk) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *ServiceRevision) error) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model: OnConflict was set for builder %d. Set it on the ServiceRevisionUpsertBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for ServiceRevisionUpsertBulk.OnConflict")
	}
	u.create.fromUpsert = true
	return u.create.ExecE(ctx, cbs...)
}

// ExecEX is like ExecE, but panics if an error occurs.
func (u *ServiceRevisionUpsertBulk) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *ServiceRevision) error) {
	if err := u.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ServiceRevision.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ServiceRevisionUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (src *ServiceRevisionCreate) OnConflict(opts ...sql.ConflictOption) *ServiceRevisionUpsertOne {
	src.conflict = opts
	return &ServiceRevisionUpsertOne{
		create: src,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ServiceRevision.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (src *ServiceRevisionCreate) OnConflictColumns(columns ...string) *ServiceRevisionUpsertOne {
	src.conflict = append(src.conflict, sql.ConflictColumns(columns...))
	return &ServiceRevisionUpsertOne{
		create: src,
	}
}

type (
	// ServiceRevisionUpsertOne is the builder for "upsert"-ing
	//  one ServiceRevision node.
	ServiceRevisionUpsertOne struct {
		create *ServiceRevisionCreate
	}

	// ServiceRevisionUpsert is the "OnConflict" setter.
	ServiceRevisionUpsert struct {
		*sql.UpdateSet
	}
)

// SetStatus sets the "status" field.
func (u *ServiceRevisionUpsert) SetStatus(v status.Status) *ServiceRevisionUpsert {
	u.Set(servicerevision.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ServiceRevisionUpsert) UpdateStatus() *ServiceRevisionUpsert {
	u.SetExcluded(servicerevision.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *ServiceRevisionUpsert) ClearStatus() *ServiceRevisionUpsert {
	u.SetNull(servicerevision.FieldStatus)
	return u
}

// SetTemplateVersion sets the "template_version" field.
func (u *ServiceRevisionUpsert) SetTemplateVersion(v string) *ServiceRevisionUpsert {
	u.Set(servicerevision.FieldTemplateVersion, v)
	return u
}

// UpdateTemplateVersion sets the "template_version" field to the value that was provided on create.
func (u *ServiceRevisionUpsert) UpdateTemplateVersion() *ServiceRevisionUpsert {
	u.SetExcluded(servicerevision.FieldTemplateVersion)
	return u
}

// SetAttributes sets the "attributes" field.
func (u *ServiceRevisionUpsert) SetAttributes(v property.Values) *ServiceRevisionUpsert {
	u.Set(servicerevision.FieldAttributes, v)
	return u
}

// UpdateAttributes sets the "attributes" field to the value that was provided on create.
func (u *ServiceRevisionUpsert) UpdateAttributes() *ServiceRevisionUpsert {
	u.SetExcluded(servicerevision.FieldAttributes)
	return u
}

// ClearAttributes clears the value of the "attributes" field.
func (u *ServiceRevisionUpsert) ClearAttributes() *ServiceRevisionUpsert {
	u.SetNull(servicerevision.FieldAttributes)
	return u
}

// SetVariables sets the "variables" field.
func (u *ServiceRevisionUpsert) SetVariables(v crypto.Map[string, string]) *ServiceRevisionUpsert {
	u.Set(servicerevision.FieldVariables, v)
	return u
}

// UpdateVariables sets the "variables" field to the value that was provided on create.
func (u *ServiceRevisionUpsert) UpdateVariables() *ServiceRevisionUpsert {
	u.SetExcluded(servicerevision.FieldVariables)
	return u
}

// SetInputPlan sets the "input_plan" field.
func (u *ServiceRevisionUpsert) SetInputPlan(v string) *ServiceRevisionUpsert {
	u.Set(servicerevision.FieldInputPlan, v)
	return u
}

// UpdateInputPlan sets the "input_plan" field to the value that was provided on create.
func (u *ServiceRevisionUpsert) UpdateInputPlan() *ServiceRevisionUpsert {
	u.SetExcluded(servicerevision.FieldInputPlan)
	return u
}

// SetOutput sets the "output" field.
func (u *ServiceRevisionUpsert) SetOutput(v string) *ServiceRevisionUpsert {
	u.Set(servicerevision.FieldOutput, v)
	return u
}

// UpdateOutput sets the "output" field to the value that was provided on create.
func (u *ServiceRevisionUpsert) UpdateOutput() *ServiceRevisionUpsert {
	u.SetExcluded(servicerevision.FieldOutput)
	return u
}

// SetDeployerType sets the "deployer_type" field.
func (u *ServiceRevisionUpsert) SetDeployerType(v string) *ServiceRevisionUpsert {
	u.Set(servicerevision.FieldDeployerType, v)
	return u
}

// UpdateDeployerType sets the "deployer_type" field to the value that was provided on create.
func (u *ServiceRevisionUpsert) UpdateDeployerType() *ServiceRevisionUpsert {
	u.SetExcluded(servicerevision.FieldDeployerType)
	return u
}

// SetDuration sets the "duration" field.
func (u *ServiceRevisionUpsert) SetDuration(v int) *ServiceRevisionUpsert {
	u.Set(servicerevision.FieldDuration, v)
	return u
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *ServiceRevisionUpsert) UpdateDuration() *ServiceRevisionUpsert {
	u.SetExcluded(servicerevision.FieldDuration)
	return u
}

// AddDuration adds v to the "duration" field.
func (u *ServiceRevisionUpsert) AddDuration(v int) *ServiceRevisionUpsert {
	u.Add(servicerevision.FieldDuration, v)
	return u
}

// SetPreviousRequiredProviders sets the "previous_required_providers" field.
func (u *ServiceRevisionUpsert) SetPreviousRequiredProviders(v []types.ProviderRequirement) *ServiceRevisionUpsert {
	u.Set(servicerevision.FieldPreviousRequiredProviders, v)
	return u
}

// UpdatePreviousRequiredProviders sets the "previous_required_providers" field to the value that was provided on create.
func (u *ServiceRevisionUpsert) UpdatePreviousRequiredProviders() *ServiceRevisionUpsert {
	u.SetExcluded(servicerevision.FieldPreviousRequiredProviders)
	return u
}

// SetRecord sets the "record" field.
func (u *ServiceRevisionUpsert) SetRecord(v string) *ServiceRevisionUpsert {
	u.Set(servicerevision.FieldRecord, v)
	return u
}

// UpdateRecord sets the "record" field to the value that was provided on create.
func (u *ServiceRevisionUpsert) UpdateRecord() *ServiceRevisionUpsert {
	u.SetExcluded(servicerevision.FieldRecord)
	return u
}

// ClearRecord clears the value of the "record" field.
func (u *ServiceRevisionUpsert) ClearRecord() *ServiceRevisionUpsert {
	u.SetNull(servicerevision.FieldRecord)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ServiceRevision.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(servicerevision.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ServiceRevisionUpsertOne) UpdateNewValues() *ServiceRevisionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(servicerevision.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(servicerevision.FieldCreateTime)
		}
		if _, exists := u.create.mutation.ProjectID(); exists {
			s.SetIgnore(servicerevision.FieldProjectID)
		}
		if _, exists := u.create.mutation.EnvironmentID(); exists {
			s.SetIgnore(servicerevision.FieldEnvironmentID)
		}
		if _, exists := u.create.mutation.ServiceID(); exists {
			s.SetIgnore(servicerevision.FieldServiceID)
		}
		if _, exists := u.create.mutation.TemplateName(); exists {
			s.SetIgnore(servicerevision.FieldTemplateName)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ServiceRevision.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ServiceRevisionUpsertOne) Ignore() *ServiceRevisionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ServiceRevisionUpsertOne) DoNothing() *ServiceRevisionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ServiceRevisionCreate.OnConflict
// documentation for more info.
func (u *ServiceRevisionUpsertOne) Update(set func(*ServiceRevisionUpsert)) *ServiceRevisionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ServiceRevisionUpsert{UpdateSet: update})
	}))
	return u
}

// SetStatus sets the "status" field.
func (u *ServiceRevisionUpsertOne) SetStatus(v status.Status) *ServiceRevisionUpsertOne {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ServiceRevisionUpsertOne) UpdateStatus() *ServiceRevisionUpsertOne {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *ServiceRevisionUpsertOne) ClearStatus() *ServiceRevisionUpsertOne {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.ClearStatus()
	})
}

// SetTemplateVersion sets the "template_version" field.
func (u *ServiceRevisionUpsertOne) SetTemplateVersion(v string) *ServiceRevisionUpsertOne {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.SetTemplateVersion(v)
	})
}

// UpdateTemplateVersion sets the "template_version" field to the value that was provided on create.
func (u *ServiceRevisionUpsertOne) UpdateTemplateVersion() *ServiceRevisionUpsertOne {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.UpdateTemplateVersion()
	})
}

// SetAttributes sets the "attributes" field.
func (u *ServiceRevisionUpsertOne) SetAttributes(v property.Values) *ServiceRevisionUpsertOne {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.SetAttributes(v)
	})
}

// UpdateAttributes sets the "attributes" field to the value that was provided on create.
func (u *ServiceRevisionUpsertOne) UpdateAttributes() *ServiceRevisionUpsertOne {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.UpdateAttributes()
	})
}

// ClearAttributes clears the value of the "attributes" field.
func (u *ServiceRevisionUpsertOne) ClearAttributes() *ServiceRevisionUpsertOne {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.ClearAttributes()
	})
}

// SetVariables sets the "variables" field.
func (u *ServiceRevisionUpsertOne) SetVariables(v crypto.Map[string, string]) *ServiceRevisionUpsertOne {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.SetVariables(v)
	})
}

// UpdateVariables sets the "variables" field to the value that was provided on create.
func (u *ServiceRevisionUpsertOne) UpdateVariables() *ServiceRevisionUpsertOne {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.UpdateVariables()
	})
}

// SetInputPlan sets the "input_plan" field.
func (u *ServiceRevisionUpsertOne) SetInputPlan(v string) *ServiceRevisionUpsertOne {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.SetInputPlan(v)
	})
}

// UpdateInputPlan sets the "input_plan" field to the value that was provided on create.
func (u *ServiceRevisionUpsertOne) UpdateInputPlan() *ServiceRevisionUpsertOne {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.UpdateInputPlan()
	})
}

// SetOutput sets the "output" field.
func (u *ServiceRevisionUpsertOne) SetOutput(v string) *ServiceRevisionUpsertOne {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.SetOutput(v)
	})
}

// UpdateOutput sets the "output" field to the value that was provided on create.
func (u *ServiceRevisionUpsertOne) UpdateOutput() *ServiceRevisionUpsertOne {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.UpdateOutput()
	})
}

// SetDeployerType sets the "deployer_type" field.
func (u *ServiceRevisionUpsertOne) SetDeployerType(v string) *ServiceRevisionUpsertOne {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.SetDeployerType(v)
	})
}

// UpdateDeployerType sets the "deployer_type" field to the value that was provided on create.
func (u *ServiceRevisionUpsertOne) UpdateDeployerType() *ServiceRevisionUpsertOne {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.UpdateDeployerType()
	})
}

// SetDuration sets the "duration" field.
func (u *ServiceRevisionUpsertOne) SetDuration(v int) *ServiceRevisionUpsertOne {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.SetDuration(v)
	})
}

// AddDuration adds v to the "duration" field.
func (u *ServiceRevisionUpsertOne) AddDuration(v int) *ServiceRevisionUpsertOne {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.AddDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *ServiceRevisionUpsertOne) UpdateDuration() *ServiceRevisionUpsertOne {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.UpdateDuration()
	})
}

// SetPreviousRequiredProviders sets the "previous_required_providers" field.
func (u *ServiceRevisionUpsertOne) SetPreviousRequiredProviders(v []types.ProviderRequirement) *ServiceRevisionUpsertOne {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.SetPreviousRequiredProviders(v)
	})
}

// UpdatePreviousRequiredProviders sets the "previous_required_providers" field to the value that was provided on create.
func (u *ServiceRevisionUpsertOne) UpdatePreviousRequiredProviders() *ServiceRevisionUpsertOne {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.UpdatePreviousRequiredProviders()
	})
}

// SetRecord sets the "record" field.
func (u *ServiceRevisionUpsertOne) SetRecord(v string) *ServiceRevisionUpsertOne {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.SetRecord(v)
	})
}

// UpdateRecord sets the "record" field to the value that was provided on create.
func (u *ServiceRevisionUpsertOne) UpdateRecord() *ServiceRevisionUpsertOne {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.UpdateRecord()
	})
}

// ClearRecord clears the value of the "record" field.
func (u *ServiceRevisionUpsertOne) ClearRecord() *ServiceRevisionUpsertOne {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.ClearRecord()
	})
}

// Exec executes the query.
func (u *ServiceRevisionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for ServiceRevisionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ServiceRevisionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ServiceRevisionUpsertOne) ID(ctx context.Context) (id object.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("model: ServiceRevisionUpsertOne.ID is not supported by MySQL driver. Use ServiceRevisionUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ServiceRevisionUpsertOne) IDX(ctx context.Context) object.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ServiceRevisionCreateBulk is the builder for creating many ServiceRevision entities in bulk.
type ServiceRevisionCreateBulk struct {
	config
	builders   []*ServiceRevisionCreate
	conflict   []sql.ConflictOption
	objects    []*ServiceRevision
	fromUpsert bool
}

// Save creates the ServiceRevision entities in the database.
func (srcb *ServiceRevisionCreateBulk) Save(ctx context.Context) ([]*ServiceRevision, error) {
	specs := make([]*sqlgraph.CreateSpec, len(srcb.builders))
	nodes := make([]*ServiceRevision, len(srcb.builders))
	mutators := make([]Mutator, len(srcb.builders))
	for i := range srcb.builders {
		func(i int, root context.Context) {
			builder := srcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ServiceRevisionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, srcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = srcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, srcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, srcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (srcb *ServiceRevisionCreateBulk) SaveX(ctx context.Context) []*ServiceRevision {
	v, err := srcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (srcb *ServiceRevisionCreateBulk) Exec(ctx context.Context) error {
	_, err := srcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srcb *ServiceRevisionCreateBulk) ExecX(ctx context.Context) {
	if err := srcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ServiceRevision.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ServiceRevisionUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (srcb *ServiceRevisionCreateBulk) OnConflict(opts ...sql.ConflictOption) *ServiceRevisionUpsertBulk {
	srcb.conflict = opts
	return &ServiceRevisionUpsertBulk{
		create: srcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ServiceRevision.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (srcb *ServiceRevisionCreateBulk) OnConflictColumns(columns ...string) *ServiceRevisionUpsertBulk {
	srcb.conflict = append(srcb.conflict, sql.ConflictColumns(columns...))
	return &ServiceRevisionUpsertBulk{
		create: srcb,
	}
}

// ServiceRevisionUpsertBulk is the builder for "upsert"-ing
// a bulk of ServiceRevision nodes.
type ServiceRevisionUpsertBulk struct {
	create *ServiceRevisionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ServiceRevision.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(servicerevision.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ServiceRevisionUpsertBulk) UpdateNewValues() *ServiceRevisionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(servicerevision.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(servicerevision.FieldCreateTime)
			}
			if _, exists := b.mutation.ProjectID(); exists {
				s.SetIgnore(servicerevision.FieldProjectID)
			}
			if _, exists := b.mutation.EnvironmentID(); exists {
				s.SetIgnore(servicerevision.FieldEnvironmentID)
			}
			if _, exists := b.mutation.ServiceID(); exists {
				s.SetIgnore(servicerevision.FieldServiceID)
			}
			if _, exists := b.mutation.TemplateName(); exists {
				s.SetIgnore(servicerevision.FieldTemplateName)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ServiceRevision.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ServiceRevisionUpsertBulk) Ignore() *ServiceRevisionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ServiceRevisionUpsertBulk) DoNothing() *ServiceRevisionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ServiceRevisionCreateBulk.OnConflict
// documentation for more info.
func (u *ServiceRevisionUpsertBulk) Update(set func(*ServiceRevisionUpsert)) *ServiceRevisionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ServiceRevisionUpsert{UpdateSet: update})
	}))
	return u
}

// SetStatus sets the "status" field.
func (u *ServiceRevisionUpsertBulk) SetStatus(v status.Status) *ServiceRevisionUpsertBulk {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ServiceRevisionUpsertBulk) UpdateStatus() *ServiceRevisionUpsertBulk {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *ServiceRevisionUpsertBulk) ClearStatus() *ServiceRevisionUpsertBulk {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.ClearStatus()
	})
}

// SetTemplateVersion sets the "template_version" field.
func (u *ServiceRevisionUpsertBulk) SetTemplateVersion(v string) *ServiceRevisionUpsertBulk {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.SetTemplateVersion(v)
	})
}

// UpdateTemplateVersion sets the "template_version" field to the value that was provided on create.
func (u *ServiceRevisionUpsertBulk) UpdateTemplateVersion() *ServiceRevisionUpsertBulk {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.UpdateTemplateVersion()
	})
}

// SetAttributes sets the "attributes" field.
func (u *ServiceRevisionUpsertBulk) SetAttributes(v property.Values) *ServiceRevisionUpsertBulk {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.SetAttributes(v)
	})
}

// UpdateAttributes sets the "attributes" field to the value that was provided on create.
func (u *ServiceRevisionUpsertBulk) UpdateAttributes() *ServiceRevisionUpsertBulk {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.UpdateAttributes()
	})
}

// ClearAttributes clears the value of the "attributes" field.
func (u *ServiceRevisionUpsertBulk) ClearAttributes() *ServiceRevisionUpsertBulk {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.ClearAttributes()
	})
}

// SetVariables sets the "variables" field.
func (u *ServiceRevisionUpsertBulk) SetVariables(v crypto.Map[string, string]) *ServiceRevisionUpsertBulk {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.SetVariables(v)
	})
}

// UpdateVariables sets the "variables" field to the value that was provided on create.
func (u *ServiceRevisionUpsertBulk) UpdateVariables() *ServiceRevisionUpsertBulk {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.UpdateVariables()
	})
}

// SetInputPlan sets the "input_plan" field.
func (u *ServiceRevisionUpsertBulk) SetInputPlan(v string) *ServiceRevisionUpsertBulk {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.SetInputPlan(v)
	})
}

// UpdateInputPlan sets the "input_plan" field to the value that was provided on create.
func (u *ServiceRevisionUpsertBulk) UpdateInputPlan() *ServiceRevisionUpsertBulk {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.UpdateInputPlan()
	})
}

// SetOutput sets the "output" field.
func (u *ServiceRevisionUpsertBulk) SetOutput(v string) *ServiceRevisionUpsertBulk {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.SetOutput(v)
	})
}

// UpdateOutput sets the "output" field to the value that was provided on create.
func (u *ServiceRevisionUpsertBulk) UpdateOutput() *ServiceRevisionUpsertBulk {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.UpdateOutput()
	})
}

// SetDeployerType sets the "deployer_type" field.
func (u *ServiceRevisionUpsertBulk) SetDeployerType(v string) *ServiceRevisionUpsertBulk {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.SetDeployerType(v)
	})
}

// UpdateDeployerType sets the "deployer_type" field to the value that was provided on create.
func (u *ServiceRevisionUpsertBulk) UpdateDeployerType() *ServiceRevisionUpsertBulk {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.UpdateDeployerType()
	})
}

// SetDuration sets the "duration" field.
func (u *ServiceRevisionUpsertBulk) SetDuration(v int) *ServiceRevisionUpsertBulk {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.SetDuration(v)
	})
}

// AddDuration adds v to the "duration" field.
func (u *ServiceRevisionUpsertBulk) AddDuration(v int) *ServiceRevisionUpsertBulk {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.AddDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *ServiceRevisionUpsertBulk) UpdateDuration() *ServiceRevisionUpsertBulk {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.UpdateDuration()
	})
}

// SetPreviousRequiredProviders sets the "previous_required_providers" field.
func (u *ServiceRevisionUpsertBulk) SetPreviousRequiredProviders(v []types.ProviderRequirement) *ServiceRevisionUpsertBulk {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.SetPreviousRequiredProviders(v)
	})
}

// UpdatePreviousRequiredProviders sets the "previous_required_providers" field to the value that was provided on create.
func (u *ServiceRevisionUpsertBulk) UpdatePreviousRequiredProviders() *ServiceRevisionUpsertBulk {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.UpdatePreviousRequiredProviders()
	})
}

// SetRecord sets the "record" field.
func (u *ServiceRevisionUpsertBulk) SetRecord(v string) *ServiceRevisionUpsertBulk {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.SetRecord(v)
	})
}

// UpdateRecord sets the "record" field to the value that was provided on create.
func (u *ServiceRevisionUpsertBulk) UpdateRecord() *ServiceRevisionUpsertBulk {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.UpdateRecord()
	})
}

// ClearRecord clears the value of the "record" field.
func (u *ServiceRevisionUpsertBulk) ClearRecord() *ServiceRevisionUpsertBulk {
	return u.Update(func(s *ServiceRevisionUpsert) {
		s.ClearRecord()
	})
}

// Exec executes the query.
func (u *ServiceRevisionUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model: OnConflict was set for builder %d. Set it on the ServiceRevisionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for ServiceRevisionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ServiceRevisionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
