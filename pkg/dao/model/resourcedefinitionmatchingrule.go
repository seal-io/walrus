// SPDX-FileCopyrightText: 2023 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus". DO NOT EDIT.

package model

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"

	"github.com/seal-io/walrus/pkg/dao/model/resourcedefinition"
	"github.com/seal-io/walrus/pkg/dao/model/resourcedefinitionmatchingrule"
	"github.com/seal-io/walrus/pkg/dao/model/templateversion"
	"github.com/seal-io/walrus/pkg/dao/types"
	"github.com/seal-io/walrus/pkg/dao/types/object"
	"github.com/seal-io/walrus/pkg/dao/types/property"
	"github.com/seal-io/walrus/utils/json"
)

// ResourceDefinitionMatchingRule is the model entity for the ResourceDefinitionMatchingRule schema.
type ResourceDefinitionMatchingRule struct {
	config `json:"-"`
	// ID of the ent.
	ID object.ID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime *time.Time `json:"create_time,omitempty"`
	// ID of the resource definition to which the relationship connects.
	ResourceDefinitionID object.ID `json:"resource_definition_id,omitempty"`
	// ID of the template version to which the relationship connects.
	TemplateID object.ID `json:"template_id,omitempty"`
	// Name of the matching rule.
	Name string `json:"name,omitempty"`
	// Resource selector.
	Selector types.Selector `json:"selector,omitempty"`
	// Attributes to configure the template.
	Attributes property.Values `json:"attributes,omitempty"`
	// Order of the matching rule.
	Order int `json:"order,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResourceDefinitionMatchingRuleQuery when eager-loading is set.
	Edges        ResourceDefinitionMatchingRuleEdges `json:"edges,omitempty"`
	selectValues sql.SelectValues
}

// ResourceDefinitionMatchingRuleEdges holds the relations/edges for other nodes in the graph.
type ResourceDefinitionMatchingRuleEdges struct {
	// Resource definition that connect to the relationship.
	ResourceDefinition *ResourceDefinition `json:"resource_definition,omitempty"`
	// Template version that connect to the relationship.
	Template *TemplateVersion `json:"template,omitempty"`
	// Resources that match the rule.
	Resources []*Resource `json:"resources,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ResourceDefinitionOrErr returns the ResourceDefinition value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResourceDefinitionMatchingRuleEdges) ResourceDefinitionOrErr() (*ResourceDefinition, error) {
	if e.loadedTypes[0] {
		if e.ResourceDefinition == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: resourcedefinition.Label}
		}
		return e.ResourceDefinition, nil
	}
	return nil, &NotLoadedError{edge: "resource_definition"}
}

// TemplateOrErr returns the Template value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResourceDefinitionMatchingRuleEdges) TemplateOrErr() (*TemplateVersion, error) {
	if e.loadedTypes[1] {
		if e.Template == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: templateversion.Label}
		}
		return e.Template, nil
	}
	return nil, &NotLoadedError{edge: "template"}
}

// ResourcesOrErr returns the Resources value or an error if the edge
// was not loaded in eager-loading.
func (e ResourceDefinitionMatchingRuleEdges) ResourcesOrErr() ([]*Resource, error) {
	if e.loadedTypes[2] {
		return e.Resources, nil
	}
	return nil, &NotLoadedError{edge: "resources"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ResourceDefinitionMatchingRule) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case resourcedefinitionmatchingrule.FieldSelector:
			values[i] = new([]byte)
		case resourcedefinitionmatchingrule.FieldID, resourcedefinitionmatchingrule.FieldResourceDefinitionID, resourcedefinitionmatchingrule.FieldTemplateID:
			values[i] = new(object.ID)
		case resourcedefinitionmatchingrule.FieldAttributes:
			values[i] = new(property.Values)
		case resourcedefinitionmatchingrule.FieldOrder:
			values[i] = new(sql.NullInt64)
		case resourcedefinitionmatchingrule.FieldName:
			values[i] = new(sql.NullString)
		case resourcedefinitionmatchingrule.FieldCreateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ResourceDefinitionMatchingRule fields.
func (rdmr *ResourceDefinitionMatchingRule) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case resourcedefinitionmatchingrule.FieldID:
			if value, ok := values[i].(*object.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				rdmr.ID = *value
			}
		case resourcedefinitionmatchingrule.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				rdmr.CreateTime = new(time.Time)
				*rdmr.CreateTime = value.Time
			}
		case resourcedefinitionmatchingrule.FieldResourceDefinitionID:
			if value, ok := values[i].(*object.ID); !ok {
				return fmt.Errorf("unexpected type %T for field resource_definition_id", values[i])
			} else if value != nil {
				rdmr.ResourceDefinitionID = *value
			}
		case resourcedefinitionmatchingrule.FieldTemplateID:
			if value, ok := values[i].(*object.ID); !ok {
				return fmt.Errorf("unexpected type %T for field template_id", values[i])
			} else if value != nil {
				rdmr.TemplateID = *value
			}
		case resourcedefinitionmatchingrule.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				rdmr.Name = value.String
			}
		case resourcedefinitionmatchingrule.FieldSelector:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field selector", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &rdmr.Selector); err != nil {
					return fmt.Errorf("unmarshal field selector: %w", err)
				}
			}
		case resourcedefinitionmatchingrule.FieldAttributes:
			if value, ok := values[i].(*property.Values); !ok {
				return fmt.Errorf("unexpected type %T for field attributes", values[i])
			} else if value != nil {
				rdmr.Attributes = *value
			}
		case resourcedefinitionmatchingrule.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				rdmr.Order = int(value.Int64)
			}
		default:
			rdmr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ResourceDefinitionMatchingRule.
// This includes values selected through modifiers, order, etc.
func (rdmr *ResourceDefinitionMatchingRule) Value(name string) (ent.Value, error) {
	return rdmr.selectValues.Get(name)
}

// QueryResourceDefinition queries the "resource_definition" edge of the ResourceDefinitionMatchingRule entity.
func (rdmr *ResourceDefinitionMatchingRule) QueryResourceDefinition() *ResourceDefinitionQuery {
	return NewResourceDefinitionMatchingRuleClient(rdmr.config).QueryResourceDefinition(rdmr)
}

// QueryTemplate queries the "template" edge of the ResourceDefinitionMatchingRule entity.
func (rdmr *ResourceDefinitionMatchingRule) QueryTemplate() *TemplateVersionQuery {
	return NewResourceDefinitionMatchingRuleClient(rdmr.config).QueryTemplate(rdmr)
}

// QueryResources queries the "resources" edge of the ResourceDefinitionMatchingRule entity.
func (rdmr *ResourceDefinitionMatchingRule) QueryResources() *ResourceQuery {
	return NewResourceDefinitionMatchingRuleClient(rdmr.config).QueryResources(rdmr)
}

// Update returns a builder for updating this ResourceDefinitionMatchingRule.
// Note that you need to call ResourceDefinitionMatchingRule.Unwrap() before calling this method if this ResourceDefinitionMatchingRule
// was returned from a transaction, and the transaction was committed or rolled back.
func (rdmr *ResourceDefinitionMatchingRule) Update() *ResourceDefinitionMatchingRuleUpdateOne {
	return NewResourceDefinitionMatchingRuleClient(rdmr.config).UpdateOne(rdmr)
}

// Unwrap unwraps the ResourceDefinitionMatchingRule entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rdmr *ResourceDefinitionMatchingRule) Unwrap() *ResourceDefinitionMatchingRule {
	_tx, ok := rdmr.config.driver.(*txDriver)
	if !ok {
		panic("model: ResourceDefinitionMatchingRule is not a transactional entity")
	}
	rdmr.config.driver = _tx.drv
	return rdmr
}

// String implements the fmt.Stringer.
func (rdmr *ResourceDefinitionMatchingRule) String() string {
	var builder strings.Builder
	builder.WriteString("ResourceDefinitionMatchingRule(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rdmr.ID))
	if v := rdmr.CreateTime; v != nil {
		builder.WriteString("create_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("resource_definition_id=")
	builder.WriteString(fmt.Sprintf("%v", rdmr.ResourceDefinitionID))
	builder.WriteString(", ")
	builder.WriteString("template_id=")
	builder.WriteString(fmt.Sprintf("%v", rdmr.TemplateID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(rdmr.Name)
	builder.WriteString(", ")
	builder.WriteString("selector=")
	builder.WriteString(fmt.Sprintf("%v", rdmr.Selector))
	builder.WriteString(", ")
	builder.WriteString("attributes=")
	builder.WriteString(fmt.Sprintf("%v", rdmr.Attributes))
	builder.WriteString(", ")
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", rdmr.Order))
	builder.WriteByte(')')
	return builder.String()
}

// ResourceDefinitionMatchingRules is a parsable slice of ResourceDefinitionMatchingRule.
type ResourceDefinitionMatchingRules []*ResourceDefinitionMatchingRule
