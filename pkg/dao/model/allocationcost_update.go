// SPDX-FileCopyrightText: 2023 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "seal". DO NOT EDIT.

package model

import (
	"context"
	stdsql "database/sql"
	"errors"
	"fmt"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/seal-io/seal/pkg/dao/model/allocationcost"
	"github.com/seal-io/seal/pkg/dao/model/internal"
	"github.com/seal-io/seal/pkg/dao/model/predicate"
)

// AllocationCostUpdate is the builder for updating AllocationCost entities.
type AllocationCostUpdate struct {
	config
	hooks     []Hook
	mutation  *AllocationCostMutation
	modifiers []func(*sql.UpdateBuilder)
	object    *AllocationCost
}

// Where appends a list predicates to the AllocationCostUpdate builder.
func (acu *AllocationCostUpdate) Where(ps ...predicate.AllocationCost) *AllocationCostUpdate {
	acu.mutation.Where(ps...)
	return acu
}

// SetTotalCost sets the "totalCost" field.
func (acu *AllocationCostUpdate) SetTotalCost(f float64) *AllocationCostUpdate {
	acu.mutation.ResetTotalCost()
	acu.mutation.SetTotalCost(f)
	return acu
}

// SetNillableTotalCost sets the "totalCost" field if the given value is not nil.
func (acu *AllocationCostUpdate) SetNillableTotalCost(f *float64) *AllocationCostUpdate {
	if f != nil {
		acu.SetTotalCost(*f)
	}
	return acu
}

// AddTotalCost adds f to the "totalCost" field.
func (acu *AllocationCostUpdate) AddTotalCost(f float64) *AllocationCostUpdate {
	acu.mutation.AddTotalCost(f)
	return acu
}

// SetCurrency sets the "currency" field.
func (acu *AllocationCostUpdate) SetCurrency(i int) *AllocationCostUpdate {
	acu.mutation.ResetCurrency()
	acu.mutation.SetCurrency(i)
	return acu
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (acu *AllocationCostUpdate) SetNillableCurrency(i *int) *AllocationCostUpdate {
	if i != nil {
		acu.SetCurrency(*i)
	}
	return acu
}

// AddCurrency adds i to the "currency" field.
func (acu *AllocationCostUpdate) AddCurrency(i int) *AllocationCostUpdate {
	acu.mutation.AddCurrency(i)
	return acu
}

// ClearCurrency clears the value of the "currency" field.
func (acu *AllocationCostUpdate) ClearCurrency() *AllocationCostUpdate {
	acu.mutation.ClearCurrency()
	return acu
}

// SetCPUCost sets the "cpu_cost" field.
func (acu *AllocationCostUpdate) SetCPUCost(f float64) *AllocationCostUpdate {
	acu.mutation.ResetCPUCost()
	acu.mutation.SetCPUCost(f)
	return acu
}

// SetNillableCPUCost sets the "cpu_cost" field if the given value is not nil.
func (acu *AllocationCostUpdate) SetNillableCPUCost(f *float64) *AllocationCostUpdate {
	if f != nil {
		acu.SetCPUCost(*f)
	}
	return acu
}

// AddCPUCost adds f to the "cpu_cost" field.
func (acu *AllocationCostUpdate) AddCPUCost(f float64) *AllocationCostUpdate {
	acu.mutation.AddCPUCost(f)
	return acu
}

// SetGpuCost sets the "gpu_cost" field.
func (acu *AllocationCostUpdate) SetGpuCost(f float64) *AllocationCostUpdate {
	acu.mutation.ResetGpuCost()
	acu.mutation.SetGpuCost(f)
	return acu
}

// SetNillableGpuCost sets the "gpu_cost" field if the given value is not nil.
func (acu *AllocationCostUpdate) SetNillableGpuCost(f *float64) *AllocationCostUpdate {
	if f != nil {
		acu.SetGpuCost(*f)
	}
	return acu
}

// AddGpuCost adds f to the "gpu_cost" field.
func (acu *AllocationCostUpdate) AddGpuCost(f float64) *AllocationCostUpdate {
	acu.mutation.AddGpuCost(f)
	return acu
}

// SetRAMCost sets the "ram_cost" field.
func (acu *AllocationCostUpdate) SetRAMCost(f float64) *AllocationCostUpdate {
	acu.mutation.ResetRAMCost()
	acu.mutation.SetRAMCost(f)
	return acu
}

// SetNillableRAMCost sets the "ram_cost" field if the given value is not nil.
func (acu *AllocationCostUpdate) SetNillableRAMCost(f *float64) *AllocationCostUpdate {
	if f != nil {
		acu.SetRAMCost(*f)
	}
	return acu
}

// AddRAMCost adds f to the "ram_cost" field.
func (acu *AllocationCostUpdate) AddRAMCost(f float64) *AllocationCostUpdate {
	acu.mutation.AddRAMCost(f)
	return acu
}

// SetPvCost sets the "pv_cost" field.
func (acu *AllocationCostUpdate) SetPvCost(f float64) *AllocationCostUpdate {
	acu.mutation.ResetPvCost()
	acu.mutation.SetPvCost(f)
	return acu
}

// SetNillablePvCost sets the "pv_cost" field if the given value is not nil.
func (acu *AllocationCostUpdate) SetNillablePvCost(f *float64) *AllocationCostUpdate {
	if f != nil {
		acu.SetPvCost(*f)
	}
	return acu
}

// AddPvCost adds f to the "pv_cost" field.
func (acu *AllocationCostUpdate) AddPvCost(f float64) *AllocationCostUpdate {
	acu.mutation.AddPvCost(f)
	return acu
}

// SetPvBytes sets the "pv_bytes" field.
func (acu *AllocationCostUpdate) SetPvBytes(f float64) *AllocationCostUpdate {
	acu.mutation.ResetPvBytes()
	acu.mutation.SetPvBytes(f)
	return acu
}

// SetNillablePvBytes sets the "pv_bytes" field if the given value is not nil.
func (acu *AllocationCostUpdate) SetNillablePvBytes(f *float64) *AllocationCostUpdate {
	if f != nil {
		acu.SetPvBytes(*f)
	}
	return acu
}

// AddPvBytes adds f to the "pv_bytes" field.
func (acu *AllocationCostUpdate) AddPvBytes(f float64) *AllocationCostUpdate {
	acu.mutation.AddPvBytes(f)
	return acu
}

// SetLoadBalancerCost sets the "load_balancer_cost" field.
func (acu *AllocationCostUpdate) SetLoadBalancerCost(f float64) *AllocationCostUpdate {
	acu.mutation.ResetLoadBalancerCost()
	acu.mutation.SetLoadBalancerCost(f)
	return acu
}

// SetNillableLoadBalancerCost sets the "load_balancer_cost" field if the given value is not nil.
func (acu *AllocationCostUpdate) SetNillableLoadBalancerCost(f *float64) *AllocationCostUpdate {
	if f != nil {
		acu.SetLoadBalancerCost(*f)
	}
	return acu
}

// AddLoadBalancerCost adds f to the "load_balancer_cost" field.
func (acu *AllocationCostUpdate) AddLoadBalancerCost(f float64) *AllocationCostUpdate {
	acu.mutation.AddLoadBalancerCost(f)
	return acu
}

// SetCPUCoreUsageAverage sets the "cpu_core_usage_average" field.
func (acu *AllocationCostUpdate) SetCPUCoreUsageAverage(f float64) *AllocationCostUpdate {
	acu.mutation.ResetCPUCoreUsageAverage()
	acu.mutation.SetCPUCoreUsageAverage(f)
	return acu
}

// SetNillableCPUCoreUsageAverage sets the "cpu_core_usage_average" field if the given value is not nil.
func (acu *AllocationCostUpdate) SetNillableCPUCoreUsageAverage(f *float64) *AllocationCostUpdate {
	if f != nil {
		acu.SetCPUCoreUsageAverage(*f)
	}
	return acu
}

// AddCPUCoreUsageAverage adds f to the "cpu_core_usage_average" field.
func (acu *AllocationCostUpdate) AddCPUCoreUsageAverage(f float64) *AllocationCostUpdate {
	acu.mutation.AddCPUCoreUsageAverage(f)
	return acu
}

// SetCPUCoreUsageMax sets the "cpu_core_usage_max" field.
func (acu *AllocationCostUpdate) SetCPUCoreUsageMax(f float64) *AllocationCostUpdate {
	acu.mutation.ResetCPUCoreUsageMax()
	acu.mutation.SetCPUCoreUsageMax(f)
	return acu
}

// SetNillableCPUCoreUsageMax sets the "cpu_core_usage_max" field if the given value is not nil.
func (acu *AllocationCostUpdate) SetNillableCPUCoreUsageMax(f *float64) *AllocationCostUpdate {
	if f != nil {
		acu.SetCPUCoreUsageMax(*f)
	}
	return acu
}

// AddCPUCoreUsageMax adds f to the "cpu_core_usage_max" field.
func (acu *AllocationCostUpdate) AddCPUCoreUsageMax(f float64) *AllocationCostUpdate {
	acu.mutation.AddCPUCoreUsageMax(f)
	return acu
}

// SetRAMByteUsageAverage sets the "ram_byte_usage_average" field.
func (acu *AllocationCostUpdate) SetRAMByteUsageAverage(f float64) *AllocationCostUpdate {
	acu.mutation.ResetRAMByteUsageAverage()
	acu.mutation.SetRAMByteUsageAverage(f)
	return acu
}

// SetNillableRAMByteUsageAverage sets the "ram_byte_usage_average" field if the given value is not nil.
func (acu *AllocationCostUpdate) SetNillableRAMByteUsageAverage(f *float64) *AllocationCostUpdate {
	if f != nil {
		acu.SetRAMByteUsageAverage(*f)
	}
	return acu
}

// AddRAMByteUsageAverage adds f to the "ram_byte_usage_average" field.
func (acu *AllocationCostUpdate) AddRAMByteUsageAverage(f float64) *AllocationCostUpdate {
	acu.mutation.AddRAMByteUsageAverage(f)
	return acu
}

// SetRAMByteUsageMax sets the "ram_byte_usage_max" field.
func (acu *AllocationCostUpdate) SetRAMByteUsageMax(f float64) *AllocationCostUpdate {
	acu.mutation.ResetRAMByteUsageMax()
	acu.mutation.SetRAMByteUsageMax(f)
	return acu
}

// SetNillableRAMByteUsageMax sets the "ram_byte_usage_max" field if the given value is not nil.
func (acu *AllocationCostUpdate) SetNillableRAMByteUsageMax(f *float64) *AllocationCostUpdate {
	if f != nil {
		acu.SetRAMByteUsageMax(*f)
	}
	return acu
}

// AddRAMByteUsageMax adds f to the "ram_byte_usage_max" field.
func (acu *AllocationCostUpdate) AddRAMByteUsageMax(f float64) *AllocationCostUpdate {
	acu.mutation.AddRAMByteUsageMax(f)
	return acu
}

// Mutation returns the AllocationCostMutation object of the builder.
func (acu *AllocationCostUpdate) Mutation() *AllocationCostMutation {
	return acu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (acu *AllocationCostUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, acu.sqlSave, acu.mutation, acu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (acu *AllocationCostUpdate) SaveX(ctx context.Context) int {
	affected, err := acu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (acu *AllocationCostUpdate) Exec(ctx context.Context) error {
	_, err := acu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acu *AllocationCostUpdate) ExecX(ctx context.Context) {
	if err := acu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acu *AllocationCostUpdate) check() error {
	if v, ok := acu.mutation.TotalCost(); ok {
		if err := allocationcost.TotalCostValidator(v); err != nil {
			return &ValidationError{Name: "totalCost", err: fmt.Errorf(`model: validator failed for field "AllocationCost.totalCost": %w`, err)}
		}
	}
	if v, ok := acu.mutation.CPUCost(); ok {
		if err := allocationcost.CPUCostValidator(v); err != nil {
			return &ValidationError{Name: "cpu_cost", err: fmt.Errorf(`model: validator failed for field "AllocationCost.cpu_cost": %w`, err)}
		}
	}
	if v, ok := acu.mutation.GpuCost(); ok {
		if err := allocationcost.GpuCostValidator(v); err != nil {
			return &ValidationError{Name: "gpu_cost", err: fmt.Errorf(`model: validator failed for field "AllocationCost.gpu_cost": %w`, err)}
		}
	}
	if v, ok := acu.mutation.RAMCost(); ok {
		if err := allocationcost.RAMCostValidator(v); err != nil {
			return &ValidationError{Name: "ram_cost", err: fmt.Errorf(`model: validator failed for field "AllocationCost.ram_cost": %w`, err)}
		}
	}
	if v, ok := acu.mutation.PvCost(); ok {
		if err := allocationcost.PvCostValidator(v); err != nil {
			return &ValidationError{Name: "pv_cost", err: fmt.Errorf(`model: validator failed for field "AllocationCost.pv_cost": %w`, err)}
		}
	}
	if v, ok := acu.mutation.PvBytes(); ok {
		if err := allocationcost.PvBytesValidator(v); err != nil {
			return &ValidationError{Name: "pv_bytes", err: fmt.Errorf(`model: validator failed for field "AllocationCost.pv_bytes": %w`, err)}
		}
	}
	if v, ok := acu.mutation.LoadBalancerCost(); ok {
		if err := allocationcost.LoadBalancerCostValidator(v); err != nil {
			return &ValidationError{Name: "load_balancer_cost", err: fmt.Errorf(`model: validator failed for field "AllocationCost.load_balancer_cost": %w`, err)}
		}
	}
	if v, ok := acu.mutation.CPUCoreUsageAverage(); ok {
		if err := allocationcost.CPUCoreUsageAverageValidator(v); err != nil {
			return &ValidationError{Name: "cpu_core_usage_average", err: fmt.Errorf(`model: validator failed for field "AllocationCost.cpu_core_usage_average": %w`, err)}
		}
	}
	if v, ok := acu.mutation.CPUCoreUsageMax(); ok {
		if err := allocationcost.CPUCoreUsageMaxValidator(v); err != nil {
			return &ValidationError{Name: "cpu_core_usage_max", err: fmt.Errorf(`model: validator failed for field "AllocationCost.cpu_core_usage_max": %w`, err)}
		}
	}
	if v, ok := acu.mutation.RAMByteUsageAverage(); ok {
		if err := allocationcost.RAMByteUsageAverageValidator(v); err != nil {
			return &ValidationError{Name: "ram_byte_usage_average", err: fmt.Errorf(`model: validator failed for field "AllocationCost.ram_byte_usage_average": %w`, err)}
		}
	}
	if v, ok := acu.mutation.RAMByteUsageMax(); ok {
		if err := allocationcost.RAMByteUsageMaxValidator(v); err != nil {
			return &ValidationError{Name: "ram_byte_usage_max", err: fmt.Errorf(`model: validator failed for field "AllocationCost.ram_byte_usage_max": %w`, err)}
		}
	}
	if _, ok := acu.mutation.ConnectorID(); acu.mutation.ConnectorCleared() && !ok {
		return errors.New(`model: clearing a required unique edge "AllocationCost.connector"`)
	}
	return nil
}

// Set is different from other Set* methods,
// it sets the value by judging the definition of each field within the entire object.
//
// For default fields, Set calls if the value is not zero.
//
// For no default but required fields, Set calls directly.
//
// For no default but optional fields, Set calls if the value is not zero,
// or clears if the value is zero.
//
// For example:
//
//	## Without Default
//
//	### Required
//
//	db.SetX(obj.X)
//
//	### Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	} else {
//	   db.ClearX()
//	}
//
//	## With Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (acu *AllocationCostUpdate) Set(obj *AllocationCost) *AllocationCostUpdate {
	// Without Default.
	acu.SetTotalCost(obj.TotalCost)
	if obj.Currency != 0 {
		acu.SetCurrency(obj.Currency)
	}
	acu.SetCPUCost(obj.CPUCost)
	acu.SetGpuCost(obj.GpuCost)
	acu.SetRAMCost(obj.RAMCost)
	acu.SetPvCost(obj.PvCost)
	acu.SetPvBytes(obj.PvBytes)
	acu.SetLoadBalancerCost(obj.LoadBalancerCost)
	acu.SetCPUCoreUsageAverage(obj.CPUCoreUsageAverage)
	acu.SetCPUCoreUsageMax(obj.CPUCoreUsageMax)
	acu.SetRAMByteUsageAverage(obj.RAMByteUsageAverage)
	acu.SetRAMByteUsageMax(obj.RAMByteUsageMax)

	// With Default.

	// Record the given object.
	acu.object = obj

	return acu
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (acu *AllocationCostUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AllocationCostUpdate {
	acu.modifiers = append(acu.modifiers, modifiers...)
	return acu
}

func (acu *AllocationCostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := acu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(allocationcost.Table, allocationcost.Columns, sqlgraph.NewFieldSpec(allocationcost.FieldID, field.TypeInt))
	if ps := acu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if acu.mutation.ClusterNameCleared() {
		_spec.ClearField(allocationcost.FieldClusterName, field.TypeString)
	}
	if acu.mutation.NamespaceCleared() {
		_spec.ClearField(allocationcost.FieldNamespace, field.TypeString)
	}
	if acu.mutation.NodeCleared() {
		_spec.ClearField(allocationcost.FieldNode, field.TypeString)
	}
	if acu.mutation.ControllerCleared() {
		_spec.ClearField(allocationcost.FieldController, field.TypeString)
	}
	if acu.mutation.ControllerKindCleared() {
		_spec.ClearField(allocationcost.FieldControllerKind, field.TypeString)
	}
	if acu.mutation.PodCleared() {
		_spec.ClearField(allocationcost.FieldPod, field.TypeString)
	}
	if acu.mutation.ContainerCleared() {
		_spec.ClearField(allocationcost.FieldContainer, field.TypeString)
	}
	if value, ok := acu.mutation.TotalCost(); ok {
		_spec.SetField(allocationcost.FieldTotalCost, field.TypeFloat64, value)
	}
	if value, ok := acu.mutation.AddedTotalCost(); ok {
		_spec.AddField(allocationcost.FieldTotalCost, field.TypeFloat64, value)
	}
	if value, ok := acu.mutation.Currency(); ok {
		_spec.SetField(allocationcost.FieldCurrency, field.TypeInt, value)
	}
	if value, ok := acu.mutation.AddedCurrency(); ok {
		_spec.AddField(allocationcost.FieldCurrency, field.TypeInt, value)
	}
	if acu.mutation.CurrencyCleared() {
		_spec.ClearField(allocationcost.FieldCurrency, field.TypeInt)
	}
	if value, ok := acu.mutation.CPUCost(); ok {
		_spec.SetField(allocationcost.FieldCPUCost, field.TypeFloat64, value)
	}
	if value, ok := acu.mutation.AddedCPUCost(); ok {
		_spec.AddField(allocationcost.FieldCPUCost, field.TypeFloat64, value)
	}
	if value, ok := acu.mutation.GpuCost(); ok {
		_spec.SetField(allocationcost.FieldGpuCost, field.TypeFloat64, value)
	}
	if value, ok := acu.mutation.AddedGpuCost(); ok {
		_spec.AddField(allocationcost.FieldGpuCost, field.TypeFloat64, value)
	}
	if value, ok := acu.mutation.RAMCost(); ok {
		_spec.SetField(allocationcost.FieldRAMCost, field.TypeFloat64, value)
	}
	if value, ok := acu.mutation.AddedRAMCost(); ok {
		_spec.AddField(allocationcost.FieldRAMCost, field.TypeFloat64, value)
	}
	if value, ok := acu.mutation.PvCost(); ok {
		_spec.SetField(allocationcost.FieldPvCost, field.TypeFloat64, value)
	}
	if value, ok := acu.mutation.AddedPvCost(); ok {
		_spec.AddField(allocationcost.FieldPvCost, field.TypeFloat64, value)
	}
	if value, ok := acu.mutation.PvBytes(); ok {
		_spec.SetField(allocationcost.FieldPvBytes, field.TypeFloat64, value)
	}
	if value, ok := acu.mutation.AddedPvBytes(); ok {
		_spec.AddField(allocationcost.FieldPvBytes, field.TypeFloat64, value)
	}
	if value, ok := acu.mutation.LoadBalancerCost(); ok {
		_spec.SetField(allocationcost.FieldLoadBalancerCost, field.TypeFloat64, value)
	}
	if value, ok := acu.mutation.AddedLoadBalancerCost(); ok {
		_spec.AddField(allocationcost.FieldLoadBalancerCost, field.TypeFloat64, value)
	}
	if value, ok := acu.mutation.CPUCoreUsageAverage(); ok {
		_spec.SetField(allocationcost.FieldCPUCoreUsageAverage, field.TypeFloat64, value)
	}
	if value, ok := acu.mutation.AddedCPUCoreUsageAverage(); ok {
		_spec.AddField(allocationcost.FieldCPUCoreUsageAverage, field.TypeFloat64, value)
	}
	if value, ok := acu.mutation.CPUCoreUsageMax(); ok {
		_spec.SetField(allocationcost.FieldCPUCoreUsageMax, field.TypeFloat64, value)
	}
	if value, ok := acu.mutation.AddedCPUCoreUsageMax(); ok {
		_spec.AddField(allocationcost.FieldCPUCoreUsageMax, field.TypeFloat64, value)
	}
	if value, ok := acu.mutation.RAMByteUsageAverage(); ok {
		_spec.SetField(allocationcost.FieldRAMByteUsageAverage, field.TypeFloat64, value)
	}
	if value, ok := acu.mutation.AddedRAMByteUsageAverage(); ok {
		_spec.AddField(allocationcost.FieldRAMByteUsageAverage, field.TypeFloat64, value)
	}
	if value, ok := acu.mutation.RAMByteUsageMax(); ok {
		_spec.SetField(allocationcost.FieldRAMByteUsageMax, field.TypeFloat64, value)
	}
	if value, ok := acu.mutation.AddedRAMByteUsageMax(); ok {
		_spec.AddField(allocationcost.FieldRAMByteUsageMax, field.TypeFloat64, value)
	}
	_spec.Node.Schema = acu.schemaConfig.AllocationCost
	ctx = internal.NewSchemaConfigContext(ctx, acu.schemaConfig)
	_spec.AddModifiers(acu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, acu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{allocationcost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	acu.mutation.done = true
	return n, nil
}

// AllocationCostUpdateOne is the builder for updating a single AllocationCost entity.
type AllocationCostUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AllocationCostMutation
	modifiers []func(*sql.UpdateBuilder)
	object    *AllocationCost
}

// SetTotalCost sets the "totalCost" field.
func (acuo *AllocationCostUpdateOne) SetTotalCost(f float64) *AllocationCostUpdateOne {
	acuo.mutation.ResetTotalCost()
	acuo.mutation.SetTotalCost(f)
	return acuo
}

// SetNillableTotalCost sets the "totalCost" field if the given value is not nil.
func (acuo *AllocationCostUpdateOne) SetNillableTotalCost(f *float64) *AllocationCostUpdateOne {
	if f != nil {
		acuo.SetTotalCost(*f)
	}
	return acuo
}

// AddTotalCost adds f to the "totalCost" field.
func (acuo *AllocationCostUpdateOne) AddTotalCost(f float64) *AllocationCostUpdateOne {
	acuo.mutation.AddTotalCost(f)
	return acuo
}

// SetCurrency sets the "currency" field.
func (acuo *AllocationCostUpdateOne) SetCurrency(i int) *AllocationCostUpdateOne {
	acuo.mutation.ResetCurrency()
	acuo.mutation.SetCurrency(i)
	return acuo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (acuo *AllocationCostUpdateOne) SetNillableCurrency(i *int) *AllocationCostUpdateOne {
	if i != nil {
		acuo.SetCurrency(*i)
	}
	return acuo
}

// AddCurrency adds i to the "currency" field.
func (acuo *AllocationCostUpdateOne) AddCurrency(i int) *AllocationCostUpdateOne {
	acuo.mutation.AddCurrency(i)
	return acuo
}

// ClearCurrency clears the value of the "currency" field.
func (acuo *AllocationCostUpdateOne) ClearCurrency() *AllocationCostUpdateOne {
	acuo.mutation.ClearCurrency()
	return acuo
}

// SetCPUCost sets the "cpu_cost" field.
func (acuo *AllocationCostUpdateOne) SetCPUCost(f float64) *AllocationCostUpdateOne {
	acuo.mutation.ResetCPUCost()
	acuo.mutation.SetCPUCost(f)
	return acuo
}

// SetNillableCPUCost sets the "cpu_cost" field if the given value is not nil.
func (acuo *AllocationCostUpdateOne) SetNillableCPUCost(f *float64) *AllocationCostUpdateOne {
	if f != nil {
		acuo.SetCPUCost(*f)
	}
	return acuo
}

// AddCPUCost adds f to the "cpu_cost" field.
func (acuo *AllocationCostUpdateOne) AddCPUCost(f float64) *AllocationCostUpdateOne {
	acuo.mutation.AddCPUCost(f)
	return acuo
}

// SetGpuCost sets the "gpu_cost" field.
func (acuo *AllocationCostUpdateOne) SetGpuCost(f float64) *AllocationCostUpdateOne {
	acuo.mutation.ResetGpuCost()
	acuo.mutation.SetGpuCost(f)
	return acuo
}

// SetNillableGpuCost sets the "gpu_cost" field if the given value is not nil.
func (acuo *AllocationCostUpdateOne) SetNillableGpuCost(f *float64) *AllocationCostUpdateOne {
	if f != nil {
		acuo.SetGpuCost(*f)
	}
	return acuo
}

// AddGpuCost adds f to the "gpu_cost" field.
func (acuo *AllocationCostUpdateOne) AddGpuCost(f float64) *AllocationCostUpdateOne {
	acuo.mutation.AddGpuCost(f)
	return acuo
}

// SetRAMCost sets the "ram_cost" field.
func (acuo *AllocationCostUpdateOne) SetRAMCost(f float64) *AllocationCostUpdateOne {
	acuo.mutation.ResetRAMCost()
	acuo.mutation.SetRAMCost(f)
	return acuo
}

// SetNillableRAMCost sets the "ram_cost" field if the given value is not nil.
func (acuo *AllocationCostUpdateOne) SetNillableRAMCost(f *float64) *AllocationCostUpdateOne {
	if f != nil {
		acuo.SetRAMCost(*f)
	}
	return acuo
}

// AddRAMCost adds f to the "ram_cost" field.
func (acuo *AllocationCostUpdateOne) AddRAMCost(f float64) *AllocationCostUpdateOne {
	acuo.mutation.AddRAMCost(f)
	return acuo
}

// SetPvCost sets the "pv_cost" field.
func (acuo *AllocationCostUpdateOne) SetPvCost(f float64) *AllocationCostUpdateOne {
	acuo.mutation.ResetPvCost()
	acuo.mutation.SetPvCost(f)
	return acuo
}

// SetNillablePvCost sets the "pv_cost" field if the given value is not nil.
func (acuo *AllocationCostUpdateOne) SetNillablePvCost(f *float64) *AllocationCostUpdateOne {
	if f != nil {
		acuo.SetPvCost(*f)
	}
	return acuo
}

// AddPvCost adds f to the "pv_cost" field.
func (acuo *AllocationCostUpdateOne) AddPvCost(f float64) *AllocationCostUpdateOne {
	acuo.mutation.AddPvCost(f)
	return acuo
}

// SetPvBytes sets the "pv_bytes" field.
func (acuo *AllocationCostUpdateOne) SetPvBytes(f float64) *AllocationCostUpdateOne {
	acuo.mutation.ResetPvBytes()
	acuo.mutation.SetPvBytes(f)
	return acuo
}

// SetNillablePvBytes sets the "pv_bytes" field if the given value is not nil.
func (acuo *AllocationCostUpdateOne) SetNillablePvBytes(f *float64) *AllocationCostUpdateOne {
	if f != nil {
		acuo.SetPvBytes(*f)
	}
	return acuo
}

// AddPvBytes adds f to the "pv_bytes" field.
func (acuo *AllocationCostUpdateOne) AddPvBytes(f float64) *AllocationCostUpdateOne {
	acuo.mutation.AddPvBytes(f)
	return acuo
}

// SetLoadBalancerCost sets the "load_balancer_cost" field.
func (acuo *AllocationCostUpdateOne) SetLoadBalancerCost(f float64) *AllocationCostUpdateOne {
	acuo.mutation.ResetLoadBalancerCost()
	acuo.mutation.SetLoadBalancerCost(f)
	return acuo
}

// SetNillableLoadBalancerCost sets the "load_balancer_cost" field if the given value is not nil.
func (acuo *AllocationCostUpdateOne) SetNillableLoadBalancerCost(f *float64) *AllocationCostUpdateOne {
	if f != nil {
		acuo.SetLoadBalancerCost(*f)
	}
	return acuo
}

// AddLoadBalancerCost adds f to the "load_balancer_cost" field.
func (acuo *AllocationCostUpdateOne) AddLoadBalancerCost(f float64) *AllocationCostUpdateOne {
	acuo.mutation.AddLoadBalancerCost(f)
	return acuo
}

// SetCPUCoreUsageAverage sets the "cpu_core_usage_average" field.
func (acuo *AllocationCostUpdateOne) SetCPUCoreUsageAverage(f float64) *AllocationCostUpdateOne {
	acuo.mutation.ResetCPUCoreUsageAverage()
	acuo.mutation.SetCPUCoreUsageAverage(f)
	return acuo
}

// SetNillableCPUCoreUsageAverage sets the "cpu_core_usage_average" field if the given value is not nil.
func (acuo *AllocationCostUpdateOne) SetNillableCPUCoreUsageAverage(f *float64) *AllocationCostUpdateOne {
	if f != nil {
		acuo.SetCPUCoreUsageAverage(*f)
	}
	return acuo
}

// AddCPUCoreUsageAverage adds f to the "cpu_core_usage_average" field.
func (acuo *AllocationCostUpdateOne) AddCPUCoreUsageAverage(f float64) *AllocationCostUpdateOne {
	acuo.mutation.AddCPUCoreUsageAverage(f)
	return acuo
}

// SetCPUCoreUsageMax sets the "cpu_core_usage_max" field.
func (acuo *AllocationCostUpdateOne) SetCPUCoreUsageMax(f float64) *AllocationCostUpdateOne {
	acuo.mutation.ResetCPUCoreUsageMax()
	acuo.mutation.SetCPUCoreUsageMax(f)
	return acuo
}

// SetNillableCPUCoreUsageMax sets the "cpu_core_usage_max" field if the given value is not nil.
func (acuo *AllocationCostUpdateOne) SetNillableCPUCoreUsageMax(f *float64) *AllocationCostUpdateOne {
	if f != nil {
		acuo.SetCPUCoreUsageMax(*f)
	}
	return acuo
}

// AddCPUCoreUsageMax adds f to the "cpu_core_usage_max" field.
func (acuo *AllocationCostUpdateOne) AddCPUCoreUsageMax(f float64) *AllocationCostUpdateOne {
	acuo.mutation.AddCPUCoreUsageMax(f)
	return acuo
}

// SetRAMByteUsageAverage sets the "ram_byte_usage_average" field.
func (acuo *AllocationCostUpdateOne) SetRAMByteUsageAverage(f float64) *AllocationCostUpdateOne {
	acuo.mutation.ResetRAMByteUsageAverage()
	acuo.mutation.SetRAMByteUsageAverage(f)
	return acuo
}

// SetNillableRAMByteUsageAverage sets the "ram_byte_usage_average" field if the given value is not nil.
func (acuo *AllocationCostUpdateOne) SetNillableRAMByteUsageAverage(f *float64) *AllocationCostUpdateOne {
	if f != nil {
		acuo.SetRAMByteUsageAverage(*f)
	}
	return acuo
}

// AddRAMByteUsageAverage adds f to the "ram_byte_usage_average" field.
func (acuo *AllocationCostUpdateOne) AddRAMByteUsageAverage(f float64) *AllocationCostUpdateOne {
	acuo.mutation.AddRAMByteUsageAverage(f)
	return acuo
}

// SetRAMByteUsageMax sets the "ram_byte_usage_max" field.
func (acuo *AllocationCostUpdateOne) SetRAMByteUsageMax(f float64) *AllocationCostUpdateOne {
	acuo.mutation.ResetRAMByteUsageMax()
	acuo.mutation.SetRAMByteUsageMax(f)
	return acuo
}

// SetNillableRAMByteUsageMax sets the "ram_byte_usage_max" field if the given value is not nil.
func (acuo *AllocationCostUpdateOne) SetNillableRAMByteUsageMax(f *float64) *AllocationCostUpdateOne {
	if f != nil {
		acuo.SetRAMByteUsageMax(*f)
	}
	return acuo
}

// AddRAMByteUsageMax adds f to the "ram_byte_usage_max" field.
func (acuo *AllocationCostUpdateOne) AddRAMByteUsageMax(f float64) *AllocationCostUpdateOne {
	acuo.mutation.AddRAMByteUsageMax(f)
	return acuo
}

// Mutation returns the AllocationCostMutation object of the builder.
func (acuo *AllocationCostUpdateOne) Mutation() *AllocationCostMutation {
	return acuo.mutation
}

// Where appends a list predicates to the AllocationCostUpdate builder.
func (acuo *AllocationCostUpdateOne) Where(ps ...predicate.AllocationCost) *AllocationCostUpdateOne {
	acuo.mutation.Where(ps...)
	return acuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (acuo *AllocationCostUpdateOne) Select(field string, fields ...string) *AllocationCostUpdateOne {
	acuo.fields = append([]string{field}, fields...)
	return acuo
}

// Save executes the query and returns the updated AllocationCost entity.
func (acuo *AllocationCostUpdateOne) Save(ctx context.Context) (*AllocationCost, error) {
	return withHooks(ctx, acuo.sqlSave, acuo.mutation, acuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (acuo *AllocationCostUpdateOne) SaveX(ctx context.Context) *AllocationCost {
	node, err := acuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (acuo *AllocationCostUpdateOne) Exec(ctx context.Context) error {
	_, err := acuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acuo *AllocationCostUpdateOne) ExecX(ctx context.Context) {
	if err := acuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acuo *AllocationCostUpdateOne) check() error {
	if v, ok := acuo.mutation.TotalCost(); ok {
		if err := allocationcost.TotalCostValidator(v); err != nil {
			return &ValidationError{Name: "totalCost", err: fmt.Errorf(`model: validator failed for field "AllocationCost.totalCost": %w`, err)}
		}
	}
	if v, ok := acuo.mutation.CPUCost(); ok {
		if err := allocationcost.CPUCostValidator(v); err != nil {
			return &ValidationError{Name: "cpu_cost", err: fmt.Errorf(`model: validator failed for field "AllocationCost.cpu_cost": %w`, err)}
		}
	}
	if v, ok := acuo.mutation.GpuCost(); ok {
		if err := allocationcost.GpuCostValidator(v); err != nil {
			return &ValidationError{Name: "gpu_cost", err: fmt.Errorf(`model: validator failed for field "AllocationCost.gpu_cost": %w`, err)}
		}
	}
	if v, ok := acuo.mutation.RAMCost(); ok {
		if err := allocationcost.RAMCostValidator(v); err != nil {
			return &ValidationError{Name: "ram_cost", err: fmt.Errorf(`model: validator failed for field "AllocationCost.ram_cost": %w`, err)}
		}
	}
	if v, ok := acuo.mutation.PvCost(); ok {
		if err := allocationcost.PvCostValidator(v); err != nil {
			return &ValidationError{Name: "pv_cost", err: fmt.Errorf(`model: validator failed for field "AllocationCost.pv_cost": %w`, err)}
		}
	}
	if v, ok := acuo.mutation.PvBytes(); ok {
		if err := allocationcost.PvBytesValidator(v); err != nil {
			return &ValidationError{Name: "pv_bytes", err: fmt.Errorf(`model: validator failed for field "AllocationCost.pv_bytes": %w`, err)}
		}
	}
	if v, ok := acuo.mutation.LoadBalancerCost(); ok {
		if err := allocationcost.LoadBalancerCostValidator(v); err != nil {
			return &ValidationError{Name: "load_balancer_cost", err: fmt.Errorf(`model: validator failed for field "AllocationCost.load_balancer_cost": %w`, err)}
		}
	}
	if v, ok := acuo.mutation.CPUCoreUsageAverage(); ok {
		if err := allocationcost.CPUCoreUsageAverageValidator(v); err != nil {
			return &ValidationError{Name: "cpu_core_usage_average", err: fmt.Errorf(`model: validator failed for field "AllocationCost.cpu_core_usage_average": %w`, err)}
		}
	}
	if v, ok := acuo.mutation.CPUCoreUsageMax(); ok {
		if err := allocationcost.CPUCoreUsageMaxValidator(v); err != nil {
			return &ValidationError{Name: "cpu_core_usage_max", err: fmt.Errorf(`model: validator failed for field "AllocationCost.cpu_core_usage_max": %w`, err)}
		}
	}
	if v, ok := acuo.mutation.RAMByteUsageAverage(); ok {
		if err := allocationcost.RAMByteUsageAverageValidator(v); err != nil {
			return &ValidationError{Name: "ram_byte_usage_average", err: fmt.Errorf(`model: validator failed for field "AllocationCost.ram_byte_usage_average": %w`, err)}
		}
	}
	if v, ok := acuo.mutation.RAMByteUsageMax(); ok {
		if err := allocationcost.RAMByteUsageMaxValidator(v); err != nil {
			return &ValidationError{Name: "ram_byte_usage_max", err: fmt.Errorf(`model: validator failed for field "AllocationCost.ram_byte_usage_max": %w`, err)}
		}
	}
	if _, ok := acuo.mutation.ConnectorID(); acuo.mutation.ConnectorCleared() && !ok {
		return errors.New(`model: clearing a required unique edge "AllocationCost.connector"`)
	}
	return nil
}

// Set is different from other Set* methods,
// it sets the value by judging the definition of each field within the entire object.
//
// For default fields, Set calls if the value changes from the original.
//
// For no default but required fields, Set calls if the value changes from the original.
//
// For no default but optional fields, Set calls if the value changes from the original,
// or clears if changes to zero.
//
// For example:
//
//	## Without Default
//
//	### Required
//
//	db.SetX(obj.X)
//
//	### Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   if _is_not_equal_(db.X, obj.X) {
//	      db.SetX(obj.X)
//	   }
//	} else {
//	   db.ClearX()
//	}
//
//	## With Default
//
//	if _is_zero_value_(obj.X) && _is_not_equal_(db.X, obj.X) {
//	   db.SetX(obj.X)
//	}
func (acuo *AllocationCostUpdateOne) Set(obj *AllocationCost) *AllocationCostUpdateOne {
	h := func(n ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			mt := m.(*AllocationCostMutation)
			db, err := mt.Client().AllocationCost.Get(ctx, *mt.id)
			if err != nil {
				return nil, fmt.Errorf("failed getting AllocationCost with id: %v", *mt.id)
			}

			// Without Default.
			if db.TotalCost != obj.TotalCost {
				acuo.SetTotalCost(obj.TotalCost)
			}
			if obj.Currency != 0 {
				if db.Currency != obj.Currency {
					acuo.SetCurrency(obj.Currency)
				}
			}
			if db.CPUCost != obj.CPUCost {
				acuo.SetCPUCost(obj.CPUCost)
			}
			if db.GpuCost != obj.GpuCost {
				acuo.SetGpuCost(obj.GpuCost)
			}
			if db.RAMCost != obj.RAMCost {
				acuo.SetRAMCost(obj.RAMCost)
			}
			if db.PvCost != obj.PvCost {
				acuo.SetPvCost(obj.PvCost)
			}
			if db.PvBytes != obj.PvBytes {
				acuo.SetPvBytes(obj.PvBytes)
			}
			if db.LoadBalancerCost != obj.LoadBalancerCost {
				acuo.SetLoadBalancerCost(obj.LoadBalancerCost)
			}
			if db.CPUCoreUsageAverage != obj.CPUCoreUsageAverage {
				acuo.SetCPUCoreUsageAverage(obj.CPUCoreUsageAverage)
			}
			if db.CPUCoreUsageMax != obj.CPUCoreUsageMax {
				acuo.SetCPUCoreUsageMax(obj.CPUCoreUsageMax)
			}
			if db.RAMByteUsageAverage != obj.RAMByteUsageAverage {
				acuo.SetRAMByteUsageAverage(obj.RAMByteUsageAverage)
			}
			if db.RAMByteUsageMax != obj.RAMByteUsageMax {
				acuo.SetRAMByteUsageMax(obj.RAMByteUsageMax)
			}

			// With Default.

			// Record the given object.
			acuo.object = obj

			return n.Mutate(ctx, m)
		})
	}

	acuo.hooks = append(acuo.hooks, h)

	return acuo
}

// getClientSet returns the ClientSet for the given builder.
func (acuo *AllocationCostUpdateOne) getClientSet() (mc ClientSet) {
	if _, ok := acuo.config.driver.(*txDriver); ok {
		tx := &Tx{config: acuo.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: acuo.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after updated the AllocationCost entity,
// which is always good for cascading update operations.
func (acuo *AllocationCostUpdateOne) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *AllocationCost) error) (*AllocationCost, error) {
	obj, err := acuo.Save(ctx)
	if err != nil &&
		(acuo.object == nil || !errors.Is(err, stdsql.ErrNoRows)) {
		return nil, err
	}

	if len(cbs) == 0 {
		return obj, err
	}

	mc := acuo.getClientSet()

	if obj == nil {
		obj = acuo.object
	} else if x := acuo.object; x != nil {
		if _, set := acuo.mutation.Field(allocationcost.FieldTotalCost); set {
			obj.TotalCost = x.TotalCost
		}
		if _, set := acuo.mutation.Field(allocationcost.FieldCurrency); set {
			obj.Currency = x.Currency
		}
		if _, set := acuo.mutation.Field(allocationcost.FieldCPUCost); set {
			obj.CPUCost = x.CPUCost
		}
		if _, set := acuo.mutation.Field(allocationcost.FieldGpuCost); set {
			obj.GpuCost = x.GpuCost
		}
		if _, set := acuo.mutation.Field(allocationcost.FieldRAMCost); set {
			obj.RAMCost = x.RAMCost
		}
		if _, set := acuo.mutation.Field(allocationcost.FieldPvCost); set {
			obj.PvCost = x.PvCost
		}
		if _, set := acuo.mutation.Field(allocationcost.FieldPvBytes); set {
			obj.PvBytes = x.PvBytes
		}
		if _, set := acuo.mutation.Field(allocationcost.FieldLoadBalancerCost); set {
			obj.LoadBalancerCost = x.LoadBalancerCost
		}
		if _, set := acuo.mutation.Field(allocationcost.FieldCPUCoreUsageAverage); set {
			obj.CPUCoreUsageAverage = x.CPUCoreUsageAverage
		}
		if _, set := acuo.mutation.Field(allocationcost.FieldCPUCoreUsageMax); set {
			obj.CPUCoreUsageMax = x.CPUCoreUsageMax
		}
		if _, set := acuo.mutation.Field(allocationcost.FieldRAMByteUsageAverage); set {
			obj.RAMByteUsageAverage = x.RAMByteUsageAverage
		}
		if _, set := acuo.mutation.Field(allocationcost.FieldRAMByteUsageMax); set {
			obj.RAMByteUsageMax = x.RAMByteUsageMax
		}
		obj.Edges = x.Edges
	}

	for i := range cbs {
		if err = cbs[i](ctx, mc, obj); err != nil {
			return nil, err
		}
	}

	return obj, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (acuo *AllocationCostUpdateOne) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *AllocationCost) error) *AllocationCost {
	obj, err := acuo.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return obj
}

// ExecE calls the given function after executed the query,
// which is always good for cascading update operations.
func (acuo *AllocationCostUpdateOne) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *AllocationCost) error) error {
	_, err := acuo.SaveE(ctx, cbs...)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acuo *AllocationCostUpdateOne) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *AllocationCost) error) {
	if err := acuo.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (acuo *AllocationCostUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AllocationCostUpdateOne {
	acuo.modifiers = append(acuo.modifiers, modifiers...)
	return acuo
}

func (acuo *AllocationCostUpdateOne) sqlSave(ctx context.Context) (_node *AllocationCost, err error) {
	if err := acuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(allocationcost.Table, allocationcost.Columns, sqlgraph.NewFieldSpec(allocationcost.FieldID, field.TypeInt))
	id, ok := acuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`model: missing "AllocationCost.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := acuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, allocationcost.FieldID)
		for _, f := range fields {
			if !allocationcost.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
			}
			if f != allocationcost.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := acuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if acuo.mutation.ClusterNameCleared() {
		_spec.ClearField(allocationcost.FieldClusterName, field.TypeString)
	}
	if acuo.mutation.NamespaceCleared() {
		_spec.ClearField(allocationcost.FieldNamespace, field.TypeString)
	}
	if acuo.mutation.NodeCleared() {
		_spec.ClearField(allocationcost.FieldNode, field.TypeString)
	}
	if acuo.mutation.ControllerCleared() {
		_spec.ClearField(allocationcost.FieldController, field.TypeString)
	}
	if acuo.mutation.ControllerKindCleared() {
		_spec.ClearField(allocationcost.FieldControllerKind, field.TypeString)
	}
	if acuo.mutation.PodCleared() {
		_spec.ClearField(allocationcost.FieldPod, field.TypeString)
	}
	if acuo.mutation.ContainerCleared() {
		_spec.ClearField(allocationcost.FieldContainer, field.TypeString)
	}
	if value, ok := acuo.mutation.TotalCost(); ok {
		_spec.SetField(allocationcost.FieldTotalCost, field.TypeFloat64, value)
	}
	if value, ok := acuo.mutation.AddedTotalCost(); ok {
		_spec.AddField(allocationcost.FieldTotalCost, field.TypeFloat64, value)
	}
	if value, ok := acuo.mutation.Currency(); ok {
		_spec.SetField(allocationcost.FieldCurrency, field.TypeInt, value)
	}
	if value, ok := acuo.mutation.AddedCurrency(); ok {
		_spec.AddField(allocationcost.FieldCurrency, field.TypeInt, value)
	}
	if acuo.mutation.CurrencyCleared() {
		_spec.ClearField(allocationcost.FieldCurrency, field.TypeInt)
	}
	if value, ok := acuo.mutation.CPUCost(); ok {
		_spec.SetField(allocationcost.FieldCPUCost, field.TypeFloat64, value)
	}
	if value, ok := acuo.mutation.AddedCPUCost(); ok {
		_spec.AddField(allocationcost.FieldCPUCost, field.TypeFloat64, value)
	}
	if value, ok := acuo.mutation.GpuCost(); ok {
		_spec.SetField(allocationcost.FieldGpuCost, field.TypeFloat64, value)
	}
	if value, ok := acuo.mutation.AddedGpuCost(); ok {
		_spec.AddField(allocationcost.FieldGpuCost, field.TypeFloat64, value)
	}
	if value, ok := acuo.mutation.RAMCost(); ok {
		_spec.SetField(allocationcost.FieldRAMCost, field.TypeFloat64, value)
	}
	if value, ok := acuo.mutation.AddedRAMCost(); ok {
		_spec.AddField(allocationcost.FieldRAMCost, field.TypeFloat64, value)
	}
	if value, ok := acuo.mutation.PvCost(); ok {
		_spec.SetField(allocationcost.FieldPvCost, field.TypeFloat64, value)
	}
	if value, ok := acuo.mutation.AddedPvCost(); ok {
		_spec.AddField(allocationcost.FieldPvCost, field.TypeFloat64, value)
	}
	if value, ok := acuo.mutation.PvBytes(); ok {
		_spec.SetField(allocationcost.FieldPvBytes, field.TypeFloat64, value)
	}
	if value, ok := acuo.mutation.AddedPvBytes(); ok {
		_spec.AddField(allocationcost.FieldPvBytes, field.TypeFloat64, value)
	}
	if value, ok := acuo.mutation.LoadBalancerCost(); ok {
		_spec.SetField(allocationcost.FieldLoadBalancerCost, field.TypeFloat64, value)
	}
	if value, ok := acuo.mutation.AddedLoadBalancerCost(); ok {
		_spec.AddField(allocationcost.FieldLoadBalancerCost, field.TypeFloat64, value)
	}
	if value, ok := acuo.mutation.CPUCoreUsageAverage(); ok {
		_spec.SetField(allocationcost.FieldCPUCoreUsageAverage, field.TypeFloat64, value)
	}
	if value, ok := acuo.mutation.AddedCPUCoreUsageAverage(); ok {
		_spec.AddField(allocationcost.FieldCPUCoreUsageAverage, field.TypeFloat64, value)
	}
	if value, ok := acuo.mutation.CPUCoreUsageMax(); ok {
		_spec.SetField(allocationcost.FieldCPUCoreUsageMax, field.TypeFloat64, value)
	}
	if value, ok := acuo.mutation.AddedCPUCoreUsageMax(); ok {
		_spec.AddField(allocationcost.FieldCPUCoreUsageMax, field.TypeFloat64, value)
	}
	if value, ok := acuo.mutation.RAMByteUsageAverage(); ok {
		_spec.SetField(allocationcost.FieldRAMByteUsageAverage, field.TypeFloat64, value)
	}
	if value, ok := acuo.mutation.AddedRAMByteUsageAverage(); ok {
		_spec.AddField(allocationcost.FieldRAMByteUsageAverage, field.TypeFloat64, value)
	}
	if value, ok := acuo.mutation.RAMByteUsageMax(); ok {
		_spec.SetField(allocationcost.FieldRAMByteUsageMax, field.TypeFloat64, value)
	}
	if value, ok := acuo.mutation.AddedRAMByteUsageMax(); ok {
		_spec.AddField(allocationcost.FieldRAMByteUsageMax, field.TypeFloat64, value)
	}
	_spec.Node.Schema = acuo.schemaConfig.AllocationCost
	ctx = internal.NewSchemaConfigContext(ctx, acuo.schemaConfig)
	_spec.AddModifiers(acuo.modifiers...)
	_node = &AllocationCost{config: acuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, acuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{allocationcost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	acuo.mutation.done = true
	return _node, nil
}
