// SPDX-FileCopyrightText: 2023 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "seal". DO NOT EDIT.

package servicerevision

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"

	"github.com/seal-io/seal/pkg/dao/model/internal"
	"github.com/seal-io/seal/pkg/dao/model/predicate"
	"github.com/seal-io/seal/pkg/dao/types/crypto"
	"github.com/seal-io/seal/pkg/dao/types/object"
	"github.com/seal-io/seal/pkg/dao/types/property"
)

// ID filters vertices based on their ID field.
func ID(id object.ID) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id object.ID) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id object.ID) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...object.ID) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...object.ID) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id object.ID) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id object.ID) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id object.ID) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id object.ID) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldEQ(FieldCreateTime, v))
}

// ProjectID applies equality check predicate on the "project_id" field. It's identical to ProjectIDEQ.
func ProjectID(v object.ID) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldEQ(FieldProjectID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldEQ(FieldStatus, v))
}

// StatusMessage applies equality check predicate on the "status_message" field. It's identical to StatusMessageEQ.
func StatusMessage(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldEQ(FieldStatusMessage, v))
}

// EnvironmentID applies equality check predicate on the "environment_id" field. It's identical to EnvironmentIDEQ.
func EnvironmentID(v object.ID) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldEQ(FieldEnvironmentID, v))
}

// ServiceID applies equality check predicate on the "service_id" field. It's identical to ServiceIDEQ.
func ServiceID(v object.ID) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldEQ(FieldServiceID, v))
}

// TemplateName applies equality check predicate on the "template_name" field. It's identical to TemplateNameEQ.
func TemplateName(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldEQ(FieldTemplateName, v))
}

// TemplateVersion applies equality check predicate on the "template_version" field. It's identical to TemplateVersionEQ.
func TemplateVersion(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldEQ(FieldTemplateVersion, v))
}

// Attributes applies equality check predicate on the "attributes" field. It's identical to AttributesEQ.
func Attributes(v property.Values) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldEQ(FieldAttributes, v))
}

// Variables applies equality check predicate on the "variables" field. It's identical to VariablesEQ.
func Variables(v crypto.Map[string, string]) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldEQ(FieldVariables, v))
}

// InputPlan applies equality check predicate on the "input_plan" field. It's identical to InputPlanEQ.
func InputPlan(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldEQ(FieldInputPlan, v))
}

// Output applies equality check predicate on the "output" field. It's identical to OutputEQ.
func Output(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldEQ(FieldOutput, v))
}

// DeployerType applies equality check predicate on the "deployer_type" field. It's identical to DeployerTypeEQ.
func DeployerType(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldEQ(FieldDeployerType, v))
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v int) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldEQ(FieldDuration, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldLTE(FieldCreateTime, v))
}

// ProjectIDEQ applies the EQ predicate on the "project_id" field.
func ProjectIDEQ(v object.ID) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldEQ(FieldProjectID, v))
}

// ProjectIDNEQ applies the NEQ predicate on the "project_id" field.
func ProjectIDNEQ(v object.ID) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldNEQ(FieldProjectID, v))
}

// ProjectIDIn applies the In predicate on the "project_id" field.
func ProjectIDIn(vs ...object.ID) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldIn(FieldProjectID, vs...))
}

// ProjectIDNotIn applies the NotIn predicate on the "project_id" field.
func ProjectIDNotIn(vs ...object.ID) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldNotIn(FieldProjectID, vs...))
}

// ProjectIDGT applies the GT predicate on the "project_id" field.
func ProjectIDGT(v object.ID) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldGT(FieldProjectID, v))
}

// ProjectIDGTE applies the GTE predicate on the "project_id" field.
func ProjectIDGTE(v object.ID) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldGTE(FieldProjectID, v))
}

// ProjectIDLT applies the LT predicate on the "project_id" field.
func ProjectIDLT(v object.ID) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldLT(FieldProjectID, v))
}

// ProjectIDLTE applies the LTE predicate on the "project_id" field.
func ProjectIDLTE(v object.ID) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldLTE(FieldProjectID, v))
}

// ProjectIDContains applies the Contains predicate on the "project_id" field.
func ProjectIDContains(v object.ID) predicate.ServiceRevision {
	vc := string(v)
	return predicate.ServiceRevision(sql.FieldContains(FieldProjectID, vc))
}

// ProjectIDHasPrefix applies the HasPrefix predicate on the "project_id" field.
func ProjectIDHasPrefix(v object.ID) predicate.ServiceRevision {
	vc := string(v)
	return predicate.ServiceRevision(sql.FieldHasPrefix(FieldProjectID, vc))
}

// ProjectIDHasSuffix applies the HasSuffix predicate on the "project_id" field.
func ProjectIDHasSuffix(v object.ID) predicate.ServiceRevision {
	vc := string(v)
	return predicate.ServiceRevision(sql.FieldHasSuffix(FieldProjectID, vc))
}

// ProjectIDEqualFold applies the EqualFold predicate on the "project_id" field.
func ProjectIDEqualFold(v object.ID) predicate.ServiceRevision {
	vc := string(v)
	return predicate.ServiceRevision(sql.FieldEqualFold(FieldProjectID, vc))
}

// ProjectIDContainsFold applies the ContainsFold predicate on the "project_id" field.
func ProjectIDContainsFold(v object.ID) predicate.ServiceRevision {
	vc := string(v)
	return predicate.ServiceRevision(sql.FieldContainsFold(FieldProjectID, vc))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldNotNull(FieldStatus))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldContainsFold(FieldStatus, v))
}

// StatusMessageEQ applies the EQ predicate on the "status_message" field.
func StatusMessageEQ(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldEQ(FieldStatusMessage, v))
}

// StatusMessageNEQ applies the NEQ predicate on the "status_message" field.
func StatusMessageNEQ(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldNEQ(FieldStatusMessage, v))
}

// StatusMessageIn applies the In predicate on the "status_message" field.
func StatusMessageIn(vs ...string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldIn(FieldStatusMessage, vs...))
}

// StatusMessageNotIn applies the NotIn predicate on the "status_message" field.
func StatusMessageNotIn(vs ...string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldNotIn(FieldStatusMessage, vs...))
}

// StatusMessageGT applies the GT predicate on the "status_message" field.
func StatusMessageGT(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldGT(FieldStatusMessage, v))
}

// StatusMessageGTE applies the GTE predicate on the "status_message" field.
func StatusMessageGTE(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldGTE(FieldStatusMessage, v))
}

// StatusMessageLT applies the LT predicate on the "status_message" field.
func StatusMessageLT(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldLT(FieldStatusMessage, v))
}

// StatusMessageLTE applies the LTE predicate on the "status_message" field.
func StatusMessageLTE(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldLTE(FieldStatusMessage, v))
}

// StatusMessageContains applies the Contains predicate on the "status_message" field.
func StatusMessageContains(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldContains(FieldStatusMessage, v))
}

// StatusMessageHasPrefix applies the HasPrefix predicate on the "status_message" field.
func StatusMessageHasPrefix(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldHasPrefix(FieldStatusMessage, v))
}

// StatusMessageHasSuffix applies the HasSuffix predicate on the "status_message" field.
func StatusMessageHasSuffix(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldHasSuffix(FieldStatusMessage, v))
}

// StatusMessageIsNil applies the IsNil predicate on the "status_message" field.
func StatusMessageIsNil() predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldIsNull(FieldStatusMessage))
}

// StatusMessageNotNil applies the NotNil predicate on the "status_message" field.
func StatusMessageNotNil() predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldNotNull(FieldStatusMessage))
}

// StatusMessageEqualFold applies the EqualFold predicate on the "status_message" field.
func StatusMessageEqualFold(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldEqualFold(FieldStatusMessage, v))
}

// StatusMessageContainsFold applies the ContainsFold predicate on the "status_message" field.
func StatusMessageContainsFold(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldContainsFold(FieldStatusMessage, v))
}

// EnvironmentIDEQ applies the EQ predicate on the "environment_id" field.
func EnvironmentIDEQ(v object.ID) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldEQ(FieldEnvironmentID, v))
}

// EnvironmentIDNEQ applies the NEQ predicate on the "environment_id" field.
func EnvironmentIDNEQ(v object.ID) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldNEQ(FieldEnvironmentID, v))
}

// EnvironmentIDIn applies the In predicate on the "environment_id" field.
func EnvironmentIDIn(vs ...object.ID) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldIn(FieldEnvironmentID, vs...))
}

// EnvironmentIDNotIn applies the NotIn predicate on the "environment_id" field.
func EnvironmentIDNotIn(vs ...object.ID) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldNotIn(FieldEnvironmentID, vs...))
}

// EnvironmentIDGT applies the GT predicate on the "environment_id" field.
func EnvironmentIDGT(v object.ID) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldGT(FieldEnvironmentID, v))
}

// EnvironmentIDGTE applies the GTE predicate on the "environment_id" field.
func EnvironmentIDGTE(v object.ID) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldGTE(FieldEnvironmentID, v))
}

// EnvironmentIDLT applies the LT predicate on the "environment_id" field.
func EnvironmentIDLT(v object.ID) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldLT(FieldEnvironmentID, v))
}

// EnvironmentIDLTE applies the LTE predicate on the "environment_id" field.
func EnvironmentIDLTE(v object.ID) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldLTE(FieldEnvironmentID, v))
}

// EnvironmentIDContains applies the Contains predicate on the "environment_id" field.
func EnvironmentIDContains(v object.ID) predicate.ServiceRevision {
	vc := string(v)
	return predicate.ServiceRevision(sql.FieldContains(FieldEnvironmentID, vc))
}

// EnvironmentIDHasPrefix applies the HasPrefix predicate on the "environment_id" field.
func EnvironmentIDHasPrefix(v object.ID) predicate.ServiceRevision {
	vc := string(v)
	return predicate.ServiceRevision(sql.FieldHasPrefix(FieldEnvironmentID, vc))
}

// EnvironmentIDHasSuffix applies the HasSuffix predicate on the "environment_id" field.
func EnvironmentIDHasSuffix(v object.ID) predicate.ServiceRevision {
	vc := string(v)
	return predicate.ServiceRevision(sql.FieldHasSuffix(FieldEnvironmentID, vc))
}

// EnvironmentIDEqualFold applies the EqualFold predicate on the "environment_id" field.
func EnvironmentIDEqualFold(v object.ID) predicate.ServiceRevision {
	vc := string(v)
	return predicate.ServiceRevision(sql.FieldEqualFold(FieldEnvironmentID, vc))
}

// EnvironmentIDContainsFold applies the ContainsFold predicate on the "environment_id" field.
func EnvironmentIDContainsFold(v object.ID) predicate.ServiceRevision {
	vc := string(v)
	return predicate.ServiceRevision(sql.FieldContainsFold(FieldEnvironmentID, vc))
}

// ServiceIDEQ applies the EQ predicate on the "service_id" field.
func ServiceIDEQ(v object.ID) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldEQ(FieldServiceID, v))
}

// ServiceIDNEQ applies the NEQ predicate on the "service_id" field.
func ServiceIDNEQ(v object.ID) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldNEQ(FieldServiceID, v))
}

// ServiceIDIn applies the In predicate on the "service_id" field.
func ServiceIDIn(vs ...object.ID) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldIn(FieldServiceID, vs...))
}

// ServiceIDNotIn applies the NotIn predicate on the "service_id" field.
func ServiceIDNotIn(vs ...object.ID) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldNotIn(FieldServiceID, vs...))
}

// ServiceIDGT applies the GT predicate on the "service_id" field.
func ServiceIDGT(v object.ID) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldGT(FieldServiceID, v))
}

// ServiceIDGTE applies the GTE predicate on the "service_id" field.
func ServiceIDGTE(v object.ID) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldGTE(FieldServiceID, v))
}

// ServiceIDLT applies the LT predicate on the "service_id" field.
func ServiceIDLT(v object.ID) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldLT(FieldServiceID, v))
}

// ServiceIDLTE applies the LTE predicate on the "service_id" field.
func ServiceIDLTE(v object.ID) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldLTE(FieldServiceID, v))
}

// ServiceIDContains applies the Contains predicate on the "service_id" field.
func ServiceIDContains(v object.ID) predicate.ServiceRevision {
	vc := string(v)
	return predicate.ServiceRevision(sql.FieldContains(FieldServiceID, vc))
}

// ServiceIDHasPrefix applies the HasPrefix predicate on the "service_id" field.
func ServiceIDHasPrefix(v object.ID) predicate.ServiceRevision {
	vc := string(v)
	return predicate.ServiceRevision(sql.FieldHasPrefix(FieldServiceID, vc))
}

// ServiceIDHasSuffix applies the HasSuffix predicate on the "service_id" field.
func ServiceIDHasSuffix(v object.ID) predicate.ServiceRevision {
	vc := string(v)
	return predicate.ServiceRevision(sql.FieldHasSuffix(FieldServiceID, vc))
}

// ServiceIDEqualFold applies the EqualFold predicate on the "service_id" field.
func ServiceIDEqualFold(v object.ID) predicate.ServiceRevision {
	vc := string(v)
	return predicate.ServiceRevision(sql.FieldEqualFold(FieldServiceID, vc))
}

// ServiceIDContainsFold applies the ContainsFold predicate on the "service_id" field.
func ServiceIDContainsFold(v object.ID) predicate.ServiceRevision {
	vc := string(v)
	return predicate.ServiceRevision(sql.FieldContainsFold(FieldServiceID, vc))
}

// TemplateNameEQ applies the EQ predicate on the "template_name" field.
func TemplateNameEQ(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldEQ(FieldTemplateName, v))
}

// TemplateNameNEQ applies the NEQ predicate on the "template_name" field.
func TemplateNameNEQ(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldNEQ(FieldTemplateName, v))
}

// TemplateNameIn applies the In predicate on the "template_name" field.
func TemplateNameIn(vs ...string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldIn(FieldTemplateName, vs...))
}

// TemplateNameNotIn applies the NotIn predicate on the "template_name" field.
func TemplateNameNotIn(vs ...string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldNotIn(FieldTemplateName, vs...))
}

// TemplateNameGT applies the GT predicate on the "template_name" field.
func TemplateNameGT(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldGT(FieldTemplateName, v))
}

// TemplateNameGTE applies the GTE predicate on the "template_name" field.
func TemplateNameGTE(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldGTE(FieldTemplateName, v))
}

// TemplateNameLT applies the LT predicate on the "template_name" field.
func TemplateNameLT(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldLT(FieldTemplateName, v))
}

// TemplateNameLTE applies the LTE predicate on the "template_name" field.
func TemplateNameLTE(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldLTE(FieldTemplateName, v))
}

// TemplateNameContains applies the Contains predicate on the "template_name" field.
func TemplateNameContains(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldContains(FieldTemplateName, v))
}

// TemplateNameHasPrefix applies the HasPrefix predicate on the "template_name" field.
func TemplateNameHasPrefix(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldHasPrefix(FieldTemplateName, v))
}

// TemplateNameHasSuffix applies the HasSuffix predicate on the "template_name" field.
func TemplateNameHasSuffix(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldHasSuffix(FieldTemplateName, v))
}

// TemplateNameEqualFold applies the EqualFold predicate on the "template_name" field.
func TemplateNameEqualFold(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldEqualFold(FieldTemplateName, v))
}

// TemplateNameContainsFold applies the ContainsFold predicate on the "template_name" field.
func TemplateNameContainsFold(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldContainsFold(FieldTemplateName, v))
}

// TemplateVersionEQ applies the EQ predicate on the "template_version" field.
func TemplateVersionEQ(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldEQ(FieldTemplateVersion, v))
}

// TemplateVersionNEQ applies the NEQ predicate on the "template_version" field.
func TemplateVersionNEQ(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldNEQ(FieldTemplateVersion, v))
}

// TemplateVersionIn applies the In predicate on the "template_version" field.
func TemplateVersionIn(vs ...string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldIn(FieldTemplateVersion, vs...))
}

// TemplateVersionNotIn applies the NotIn predicate on the "template_version" field.
func TemplateVersionNotIn(vs ...string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldNotIn(FieldTemplateVersion, vs...))
}

// TemplateVersionGT applies the GT predicate on the "template_version" field.
func TemplateVersionGT(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldGT(FieldTemplateVersion, v))
}

// TemplateVersionGTE applies the GTE predicate on the "template_version" field.
func TemplateVersionGTE(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldGTE(FieldTemplateVersion, v))
}

// TemplateVersionLT applies the LT predicate on the "template_version" field.
func TemplateVersionLT(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldLT(FieldTemplateVersion, v))
}

// TemplateVersionLTE applies the LTE predicate on the "template_version" field.
func TemplateVersionLTE(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldLTE(FieldTemplateVersion, v))
}

// TemplateVersionContains applies the Contains predicate on the "template_version" field.
func TemplateVersionContains(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldContains(FieldTemplateVersion, v))
}

// TemplateVersionHasPrefix applies the HasPrefix predicate on the "template_version" field.
func TemplateVersionHasPrefix(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldHasPrefix(FieldTemplateVersion, v))
}

// TemplateVersionHasSuffix applies the HasSuffix predicate on the "template_version" field.
func TemplateVersionHasSuffix(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldHasSuffix(FieldTemplateVersion, v))
}

// TemplateVersionEqualFold applies the EqualFold predicate on the "template_version" field.
func TemplateVersionEqualFold(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldEqualFold(FieldTemplateVersion, v))
}

// TemplateVersionContainsFold applies the ContainsFold predicate on the "template_version" field.
func TemplateVersionContainsFold(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldContainsFold(FieldTemplateVersion, v))
}

// AttributesEQ applies the EQ predicate on the "attributes" field.
func AttributesEQ(v property.Values) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldEQ(FieldAttributes, v))
}

// AttributesNEQ applies the NEQ predicate on the "attributes" field.
func AttributesNEQ(v property.Values) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldNEQ(FieldAttributes, v))
}

// AttributesIn applies the In predicate on the "attributes" field.
func AttributesIn(vs ...property.Values) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldIn(FieldAttributes, vs...))
}

// AttributesNotIn applies the NotIn predicate on the "attributes" field.
func AttributesNotIn(vs ...property.Values) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldNotIn(FieldAttributes, vs...))
}

// AttributesGT applies the GT predicate on the "attributes" field.
func AttributesGT(v property.Values) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldGT(FieldAttributes, v))
}

// AttributesGTE applies the GTE predicate on the "attributes" field.
func AttributesGTE(v property.Values) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldGTE(FieldAttributes, v))
}

// AttributesLT applies the LT predicate on the "attributes" field.
func AttributesLT(v property.Values) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldLT(FieldAttributes, v))
}

// AttributesLTE applies the LTE predicate on the "attributes" field.
func AttributesLTE(v property.Values) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldLTE(FieldAttributes, v))
}

// AttributesIsNil applies the IsNil predicate on the "attributes" field.
func AttributesIsNil() predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldIsNull(FieldAttributes))
}

// AttributesNotNil applies the NotNil predicate on the "attributes" field.
func AttributesNotNil() predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldNotNull(FieldAttributes))
}

// VariablesEQ applies the EQ predicate on the "variables" field.
func VariablesEQ(v crypto.Map[string, string]) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldEQ(FieldVariables, v))
}

// VariablesNEQ applies the NEQ predicate on the "variables" field.
func VariablesNEQ(v crypto.Map[string, string]) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldNEQ(FieldVariables, v))
}

// VariablesIn applies the In predicate on the "variables" field.
func VariablesIn(vs ...crypto.Map[string, string]) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldIn(FieldVariables, vs...))
}

// VariablesNotIn applies the NotIn predicate on the "variables" field.
func VariablesNotIn(vs ...crypto.Map[string, string]) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldNotIn(FieldVariables, vs...))
}

// VariablesGT applies the GT predicate on the "variables" field.
func VariablesGT(v crypto.Map[string, string]) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldGT(FieldVariables, v))
}

// VariablesGTE applies the GTE predicate on the "variables" field.
func VariablesGTE(v crypto.Map[string, string]) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldGTE(FieldVariables, v))
}

// VariablesLT applies the LT predicate on the "variables" field.
func VariablesLT(v crypto.Map[string, string]) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldLT(FieldVariables, v))
}

// VariablesLTE applies the LTE predicate on the "variables" field.
func VariablesLTE(v crypto.Map[string, string]) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldLTE(FieldVariables, v))
}

// InputPlanEQ applies the EQ predicate on the "input_plan" field.
func InputPlanEQ(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldEQ(FieldInputPlan, v))
}

// InputPlanNEQ applies the NEQ predicate on the "input_plan" field.
func InputPlanNEQ(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldNEQ(FieldInputPlan, v))
}

// InputPlanIn applies the In predicate on the "input_plan" field.
func InputPlanIn(vs ...string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldIn(FieldInputPlan, vs...))
}

// InputPlanNotIn applies the NotIn predicate on the "input_plan" field.
func InputPlanNotIn(vs ...string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldNotIn(FieldInputPlan, vs...))
}

// InputPlanGT applies the GT predicate on the "input_plan" field.
func InputPlanGT(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldGT(FieldInputPlan, v))
}

// InputPlanGTE applies the GTE predicate on the "input_plan" field.
func InputPlanGTE(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldGTE(FieldInputPlan, v))
}

// InputPlanLT applies the LT predicate on the "input_plan" field.
func InputPlanLT(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldLT(FieldInputPlan, v))
}

// InputPlanLTE applies the LTE predicate on the "input_plan" field.
func InputPlanLTE(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldLTE(FieldInputPlan, v))
}

// InputPlanContains applies the Contains predicate on the "input_plan" field.
func InputPlanContains(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldContains(FieldInputPlan, v))
}

// InputPlanHasPrefix applies the HasPrefix predicate on the "input_plan" field.
func InputPlanHasPrefix(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldHasPrefix(FieldInputPlan, v))
}

// InputPlanHasSuffix applies the HasSuffix predicate on the "input_plan" field.
func InputPlanHasSuffix(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldHasSuffix(FieldInputPlan, v))
}

// InputPlanEqualFold applies the EqualFold predicate on the "input_plan" field.
func InputPlanEqualFold(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldEqualFold(FieldInputPlan, v))
}

// InputPlanContainsFold applies the ContainsFold predicate on the "input_plan" field.
func InputPlanContainsFold(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldContainsFold(FieldInputPlan, v))
}

// OutputEQ applies the EQ predicate on the "output" field.
func OutputEQ(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldEQ(FieldOutput, v))
}

// OutputNEQ applies the NEQ predicate on the "output" field.
func OutputNEQ(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldNEQ(FieldOutput, v))
}

// OutputIn applies the In predicate on the "output" field.
func OutputIn(vs ...string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldIn(FieldOutput, vs...))
}

// OutputNotIn applies the NotIn predicate on the "output" field.
func OutputNotIn(vs ...string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldNotIn(FieldOutput, vs...))
}

// OutputGT applies the GT predicate on the "output" field.
func OutputGT(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldGT(FieldOutput, v))
}

// OutputGTE applies the GTE predicate on the "output" field.
func OutputGTE(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldGTE(FieldOutput, v))
}

// OutputLT applies the LT predicate on the "output" field.
func OutputLT(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldLT(FieldOutput, v))
}

// OutputLTE applies the LTE predicate on the "output" field.
func OutputLTE(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldLTE(FieldOutput, v))
}

// OutputContains applies the Contains predicate on the "output" field.
func OutputContains(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldContains(FieldOutput, v))
}

// OutputHasPrefix applies the HasPrefix predicate on the "output" field.
func OutputHasPrefix(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldHasPrefix(FieldOutput, v))
}

// OutputHasSuffix applies the HasSuffix predicate on the "output" field.
func OutputHasSuffix(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldHasSuffix(FieldOutput, v))
}

// OutputEqualFold applies the EqualFold predicate on the "output" field.
func OutputEqualFold(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldEqualFold(FieldOutput, v))
}

// OutputContainsFold applies the ContainsFold predicate on the "output" field.
func OutputContainsFold(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldContainsFold(FieldOutput, v))
}

// DeployerTypeEQ applies the EQ predicate on the "deployer_type" field.
func DeployerTypeEQ(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldEQ(FieldDeployerType, v))
}

// DeployerTypeNEQ applies the NEQ predicate on the "deployer_type" field.
func DeployerTypeNEQ(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldNEQ(FieldDeployerType, v))
}

// DeployerTypeIn applies the In predicate on the "deployer_type" field.
func DeployerTypeIn(vs ...string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldIn(FieldDeployerType, vs...))
}

// DeployerTypeNotIn applies the NotIn predicate on the "deployer_type" field.
func DeployerTypeNotIn(vs ...string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldNotIn(FieldDeployerType, vs...))
}

// DeployerTypeGT applies the GT predicate on the "deployer_type" field.
func DeployerTypeGT(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldGT(FieldDeployerType, v))
}

// DeployerTypeGTE applies the GTE predicate on the "deployer_type" field.
func DeployerTypeGTE(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldGTE(FieldDeployerType, v))
}

// DeployerTypeLT applies the LT predicate on the "deployer_type" field.
func DeployerTypeLT(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldLT(FieldDeployerType, v))
}

// DeployerTypeLTE applies the LTE predicate on the "deployer_type" field.
func DeployerTypeLTE(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldLTE(FieldDeployerType, v))
}

// DeployerTypeContains applies the Contains predicate on the "deployer_type" field.
func DeployerTypeContains(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldContains(FieldDeployerType, v))
}

// DeployerTypeHasPrefix applies the HasPrefix predicate on the "deployer_type" field.
func DeployerTypeHasPrefix(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldHasPrefix(FieldDeployerType, v))
}

// DeployerTypeHasSuffix applies the HasSuffix predicate on the "deployer_type" field.
func DeployerTypeHasSuffix(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldHasSuffix(FieldDeployerType, v))
}

// DeployerTypeEqualFold applies the EqualFold predicate on the "deployer_type" field.
func DeployerTypeEqualFold(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldEqualFold(FieldDeployerType, v))
}

// DeployerTypeContainsFold applies the ContainsFold predicate on the "deployer_type" field.
func DeployerTypeContainsFold(v string) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldContainsFold(FieldDeployerType, v))
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v int) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldEQ(FieldDuration, v))
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v int) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldNEQ(FieldDuration, v))
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...int) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldIn(FieldDuration, vs...))
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...int) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldNotIn(FieldDuration, vs...))
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v int) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldGT(FieldDuration, v))
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v int) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldGTE(FieldDuration, v))
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v int) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldLT(FieldDuration, v))
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v int) predicate.ServiceRevision {
	return predicate.ServiceRevision(sql.FieldLTE(FieldDuration, v))
}

// HasProject applies the HasEdge predicate on the "project" edge.
func HasProject() predicate.ServiceRevision {
	return predicate.ServiceRevision(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Project
		step.Edge.Schema = schemaConfig.ServiceRevision
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectWith applies the HasEdge predicate on the "project" edge with a given conditions (other predicates).
func HasProjectWith(preds ...predicate.Project) predicate.ServiceRevision {
	return predicate.ServiceRevision(func(s *sql.Selector) {
		step := newProjectStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Project
		step.Edge.Schema = schemaConfig.ServiceRevision
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEnvironment applies the HasEdge predicate on the "environment" edge.
func HasEnvironment() predicate.ServiceRevision {
	return predicate.ServiceRevision(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EnvironmentTable, EnvironmentColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Environment
		step.Edge.Schema = schemaConfig.ServiceRevision
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnvironmentWith applies the HasEdge predicate on the "environment" edge with a given conditions (other predicates).
func HasEnvironmentWith(preds ...predicate.Environment) predicate.ServiceRevision {
	return predicate.ServiceRevision(func(s *sql.Selector) {
		step := newEnvironmentStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Environment
		step.Edge.Schema = schemaConfig.ServiceRevision
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasService applies the HasEdge predicate on the "service" edge.
func HasService() predicate.ServiceRevision {
	return predicate.ServiceRevision(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ServiceTable, ServiceColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Service
		step.Edge.Schema = schemaConfig.ServiceRevision
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServiceWith applies the HasEdge predicate on the "service" edge with a given conditions (other predicates).
func HasServiceWith(preds ...predicate.Service) predicate.ServiceRevision {
	return predicate.ServiceRevision(func(s *sql.Selector) {
		step := newServiceStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Service
		step.Edge.Schema = schemaConfig.ServiceRevision
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ServiceRevision) predicate.ServiceRevision {
	return predicate.ServiceRevision(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ServiceRevision) predicate.ServiceRevision {
	return predicate.ServiceRevision(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ServiceRevision) predicate.ServiceRevision {
	return predicate.ServiceRevision(func(s *sql.Selector) {
		p(s.Not())
	})
}
