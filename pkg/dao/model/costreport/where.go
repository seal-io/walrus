// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus". DO NOT EDIT.

package costreport

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"

	"github.com/seal-io/walrus/pkg/dao/model/internal"
	"github.com/seal-io/walrus/pkg/dao/model/predicate"
	"github.com/seal-io/walrus/pkg/dao/types/object"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CostReport {
	return predicate.CostReport(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CostReport {
	return predicate.CostReport(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CostReport {
	return predicate.CostReport(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CostReport {
	return predicate.CostReport(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CostReport {
	return predicate.CostReport(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CostReport {
	return predicate.CostReport(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CostReport {
	return predicate.CostReport(sql.FieldLTE(FieldID, id))
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v time.Time) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldStartTime, v))
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v time.Time) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldEndTime, v))
}

// Minutes applies equality check predicate on the "minutes" field. It's identical to MinutesEQ.
func Minutes(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldMinutes, v))
}

// ConnectorID applies equality check predicate on the "connector_id" field. It's identical to ConnectorIDEQ.
func ConnectorID(v object.ID) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldConnectorID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldName, v))
}

// Fingerprint applies equality check predicate on the "fingerprint" field. It's identical to FingerprintEQ.
func Fingerprint(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldFingerprint, v))
}

// ClusterName applies equality check predicate on the "cluster_name" field. It's identical to ClusterNameEQ.
func ClusterName(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldClusterName, v))
}

// Namespace applies equality check predicate on the "namespace" field. It's identical to NamespaceEQ.
func Namespace(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldNamespace, v))
}

// Node applies equality check predicate on the "node" field. It's identical to NodeEQ.
func Node(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldNode, v))
}

// Controller applies equality check predicate on the "controller" field. It's identical to ControllerEQ.
func Controller(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldController, v))
}

// ControllerKind applies equality check predicate on the "controller_kind" field. It's identical to ControllerKindEQ.
func ControllerKind(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldControllerKind, v))
}

// Pod applies equality check predicate on the "pod" field. It's identical to PodEQ.
func Pod(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldPod, v))
}

// Container applies equality check predicate on the "container" field. It's identical to ContainerEQ.
func Container(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldContainer, v))
}

// TotalCost applies equality check predicate on the "totalCost" field. It's identical to TotalCostEQ.
func TotalCost(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldTotalCost, v))
}

// Currency applies equality check predicate on the "currency" field. It's identical to CurrencyEQ.
func Currency(v int) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldCurrency, v))
}

// CPUCost applies equality check predicate on the "cpu_cost" field. It's identical to CPUCostEQ.
func CPUCost(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldCPUCost, v))
}

// CPUCoreRequest applies equality check predicate on the "cpu_core_request" field. It's identical to CPUCoreRequestEQ.
func CPUCoreRequest(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldCPUCoreRequest, v))
}

// GPUCost applies equality check predicate on the "gpu_cost" field. It's identical to GPUCostEQ.
func GPUCost(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldGPUCost, v))
}

// GPUCount applies equality check predicate on the "gpu_count" field. It's identical to GPUCountEQ.
func GPUCount(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldGPUCount, v))
}

// RAMCost applies equality check predicate on the "ram_cost" field. It's identical to RAMCostEQ.
func RAMCost(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldRAMCost, v))
}

// RAMByteRequest applies equality check predicate on the "ram_byte_request" field. It's identical to RAMByteRequestEQ.
func RAMByteRequest(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldRAMByteRequest, v))
}

// PVCost applies equality check predicate on the "pv_cost" field. It's identical to PVCostEQ.
func PVCost(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldPVCost, v))
}

// PVBytes applies equality check predicate on the "pv_bytes" field. It's identical to PVBytesEQ.
func PVBytes(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldPVBytes, v))
}

// LoadBalancerCost applies equality check predicate on the "load_balancer_cost" field. It's identical to LoadBalancerCostEQ.
func LoadBalancerCost(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldLoadBalancerCost, v))
}

// CPUCoreUsageAverage applies equality check predicate on the "cpu_core_usage_average" field. It's identical to CPUCoreUsageAverageEQ.
func CPUCoreUsageAverage(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldCPUCoreUsageAverage, v))
}

// CPUCoreUsageMax applies equality check predicate on the "cpu_core_usage_max" field. It's identical to CPUCoreUsageMaxEQ.
func CPUCoreUsageMax(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldCPUCoreUsageMax, v))
}

// RAMByteUsageAverage applies equality check predicate on the "ram_byte_usage_average" field. It's identical to RAMByteUsageAverageEQ.
func RAMByteUsageAverage(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldRAMByteUsageAverage, v))
}

// RAMByteUsageMax applies equality check predicate on the "ram_byte_usage_max" field. It's identical to RAMByteUsageMaxEQ.
func RAMByteUsageMax(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldRAMByteUsageMax, v))
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v time.Time) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldStartTime, v))
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v time.Time) predicate.CostReport {
	return predicate.CostReport(sql.FieldNEQ(FieldStartTime, v))
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...time.Time) predicate.CostReport {
	return predicate.CostReport(sql.FieldIn(FieldStartTime, vs...))
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...time.Time) predicate.CostReport {
	return predicate.CostReport(sql.FieldNotIn(FieldStartTime, vs...))
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v time.Time) predicate.CostReport {
	return predicate.CostReport(sql.FieldGT(FieldStartTime, v))
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v time.Time) predicate.CostReport {
	return predicate.CostReport(sql.FieldGTE(FieldStartTime, v))
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v time.Time) predicate.CostReport {
	return predicate.CostReport(sql.FieldLT(FieldStartTime, v))
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v time.Time) predicate.CostReport {
	return predicate.CostReport(sql.FieldLTE(FieldStartTime, v))
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v time.Time) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldEndTime, v))
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v time.Time) predicate.CostReport {
	return predicate.CostReport(sql.FieldNEQ(FieldEndTime, v))
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...time.Time) predicate.CostReport {
	return predicate.CostReport(sql.FieldIn(FieldEndTime, vs...))
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...time.Time) predicate.CostReport {
	return predicate.CostReport(sql.FieldNotIn(FieldEndTime, vs...))
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v time.Time) predicate.CostReport {
	return predicate.CostReport(sql.FieldGT(FieldEndTime, v))
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v time.Time) predicate.CostReport {
	return predicate.CostReport(sql.FieldGTE(FieldEndTime, v))
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v time.Time) predicate.CostReport {
	return predicate.CostReport(sql.FieldLT(FieldEndTime, v))
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v time.Time) predicate.CostReport {
	return predicate.CostReport(sql.FieldLTE(FieldEndTime, v))
}

// MinutesEQ applies the EQ predicate on the "minutes" field.
func MinutesEQ(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldMinutes, v))
}

// MinutesNEQ applies the NEQ predicate on the "minutes" field.
func MinutesNEQ(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldNEQ(FieldMinutes, v))
}

// MinutesIn applies the In predicate on the "minutes" field.
func MinutesIn(vs ...float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldIn(FieldMinutes, vs...))
}

// MinutesNotIn applies the NotIn predicate on the "minutes" field.
func MinutesNotIn(vs ...float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldNotIn(FieldMinutes, vs...))
}

// MinutesGT applies the GT predicate on the "minutes" field.
func MinutesGT(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldGT(FieldMinutes, v))
}

// MinutesGTE applies the GTE predicate on the "minutes" field.
func MinutesGTE(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldGTE(FieldMinutes, v))
}

// MinutesLT applies the LT predicate on the "minutes" field.
func MinutesLT(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldLT(FieldMinutes, v))
}

// MinutesLTE applies the LTE predicate on the "minutes" field.
func MinutesLTE(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldLTE(FieldMinutes, v))
}

// ConnectorIDEQ applies the EQ predicate on the "connector_id" field.
func ConnectorIDEQ(v object.ID) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldConnectorID, v))
}

// ConnectorIDNEQ applies the NEQ predicate on the "connector_id" field.
func ConnectorIDNEQ(v object.ID) predicate.CostReport {
	return predicate.CostReport(sql.FieldNEQ(FieldConnectorID, v))
}

// ConnectorIDIn applies the In predicate on the "connector_id" field.
func ConnectorIDIn(vs ...object.ID) predicate.CostReport {
	return predicate.CostReport(sql.FieldIn(FieldConnectorID, vs...))
}

// ConnectorIDNotIn applies the NotIn predicate on the "connector_id" field.
func ConnectorIDNotIn(vs ...object.ID) predicate.CostReport {
	return predicate.CostReport(sql.FieldNotIn(FieldConnectorID, vs...))
}

// ConnectorIDGT applies the GT predicate on the "connector_id" field.
func ConnectorIDGT(v object.ID) predicate.CostReport {
	return predicate.CostReport(sql.FieldGT(FieldConnectorID, v))
}

// ConnectorIDGTE applies the GTE predicate on the "connector_id" field.
func ConnectorIDGTE(v object.ID) predicate.CostReport {
	return predicate.CostReport(sql.FieldGTE(FieldConnectorID, v))
}

// ConnectorIDLT applies the LT predicate on the "connector_id" field.
func ConnectorIDLT(v object.ID) predicate.CostReport {
	return predicate.CostReport(sql.FieldLT(FieldConnectorID, v))
}

// ConnectorIDLTE applies the LTE predicate on the "connector_id" field.
func ConnectorIDLTE(v object.ID) predicate.CostReport {
	return predicate.CostReport(sql.FieldLTE(FieldConnectorID, v))
}

// ConnectorIDContains applies the Contains predicate on the "connector_id" field.
func ConnectorIDContains(v object.ID) predicate.CostReport {
	vc := string(v)
	return predicate.CostReport(sql.FieldContains(FieldConnectorID, vc))
}

// ConnectorIDHasPrefix applies the HasPrefix predicate on the "connector_id" field.
func ConnectorIDHasPrefix(v object.ID) predicate.CostReport {
	vc := string(v)
	return predicate.CostReport(sql.FieldHasPrefix(FieldConnectorID, vc))
}

// ConnectorIDHasSuffix applies the HasSuffix predicate on the "connector_id" field.
func ConnectorIDHasSuffix(v object.ID) predicate.CostReport {
	vc := string(v)
	return predicate.CostReport(sql.FieldHasSuffix(FieldConnectorID, vc))
}

// ConnectorIDEqualFold applies the EqualFold predicate on the "connector_id" field.
func ConnectorIDEqualFold(v object.ID) predicate.CostReport {
	vc := string(v)
	return predicate.CostReport(sql.FieldEqualFold(FieldConnectorID, vc))
}

// ConnectorIDContainsFold applies the ContainsFold predicate on the "connector_id" field.
func ConnectorIDContainsFold(v object.ID) predicate.CostReport {
	vc := string(v)
	return predicate.CostReport(sql.FieldContainsFold(FieldConnectorID, vc))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.CostReport {
	return predicate.CostReport(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.CostReport {
	return predicate.CostReport(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldContainsFold(FieldName, v))
}

// FingerprintEQ applies the EQ predicate on the "fingerprint" field.
func FingerprintEQ(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldFingerprint, v))
}

// FingerprintNEQ applies the NEQ predicate on the "fingerprint" field.
func FingerprintNEQ(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldNEQ(FieldFingerprint, v))
}

// FingerprintIn applies the In predicate on the "fingerprint" field.
func FingerprintIn(vs ...string) predicate.CostReport {
	return predicate.CostReport(sql.FieldIn(FieldFingerprint, vs...))
}

// FingerprintNotIn applies the NotIn predicate on the "fingerprint" field.
func FingerprintNotIn(vs ...string) predicate.CostReport {
	return predicate.CostReport(sql.FieldNotIn(FieldFingerprint, vs...))
}

// FingerprintGT applies the GT predicate on the "fingerprint" field.
func FingerprintGT(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldGT(FieldFingerprint, v))
}

// FingerprintGTE applies the GTE predicate on the "fingerprint" field.
func FingerprintGTE(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldGTE(FieldFingerprint, v))
}

// FingerprintLT applies the LT predicate on the "fingerprint" field.
func FingerprintLT(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldLT(FieldFingerprint, v))
}

// FingerprintLTE applies the LTE predicate on the "fingerprint" field.
func FingerprintLTE(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldLTE(FieldFingerprint, v))
}

// FingerprintContains applies the Contains predicate on the "fingerprint" field.
func FingerprintContains(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldContains(FieldFingerprint, v))
}

// FingerprintHasPrefix applies the HasPrefix predicate on the "fingerprint" field.
func FingerprintHasPrefix(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldHasPrefix(FieldFingerprint, v))
}

// FingerprintHasSuffix applies the HasSuffix predicate on the "fingerprint" field.
func FingerprintHasSuffix(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldHasSuffix(FieldFingerprint, v))
}

// FingerprintEqualFold applies the EqualFold predicate on the "fingerprint" field.
func FingerprintEqualFold(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldEqualFold(FieldFingerprint, v))
}

// FingerprintContainsFold applies the ContainsFold predicate on the "fingerprint" field.
func FingerprintContainsFold(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldContainsFold(FieldFingerprint, v))
}

// ClusterNameEQ applies the EQ predicate on the "cluster_name" field.
func ClusterNameEQ(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldClusterName, v))
}

// ClusterNameNEQ applies the NEQ predicate on the "cluster_name" field.
func ClusterNameNEQ(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldNEQ(FieldClusterName, v))
}

// ClusterNameIn applies the In predicate on the "cluster_name" field.
func ClusterNameIn(vs ...string) predicate.CostReport {
	return predicate.CostReport(sql.FieldIn(FieldClusterName, vs...))
}

// ClusterNameNotIn applies the NotIn predicate on the "cluster_name" field.
func ClusterNameNotIn(vs ...string) predicate.CostReport {
	return predicate.CostReport(sql.FieldNotIn(FieldClusterName, vs...))
}

// ClusterNameGT applies the GT predicate on the "cluster_name" field.
func ClusterNameGT(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldGT(FieldClusterName, v))
}

// ClusterNameGTE applies the GTE predicate on the "cluster_name" field.
func ClusterNameGTE(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldGTE(FieldClusterName, v))
}

// ClusterNameLT applies the LT predicate on the "cluster_name" field.
func ClusterNameLT(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldLT(FieldClusterName, v))
}

// ClusterNameLTE applies the LTE predicate on the "cluster_name" field.
func ClusterNameLTE(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldLTE(FieldClusterName, v))
}

// ClusterNameContains applies the Contains predicate on the "cluster_name" field.
func ClusterNameContains(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldContains(FieldClusterName, v))
}

// ClusterNameHasPrefix applies the HasPrefix predicate on the "cluster_name" field.
func ClusterNameHasPrefix(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldHasPrefix(FieldClusterName, v))
}

// ClusterNameHasSuffix applies the HasSuffix predicate on the "cluster_name" field.
func ClusterNameHasSuffix(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldHasSuffix(FieldClusterName, v))
}

// ClusterNameIsNil applies the IsNil predicate on the "cluster_name" field.
func ClusterNameIsNil() predicate.CostReport {
	return predicate.CostReport(sql.FieldIsNull(FieldClusterName))
}

// ClusterNameNotNil applies the NotNil predicate on the "cluster_name" field.
func ClusterNameNotNil() predicate.CostReport {
	return predicate.CostReport(sql.FieldNotNull(FieldClusterName))
}

// ClusterNameEqualFold applies the EqualFold predicate on the "cluster_name" field.
func ClusterNameEqualFold(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldEqualFold(FieldClusterName, v))
}

// ClusterNameContainsFold applies the ContainsFold predicate on the "cluster_name" field.
func ClusterNameContainsFold(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldContainsFold(FieldClusterName, v))
}

// NamespaceEQ applies the EQ predicate on the "namespace" field.
func NamespaceEQ(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldNamespace, v))
}

// NamespaceNEQ applies the NEQ predicate on the "namespace" field.
func NamespaceNEQ(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldNEQ(FieldNamespace, v))
}

// NamespaceIn applies the In predicate on the "namespace" field.
func NamespaceIn(vs ...string) predicate.CostReport {
	return predicate.CostReport(sql.FieldIn(FieldNamespace, vs...))
}

// NamespaceNotIn applies the NotIn predicate on the "namespace" field.
func NamespaceNotIn(vs ...string) predicate.CostReport {
	return predicate.CostReport(sql.FieldNotIn(FieldNamespace, vs...))
}

// NamespaceGT applies the GT predicate on the "namespace" field.
func NamespaceGT(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldGT(FieldNamespace, v))
}

// NamespaceGTE applies the GTE predicate on the "namespace" field.
func NamespaceGTE(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldGTE(FieldNamespace, v))
}

// NamespaceLT applies the LT predicate on the "namespace" field.
func NamespaceLT(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldLT(FieldNamespace, v))
}

// NamespaceLTE applies the LTE predicate on the "namespace" field.
func NamespaceLTE(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldLTE(FieldNamespace, v))
}

// NamespaceContains applies the Contains predicate on the "namespace" field.
func NamespaceContains(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldContains(FieldNamespace, v))
}

// NamespaceHasPrefix applies the HasPrefix predicate on the "namespace" field.
func NamespaceHasPrefix(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldHasPrefix(FieldNamespace, v))
}

// NamespaceHasSuffix applies the HasSuffix predicate on the "namespace" field.
func NamespaceHasSuffix(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldHasSuffix(FieldNamespace, v))
}

// NamespaceIsNil applies the IsNil predicate on the "namespace" field.
func NamespaceIsNil() predicate.CostReport {
	return predicate.CostReport(sql.FieldIsNull(FieldNamespace))
}

// NamespaceNotNil applies the NotNil predicate on the "namespace" field.
func NamespaceNotNil() predicate.CostReport {
	return predicate.CostReport(sql.FieldNotNull(FieldNamespace))
}

// NamespaceEqualFold applies the EqualFold predicate on the "namespace" field.
func NamespaceEqualFold(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldEqualFold(FieldNamespace, v))
}

// NamespaceContainsFold applies the ContainsFold predicate on the "namespace" field.
func NamespaceContainsFold(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldContainsFold(FieldNamespace, v))
}

// NodeEQ applies the EQ predicate on the "node" field.
func NodeEQ(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldNode, v))
}

// NodeNEQ applies the NEQ predicate on the "node" field.
func NodeNEQ(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldNEQ(FieldNode, v))
}

// NodeIn applies the In predicate on the "node" field.
func NodeIn(vs ...string) predicate.CostReport {
	return predicate.CostReport(sql.FieldIn(FieldNode, vs...))
}

// NodeNotIn applies the NotIn predicate on the "node" field.
func NodeNotIn(vs ...string) predicate.CostReport {
	return predicate.CostReport(sql.FieldNotIn(FieldNode, vs...))
}

// NodeGT applies the GT predicate on the "node" field.
func NodeGT(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldGT(FieldNode, v))
}

// NodeGTE applies the GTE predicate on the "node" field.
func NodeGTE(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldGTE(FieldNode, v))
}

// NodeLT applies the LT predicate on the "node" field.
func NodeLT(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldLT(FieldNode, v))
}

// NodeLTE applies the LTE predicate on the "node" field.
func NodeLTE(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldLTE(FieldNode, v))
}

// NodeContains applies the Contains predicate on the "node" field.
func NodeContains(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldContains(FieldNode, v))
}

// NodeHasPrefix applies the HasPrefix predicate on the "node" field.
func NodeHasPrefix(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldHasPrefix(FieldNode, v))
}

// NodeHasSuffix applies the HasSuffix predicate on the "node" field.
func NodeHasSuffix(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldHasSuffix(FieldNode, v))
}

// NodeIsNil applies the IsNil predicate on the "node" field.
func NodeIsNil() predicate.CostReport {
	return predicate.CostReport(sql.FieldIsNull(FieldNode))
}

// NodeNotNil applies the NotNil predicate on the "node" field.
func NodeNotNil() predicate.CostReport {
	return predicate.CostReport(sql.FieldNotNull(FieldNode))
}

// NodeEqualFold applies the EqualFold predicate on the "node" field.
func NodeEqualFold(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldEqualFold(FieldNode, v))
}

// NodeContainsFold applies the ContainsFold predicate on the "node" field.
func NodeContainsFold(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldContainsFold(FieldNode, v))
}

// ControllerEQ applies the EQ predicate on the "controller" field.
func ControllerEQ(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldController, v))
}

// ControllerNEQ applies the NEQ predicate on the "controller" field.
func ControllerNEQ(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldNEQ(FieldController, v))
}

// ControllerIn applies the In predicate on the "controller" field.
func ControllerIn(vs ...string) predicate.CostReport {
	return predicate.CostReport(sql.FieldIn(FieldController, vs...))
}

// ControllerNotIn applies the NotIn predicate on the "controller" field.
func ControllerNotIn(vs ...string) predicate.CostReport {
	return predicate.CostReport(sql.FieldNotIn(FieldController, vs...))
}

// ControllerGT applies the GT predicate on the "controller" field.
func ControllerGT(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldGT(FieldController, v))
}

// ControllerGTE applies the GTE predicate on the "controller" field.
func ControllerGTE(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldGTE(FieldController, v))
}

// ControllerLT applies the LT predicate on the "controller" field.
func ControllerLT(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldLT(FieldController, v))
}

// ControllerLTE applies the LTE predicate on the "controller" field.
func ControllerLTE(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldLTE(FieldController, v))
}

// ControllerContains applies the Contains predicate on the "controller" field.
func ControllerContains(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldContains(FieldController, v))
}

// ControllerHasPrefix applies the HasPrefix predicate on the "controller" field.
func ControllerHasPrefix(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldHasPrefix(FieldController, v))
}

// ControllerHasSuffix applies the HasSuffix predicate on the "controller" field.
func ControllerHasSuffix(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldHasSuffix(FieldController, v))
}

// ControllerIsNil applies the IsNil predicate on the "controller" field.
func ControllerIsNil() predicate.CostReport {
	return predicate.CostReport(sql.FieldIsNull(FieldController))
}

// ControllerNotNil applies the NotNil predicate on the "controller" field.
func ControllerNotNil() predicate.CostReport {
	return predicate.CostReport(sql.FieldNotNull(FieldController))
}

// ControllerEqualFold applies the EqualFold predicate on the "controller" field.
func ControllerEqualFold(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldEqualFold(FieldController, v))
}

// ControllerContainsFold applies the ContainsFold predicate on the "controller" field.
func ControllerContainsFold(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldContainsFold(FieldController, v))
}

// ControllerKindEQ applies the EQ predicate on the "controller_kind" field.
func ControllerKindEQ(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldControllerKind, v))
}

// ControllerKindNEQ applies the NEQ predicate on the "controller_kind" field.
func ControllerKindNEQ(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldNEQ(FieldControllerKind, v))
}

// ControllerKindIn applies the In predicate on the "controller_kind" field.
func ControllerKindIn(vs ...string) predicate.CostReport {
	return predicate.CostReport(sql.FieldIn(FieldControllerKind, vs...))
}

// ControllerKindNotIn applies the NotIn predicate on the "controller_kind" field.
func ControllerKindNotIn(vs ...string) predicate.CostReport {
	return predicate.CostReport(sql.FieldNotIn(FieldControllerKind, vs...))
}

// ControllerKindGT applies the GT predicate on the "controller_kind" field.
func ControllerKindGT(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldGT(FieldControllerKind, v))
}

// ControllerKindGTE applies the GTE predicate on the "controller_kind" field.
func ControllerKindGTE(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldGTE(FieldControllerKind, v))
}

// ControllerKindLT applies the LT predicate on the "controller_kind" field.
func ControllerKindLT(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldLT(FieldControllerKind, v))
}

// ControllerKindLTE applies the LTE predicate on the "controller_kind" field.
func ControllerKindLTE(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldLTE(FieldControllerKind, v))
}

// ControllerKindContains applies the Contains predicate on the "controller_kind" field.
func ControllerKindContains(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldContains(FieldControllerKind, v))
}

// ControllerKindHasPrefix applies the HasPrefix predicate on the "controller_kind" field.
func ControllerKindHasPrefix(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldHasPrefix(FieldControllerKind, v))
}

// ControllerKindHasSuffix applies the HasSuffix predicate on the "controller_kind" field.
func ControllerKindHasSuffix(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldHasSuffix(FieldControllerKind, v))
}

// ControllerKindIsNil applies the IsNil predicate on the "controller_kind" field.
func ControllerKindIsNil() predicate.CostReport {
	return predicate.CostReport(sql.FieldIsNull(FieldControllerKind))
}

// ControllerKindNotNil applies the NotNil predicate on the "controller_kind" field.
func ControllerKindNotNil() predicate.CostReport {
	return predicate.CostReport(sql.FieldNotNull(FieldControllerKind))
}

// ControllerKindEqualFold applies the EqualFold predicate on the "controller_kind" field.
func ControllerKindEqualFold(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldEqualFold(FieldControllerKind, v))
}

// ControllerKindContainsFold applies the ContainsFold predicate on the "controller_kind" field.
func ControllerKindContainsFold(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldContainsFold(FieldControllerKind, v))
}

// PodEQ applies the EQ predicate on the "pod" field.
func PodEQ(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldPod, v))
}

// PodNEQ applies the NEQ predicate on the "pod" field.
func PodNEQ(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldNEQ(FieldPod, v))
}

// PodIn applies the In predicate on the "pod" field.
func PodIn(vs ...string) predicate.CostReport {
	return predicate.CostReport(sql.FieldIn(FieldPod, vs...))
}

// PodNotIn applies the NotIn predicate on the "pod" field.
func PodNotIn(vs ...string) predicate.CostReport {
	return predicate.CostReport(sql.FieldNotIn(FieldPod, vs...))
}

// PodGT applies the GT predicate on the "pod" field.
func PodGT(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldGT(FieldPod, v))
}

// PodGTE applies the GTE predicate on the "pod" field.
func PodGTE(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldGTE(FieldPod, v))
}

// PodLT applies the LT predicate on the "pod" field.
func PodLT(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldLT(FieldPod, v))
}

// PodLTE applies the LTE predicate on the "pod" field.
func PodLTE(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldLTE(FieldPod, v))
}

// PodContains applies the Contains predicate on the "pod" field.
func PodContains(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldContains(FieldPod, v))
}

// PodHasPrefix applies the HasPrefix predicate on the "pod" field.
func PodHasPrefix(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldHasPrefix(FieldPod, v))
}

// PodHasSuffix applies the HasSuffix predicate on the "pod" field.
func PodHasSuffix(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldHasSuffix(FieldPod, v))
}

// PodIsNil applies the IsNil predicate on the "pod" field.
func PodIsNil() predicate.CostReport {
	return predicate.CostReport(sql.FieldIsNull(FieldPod))
}

// PodNotNil applies the NotNil predicate on the "pod" field.
func PodNotNil() predicate.CostReport {
	return predicate.CostReport(sql.FieldNotNull(FieldPod))
}

// PodEqualFold applies the EqualFold predicate on the "pod" field.
func PodEqualFold(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldEqualFold(FieldPod, v))
}

// PodContainsFold applies the ContainsFold predicate on the "pod" field.
func PodContainsFold(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldContainsFold(FieldPod, v))
}

// ContainerEQ applies the EQ predicate on the "container" field.
func ContainerEQ(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldContainer, v))
}

// ContainerNEQ applies the NEQ predicate on the "container" field.
func ContainerNEQ(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldNEQ(FieldContainer, v))
}

// ContainerIn applies the In predicate on the "container" field.
func ContainerIn(vs ...string) predicate.CostReport {
	return predicate.CostReport(sql.FieldIn(FieldContainer, vs...))
}

// ContainerNotIn applies the NotIn predicate on the "container" field.
func ContainerNotIn(vs ...string) predicate.CostReport {
	return predicate.CostReport(sql.FieldNotIn(FieldContainer, vs...))
}

// ContainerGT applies the GT predicate on the "container" field.
func ContainerGT(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldGT(FieldContainer, v))
}

// ContainerGTE applies the GTE predicate on the "container" field.
func ContainerGTE(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldGTE(FieldContainer, v))
}

// ContainerLT applies the LT predicate on the "container" field.
func ContainerLT(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldLT(FieldContainer, v))
}

// ContainerLTE applies the LTE predicate on the "container" field.
func ContainerLTE(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldLTE(FieldContainer, v))
}

// ContainerContains applies the Contains predicate on the "container" field.
func ContainerContains(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldContains(FieldContainer, v))
}

// ContainerHasPrefix applies the HasPrefix predicate on the "container" field.
func ContainerHasPrefix(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldHasPrefix(FieldContainer, v))
}

// ContainerHasSuffix applies the HasSuffix predicate on the "container" field.
func ContainerHasSuffix(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldHasSuffix(FieldContainer, v))
}

// ContainerIsNil applies the IsNil predicate on the "container" field.
func ContainerIsNil() predicate.CostReport {
	return predicate.CostReport(sql.FieldIsNull(FieldContainer))
}

// ContainerNotNil applies the NotNil predicate on the "container" field.
func ContainerNotNil() predicate.CostReport {
	return predicate.CostReport(sql.FieldNotNull(FieldContainer))
}

// ContainerEqualFold applies the EqualFold predicate on the "container" field.
func ContainerEqualFold(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldEqualFold(FieldContainer, v))
}

// ContainerContainsFold applies the ContainsFold predicate on the "container" field.
func ContainerContainsFold(v string) predicate.CostReport {
	return predicate.CostReport(sql.FieldContainsFold(FieldContainer, v))
}

// TotalCostEQ applies the EQ predicate on the "totalCost" field.
func TotalCostEQ(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldTotalCost, v))
}

// TotalCostNEQ applies the NEQ predicate on the "totalCost" field.
func TotalCostNEQ(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldNEQ(FieldTotalCost, v))
}

// TotalCostIn applies the In predicate on the "totalCost" field.
func TotalCostIn(vs ...float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldIn(FieldTotalCost, vs...))
}

// TotalCostNotIn applies the NotIn predicate on the "totalCost" field.
func TotalCostNotIn(vs ...float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldNotIn(FieldTotalCost, vs...))
}

// TotalCostGT applies the GT predicate on the "totalCost" field.
func TotalCostGT(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldGT(FieldTotalCost, v))
}

// TotalCostGTE applies the GTE predicate on the "totalCost" field.
func TotalCostGTE(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldGTE(FieldTotalCost, v))
}

// TotalCostLT applies the LT predicate on the "totalCost" field.
func TotalCostLT(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldLT(FieldTotalCost, v))
}

// TotalCostLTE applies the LTE predicate on the "totalCost" field.
func TotalCostLTE(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldLTE(FieldTotalCost, v))
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v int) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldCurrency, v))
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v int) predicate.CostReport {
	return predicate.CostReport(sql.FieldNEQ(FieldCurrency, v))
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...int) predicate.CostReport {
	return predicate.CostReport(sql.FieldIn(FieldCurrency, vs...))
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...int) predicate.CostReport {
	return predicate.CostReport(sql.FieldNotIn(FieldCurrency, vs...))
}

// CurrencyGT applies the GT predicate on the "currency" field.
func CurrencyGT(v int) predicate.CostReport {
	return predicate.CostReport(sql.FieldGT(FieldCurrency, v))
}

// CurrencyGTE applies the GTE predicate on the "currency" field.
func CurrencyGTE(v int) predicate.CostReport {
	return predicate.CostReport(sql.FieldGTE(FieldCurrency, v))
}

// CurrencyLT applies the LT predicate on the "currency" field.
func CurrencyLT(v int) predicate.CostReport {
	return predicate.CostReport(sql.FieldLT(FieldCurrency, v))
}

// CurrencyLTE applies the LTE predicate on the "currency" field.
func CurrencyLTE(v int) predicate.CostReport {
	return predicate.CostReport(sql.FieldLTE(FieldCurrency, v))
}

// CurrencyIsNil applies the IsNil predicate on the "currency" field.
func CurrencyIsNil() predicate.CostReport {
	return predicate.CostReport(sql.FieldIsNull(FieldCurrency))
}

// CurrencyNotNil applies the NotNil predicate on the "currency" field.
func CurrencyNotNil() predicate.CostReport {
	return predicate.CostReport(sql.FieldNotNull(FieldCurrency))
}

// CPUCostEQ applies the EQ predicate on the "cpu_cost" field.
func CPUCostEQ(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldCPUCost, v))
}

// CPUCostNEQ applies the NEQ predicate on the "cpu_cost" field.
func CPUCostNEQ(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldNEQ(FieldCPUCost, v))
}

// CPUCostIn applies the In predicate on the "cpu_cost" field.
func CPUCostIn(vs ...float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldIn(FieldCPUCost, vs...))
}

// CPUCostNotIn applies the NotIn predicate on the "cpu_cost" field.
func CPUCostNotIn(vs ...float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldNotIn(FieldCPUCost, vs...))
}

// CPUCostGT applies the GT predicate on the "cpu_cost" field.
func CPUCostGT(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldGT(FieldCPUCost, v))
}

// CPUCostGTE applies the GTE predicate on the "cpu_cost" field.
func CPUCostGTE(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldGTE(FieldCPUCost, v))
}

// CPUCostLT applies the LT predicate on the "cpu_cost" field.
func CPUCostLT(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldLT(FieldCPUCost, v))
}

// CPUCostLTE applies the LTE predicate on the "cpu_cost" field.
func CPUCostLTE(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldLTE(FieldCPUCost, v))
}

// CPUCoreRequestEQ applies the EQ predicate on the "cpu_core_request" field.
func CPUCoreRequestEQ(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldCPUCoreRequest, v))
}

// CPUCoreRequestNEQ applies the NEQ predicate on the "cpu_core_request" field.
func CPUCoreRequestNEQ(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldNEQ(FieldCPUCoreRequest, v))
}

// CPUCoreRequestIn applies the In predicate on the "cpu_core_request" field.
func CPUCoreRequestIn(vs ...float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldIn(FieldCPUCoreRequest, vs...))
}

// CPUCoreRequestNotIn applies the NotIn predicate on the "cpu_core_request" field.
func CPUCoreRequestNotIn(vs ...float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldNotIn(FieldCPUCoreRequest, vs...))
}

// CPUCoreRequestGT applies the GT predicate on the "cpu_core_request" field.
func CPUCoreRequestGT(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldGT(FieldCPUCoreRequest, v))
}

// CPUCoreRequestGTE applies the GTE predicate on the "cpu_core_request" field.
func CPUCoreRequestGTE(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldGTE(FieldCPUCoreRequest, v))
}

// CPUCoreRequestLT applies the LT predicate on the "cpu_core_request" field.
func CPUCoreRequestLT(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldLT(FieldCPUCoreRequest, v))
}

// CPUCoreRequestLTE applies the LTE predicate on the "cpu_core_request" field.
func CPUCoreRequestLTE(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldLTE(FieldCPUCoreRequest, v))
}

// GPUCostEQ applies the EQ predicate on the "gpu_cost" field.
func GPUCostEQ(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldGPUCost, v))
}

// GPUCostNEQ applies the NEQ predicate on the "gpu_cost" field.
func GPUCostNEQ(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldNEQ(FieldGPUCost, v))
}

// GPUCostIn applies the In predicate on the "gpu_cost" field.
func GPUCostIn(vs ...float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldIn(FieldGPUCost, vs...))
}

// GPUCostNotIn applies the NotIn predicate on the "gpu_cost" field.
func GPUCostNotIn(vs ...float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldNotIn(FieldGPUCost, vs...))
}

// GPUCostGT applies the GT predicate on the "gpu_cost" field.
func GPUCostGT(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldGT(FieldGPUCost, v))
}

// GPUCostGTE applies the GTE predicate on the "gpu_cost" field.
func GPUCostGTE(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldGTE(FieldGPUCost, v))
}

// GPUCostLT applies the LT predicate on the "gpu_cost" field.
func GPUCostLT(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldLT(FieldGPUCost, v))
}

// GPUCostLTE applies the LTE predicate on the "gpu_cost" field.
func GPUCostLTE(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldLTE(FieldGPUCost, v))
}

// GPUCountEQ applies the EQ predicate on the "gpu_count" field.
func GPUCountEQ(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldGPUCount, v))
}

// GPUCountNEQ applies the NEQ predicate on the "gpu_count" field.
func GPUCountNEQ(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldNEQ(FieldGPUCount, v))
}

// GPUCountIn applies the In predicate on the "gpu_count" field.
func GPUCountIn(vs ...float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldIn(FieldGPUCount, vs...))
}

// GPUCountNotIn applies the NotIn predicate on the "gpu_count" field.
func GPUCountNotIn(vs ...float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldNotIn(FieldGPUCount, vs...))
}

// GPUCountGT applies the GT predicate on the "gpu_count" field.
func GPUCountGT(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldGT(FieldGPUCount, v))
}

// GPUCountGTE applies the GTE predicate on the "gpu_count" field.
func GPUCountGTE(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldGTE(FieldGPUCount, v))
}

// GPUCountLT applies the LT predicate on the "gpu_count" field.
func GPUCountLT(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldLT(FieldGPUCount, v))
}

// GPUCountLTE applies the LTE predicate on the "gpu_count" field.
func GPUCountLTE(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldLTE(FieldGPUCount, v))
}

// RAMCostEQ applies the EQ predicate on the "ram_cost" field.
func RAMCostEQ(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldRAMCost, v))
}

// RAMCostNEQ applies the NEQ predicate on the "ram_cost" field.
func RAMCostNEQ(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldNEQ(FieldRAMCost, v))
}

// RAMCostIn applies the In predicate on the "ram_cost" field.
func RAMCostIn(vs ...float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldIn(FieldRAMCost, vs...))
}

// RAMCostNotIn applies the NotIn predicate on the "ram_cost" field.
func RAMCostNotIn(vs ...float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldNotIn(FieldRAMCost, vs...))
}

// RAMCostGT applies the GT predicate on the "ram_cost" field.
func RAMCostGT(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldGT(FieldRAMCost, v))
}

// RAMCostGTE applies the GTE predicate on the "ram_cost" field.
func RAMCostGTE(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldGTE(FieldRAMCost, v))
}

// RAMCostLT applies the LT predicate on the "ram_cost" field.
func RAMCostLT(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldLT(FieldRAMCost, v))
}

// RAMCostLTE applies the LTE predicate on the "ram_cost" field.
func RAMCostLTE(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldLTE(FieldRAMCost, v))
}

// RAMByteRequestEQ applies the EQ predicate on the "ram_byte_request" field.
func RAMByteRequestEQ(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldRAMByteRequest, v))
}

// RAMByteRequestNEQ applies the NEQ predicate on the "ram_byte_request" field.
func RAMByteRequestNEQ(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldNEQ(FieldRAMByteRequest, v))
}

// RAMByteRequestIn applies the In predicate on the "ram_byte_request" field.
func RAMByteRequestIn(vs ...float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldIn(FieldRAMByteRequest, vs...))
}

// RAMByteRequestNotIn applies the NotIn predicate on the "ram_byte_request" field.
func RAMByteRequestNotIn(vs ...float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldNotIn(FieldRAMByteRequest, vs...))
}

// RAMByteRequestGT applies the GT predicate on the "ram_byte_request" field.
func RAMByteRequestGT(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldGT(FieldRAMByteRequest, v))
}

// RAMByteRequestGTE applies the GTE predicate on the "ram_byte_request" field.
func RAMByteRequestGTE(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldGTE(FieldRAMByteRequest, v))
}

// RAMByteRequestLT applies the LT predicate on the "ram_byte_request" field.
func RAMByteRequestLT(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldLT(FieldRAMByteRequest, v))
}

// RAMByteRequestLTE applies the LTE predicate on the "ram_byte_request" field.
func RAMByteRequestLTE(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldLTE(FieldRAMByteRequest, v))
}

// PVCostEQ applies the EQ predicate on the "pv_cost" field.
func PVCostEQ(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldPVCost, v))
}

// PVCostNEQ applies the NEQ predicate on the "pv_cost" field.
func PVCostNEQ(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldNEQ(FieldPVCost, v))
}

// PVCostIn applies the In predicate on the "pv_cost" field.
func PVCostIn(vs ...float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldIn(FieldPVCost, vs...))
}

// PVCostNotIn applies the NotIn predicate on the "pv_cost" field.
func PVCostNotIn(vs ...float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldNotIn(FieldPVCost, vs...))
}

// PVCostGT applies the GT predicate on the "pv_cost" field.
func PVCostGT(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldGT(FieldPVCost, v))
}

// PVCostGTE applies the GTE predicate on the "pv_cost" field.
func PVCostGTE(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldGTE(FieldPVCost, v))
}

// PVCostLT applies the LT predicate on the "pv_cost" field.
func PVCostLT(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldLT(FieldPVCost, v))
}

// PVCostLTE applies the LTE predicate on the "pv_cost" field.
func PVCostLTE(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldLTE(FieldPVCost, v))
}

// PVBytesEQ applies the EQ predicate on the "pv_bytes" field.
func PVBytesEQ(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldPVBytes, v))
}

// PVBytesNEQ applies the NEQ predicate on the "pv_bytes" field.
func PVBytesNEQ(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldNEQ(FieldPVBytes, v))
}

// PVBytesIn applies the In predicate on the "pv_bytes" field.
func PVBytesIn(vs ...float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldIn(FieldPVBytes, vs...))
}

// PVBytesNotIn applies the NotIn predicate on the "pv_bytes" field.
func PVBytesNotIn(vs ...float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldNotIn(FieldPVBytes, vs...))
}

// PVBytesGT applies the GT predicate on the "pv_bytes" field.
func PVBytesGT(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldGT(FieldPVBytes, v))
}

// PVBytesGTE applies the GTE predicate on the "pv_bytes" field.
func PVBytesGTE(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldGTE(FieldPVBytes, v))
}

// PVBytesLT applies the LT predicate on the "pv_bytes" field.
func PVBytesLT(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldLT(FieldPVBytes, v))
}

// PVBytesLTE applies the LTE predicate on the "pv_bytes" field.
func PVBytesLTE(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldLTE(FieldPVBytes, v))
}

// LoadBalancerCostEQ applies the EQ predicate on the "load_balancer_cost" field.
func LoadBalancerCostEQ(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldLoadBalancerCost, v))
}

// LoadBalancerCostNEQ applies the NEQ predicate on the "load_balancer_cost" field.
func LoadBalancerCostNEQ(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldNEQ(FieldLoadBalancerCost, v))
}

// LoadBalancerCostIn applies the In predicate on the "load_balancer_cost" field.
func LoadBalancerCostIn(vs ...float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldIn(FieldLoadBalancerCost, vs...))
}

// LoadBalancerCostNotIn applies the NotIn predicate on the "load_balancer_cost" field.
func LoadBalancerCostNotIn(vs ...float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldNotIn(FieldLoadBalancerCost, vs...))
}

// LoadBalancerCostGT applies the GT predicate on the "load_balancer_cost" field.
func LoadBalancerCostGT(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldGT(FieldLoadBalancerCost, v))
}

// LoadBalancerCostGTE applies the GTE predicate on the "load_balancer_cost" field.
func LoadBalancerCostGTE(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldGTE(FieldLoadBalancerCost, v))
}

// LoadBalancerCostLT applies the LT predicate on the "load_balancer_cost" field.
func LoadBalancerCostLT(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldLT(FieldLoadBalancerCost, v))
}

// LoadBalancerCostLTE applies the LTE predicate on the "load_balancer_cost" field.
func LoadBalancerCostLTE(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldLTE(FieldLoadBalancerCost, v))
}

// CPUCoreUsageAverageEQ applies the EQ predicate on the "cpu_core_usage_average" field.
func CPUCoreUsageAverageEQ(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldCPUCoreUsageAverage, v))
}

// CPUCoreUsageAverageNEQ applies the NEQ predicate on the "cpu_core_usage_average" field.
func CPUCoreUsageAverageNEQ(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldNEQ(FieldCPUCoreUsageAverage, v))
}

// CPUCoreUsageAverageIn applies the In predicate on the "cpu_core_usage_average" field.
func CPUCoreUsageAverageIn(vs ...float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldIn(FieldCPUCoreUsageAverage, vs...))
}

// CPUCoreUsageAverageNotIn applies the NotIn predicate on the "cpu_core_usage_average" field.
func CPUCoreUsageAverageNotIn(vs ...float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldNotIn(FieldCPUCoreUsageAverage, vs...))
}

// CPUCoreUsageAverageGT applies the GT predicate on the "cpu_core_usage_average" field.
func CPUCoreUsageAverageGT(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldGT(FieldCPUCoreUsageAverage, v))
}

// CPUCoreUsageAverageGTE applies the GTE predicate on the "cpu_core_usage_average" field.
func CPUCoreUsageAverageGTE(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldGTE(FieldCPUCoreUsageAverage, v))
}

// CPUCoreUsageAverageLT applies the LT predicate on the "cpu_core_usage_average" field.
func CPUCoreUsageAverageLT(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldLT(FieldCPUCoreUsageAverage, v))
}

// CPUCoreUsageAverageLTE applies the LTE predicate on the "cpu_core_usage_average" field.
func CPUCoreUsageAverageLTE(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldLTE(FieldCPUCoreUsageAverage, v))
}

// CPUCoreUsageMaxEQ applies the EQ predicate on the "cpu_core_usage_max" field.
func CPUCoreUsageMaxEQ(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldCPUCoreUsageMax, v))
}

// CPUCoreUsageMaxNEQ applies the NEQ predicate on the "cpu_core_usage_max" field.
func CPUCoreUsageMaxNEQ(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldNEQ(FieldCPUCoreUsageMax, v))
}

// CPUCoreUsageMaxIn applies the In predicate on the "cpu_core_usage_max" field.
func CPUCoreUsageMaxIn(vs ...float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldIn(FieldCPUCoreUsageMax, vs...))
}

// CPUCoreUsageMaxNotIn applies the NotIn predicate on the "cpu_core_usage_max" field.
func CPUCoreUsageMaxNotIn(vs ...float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldNotIn(FieldCPUCoreUsageMax, vs...))
}

// CPUCoreUsageMaxGT applies the GT predicate on the "cpu_core_usage_max" field.
func CPUCoreUsageMaxGT(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldGT(FieldCPUCoreUsageMax, v))
}

// CPUCoreUsageMaxGTE applies the GTE predicate on the "cpu_core_usage_max" field.
func CPUCoreUsageMaxGTE(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldGTE(FieldCPUCoreUsageMax, v))
}

// CPUCoreUsageMaxLT applies the LT predicate on the "cpu_core_usage_max" field.
func CPUCoreUsageMaxLT(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldLT(FieldCPUCoreUsageMax, v))
}

// CPUCoreUsageMaxLTE applies the LTE predicate on the "cpu_core_usage_max" field.
func CPUCoreUsageMaxLTE(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldLTE(FieldCPUCoreUsageMax, v))
}

// RAMByteUsageAverageEQ applies the EQ predicate on the "ram_byte_usage_average" field.
func RAMByteUsageAverageEQ(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldRAMByteUsageAverage, v))
}

// RAMByteUsageAverageNEQ applies the NEQ predicate on the "ram_byte_usage_average" field.
func RAMByteUsageAverageNEQ(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldNEQ(FieldRAMByteUsageAverage, v))
}

// RAMByteUsageAverageIn applies the In predicate on the "ram_byte_usage_average" field.
func RAMByteUsageAverageIn(vs ...float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldIn(FieldRAMByteUsageAverage, vs...))
}

// RAMByteUsageAverageNotIn applies the NotIn predicate on the "ram_byte_usage_average" field.
func RAMByteUsageAverageNotIn(vs ...float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldNotIn(FieldRAMByteUsageAverage, vs...))
}

// RAMByteUsageAverageGT applies the GT predicate on the "ram_byte_usage_average" field.
func RAMByteUsageAverageGT(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldGT(FieldRAMByteUsageAverage, v))
}

// RAMByteUsageAverageGTE applies the GTE predicate on the "ram_byte_usage_average" field.
func RAMByteUsageAverageGTE(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldGTE(FieldRAMByteUsageAverage, v))
}

// RAMByteUsageAverageLT applies the LT predicate on the "ram_byte_usage_average" field.
func RAMByteUsageAverageLT(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldLT(FieldRAMByteUsageAverage, v))
}

// RAMByteUsageAverageLTE applies the LTE predicate on the "ram_byte_usage_average" field.
func RAMByteUsageAverageLTE(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldLTE(FieldRAMByteUsageAverage, v))
}

// RAMByteUsageMaxEQ applies the EQ predicate on the "ram_byte_usage_max" field.
func RAMByteUsageMaxEQ(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldEQ(FieldRAMByteUsageMax, v))
}

// RAMByteUsageMaxNEQ applies the NEQ predicate on the "ram_byte_usage_max" field.
func RAMByteUsageMaxNEQ(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldNEQ(FieldRAMByteUsageMax, v))
}

// RAMByteUsageMaxIn applies the In predicate on the "ram_byte_usage_max" field.
func RAMByteUsageMaxIn(vs ...float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldIn(FieldRAMByteUsageMax, vs...))
}

// RAMByteUsageMaxNotIn applies the NotIn predicate on the "ram_byte_usage_max" field.
func RAMByteUsageMaxNotIn(vs ...float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldNotIn(FieldRAMByteUsageMax, vs...))
}

// RAMByteUsageMaxGT applies the GT predicate on the "ram_byte_usage_max" field.
func RAMByteUsageMaxGT(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldGT(FieldRAMByteUsageMax, v))
}

// RAMByteUsageMaxGTE applies the GTE predicate on the "ram_byte_usage_max" field.
func RAMByteUsageMaxGTE(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldGTE(FieldRAMByteUsageMax, v))
}

// RAMByteUsageMaxLT applies the LT predicate on the "ram_byte_usage_max" field.
func RAMByteUsageMaxLT(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldLT(FieldRAMByteUsageMax, v))
}

// RAMByteUsageMaxLTE applies the LTE predicate on the "ram_byte_usage_max" field.
func RAMByteUsageMaxLTE(v float64) predicate.CostReport {
	return predicate.CostReport(sql.FieldLTE(FieldRAMByteUsageMax, v))
}

// HasConnector applies the HasEdge predicate on the "connector" edge.
func HasConnector() predicate.CostReport {
	return predicate.CostReport(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ConnectorTable, ConnectorColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Connector
		step.Edge.Schema = schemaConfig.CostReport
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConnectorWith applies the HasEdge predicate on the "connector" edge with a given conditions (other predicates).
func HasConnectorWith(preds ...predicate.Connector) predicate.CostReport {
	return predicate.CostReport(func(s *sql.Selector) {
		step := newConnectorStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Connector
		step.Edge.Schema = schemaConfig.CostReport
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CostReport) predicate.CostReport {
	return predicate.CostReport(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CostReport) predicate.CostReport {
	return predicate.CostReport(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CostReport) predicate.CostReport {
	return predicate.CostReport(sql.NotPredicates(p))
}
