// SPDX-FileCopyrightText: 2023 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "ent". DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"

	"github.com/seal-io/seal/pkg/dao/model/internal"
	"github.com/seal-io/seal/pkg/dao/model/predicate"
	"github.com/seal-io/seal/pkg/dao/model/servicedependency"
	"github.com/seal-io/seal/pkg/dao/types/oid"
)

// ServiceDependencyUpdate is the builder for updating ServiceDependency entities.
type ServiceDependencyUpdate struct {
	config
	hooks     []Hook
	mutation  *ServiceDependencyMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ServiceDependencyUpdate builder.
func (sdu *ServiceDependencyUpdate) Where(ps ...predicate.ServiceDependency) *ServiceDependencyUpdate {
	sdu.mutation.Where(ps...)
	return sdu
}

// SetDependentID sets the "dependentID" field.
func (sdu *ServiceDependencyUpdate) SetDependentID(o oid.ID) *ServiceDependencyUpdate {
	sdu.mutation.SetDependentID(o)
	return sdu
}

// SetPath sets the "path" field.
func (sdu *ServiceDependencyUpdate) SetPath(o []oid.ID) *ServiceDependencyUpdate {
	sdu.mutation.SetPath(o)
	return sdu
}

// AppendPath appends o to the "path" field.
func (sdu *ServiceDependencyUpdate) AppendPath(o []oid.ID) *ServiceDependencyUpdate {
	sdu.mutation.AppendPath(o)
	return sdu
}

// Mutation returns the ServiceDependencyMutation object of the builder.
func (sdu *ServiceDependencyUpdate) Mutation() *ServiceDependencyMutation {
	return sdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sdu *ServiceDependencyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ServiceDependencyMutation](ctx, sdu.sqlSave, sdu.mutation, sdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sdu *ServiceDependencyUpdate) SaveX(ctx context.Context) int {
	affected, err := sdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sdu *ServiceDependencyUpdate) Exec(ctx context.Context) error {
	_, err := sdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdu *ServiceDependencyUpdate) ExecX(ctx context.Context) {
	if err := sdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sdu *ServiceDependencyUpdate) check() error {
	if v, ok := sdu.mutation.DependentID(); ok {
		if err := servicedependency.DependentIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "dependentID", err: fmt.Errorf(`model: validator failed for field "ServiceDependency.dependentID": %w`, err)}
		}
	}
	if _, ok := sdu.mutation.ServiceID(); sdu.mutation.ServiceCleared() && !ok {
		return errors.New(`model: clearing a required unique edge "ServiceDependency.service"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sdu *ServiceDependencyUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ServiceDependencyUpdate {
	sdu.modifiers = append(sdu.modifiers, modifiers...)
	return sdu
}

func (sdu *ServiceDependencyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(servicedependency.Table, servicedependency.Columns, sqlgraph.NewFieldSpec(servicedependency.FieldID, field.TypeString))
	if ps := sdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sdu.mutation.DependentID(); ok {
		_spec.SetField(servicedependency.FieldDependentID, field.TypeString, value)
	}
	if value, ok := sdu.mutation.Path(); ok {
		_spec.SetField(servicedependency.FieldPath, field.TypeJSON, value)
	}
	if value, ok := sdu.mutation.AppendedPath(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, servicedependency.FieldPath, value)
		})
	}
	_spec.Node.Schema = sdu.schemaConfig.ServiceDependency
	ctx = internal.NewSchemaConfigContext(ctx, sdu.schemaConfig)
	_spec.AddModifiers(sdu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, sdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{servicedependency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sdu.mutation.done = true
	return n, nil
}

// ServiceDependencyUpdateOne is the builder for updating a single ServiceDependency entity.
type ServiceDependencyUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ServiceDependencyMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDependentID sets the "dependentID" field.
func (sduo *ServiceDependencyUpdateOne) SetDependentID(o oid.ID) *ServiceDependencyUpdateOne {
	sduo.mutation.SetDependentID(o)
	return sduo
}

// SetPath sets the "path" field.
func (sduo *ServiceDependencyUpdateOne) SetPath(o []oid.ID) *ServiceDependencyUpdateOne {
	sduo.mutation.SetPath(o)
	return sduo
}

// AppendPath appends o to the "path" field.
func (sduo *ServiceDependencyUpdateOne) AppendPath(o []oid.ID) *ServiceDependencyUpdateOne {
	sduo.mutation.AppendPath(o)
	return sduo
}

// Mutation returns the ServiceDependencyMutation object of the builder.
func (sduo *ServiceDependencyUpdateOne) Mutation() *ServiceDependencyMutation {
	return sduo.mutation
}

// Where appends a list predicates to the ServiceDependencyUpdate builder.
func (sduo *ServiceDependencyUpdateOne) Where(ps ...predicate.ServiceDependency) *ServiceDependencyUpdateOne {
	sduo.mutation.Where(ps...)
	return sduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sduo *ServiceDependencyUpdateOne) Select(field string, fields ...string) *ServiceDependencyUpdateOne {
	sduo.fields = append([]string{field}, fields...)
	return sduo
}

// Save executes the query and returns the updated ServiceDependency entity.
func (sduo *ServiceDependencyUpdateOne) Save(ctx context.Context) (*ServiceDependency, error) {
	return withHooks[*ServiceDependency, ServiceDependencyMutation](ctx, sduo.sqlSave, sduo.mutation, sduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sduo *ServiceDependencyUpdateOne) SaveX(ctx context.Context) *ServiceDependency {
	node, err := sduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sduo *ServiceDependencyUpdateOne) Exec(ctx context.Context) error {
	_, err := sduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sduo *ServiceDependencyUpdateOne) ExecX(ctx context.Context) {
	if err := sduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sduo *ServiceDependencyUpdateOne) check() error {
	if v, ok := sduo.mutation.DependentID(); ok {
		if err := servicedependency.DependentIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "dependentID", err: fmt.Errorf(`model: validator failed for field "ServiceDependency.dependentID": %w`, err)}
		}
	}
	if _, ok := sduo.mutation.ServiceID(); sduo.mutation.ServiceCleared() && !ok {
		return errors.New(`model: clearing a required unique edge "ServiceDependency.service"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sduo *ServiceDependencyUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ServiceDependencyUpdateOne {
	sduo.modifiers = append(sduo.modifiers, modifiers...)
	return sduo
}

func (sduo *ServiceDependencyUpdateOne) sqlSave(ctx context.Context) (_node *ServiceDependency, err error) {
	if err := sduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(servicedependency.Table, servicedependency.Columns, sqlgraph.NewFieldSpec(servicedependency.FieldID, field.TypeString))
	id, ok := sduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`model: missing "ServiceDependency.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, servicedependency.FieldID)
		for _, f := range fields {
			if !servicedependency.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
			}
			if f != servicedependency.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sduo.mutation.DependentID(); ok {
		_spec.SetField(servicedependency.FieldDependentID, field.TypeString, value)
	}
	if value, ok := sduo.mutation.Path(); ok {
		_spec.SetField(servicedependency.FieldPath, field.TypeJSON, value)
	}
	if value, ok := sduo.mutation.AppendedPath(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, servicedependency.FieldPath, value)
		})
	}
	_spec.Node.Schema = sduo.schemaConfig.ServiceDependency
	ctx = internal.NewSchemaConfigContext(ctx, sduo.schemaConfig)
	_spec.AddModifiers(sduo.modifiers...)
	_node = &ServiceDependency{config: sduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{servicedependency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sduo.mutation.done = true
	return _node, nil
}
