// SPDX-FileCopyrightText: 2023 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "seal". DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/seal-io/seal/pkg/dao/model/connector"
	"github.com/seal-io/seal/pkg/dao/model/service"
	"github.com/seal-io/seal/pkg/dao/model/serviceresource"
	"github.com/seal-io/seal/pkg/dao/model/serviceresourcerelationship"
	"github.com/seal-io/seal/pkg/dao/types"
	"github.com/seal-io/seal/pkg/dao/types/object"
)

// ServiceResourceCreate is the builder for creating a ServiceResource entity.
type ServiceResourceCreate struct {
	config
	mutation   *ServiceResourceMutation
	hooks      []Hook
	conflict   []sql.ConflictOption
	object     *ServiceResource
	fromUpsert bool
}

// SetCreateTime sets the "create_time" field.
func (src *ServiceResourceCreate) SetCreateTime(t time.Time) *ServiceResourceCreate {
	src.mutation.SetCreateTime(t)
	return src
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (src *ServiceResourceCreate) SetNillableCreateTime(t *time.Time) *ServiceResourceCreate {
	if t != nil {
		src.SetCreateTime(*t)
	}
	return src
}

// SetUpdateTime sets the "update_time" field.
func (src *ServiceResourceCreate) SetUpdateTime(t time.Time) *ServiceResourceCreate {
	src.mutation.SetUpdateTime(t)
	return src
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (src *ServiceResourceCreate) SetNillableUpdateTime(t *time.Time) *ServiceResourceCreate {
	if t != nil {
		src.SetUpdateTime(*t)
	}
	return src
}

// SetProjectID sets the "project_id" field.
func (src *ServiceResourceCreate) SetProjectID(o object.ID) *ServiceResourceCreate {
	src.mutation.SetProjectID(o)
	return src
}

// SetServiceID sets the "service_id" field.
func (src *ServiceResourceCreate) SetServiceID(o object.ID) *ServiceResourceCreate {
	src.mutation.SetServiceID(o)
	return src
}

// SetConnectorID sets the "connector_id" field.
func (src *ServiceResourceCreate) SetConnectorID(o object.ID) *ServiceResourceCreate {
	src.mutation.SetConnectorID(o)
	return src
}

// SetCompositionID sets the "composition_id" field.
func (src *ServiceResourceCreate) SetCompositionID(o object.ID) *ServiceResourceCreate {
	src.mutation.SetCompositionID(o)
	return src
}

// SetNillableCompositionID sets the "composition_id" field if the given value is not nil.
func (src *ServiceResourceCreate) SetNillableCompositionID(o *object.ID) *ServiceResourceCreate {
	if o != nil {
		src.SetCompositionID(*o)
	}
	return src
}

// SetClassID sets the "class_id" field.
func (src *ServiceResourceCreate) SetClassID(o object.ID) *ServiceResourceCreate {
	src.mutation.SetClassID(o)
	return src
}

// SetNillableClassID sets the "class_id" field if the given value is not nil.
func (src *ServiceResourceCreate) SetNillableClassID(o *object.ID) *ServiceResourceCreate {
	if o != nil {
		src.SetClassID(*o)
	}
	return src
}

// SetMode sets the "mode" field.
func (src *ServiceResourceCreate) SetMode(s string) *ServiceResourceCreate {
	src.mutation.SetMode(s)
	return src
}

// SetType sets the "type" field.
func (src *ServiceResourceCreate) SetType(s string) *ServiceResourceCreate {
	src.mutation.SetType(s)
	return src
}

// SetName sets the "name" field.
func (src *ServiceResourceCreate) SetName(s string) *ServiceResourceCreate {
	src.mutation.SetName(s)
	return src
}

// SetDeployerType sets the "deployer_type" field.
func (src *ServiceResourceCreate) SetDeployerType(s string) *ServiceResourceCreate {
	src.mutation.SetDeployerType(s)
	return src
}

// SetShape sets the "shape" field.
func (src *ServiceResourceCreate) SetShape(s string) *ServiceResourceCreate {
	src.mutation.SetShape(s)
	return src
}

// SetStatus sets the "status" field.
func (src *ServiceResourceCreate) SetStatus(trs types.ServiceResourceStatus) *ServiceResourceCreate {
	src.mutation.SetStatus(trs)
	return src
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (src *ServiceResourceCreate) SetNillableStatus(trs *types.ServiceResourceStatus) *ServiceResourceCreate {
	if trs != nil {
		src.SetStatus(*trs)
	}
	return src
}

// SetID sets the "id" field.
func (src *ServiceResourceCreate) SetID(o object.ID) *ServiceResourceCreate {
	src.mutation.SetID(o)
	return src
}

// SetService sets the "service" edge to the Service entity.
func (src *ServiceResourceCreate) SetService(s *Service) *ServiceResourceCreate {
	return src.SetServiceID(s.ID)
}

// SetConnector sets the "connector" edge to the Connector entity.
func (src *ServiceResourceCreate) SetConnector(c *Connector) *ServiceResourceCreate {
	return src.SetConnectorID(c.ID)
}

// SetComposition sets the "composition" edge to the ServiceResource entity.
func (src *ServiceResourceCreate) SetComposition(s *ServiceResource) *ServiceResourceCreate {
	return src.SetCompositionID(s.ID)
}

// AddComponentIDs adds the "components" edge to the ServiceResource entity by IDs.
func (src *ServiceResourceCreate) AddComponentIDs(ids ...object.ID) *ServiceResourceCreate {
	src.mutation.AddComponentIDs(ids...)
	return src
}

// AddComponents adds the "components" edges to the ServiceResource entity.
func (src *ServiceResourceCreate) AddComponents(s ...*ServiceResource) *ServiceResourceCreate {
	ids := make([]object.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return src.AddComponentIDs(ids...)
}

// SetClass sets the "class" edge to the ServiceResource entity.
func (src *ServiceResourceCreate) SetClass(s *ServiceResource) *ServiceResourceCreate {
	return src.SetClassID(s.ID)
}

// AddInstanceIDs adds the "instances" edge to the ServiceResource entity by IDs.
func (src *ServiceResourceCreate) AddInstanceIDs(ids ...object.ID) *ServiceResourceCreate {
	src.mutation.AddInstanceIDs(ids...)
	return src
}

// AddInstances adds the "instances" edges to the ServiceResource entity.
func (src *ServiceResourceCreate) AddInstances(s ...*ServiceResource) *ServiceResourceCreate {
	ids := make([]object.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return src.AddInstanceIDs(ids...)
}

// AddDependencyIDs adds the "dependencies" edge to the ServiceResourceRelationship entity by IDs.
func (src *ServiceResourceCreate) AddDependencyIDs(ids ...object.ID) *ServiceResourceCreate {
	src.mutation.AddDependencyIDs(ids...)
	return src
}

// AddDependencies adds the "dependencies" edges to the ServiceResourceRelationship entity.
func (src *ServiceResourceCreate) AddDependencies(s ...*ServiceResourceRelationship) *ServiceResourceCreate {
	ids := make([]object.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return src.AddDependencyIDs(ids...)
}

// Mutation returns the ServiceResourceMutation object of the builder.
func (src *ServiceResourceCreate) Mutation() *ServiceResourceMutation {
	return src.mutation
}

// Save creates the ServiceResource in the database.
func (src *ServiceResourceCreate) Save(ctx context.Context) (*ServiceResource, error) {
	if err := src.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, src.sqlSave, src.mutation, src.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (src *ServiceResourceCreate) SaveX(ctx context.Context) *ServiceResource {
	v, err := src.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (src *ServiceResourceCreate) Exec(ctx context.Context) error {
	_, err := src.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (src *ServiceResourceCreate) ExecX(ctx context.Context) {
	if err := src.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (src *ServiceResourceCreate) defaults() error {
	if _, ok := src.mutation.CreateTime(); !ok {
		if serviceresource.DefaultCreateTime == nil {
			return fmt.Errorf("model: uninitialized serviceresource.DefaultCreateTime (forgotten import model/runtime?)")
		}
		v := serviceresource.DefaultCreateTime()
		src.mutation.SetCreateTime(v)
	}
	if _, ok := src.mutation.UpdateTime(); !ok {
		if serviceresource.DefaultUpdateTime == nil {
			return fmt.Errorf("model: uninitialized serviceresource.DefaultUpdateTime (forgotten import model/runtime?)")
		}
		v := serviceresource.DefaultUpdateTime()
		src.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (src *ServiceResourceCreate) check() error {
	if _, ok := src.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`model: missing required field "ServiceResource.create_time"`)}
	}
	if _, ok := src.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`model: missing required field "ServiceResource.update_time"`)}
	}
	if _, ok := src.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project_id", err: errors.New(`model: missing required field "ServiceResource.project_id"`)}
	}
	if v, ok := src.mutation.ProjectID(); ok {
		if err := serviceresource.ProjectIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "project_id", err: fmt.Errorf(`model: validator failed for field "ServiceResource.project_id": %w`, err)}
		}
	}
	if _, ok := src.mutation.ServiceID(); !ok {
		return &ValidationError{Name: "service_id", err: errors.New(`model: missing required field "ServiceResource.service_id"`)}
	}
	if v, ok := src.mutation.ServiceID(); ok {
		if err := serviceresource.ServiceIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "service_id", err: fmt.Errorf(`model: validator failed for field "ServiceResource.service_id": %w`, err)}
		}
	}
	if _, ok := src.mutation.ConnectorID(); !ok {
		return &ValidationError{Name: "connector_id", err: errors.New(`model: missing required field "ServiceResource.connector_id"`)}
	}
	if v, ok := src.mutation.ConnectorID(); ok {
		if err := serviceresource.ConnectorIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "connector_id", err: fmt.Errorf(`model: validator failed for field "ServiceResource.connector_id": %w`, err)}
		}
	}
	if _, ok := src.mutation.Mode(); !ok {
		return &ValidationError{Name: "mode", err: errors.New(`model: missing required field "ServiceResource.mode"`)}
	}
	if v, ok := src.mutation.Mode(); ok {
		if err := serviceresource.ModeValidator(v); err != nil {
			return &ValidationError{Name: "mode", err: fmt.Errorf(`model: validator failed for field "ServiceResource.mode": %w`, err)}
		}
	}
	if _, ok := src.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`model: missing required field "ServiceResource.type"`)}
	}
	if v, ok := src.mutation.GetType(); ok {
		if err := serviceresource.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`model: validator failed for field "ServiceResource.type": %w`, err)}
		}
	}
	if _, ok := src.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`model: missing required field "ServiceResource.name"`)}
	}
	if v, ok := src.mutation.Name(); ok {
		if err := serviceresource.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`model: validator failed for field "ServiceResource.name": %w`, err)}
		}
	}
	if _, ok := src.mutation.DeployerType(); !ok {
		return &ValidationError{Name: "deployer_type", err: errors.New(`model: missing required field "ServiceResource.deployer_type"`)}
	}
	if v, ok := src.mutation.DeployerType(); ok {
		if err := serviceresource.DeployerTypeValidator(v); err != nil {
			return &ValidationError{Name: "deployer_type", err: fmt.Errorf(`model: validator failed for field "ServiceResource.deployer_type": %w`, err)}
		}
	}
	if _, ok := src.mutation.Shape(); !ok {
		return &ValidationError{Name: "shape", err: errors.New(`model: missing required field "ServiceResource.shape"`)}
	}
	if v, ok := src.mutation.Shape(); ok {
		if err := serviceresource.ShapeValidator(v); err != nil {
			return &ValidationError{Name: "shape", err: fmt.Errorf(`model: validator failed for field "ServiceResource.shape": %w`, err)}
		}
	}
	if _, ok := src.mutation.ServiceID(); !ok {
		return &ValidationError{Name: "service", err: errors.New(`model: missing required edge "ServiceResource.service"`)}
	}
	if _, ok := src.mutation.ConnectorID(); !ok {
		return &ValidationError{Name: "connector", err: errors.New(`model: missing required edge "ServiceResource.connector"`)}
	}
	return nil
}

func (src *ServiceResourceCreate) sqlSave(ctx context.Context) (*ServiceResource, error) {
	if err := src.check(); err != nil {
		return nil, err
	}
	_node, _spec := src.createSpec()
	if err := sqlgraph.CreateNode(ctx, src.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*object.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	src.mutation.id = &_node.ID
	src.mutation.done = true
	return _node, nil
}

func (src *ServiceResourceCreate) createSpec() (*ServiceResource, *sqlgraph.CreateSpec) {
	var (
		_node = &ServiceResource{config: src.config}
		_spec = sqlgraph.NewCreateSpec(serviceresource.Table, sqlgraph.NewFieldSpec(serviceresource.FieldID, field.TypeString))
	)
	_spec.Schema = src.schemaConfig.ServiceResource
	_spec.OnConflict = src.conflict
	if id, ok := src.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := src.mutation.CreateTime(); ok {
		_spec.SetField(serviceresource.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = &value
	}
	if value, ok := src.mutation.UpdateTime(); ok {
		_spec.SetField(serviceresource.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = &value
	}
	if value, ok := src.mutation.ProjectID(); ok {
		_spec.SetField(serviceresource.FieldProjectID, field.TypeString, value)
		_node.ProjectID = value
	}
	if value, ok := src.mutation.Mode(); ok {
		_spec.SetField(serviceresource.FieldMode, field.TypeString, value)
		_node.Mode = value
	}
	if value, ok := src.mutation.GetType(); ok {
		_spec.SetField(serviceresource.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := src.mutation.Name(); ok {
		_spec.SetField(serviceresource.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := src.mutation.DeployerType(); ok {
		_spec.SetField(serviceresource.FieldDeployerType, field.TypeString, value)
		_node.DeployerType = value
	}
	if value, ok := src.mutation.Shape(); ok {
		_spec.SetField(serviceresource.FieldShape, field.TypeString, value)
		_node.Shape = value
	}
	if value, ok := src.mutation.Status(); ok {
		_spec.SetField(serviceresource.FieldStatus, field.TypeJSON, value)
		_node.Status = value
	}
	if nodes := src.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceresource.ServiceTable,
			Columns: []string{serviceresource.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		edge.Schema = src.schemaConfig.ServiceResource
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ServiceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := src.mutation.ConnectorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceresource.ConnectorTable,
			Columns: []string{serviceresource.ConnectorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connector.FieldID, field.TypeString),
			},
		}
		edge.Schema = src.schemaConfig.ServiceResource
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ConnectorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := src.mutation.CompositionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceresource.CompositionTable,
			Columns: []string{serviceresource.CompositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceresource.FieldID, field.TypeString),
			},
		}
		edge.Schema = src.schemaConfig.ServiceResource
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CompositionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := src.mutation.ComponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceresource.ComponentsTable,
			Columns: []string{serviceresource.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceresource.FieldID, field.TypeString),
			},
		}
		edge.Schema = src.schemaConfig.ServiceResource
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := src.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceresource.ClassTable,
			Columns: []string{serviceresource.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceresource.FieldID, field.TypeString),
			},
		}
		edge.Schema = src.schemaConfig.ServiceResource
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ClassID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := src.mutation.InstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceresource.InstancesTable,
			Columns: []string{serviceresource.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceresource.FieldID, field.TypeString),
			},
		}
		edge.Schema = src.schemaConfig.ServiceResource
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := src.mutation.DependenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   serviceresource.DependenciesTable,
			Columns: []string{serviceresource.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceresourcerelationship.FieldID, field.TypeString),
			},
		}
		edge.Schema = src.schemaConfig.ServiceResourceRelationship
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// Set is different from other Set* methods,
// it sets the value by judging the definition of each field within the entire object.
//
// For required fields, Set calls directly.
//
// For optional fields, Set calls if the value is not zero.
//
// For example:
//
//	## Required
//
//	db.SetX(obj.X)
//
//	## Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (src *ServiceResourceCreate) Set(obj *ServiceResource) *ServiceResourceCreate {
	// Required.
	src.SetProjectID(obj.ProjectID)
	src.SetServiceID(obj.ServiceID)
	src.SetConnectorID(obj.ConnectorID)
	src.SetMode(obj.Mode)
	src.SetType(obj.Type)
	src.SetName(obj.Name)
	src.SetDeployerType(obj.DeployerType)
	src.SetShape(obj.Shape)

	// Optional.
	if obj.CreateTime != nil {
		src.SetCreateTime(*obj.CreateTime)
	}
	if obj.UpdateTime != nil {
		src.SetUpdateTime(*obj.UpdateTime)
	}
	if obj.CompositionID != "" {
		src.SetCompositionID(obj.CompositionID)
	}
	if obj.ClassID != "" {
		src.SetClassID(obj.ClassID)
	}
	if !reflect.ValueOf(obj.Status).IsZero() {
		src.SetStatus(obj.Status)
	}

	// Record the given object.
	src.object = obj

	return src
}

// getClientSet returns the ClientSet for the given builder.
func (src *ServiceResourceCreate) getClientSet() (mc ClientSet) {
	if _, ok := src.config.driver.(*txDriver); ok {
		tx := &Tx{config: src.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: src.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after created the ServiceResource entity,
// which is always good for cascading create operations.
func (src *ServiceResourceCreate) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ServiceResource) error) (*ServiceResource, error) {
	obj, err := src.Save(ctx)
	if err != nil {
		return nil, err
	}

	if len(cbs) == 0 {
		return obj, err
	}

	mc := src.getClientSet()

	if x := src.object; x != nil {
		if _, set := src.mutation.Field(serviceresource.FieldProjectID); set {
			obj.ProjectID = x.ProjectID
		}
		if _, set := src.mutation.Field(serviceresource.FieldServiceID); set {
			obj.ServiceID = x.ServiceID
		}
		if _, set := src.mutation.Field(serviceresource.FieldConnectorID); set {
			obj.ConnectorID = x.ConnectorID
		}
		if _, set := src.mutation.Field(serviceresource.FieldCompositionID); set {
			obj.CompositionID = x.CompositionID
		}
		if _, set := src.mutation.Field(serviceresource.FieldClassID); set {
			obj.ClassID = x.ClassID
		}
		if _, set := src.mutation.Field(serviceresource.FieldMode); set {
			obj.Mode = x.Mode
		}
		if _, set := src.mutation.Field(serviceresource.FieldType); set {
			obj.Type = x.Type
		}
		if _, set := src.mutation.Field(serviceresource.FieldName); set {
			obj.Name = x.Name
		}
		if _, set := src.mutation.Field(serviceresource.FieldDeployerType); set {
			obj.DeployerType = x.DeployerType
		}
		if _, set := src.mutation.Field(serviceresource.FieldShape); set {
			obj.Shape = x.Shape
		}
		if _, set := src.mutation.Field(serviceresource.FieldStatus); set {
			obj.Status = x.Status
		}
		obj.Edges = x.Edges
	}

	for i := range cbs {
		if err = cbs[i](ctx, mc, obj); err != nil {
			return nil, err
		}
	}

	return obj, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (src *ServiceResourceCreate) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ServiceResource) error) *ServiceResource {
	obj, err := src.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return obj
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (src *ServiceResourceCreate) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ServiceResource) error) error {
	_, err := src.SaveE(ctx, cbs...)
	return err
}

// ExecEX is like ExecE, but panics if an error occurs.
func (src *ServiceResourceCreate) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ServiceResource) error) {
	if err := src.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// Set leverages the ServiceResourceCreate Set method,
// it sets the value by judging the definition of each field within the entire item of the given list.
//
// For required fields, Set calls directly.
//
// For optional fields, Set calls if the value is not zero.
//
// For example:
//
//	## Required
//
//	db.SetX(obj.X)
//
//	## Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (srcb *ServiceResourceCreateBulk) Set(objs ...*ServiceResource) *ServiceResourceCreateBulk {
	if len(objs) != 0 {
		client := NewServiceResourceClient(srcb.config)

		srcb.builders = make([]*ServiceResourceCreate, len(objs))
		for i := range objs {
			srcb.builders[i] = client.Create().Set(objs[i])
		}

		// Record the given objects.
		srcb.objects = objs
	}

	return srcb
}

// getClientSet returns the ClientSet for the given builder.
func (srcb *ServiceResourceCreateBulk) getClientSet() (mc ClientSet) {
	if _, ok := srcb.config.driver.(*txDriver); ok {
		tx := &Tx{config: srcb.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: srcb.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after created the ServiceResource entities,
// which is always good for cascading create operations.
func (srcb *ServiceResourceCreateBulk) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ServiceResource) error) ([]*ServiceResource, error) {
	objs, err := srcb.Save(ctx)
	if err != nil {
		return nil, err
	}

	if len(cbs) == 0 {
		return objs, err
	}

	mc := srcb.getClientSet()

	if x := srcb.objects; x != nil {
		for i := range x {
			if _, set := srcb.builders[i].mutation.Field(serviceresource.FieldProjectID); set {
				objs[i].ProjectID = x[i].ProjectID
			}
			if _, set := srcb.builders[i].mutation.Field(serviceresource.FieldServiceID); set {
				objs[i].ServiceID = x[i].ServiceID
			}
			if _, set := srcb.builders[i].mutation.Field(serviceresource.FieldConnectorID); set {
				objs[i].ConnectorID = x[i].ConnectorID
			}
			if _, set := srcb.builders[i].mutation.Field(serviceresource.FieldCompositionID); set {
				objs[i].CompositionID = x[i].CompositionID
			}
			if _, set := srcb.builders[i].mutation.Field(serviceresource.FieldClassID); set {
				objs[i].ClassID = x[i].ClassID
			}
			if _, set := srcb.builders[i].mutation.Field(serviceresource.FieldMode); set {
				objs[i].Mode = x[i].Mode
			}
			if _, set := srcb.builders[i].mutation.Field(serviceresource.FieldType); set {
				objs[i].Type = x[i].Type
			}
			if _, set := srcb.builders[i].mutation.Field(serviceresource.FieldName); set {
				objs[i].Name = x[i].Name
			}
			if _, set := srcb.builders[i].mutation.Field(serviceresource.FieldDeployerType); set {
				objs[i].DeployerType = x[i].DeployerType
			}
			if _, set := srcb.builders[i].mutation.Field(serviceresource.FieldShape); set {
				objs[i].Shape = x[i].Shape
			}
			if _, set := srcb.builders[i].mutation.Field(serviceresource.FieldStatus); set {
				objs[i].Status = x[i].Status
			}
			objs[i].Edges = x[i].Edges
		}
	}

	for i := range objs {
		for j := range cbs {
			if err = cbs[j](ctx, mc, objs[i]); err != nil {
				return nil, err
			}
		}
	}

	return objs, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (srcb *ServiceResourceCreateBulk) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ServiceResource) error) []*ServiceResource {
	objs, err := srcb.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return objs
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (srcb *ServiceResourceCreateBulk) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ServiceResource) error) error {
	_, err := srcb.SaveE(ctx, cbs...)
	return err
}

// ExecEX is like ExecE, but panics if an error occurs.
func (srcb *ServiceResourceCreateBulk) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ServiceResource) error) {
	if err := srcb.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (u *ServiceResourceUpsertOne) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *ServiceResource) error) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for ServiceResourceUpsertOne.OnConflict")
	}
	u.create.fromUpsert = true
	return u.create.ExecE(ctx, cbs...)
}

// ExecEX is like ExecE, but panics if an error occurs.
func (u *ServiceResourceUpsertOne) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *ServiceResource) error) {
	if err := u.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (u *ServiceResourceUpsertBulk) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *ServiceResource) error) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model: OnConflict was set for builder %d. Set it on the ServiceResourceUpsertBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for ServiceResourceUpsertBulk.OnConflict")
	}
	u.create.fromUpsert = true
	return u.create.ExecE(ctx, cbs...)
}

// ExecEX is like ExecE, but panics if an error occurs.
func (u *ServiceResourceUpsertBulk) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *ServiceResource) error) {
	if err := u.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ServiceResource.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ServiceResourceUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (src *ServiceResourceCreate) OnConflict(opts ...sql.ConflictOption) *ServiceResourceUpsertOne {
	src.conflict = opts
	return &ServiceResourceUpsertOne{
		create: src,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ServiceResource.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (src *ServiceResourceCreate) OnConflictColumns(columns ...string) *ServiceResourceUpsertOne {
	src.conflict = append(src.conflict, sql.ConflictColumns(columns...))
	return &ServiceResourceUpsertOne{
		create: src,
	}
}

type (
	// ServiceResourceUpsertOne is the builder for "upsert"-ing
	//  one ServiceResource node.
	ServiceResourceUpsertOne struct {
		create *ServiceResourceCreate
	}

	// ServiceResourceUpsert is the "OnConflict" setter.
	ServiceResourceUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *ServiceResourceUpsert) SetUpdateTime(v time.Time) *ServiceResourceUpsert {
	u.Set(serviceresource.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *ServiceResourceUpsert) UpdateUpdateTime() *ServiceResourceUpsert {
	u.SetExcluded(serviceresource.FieldUpdateTime)
	return u
}

// SetStatus sets the "status" field.
func (u *ServiceResourceUpsert) SetStatus(v types.ServiceResourceStatus) *ServiceResourceUpsert {
	u.Set(serviceresource.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ServiceResourceUpsert) UpdateStatus() *ServiceResourceUpsert {
	u.SetExcluded(serviceresource.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *ServiceResourceUpsert) ClearStatus() *ServiceResourceUpsert {
	u.SetNull(serviceresource.FieldStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ServiceResource.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(serviceresource.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ServiceResourceUpsertOne) UpdateNewValues() *ServiceResourceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(serviceresource.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(serviceresource.FieldCreateTime)
		}
		if _, exists := u.create.mutation.ProjectID(); exists {
			s.SetIgnore(serviceresource.FieldProjectID)
		}
		if _, exists := u.create.mutation.ServiceID(); exists {
			s.SetIgnore(serviceresource.FieldServiceID)
		}
		if _, exists := u.create.mutation.ConnectorID(); exists {
			s.SetIgnore(serviceresource.FieldConnectorID)
		}
		if _, exists := u.create.mutation.CompositionID(); exists {
			s.SetIgnore(serviceresource.FieldCompositionID)
		}
		if _, exists := u.create.mutation.ClassID(); exists {
			s.SetIgnore(serviceresource.FieldClassID)
		}
		if _, exists := u.create.mutation.Mode(); exists {
			s.SetIgnore(serviceresource.FieldMode)
		}
		if _, exists := u.create.mutation.GetType(); exists {
			s.SetIgnore(serviceresource.FieldType)
		}
		if _, exists := u.create.mutation.Name(); exists {
			s.SetIgnore(serviceresource.FieldName)
		}
		if _, exists := u.create.mutation.DeployerType(); exists {
			s.SetIgnore(serviceresource.FieldDeployerType)
		}
		if _, exists := u.create.mutation.Shape(); exists {
			s.SetIgnore(serviceresource.FieldShape)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ServiceResource.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ServiceResourceUpsertOne) Ignore() *ServiceResourceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ServiceResourceUpsertOne) DoNothing() *ServiceResourceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ServiceResourceCreate.OnConflict
// documentation for more info.
func (u *ServiceResourceUpsertOne) Update(set func(*ServiceResourceUpsert)) *ServiceResourceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ServiceResourceUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *ServiceResourceUpsertOne) SetUpdateTime(v time.Time) *ServiceResourceUpsertOne {
	return u.Update(func(s *ServiceResourceUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *ServiceResourceUpsertOne) UpdateUpdateTime() *ServiceResourceUpsertOne {
	return u.Update(func(s *ServiceResourceUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetStatus sets the "status" field.
func (u *ServiceResourceUpsertOne) SetStatus(v types.ServiceResourceStatus) *ServiceResourceUpsertOne {
	return u.Update(func(s *ServiceResourceUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ServiceResourceUpsertOne) UpdateStatus() *ServiceResourceUpsertOne {
	return u.Update(func(s *ServiceResourceUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *ServiceResourceUpsertOne) ClearStatus() *ServiceResourceUpsertOne {
	return u.Update(func(s *ServiceResourceUpsert) {
		s.ClearStatus()
	})
}

// Exec executes the query.
func (u *ServiceResourceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for ServiceResourceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ServiceResourceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ServiceResourceUpsertOne) ID(ctx context.Context) (id object.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("model: ServiceResourceUpsertOne.ID is not supported by MySQL driver. Use ServiceResourceUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ServiceResourceUpsertOne) IDX(ctx context.Context) object.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ServiceResourceCreateBulk is the builder for creating many ServiceResource entities in bulk.
type ServiceResourceCreateBulk struct {
	config
	builders   []*ServiceResourceCreate
	conflict   []sql.ConflictOption
	objects    []*ServiceResource
	fromUpsert bool
}

// Save creates the ServiceResource entities in the database.
func (srcb *ServiceResourceCreateBulk) Save(ctx context.Context) ([]*ServiceResource, error) {
	specs := make([]*sqlgraph.CreateSpec, len(srcb.builders))
	nodes := make([]*ServiceResource, len(srcb.builders))
	mutators := make([]Mutator, len(srcb.builders))
	for i := range srcb.builders {
		func(i int, root context.Context) {
			builder := srcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ServiceResourceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, srcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = srcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, srcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, srcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (srcb *ServiceResourceCreateBulk) SaveX(ctx context.Context) []*ServiceResource {
	v, err := srcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (srcb *ServiceResourceCreateBulk) Exec(ctx context.Context) error {
	_, err := srcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srcb *ServiceResourceCreateBulk) ExecX(ctx context.Context) {
	if err := srcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ServiceResource.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ServiceResourceUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (srcb *ServiceResourceCreateBulk) OnConflict(opts ...sql.ConflictOption) *ServiceResourceUpsertBulk {
	srcb.conflict = opts
	return &ServiceResourceUpsertBulk{
		create: srcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ServiceResource.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (srcb *ServiceResourceCreateBulk) OnConflictColumns(columns ...string) *ServiceResourceUpsertBulk {
	srcb.conflict = append(srcb.conflict, sql.ConflictColumns(columns...))
	return &ServiceResourceUpsertBulk{
		create: srcb,
	}
}

// ServiceResourceUpsertBulk is the builder for "upsert"-ing
// a bulk of ServiceResource nodes.
type ServiceResourceUpsertBulk struct {
	create *ServiceResourceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ServiceResource.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(serviceresource.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ServiceResourceUpsertBulk) UpdateNewValues() *ServiceResourceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(serviceresource.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(serviceresource.FieldCreateTime)
			}
			if _, exists := b.mutation.ProjectID(); exists {
				s.SetIgnore(serviceresource.FieldProjectID)
			}
			if _, exists := b.mutation.ServiceID(); exists {
				s.SetIgnore(serviceresource.FieldServiceID)
			}
			if _, exists := b.mutation.ConnectorID(); exists {
				s.SetIgnore(serviceresource.FieldConnectorID)
			}
			if _, exists := b.mutation.CompositionID(); exists {
				s.SetIgnore(serviceresource.FieldCompositionID)
			}
			if _, exists := b.mutation.ClassID(); exists {
				s.SetIgnore(serviceresource.FieldClassID)
			}
			if _, exists := b.mutation.Mode(); exists {
				s.SetIgnore(serviceresource.FieldMode)
			}
			if _, exists := b.mutation.GetType(); exists {
				s.SetIgnore(serviceresource.FieldType)
			}
			if _, exists := b.mutation.Name(); exists {
				s.SetIgnore(serviceresource.FieldName)
			}
			if _, exists := b.mutation.DeployerType(); exists {
				s.SetIgnore(serviceresource.FieldDeployerType)
			}
			if _, exists := b.mutation.Shape(); exists {
				s.SetIgnore(serviceresource.FieldShape)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ServiceResource.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ServiceResourceUpsertBulk) Ignore() *ServiceResourceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ServiceResourceUpsertBulk) DoNothing() *ServiceResourceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ServiceResourceCreateBulk.OnConflict
// documentation for more info.
func (u *ServiceResourceUpsertBulk) Update(set func(*ServiceResourceUpsert)) *ServiceResourceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ServiceResourceUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *ServiceResourceUpsertBulk) SetUpdateTime(v time.Time) *ServiceResourceUpsertBulk {
	return u.Update(func(s *ServiceResourceUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *ServiceResourceUpsertBulk) UpdateUpdateTime() *ServiceResourceUpsertBulk {
	return u.Update(func(s *ServiceResourceUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetStatus sets the "status" field.
func (u *ServiceResourceUpsertBulk) SetStatus(v types.ServiceResourceStatus) *ServiceResourceUpsertBulk {
	return u.Update(func(s *ServiceResourceUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ServiceResourceUpsertBulk) UpdateStatus() *ServiceResourceUpsertBulk {
	return u.Update(func(s *ServiceResourceUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *ServiceResourceUpsertBulk) ClearStatus() *ServiceResourceUpsertBulk {
	return u.Update(func(s *ServiceResourceUpsert) {
		s.ClearStatus()
	})
}

// Exec executes the query.
func (u *ServiceResourceUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model: OnConflict was set for builder %d. Set it on the ServiceResourceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for ServiceResourceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ServiceResourceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
