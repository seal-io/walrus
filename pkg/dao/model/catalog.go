// SPDX-FileCopyrightText: 2023 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "seal". DO NOT EDIT.

package model

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"

	"github.com/seal-io/walrus/pkg/dao/model/catalog"
	"github.com/seal-io/walrus/pkg/dao/types"
	"github.com/seal-io/walrus/pkg/dao/types/object"
	"github.com/seal-io/walrus/pkg/dao/types/status"
	"github.com/seal-io/walrus/utils/json"
)

// Catalog is the model entity for the Catalog schema.
type Catalog struct {
	config `json:"-"`
	// ID of the ent.
	ID object.ID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Labels holds the value of the "labels" field.
	Labels map[string]string `json:"labels,omitempty"`
	// Annotations holds the value of the "annotations" field.
	Annotations map[string]string `json:"annotations,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime *time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime *time.Time `json:"update_time,omitempty"`
	// Status holds the value of the "status" field.
	Status status.Status `json:"status,omitempty"`
	// Type of the catalog.
	Type string `json:"type,omitempty"`
	// Source of the catalog.
	Source string `json:"source,omitempty"`
	// Sync information of the catalog.
	Sync *types.CatalogSync `json:"sync,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CatalogQuery when eager-loading is set.
	Edges        CatalogEdges `json:"edges,omitempty"`
	selectValues sql.SelectValues
}

// CatalogEdges holds the relations/edges for other nodes in the graph.
type CatalogEdges struct {
	// Templates that belong to this catalog.
	Templates []*Template `json:"templates,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TemplatesOrErr returns the Templates value or an error if the edge
// was not loaded in eager-loading.
func (e CatalogEdges) TemplatesOrErr() ([]*Template, error) {
	if e.loadedTypes[0] {
		return e.Templates, nil
	}
	return nil, &NotLoadedError{edge: "templates"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Catalog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case catalog.FieldLabels, catalog.FieldAnnotations, catalog.FieldStatus, catalog.FieldSync:
			values[i] = new([]byte)
		case catalog.FieldID:
			values[i] = new(object.ID)
		case catalog.FieldName, catalog.FieldDescription, catalog.FieldType, catalog.FieldSource:
			values[i] = new(sql.NullString)
		case catalog.FieldCreateTime, catalog.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Catalog fields.
func (c *Catalog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case catalog.FieldID:
			if value, ok := values[i].(*object.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case catalog.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case catalog.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				c.Description = value.String
			}
		case catalog.FieldLabels:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field labels", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Labels); err != nil {
					return fmt.Errorf("unmarshal field labels: %w", err)
				}
			}
		case catalog.FieldAnnotations:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field annotations", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Annotations); err != nil {
					return fmt.Errorf("unmarshal field annotations: %w", err)
				}
			}
		case catalog.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				c.CreateTime = new(time.Time)
				*c.CreateTime = value.Time
			}
		case catalog.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				c.UpdateTime = new(time.Time)
				*c.UpdateTime = value.Time
			}
		case catalog.FieldStatus:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Status); err != nil {
					return fmt.Errorf("unmarshal field status: %w", err)
				}
			}
		case catalog.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				c.Type = value.String
			}
		case catalog.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				c.Source = value.String
			}
		case catalog.FieldSync:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field sync", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Sync); err != nil {
					return fmt.Errorf("unmarshal field sync: %w", err)
				}
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Catalog.
// This includes values selected through modifiers, order, etc.
func (c *Catalog) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryTemplates queries the "templates" edge of the Catalog entity.
func (c *Catalog) QueryTemplates() *TemplateQuery {
	return NewCatalogClient(c.config).QueryTemplates(c)
}

// Update returns a builder for updating this Catalog.
// Note that you need to call Catalog.Unwrap() before calling this method if this Catalog
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Catalog) Update() *CatalogUpdateOne {
	return NewCatalogClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Catalog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Catalog) Unwrap() *Catalog {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("model: Catalog is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Catalog) String() string {
	var builder strings.Builder
	builder.WriteString("Catalog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(c.Description)
	builder.WriteString(", ")
	builder.WriteString("labels=")
	builder.WriteString(fmt.Sprintf("%v", c.Labels))
	builder.WriteString(", ")
	builder.WriteString("annotations=")
	builder.WriteString(fmt.Sprintf("%v", c.Annotations))
	builder.WriteString(", ")
	if v := c.CreateTime; v != nil {
		builder.WriteString("create_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := c.UpdateTime; v != nil {
		builder.WriteString("update_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", c.Status))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(c.Type)
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(c.Source)
	builder.WriteString(", ")
	builder.WriteString("sync=")
	builder.WriteString(fmt.Sprintf("%v", c.Sync))
	builder.WriteByte(')')
	return builder.String()
}

// Catalogs is a parsable slice of Catalog.
type Catalogs []*Catalog
