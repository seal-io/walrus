// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus". DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/seal-io/walrus/pkg/dao/model/project"
	"github.com/seal-io/walrus/pkg/dao/model/workflow"
	"github.com/seal-io/walrus/pkg/dao/model/workflowexecution"
	"github.com/seal-io/walrus/pkg/dao/model/workflowstageexecution"
	"github.com/seal-io/walrus/pkg/dao/types"
	"github.com/seal-io/walrus/pkg/dao/types/object"
	"github.com/seal-io/walrus/pkg/dao/types/status"
)

// WorkflowExecutionCreate is the builder for creating a WorkflowExecution entity.
type WorkflowExecutionCreate struct {
	config
	mutation   *WorkflowExecutionMutation
	hooks      []Hook
	conflict   []sql.ConflictOption
	object     *WorkflowExecution
	fromUpsert bool
}

// SetName sets the "name" field.
func (wec *WorkflowExecutionCreate) SetName(s string) *WorkflowExecutionCreate {
	wec.mutation.SetName(s)
	return wec
}

// SetDescription sets the "description" field.
func (wec *WorkflowExecutionCreate) SetDescription(s string) *WorkflowExecutionCreate {
	wec.mutation.SetDescription(s)
	return wec
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (wec *WorkflowExecutionCreate) SetNillableDescription(s *string) *WorkflowExecutionCreate {
	if s != nil {
		wec.SetDescription(*s)
	}
	return wec
}

// SetLabels sets the "labels" field.
func (wec *WorkflowExecutionCreate) SetLabels(m map[string]string) *WorkflowExecutionCreate {
	wec.mutation.SetLabels(m)
	return wec
}

// SetAnnotations sets the "annotations" field.
func (wec *WorkflowExecutionCreate) SetAnnotations(m map[string]string) *WorkflowExecutionCreate {
	wec.mutation.SetAnnotations(m)
	return wec
}

// SetCreateTime sets the "create_time" field.
func (wec *WorkflowExecutionCreate) SetCreateTime(t time.Time) *WorkflowExecutionCreate {
	wec.mutation.SetCreateTime(t)
	return wec
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (wec *WorkflowExecutionCreate) SetNillableCreateTime(t *time.Time) *WorkflowExecutionCreate {
	if t != nil {
		wec.SetCreateTime(*t)
	}
	return wec
}

// SetUpdateTime sets the "update_time" field.
func (wec *WorkflowExecutionCreate) SetUpdateTime(t time.Time) *WorkflowExecutionCreate {
	wec.mutation.SetUpdateTime(t)
	return wec
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (wec *WorkflowExecutionCreate) SetNillableUpdateTime(t *time.Time) *WorkflowExecutionCreate {
	if t != nil {
		wec.SetUpdateTime(*t)
	}
	return wec
}

// SetStatus sets the "status" field.
func (wec *WorkflowExecutionCreate) SetStatus(s status.Status) *WorkflowExecutionCreate {
	wec.mutation.SetStatus(s)
	return wec
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (wec *WorkflowExecutionCreate) SetNillableStatus(s *status.Status) *WorkflowExecutionCreate {
	if s != nil {
		wec.SetStatus(*s)
	}
	return wec
}

// SetProjectID sets the "project_id" field.
func (wec *WorkflowExecutionCreate) SetProjectID(o object.ID) *WorkflowExecutionCreate {
	wec.mutation.SetProjectID(o)
	return wec
}

// SetVersion sets the "version" field.
func (wec *WorkflowExecutionCreate) SetVersion(i int) *WorkflowExecutionCreate {
	wec.mutation.SetVersion(i)
	return wec
}

// SetType sets the "type" field.
func (wec *WorkflowExecutionCreate) SetType(s string) *WorkflowExecutionCreate {
	wec.mutation.SetType(s)
	return wec
}

// SetWorkflowID sets the "workflow_id" field.
func (wec *WorkflowExecutionCreate) SetWorkflowID(o object.ID) *WorkflowExecutionCreate {
	wec.mutation.SetWorkflowID(o)
	return wec
}

// SetSubjectID sets the "subject_id" field.
func (wec *WorkflowExecutionCreate) SetSubjectID(o object.ID) *WorkflowExecutionCreate {
	wec.mutation.SetSubjectID(o)
	return wec
}

// SetExecuteTime sets the "execute_time" field.
func (wec *WorkflowExecutionCreate) SetExecuteTime(t time.Time) *WorkflowExecutionCreate {
	wec.mutation.SetExecuteTime(t)
	return wec
}

// SetNillableExecuteTime sets the "execute_time" field if the given value is not nil.
func (wec *WorkflowExecutionCreate) SetNillableExecuteTime(t *time.Time) *WorkflowExecutionCreate {
	if t != nil {
		wec.SetExecuteTime(*t)
	}
	return wec
}

// SetTimes sets the "times" field.
func (wec *WorkflowExecutionCreate) SetTimes(i int) *WorkflowExecutionCreate {
	wec.mutation.SetTimes(i)
	return wec
}

// SetNillableTimes sets the "times" field if the given value is not nil.
func (wec *WorkflowExecutionCreate) SetNillableTimes(i *int) *WorkflowExecutionCreate {
	if i != nil {
		wec.SetTimes(*i)
	}
	return wec
}

// SetDuration sets the "duration" field.
func (wec *WorkflowExecutionCreate) SetDuration(i int) *WorkflowExecutionCreate {
	wec.mutation.SetDuration(i)
	return wec
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (wec *WorkflowExecutionCreate) SetNillableDuration(i *int) *WorkflowExecutionCreate {
	if i != nil {
		wec.SetDuration(*i)
	}
	return wec
}

// SetParallelism sets the "parallelism" field.
func (wec *WorkflowExecutionCreate) SetParallelism(i int) *WorkflowExecutionCreate {
	wec.mutation.SetParallelism(i)
	return wec
}

// SetNillableParallelism sets the "parallelism" field if the given value is not nil.
func (wec *WorkflowExecutionCreate) SetNillableParallelism(i *int) *WorkflowExecutionCreate {
	if i != nil {
		wec.SetParallelism(*i)
	}
	return wec
}

// SetTimeout sets the "timeout" field.
func (wec *WorkflowExecutionCreate) SetTimeout(i int) *WorkflowExecutionCreate {
	wec.mutation.SetTimeout(i)
	return wec
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (wec *WorkflowExecutionCreate) SetNillableTimeout(i *int) *WorkflowExecutionCreate {
	if i != nil {
		wec.SetTimeout(*i)
	}
	return wec
}

// SetTrigger sets the "trigger" field.
func (wec *WorkflowExecutionCreate) SetTrigger(tet types.WorkflowExecutionTrigger) *WorkflowExecutionCreate {
	wec.mutation.SetTrigger(tet)
	return wec
}

// SetNillableTrigger sets the "trigger" field if the given value is not nil.
func (wec *WorkflowExecutionCreate) SetNillableTrigger(tet *types.WorkflowExecutionTrigger) *WorkflowExecutionCreate {
	if tet != nil {
		wec.SetTrigger(*tet)
	}
	return wec
}

// SetID sets the "id" field.
func (wec *WorkflowExecutionCreate) SetID(o object.ID) *WorkflowExecutionCreate {
	wec.mutation.SetID(o)
	return wec
}

// SetProject sets the "project" edge to the Project entity.
func (wec *WorkflowExecutionCreate) SetProject(p *Project) *WorkflowExecutionCreate {
	return wec.SetProjectID(p.ID)
}

// AddStageIDs adds the "stages" edge to the WorkflowStageExecution entity by IDs.
func (wec *WorkflowExecutionCreate) AddStageIDs(ids ...object.ID) *WorkflowExecutionCreate {
	wec.mutation.AddStageIDs(ids...)
	return wec
}

// AddStages adds the "stages" edges to the WorkflowStageExecution entity.
func (wec *WorkflowExecutionCreate) AddStages(w ...*WorkflowStageExecution) *WorkflowExecutionCreate {
	ids := make([]object.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wec.AddStageIDs(ids...)
}

// SetWorkflow sets the "workflow" edge to the Workflow entity.
func (wec *WorkflowExecutionCreate) SetWorkflow(w *Workflow) *WorkflowExecutionCreate {
	return wec.SetWorkflowID(w.ID)
}

// Mutation returns the WorkflowExecutionMutation object of the builder.
func (wec *WorkflowExecutionCreate) Mutation() *WorkflowExecutionMutation {
	return wec.mutation
}

// Save creates the WorkflowExecution in the database.
func (wec *WorkflowExecutionCreate) Save(ctx context.Context) (*WorkflowExecution, error) {
	if err := wec.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, wec.sqlSave, wec.mutation, wec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wec *WorkflowExecutionCreate) SaveX(ctx context.Context) *WorkflowExecution {
	v, err := wec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wec *WorkflowExecutionCreate) Exec(ctx context.Context) error {
	_, err := wec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wec *WorkflowExecutionCreate) ExecX(ctx context.Context) {
	if err := wec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wec *WorkflowExecutionCreate) defaults() error {
	if _, ok := wec.mutation.Labels(); !ok {
		v := workflowexecution.DefaultLabels
		wec.mutation.SetLabels(v)
	}
	if _, ok := wec.mutation.Annotations(); !ok {
		v := workflowexecution.DefaultAnnotations
		wec.mutation.SetAnnotations(v)
	}
	if _, ok := wec.mutation.CreateTime(); !ok {
		if workflowexecution.DefaultCreateTime == nil {
			return fmt.Errorf("model: uninitialized workflowexecution.DefaultCreateTime (forgotten import model/runtime?)")
		}
		v := workflowexecution.DefaultCreateTime()
		wec.mutation.SetCreateTime(v)
	}
	if _, ok := wec.mutation.UpdateTime(); !ok {
		if workflowexecution.DefaultUpdateTime == nil {
			return fmt.Errorf("model: uninitialized workflowexecution.DefaultUpdateTime (forgotten import model/runtime?)")
		}
		v := workflowexecution.DefaultUpdateTime()
		wec.mutation.SetUpdateTime(v)
	}
	if _, ok := wec.mutation.Times(); !ok {
		v := workflowexecution.DefaultTimes
		wec.mutation.SetTimes(v)
	}
	if _, ok := wec.mutation.Duration(); !ok {
		v := workflowexecution.DefaultDuration
		wec.mutation.SetDuration(v)
	}
	if _, ok := wec.mutation.Parallelism(); !ok {
		v := workflowexecution.DefaultParallelism
		wec.mutation.SetParallelism(v)
	}
	if _, ok := wec.mutation.Timeout(); !ok {
		v := workflowexecution.DefaultTimeout
		wec.mutation.SetTimeout(v)
	}
	if _, ok := wec.mutation.Trigger(); !ok {
		v := workflowexecution.DefaultTrigger
		wec.mutation.SetTrigger(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (wec *WorkflowExecutionCreate) check() error {
	if _, ok := wec.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`model: missing required field "WorkflowExecution.name"`)}
	}
	if v, ok := wec.mutation.Name(); ok {
		if err := workflowexecution.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`model: validator failed for field "WorkflowExecution.name": %w`, err)}
		}
	}
	if _, ok := wec.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`model: missing required field "WorkflowExecution.create_time"`)}
	}
	if _, ok := wec.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`model: missing required field "WorkflowExecution.update_time"`)}
	}
	if _, ok := wec.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project_id", err: errors.New(`model: missing required field "WorkflowExecution.project_id"`)}
	}
	if v, ok := wec.mutation.ProjectID(); ok {
		if err := workflowexecution.ProjectIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "project_id", err: fmt.Errorf(`model: validator failed for field "WorkflowExecution.project_id": %w`, err)}
		}
	}
	if _, ok := wec.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`model: missing required field "WorkflowExecution.version"`)}
	}
	if v, ok := wec.mutation.Version(); ok {
		if err := workflowexecution.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`model: validator failed for field "WorkflowExecution.version": %w`, err)}
		}
	}
	if _, ok := wec.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`model: missing required field "WorkflowExecution.type"`)}
	}
	if v, ok := wec.mutation.GetType(); ok {
		if err := workflowexecution.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`model: validator failed for field "WorkflowExecution.type": %w`, err)}
		}
	}
	if _, ok := wec.mutation.WorkflowID(); !ok {
		return &ValidationError{Name: "workflow_id", err: errors.New(`model: missing required field "WorkflowExecution.workflow_id"`)}
	}
	if v, ok := wec.mutation.WorkflowID(); ok {
		if err := workflowexecution.WorkflowIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "workflow_id", err: fmt.Errorf(`model: validator failed for field "WorkflowExecution.workflow_id": %w`, err)}
		}
	}
	if _, ok := wec.mutation.SubjectID(); !ok {
		return &ValidationError{Name: "subject_id", err: errors.New(`model: missing required field "WorkflowExecution.subject_id"`)}
	}
	if _, ok := wec.mutation.Times(); !ok {
		return &ValidationError{Name: "times", err: errors.New(`model: missing required field "WorkflowExecution.times"`)}
	}
	if v, ok := wec.mutation.Times(); ok {
		if err := workflowexecution.TimesValidator(v); err != nil {
			return &ValidationError{Name: "times", err: fmt.Errorf(`model: validator failed for field "WorkflowExecution.times": %w`, err)}
		}
	}
	if _, ok := wec.mutation.Duration(); !ok {
		return &ValidationError{Name: "duration", err: errors.New(`model: missing required field "WorkflowExecution.duration"`)}
	}
	if v, ok := wec.mutation.Duration(); ok {
		if err := workflowexecution.DurationValidator(v); err != nil {
			return &ValidationError{Name: "duration", err: fmt.Errorf(`model: validator failed for field "WorkflowExecution.duration": %w`, err)}
		}
	}
	if _, ok := wec.mutation.Parallelism(); !ok {
		return &ValidationError{Name: "parallelism", err: errors.New(`model: missing required field "WorkflowExecution.parallelism"`)}
	}
	if v, ok := wec.mutation.Parallelism(); ok {
		if err := workflowexecution.ParallelismValidator(v); err != nil {
			return &ValidationError{Name: "parallelism", err: fmt.Errorf(`model: validator failed for field "WorkflowExecution.parallelism": %w`, err)}
		}
	}
	if _, ok := wec.mutation.Timeout(); !ok {
		return &ValidationError{Name: "timeout", err: errors.New(`model: missing required field "WorkflowExecution.timeout"`)}
	}
	if v, ok := wec.mutation.Timeout(); ok {
		if err := workflowexecution.TimeoutValidator(v); err != nil {
			return &ValidationError{Name: "timeout", err: fmt.Errorf(`model: validator failed for field "WorkflowExecution.timeout": %w`, err)}
		}
	}
	if _, ok := wec.mutation.Trigger(); !ok {
		return &ValidationError{Name: "trigger", err: errors.New(`model: missing required field "WorkflowExecution.trigger"`)}
	}
	if _, ok := wec.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project", err: errors.New(`model: missing required edge "WorkflowExecution.project"`)}
	}
	if _, ok := wec.mutation.WorkflowID(); !ok {
		return &ValidationError{Name: "workflow", err: errors.New(`model: missing required edge "WorkflowExecution.workflow"`)}
	}
	return nil
}

func (wec *WorkflowExecutionCreate) sqlSave(ctx context.Context) (*WorkflowExecution, error) {
	if err := wec.check(); err != nil {
		return nil, err
	}
	_node, _spec := wec.createSpec()
	if err := sqlgraph.CreateNode(ctx, wec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*object.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	wec.mutation.id = &_node.ID
	wec.mutation.done = true
	return _node, nil
}

func (wec *WorkflowExecutionCreate) createSpec() (*WorkflowExecution, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkflowExecution{config: wec.config}
		_spec = sqlgraph.NewCreateSpec(workflowexecution.Table, sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeString))
	)
	_spec.Schema = wec.schemaConfig.WorkflowExecution
	_spec.OnConflict = wec.conflict
	if id, ok := wec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := wec.mutation.Name(); ok {
		_spec.SetField(workflowexecution.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := wec.mutation.Description(); ok {
		_spec.SetField(workflowexecution.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := wec.mutation.Labels(); ok {
		_spec.SetField(workflowexecution.FieldLabels, field.TypeJSON, value)
		_node.Labels = value
	}
	if value, ok := wec.mutation.Annotations(); ok {
		_spec.SetField(workflowexecution.FieldAnnotations, field.TypeJSON, value)
		_node.Annotations = value
	}
	if value, ok := wec.mutation.CreateTime(); ok {
		_spec.SetField(workflowexecution.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = &value
	}
	if value, ok := wec.mutation.UpdateTime(); ok {
		_spec.SetField(workflowexecution.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = &value
	}
	if value, ok := wec.mutation.Status(); ok {
		_spec.SetField(workflowexecution.FieldStatus, field.TypeJSON, value)
		_node.Status = value
	}
	if value, ok := wec.mutation.Version(); ok {
		_spec.SetField(workflowexecution.FieldVersion, field.TypeInt, value)
		_node.Version = value
	}
	if value, ok := wec.mutation.GetType(); ok {
		_spec.SetField(workflowexecution.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := wec.mutation.SubjectID(); ok {
		_spec.SetField(workflowexecution.FieldSubjectID, field.TypeString, value)
		_node.SubjectID = value
	}
	if value, ok := wec.mutation.ExecuteTime(); ok {
		_spec.SetField(workflowexecution.FieldExecuteTime, field.TypeTime, value)
		_node.ExecuteTime = value
	}
	if value, ok := wec.mutation.Times(); ok {
		_spec.SetField(workflowexecution.FieldTimes, field.TypeInt, value)
		_node.Times = value
	}
	if value, ok := wec.mutation.Duration(); ok {
		_spec.SetField(workflowexecution.FieldDuration, field.TypeInt, value)
		_node.Duration = value
	}
	if value, ok := wec.mutation.Parallelism(); ok {
		_spec.SetField(workflowexecution.FieldParallelism, field.TypeInt, value)
		_node.Parallelism = value
	}
	if value, ok := wec.mutation.Timeout(); ok {
		_spec.SetField(workflowexecution.FieldTimeout, field.TypeInt, value)
		_node.Timeout = value
	}
	if value, ok := wec.mutation.Trigger(); ok {
		_spec.SetField(workflowexecution.FieldTrigger, field.TypeJSON, value)
		_node.Trigger = value
	}
	if nodes := wec.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowexecution.ProjectTable,
			Columns: []string{workflowexecution.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		edge.Schema = wec.schemaConfig.WorkflowExecution
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wec.mutation.StagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflowexecution.StagesTable,
			Columns: []string{workflowexecution.StagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowstageexecution.FieldID, field.TypeString),
			},
		}
		edge.Schema = wec.schemaConfig.WorkflowStageExecution
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wec.mutation.WorkflowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowexecution.WorkflowTable,
			Columns: []string{workflowexecution.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeString),
			},
		}
		edge.Schema = wec.schemaConfig.WorkflowExecution
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WorkflowID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// Set is different from other Set* methods,
// it sets the value by judging the definition of each field within the entire object.
//
// For required fields, Set calls directly.
//
// For optional fields, Set calls if the value is not zero.
//
// For example:
//
//	## Required
//
//	db.SetX(obj.X)
//
//	## Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (wec *WorkflowExecutionCreate) Set(obj *WorkflowExecution) *WorkflowExecutionCreate {
	// Required.
	wec.SetName(obj.Name)
	wec.SetProjectID(obj.ProjectID)
	wec.SetVersion(obj.Version)
	wec.SetType(obj.Type)
	wec.SetWorkflowID(obj.WorkflowID)
	wec.SetSubjectID(obj.SubjectID)
	wec.SetTimes(obj.Times)
	wec.SetDuration(obj.Duration)
	wec.SetParallelism(obj.Parallelism)
	wec.SetTimeout(obj.Timeout)
	wec.SetTrigger(obj.Trigger)

	// Optional.
	if obj.Description != "" {
		wec.SetDescription(obj.Description)
	}
	if !reflect.ValueOf(obj.Labels).IsZero() {
		wec.SetLabels(obj.Labels)
	}
	if !reflect.ValueOf(obj.Annotations).IsZero() {
		wec.SetAnnotations(obj.Annotations)
	}
	if obj.CreateTime != nil {
		wec.SetCreateTime(*obj.CreateTime)
	}
	if obj.UpdateTime != nil {
		wec.SetUpdateTime(*obj.UpdateTime)
	}
	if !reflect.ValueOf(obj.Status).IsZero() {
		wec.SetStatus(obj.Status)
	}
	if !obj.ExecuteTime.IsZero() {
		wec.SetExecuteTime(obj.ExecuteTime)
	}

	// Record the given object.
	wec.object = obj

	return wec
}

// getClientSet returns the ClientSet for the given builder.
func (wec *WorkflowExecutionCreate) getClientSet() (mc ClientSet) {
	if _, ok := wec.config.driver.(*txDriver); ok {
		tx := &Tx{config: wec.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: wec.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after created the WorkflowExecution entity,
// which is always good for cascading create operations.
func (wec *WorkflowExecutionCreate) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *WorkflowExecution) error) (*WorkflowExecution, error) {
	obj, err := wec.Save(ctx)
	if err != nil {
		return nil, err
	}

	if len(cbs) == 0 {
		return obj, err
	}

	mc := wec.getClientSet()

	if x := wec.object; x != nil {
		if _, set := wec.mutation.Field(workflowexecution.FieldName); set {
			obj.Name = x.Name
		}
		if _, set := wec.mutation.Field(workflowexecution.FieldDescription); set {
			obj.Description = x.Description
		}
		if _, set := wec.mutation.Field(workflowexecution.FieldStatus); set {
			obj.Status = x.Status
		}
		if _, set := wec.mutation.Field(workflowexecution.FieldProjectID); set {
			obj.ProjectID = x.ProjectID
		}
		if _, set := wec.mutation.Field(workflowexecution.FieldVersion); set {
			obj.Version = x.Version
		}
		if _, set := wec.mutation.Field(workflowexecution.FieldType); set {
			obj.Type = x.Type
		}
		if _, set := wec.mutation.Field(workflowexecution.FieldWorkflowID); set {
			obj.WorkflowID = x.WorkflowID
		}
		if _, set := wec.mutation.Field(workflowexecution.FieldSubjectID); set {
			obj.SubjectID = x.SubjectID
		}
		if _, set := wec.mutation.Field(workflowexecution.FieldExecuteTime); set {
			obj.ExecuteTime = x.ExecuteTime
		}
		obj.Edges = x.Edges
	}

	for i := range cbs {
		if err = cbs[i](ctx, mc, obj); err != nil {
			return nil, err
		}
	}

	return obj, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (wec *WorkflowExecutionCreate) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *WorkflowExecution) error) *WorkflowExecution {
	obj, err := wec.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return obj
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (wec *WorkflowExecutionCreate) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *WorkflowExecution) error) error {
	_, err := wec.SaveE(ctx, cbs...)
	return err
}

// ExecEX is like ExecE, but panics if an error occurs.
func (wec *WorkflowExecutionCreate) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *WorkflowExecution) error) {
	if err := wec.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// Set leverages the WorkflowExecutionCreate Set method,
// it sets the value by judging the definition of each field within the entire item of the given list.
//
// For required fields, Set calls directly.
//
// For optional fields, Set calls if the value is not zero.
//
// For example:
//
//	## Required
//
//	db.SetX(obj.X)
//
//	## Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (wecb *WorkflowExecutionCreateBulk) Set(objs ...*WorkflowExecution) *WorkflowExecutionCreateBulk {
	if len(objs) != 0 {
		client := NewWorkflowExecutionClient(wecb.config)

		wecb.builders = make([]*WorkflowExecutionCreate, len(objs))
		for i := range objs {
			wecb.builders[i] = client.Create().Set(objs[i])
		}

		// Record the given objects.
		wecb.objects = objs
	}

	return wecb
}

// getClientSet returns the ClientSet for the given builder.
func (wecb *WorkflowExecutionCreateBulk) getClientSet() (mc ClientSet) {
	if _, ok := wecb.config.driver.(*txDriver); ok {
		tx := &Tx{config: wecb.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: wecb.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after created the WorkflowExecution entities,
// which is always good for cascading create operations.
func (wecb *WorkflowExecutionCreateBulk) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *WorkflowExecution) error) ([]*WorkflowExecution, error) {
	objs, err := wecb.Save(ctx)
	if err != nil {
		return nil, err
	}

	if len(cbs) == 0 {
		return objs, err
	}

	mc := wecb.getClientSet()

	if x := wecb.objects; x != nil {
		for i := range x {
			if _, set := wecb.builders[i].mutation.Field(workflowexecution.FieldName); set {
				objs[i].Name = x[i].Name
			}
			if _, set := wecb.builders[i].mutation.Field(workflowexecution.FieldDescription); set {
				objs[i].Description = x[i].Description
			}
			if _, set := wecb.builders[i].mutation.Field(workflowexecution.FieldStatus); set {
				objs[i].Status = x[i].Status
			}
			if _, set := wecb.builders[i].mutation.Field(workflowexecution.FieldProjectID); set {
				objs[i].ProjectID = x[i].ProjectID
			}
			if _, set := wecb.builders[i].mutation.Field(workflowexecution.FieldVersion); set {
				objs[i].Version = x[i].Version
			}
			if _, set := wecb.builders[i].mutation.Field(workflowexecution.FieldType); set {
				objs[i].Type = x[i].Type
			}
			if _, set := wecb.builders[i].mutation.Field(workflowexecution.FieldWorkflowID); set {
				objs[i].WorkflowID = x[i].WorkflowID
			}
			if _, set := wecb.builders[i].mutation.Field(workflowexecution.FieldSubjectID); set {
				objs[i].SubjectID = x[i].SubjectID
			}
			if _, set := wecb.builders[i].mutation.Field(workflowexecution.FieldExecuteTime); set {
				objs[i].ExecuteTime = x[i].ExecuteTime
			}
			objs[i].Edges = x[i].Edges
		}
	}

	for i := range objs {
		for j := range cbs {
			if err = cbs[j](ctx, mc, objs[i]); err != nil {
				return nil, err
			}
		}
	}

	return objs, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (wecb *WorkflowExecutionCreateBulk) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *WorkflowExecution) error) []*WorkflowExecution {
	objs, err := wecb.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return objs
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (wecb *WorkflowExecutionCreateBulk) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *WorkflowExecution) error) error {
	_, err := wecb.SaveE(ctx, cbs...)
	return err
}

// ExecEX is like ExecE, but panics if an error occurs.
func (wecb *WorkflowExecutionCreateBulk) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *WorkflowExecution) error) {
	if err := wecb.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (u *WorkflowExecutionUpsertOne) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *WorkflowExecution) error) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for WorkflowExecutionUpsertOne.OnConflict")
	}
	u.create.fromUpsert = true
	return u.create.ExecE(ctx, cbs...)
}

// ExecEX is like ExecE, but panics if an error occurs.
func (u *WorkflowExecutionUpsertOne) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *WorkflowExecution) error) {
	if err := u.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (u *WorkflowExecutionUpsertBulk) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *WorkflowExecution) error) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model: OnConflict was set for builder %d. Set it on the WorkflowExecutionUpsertBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for WorkflowExecutionUpsertBulk.OnConflict")
	}
	u.create.fromUpsert = true
	return u.create.ExecE(ctx, cbs...)
}

// ExecEX is like ExecE, but panics if an error occurs.
func (u *WorkflowExecutionUpsertBulk) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *WorkflowExecution) error) {
	if err := u.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WorkflowExecution.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WorkflowExecutionUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (wec *WorkflowExecutionCreate) OnConflict(opts ...sql.ConflictOption) *WorkflowExecutionUpsertOne {
	wec.conflict = opts
	return &WorkflowExecutionUpsertOne{
		create: wec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WorkflowExecution.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wec *WorkflowExecutionCreate) OnConflictColumns(columns ...string) *WorkflowExecutionUpsertOne {
	wec.conflict = append(wec.conflict, sql.ConflictColumns(columns...))
	return &WorkflowExecutionUpsertOne{
		create: wec,
	}
}

type (
	// WorkflowExecutionUpsertOne is the builder for "upsert"-ing
	//  one WorkflowExecution node.
	WorkflowExecutionUpsertOne struct {
		create *WorkflowExecutionCreate
	}

	// WorkflowExecutionUpsert is the "OnConflict" setter.
	WorkflowExecutionUpsert struct {
		*sql.UpdateSet
	}
)

// SetDescription sets the "description" field.
func (u *WorkflowExecutionUpsert) SetDescription(v string) *WorkflowExecutionUpsert {
	u.Set(workflowexecution.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *WorkflowExecutionUpsert) UpdateDescription() *WorkflowExecutionUpsert {
	u.SetExcluded(workflowexecution.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *WorkflowExecutionUpsert) ClearDescription() *WorkflowExecutionUpsert {
	u.SetNull(workflowexecution.FieldDescription)
	return u
}

// SetLabels sets the "labels" field.
func (u *WorkflowExecutionUpsert) SetLabels(v map[string]string) *WorkflowExecutionUpsert {
	u.Set(workflowexecution.FieldLabels, v)
	return u
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *WorkflowExecutionUpsert) UpdateLabels() *WorkflowExecutionUpsert {
	u.SetExcluded(workflowexecution.FieldLabels)
	return u
}

// ClearLabels clears the value of the "labels" field.
func (u *WorkflowExecutionUpsert) ClearLabels() *WorkflowExecutionUpsert {
	u.SetNull(workflowexecution.FieldLabels)
	return u
}

// SetAnnotations sets the "annotations" field.
func (u *WorkflowExecutionUpsert) SetAnnotations(v map[string]string) *WorkflowExecutionUpsert {
	u.Set(workflowexecution.FieldAnnotations, v)
	return u
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *WorkflowExecutionUpsert) UpdateAnnotations() *WorkflowExecutionUpsert {
	u.SetExcluded(workflowexecution.FieldAnnotations)
	return u
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *WorkflowExecutionUpsert) ClearAnnotations() *WorkflowExecutionUpsert {
	u.SetNull(workflowexecution.FieldAnnotations)
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *WorkflowExecutionUpsert) SetUpdateTime(v time.Time) *WorkflowExecutionUpsert {
	u.Set(workflowexecution.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *WorkflowExecutionUpsert) UpdateUpdateTime() *WorkflowExecutionUpsert {
	u.SetExcluded(workflowexecution.FieldUpdateTime)
	return u
}

// SetStatus sets the "status" field.
func (u *WorkflowExecutionUpsert) SetStatus(v status.Status) *WorkflowExecutionUpsert {
	u.Set(workflowexecution.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *WorkflowExecutionUpsert) UpdateStatus() *WorkflowExecutionUpsert {
	u.SetExcluded(workflowexecution.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *WorkflowExecutionUpsert) ClearStatus() *WorkflowExecutionUpsert {
	u.SetNull(workflowexecution.FieldStatus)
	return u
}

// SetVersion sets the "version" field.
func (u *WorkflowExecutionUpsert) SetVersion(v int) *WorkflowExecutionUpsert {
	u.Set(workflowexecution.FieldVersion, v)
	return u
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *WorkflowExecutionUpsert) UpdateVersion() *WorkflowExecutionUpsert {
	u.SetExcluded(workflowexecution.FieldVersion)
	return u
}

// AddVersion adds v to the "version" field.
func (u *WorkflowExecutionUpsert) AddVersion(v int) *WorkflowExecutionUpsert {
	u.Add(workflowexecution.FieldVersion, v)
	return u
}

// SetExecuteTime sets the "execute_time" field.
func (u *WorkflowExecutionUpsert) SetExecuteTime(v time.Time) *WorkflowExecutionUpsert {
	u.Set(workflowexecution.FieldExecuteTime, v)
	return u
}

// UpdateExecuteTime sets the "execute_time" field to the value that was provided on create.
func (u *WorkflowExecutionUpsert) UpdateExecuteTime() *WorkflowExecutionUpsert {
	u.SetExcluded(workflowexecution.FieldExecuteTime)
	return u
}

// ClearExecuteTime clears the value of the "execute_time" field.
func (u *WorkflowExecutionUpsert) ClearExecuteTime() *WorkflowExecutionUpsert {
	u.SetNull(workflowexecution.FieldExecuteTime)
	return u
}

// SetTimes sets the "times" field.
func (u *WorkflowExecutionUpsert) SetTimes(v int) *WorkflowExecutionUpsert {
	u.Set(workflowexecution.FieldTimes, v)
	return u
}

// UpdateTimes sets the "times" field to the value that was provided on create.
func (u *WorkflowExecutionUpsert) UpdateTimes() *WorkflowExecutionUpsert {
	u.SetExcluded(workflowexecution.FieldTimes)
	return u
}

// AddTimes adds v to the "times" field.
func (u *WorkflowExecutionUpsert) AddTimes(v int) *WorkflowExecutionUpsert {
	u.Add(workflowexecution.FieldTimes, v)
	return u
}

// SetDuration sets the "duration" field.
func (u *WorkflowExecutionUpsert) SetDuration(v int) *WorkflowExecutionUpsert {
	u.Set(workflowexecution.FieldDuration, v)
	return u
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *WorkflowExecutionUpsert) UpdateDuration() *WorkflowExecutionUpsert {
	u.SetExcluded(workflowexecution.FieldDuration)
	return u
}

// AddDuration adds v to the "duration" field.
func (u *WorkflowExecutionUpsert) AddDuration(v int) *WorkflowExecutionUpsert {
	u.Add(workflowexecution.FieldDuration, v)
	return u
}

// SetParallelism sets the "parallelism" field.
func (u *WorkflowExecutionUpsert) SetParallelism(v int) *WorkflowExecutionUpsert {
	u.Set(workflowexecution.FieldParallelism, v)
	return u
}

// UpdateParallelism sets the "parallelism" field to the value that was provided on create.
func (u *WorkflowExecutionUpsert) UpdateParallelism() *WorkflowExecutionUpsert {
	u.SetExcluded(workflowexecution.FieldParallelism)
	return u
}

// AddParallelism adds v to the "parallelism" field.
func (u *WorkflowExecutionUpsert) AddParallelism(v int) *WorkflowExecutionUpsert {
	u.Add(workflowexecution.FieldParallelism, v)
	return u
}

// SetTimeout sets the "timeout" field.
func (u *WorkflowExecutionUpsert) SetTimeout(v int) *WorkflowExecutionUpsert {
	u.Set(workflowexecution.FieldTimeout, v)
	return u
}

// UpdateTimeout sets the "timeout" field to the value that was provided on create.
func (u *WorkflowExecutionUpsert) UpdateTimeout() *WorkflowExecutionUpsert {
	u.SetExcluded(workflowexecution.FieldTimeout)
	return u
}

// AddTimeout adds v to the "timeout" field.
func (u *WorkflowExecutionUpsert) AddTimeout(v int) *WorkflowExecutionUpsert {
	u.Add(workflowexecution.FieldTimeout, v)
	return u
}

// SetTrigger sets the "trigger" field.
func (u *WorkflowExecutionUpsert) SetTrigger(v types.WorkflowExecutionTrigger) *WorkflowExecutionUpsert {
	u.Set(workflowexecution.FieldTrigger, v)
	return u
}

// UpdateTrigger sets the "trigger" field to the value that was provided on create.
func (u *WorkflowExecutionUpsert) UpdateTrigger() *WorkflowExecutionUpsert {
	u.SetExcluded(workflowexecution.FieldTrigger)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.WorkflowExecution.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(workflowexecution.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WorkflowExecutionUpsertOne) UpdateNewValues() *WorkflowExecutionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(workflowexecution.FieldID)
		}
		if _, exists := u.create.mutation.Name(); exists {
			s.SetIgnore(workflowexecution.FieldName)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(workflowexecution.FieldCreateTime)
		}
		if _, exists := u.create.mutation.ProjectID(); exists {
			s.SetIgnore(workflowexecution.FieldProjectID)
		}
		if _, exists := u.create.mutation.GetType(); exists {
			s.SetIgnore(workflowexecution.FieldType)
		}
		if _, exists := u.create.mutation.WorkflowID(); exists {
			s.SetIgnore(workflowexecution.FieldWorkflowID)
		}
		if _, exists := u.create.mutation.SubjectID(); exists {
			s.SetIgnore(workflowexecution.FieldSubjectID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WorkflowExecution.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *WorkflowExecutionUpsertOne) Ignore() *WorkflowExecutionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WorkflowExecutionUpsertOne) DoNothing() *WorkflowExecutionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WorkflowExecutionCreate.OnConflict
// documentation for more info.
func (u *WorkflowExecutionUpsertOne) Update(set func(*WorkflowExecutionUpsert)) *WorkflowExecutionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WorkflowExecutionUpsert{UpdateSet: update})
	}))
	return u
}

// SetDescription sets the "description" field.
func (u *WorkflowExecutionUpsertOne) SetDescription(v string) *WorkflowExecutionUpsertOne {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *WorkflowExecutionUpsertOne) UpdateDescription() *WorkflowExecutionUpsertOne {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *WorkflowExecutionUpsertOne) ClearDescription() *WorkflowExecutionUpsertOne {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.ClearDescription()
	})
}

// SetLabels sets the "labels" field.
func (u *WorkflowExecutionUpsertOne) SetLabels(v map[string]string) *WorkflowExecutionUpsertOne {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.SetLabels(v)
	})
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *WorkflowExecutionUpsertOne) UpdateLabels() *WorkflowExecutionUpsertOne {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.UpdateLabels()
	})
}

// ClearLabels clears the value of the "labels" field.
func (u *WorkflowExecutionUpsertOne) ClearLabels() *WorkflowExecutionUpsertOne {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.ClearLabels()
	})
}

// SetAnnotations sets the "annotations" field.
func (u *WorkflowExecutionUpsertOne) SetAnnotations(v map[string]string) *WorkflowExecutionUpsertOne {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.SetAnnotations(v)
	})
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *WorkflowExecutionUpsertOne) UpdateAnnotations() *WorkflowExecutionUpsertOne {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.UpdateAnnotations()
	})
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *WorkflowExecutionUpsertOne) ClearAnnotations() *WorkflowExecutionUpsertOne {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.ClearAnnotations()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *WorkflowExecutionUpsertOne) SetUpdateTime(v time.Time) *WorkflowExecutionUpsertOne {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *WorkflowExecutionUpsertOne) UpdateUpdateTime() *WorkflowExecutionUpsertOne {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetStatus sets the "status" field.
func (u *WorkflowExecutionUpsertOne) SetStatus(v status.Status) *WorkflowExecutionUpsertOne {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *WorkflowExecutionUpsertOne) UpdateStatus() *WorkflowExecutionUpsertOne {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *WorkflowExecutionUpsertOne) ClearStatus() *WorkflowExecutionUpsertOne {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.ClearStatus()
	})
}

// SetVersion sets the "version" field.
func (u *WorkflowExecutionUpsertOne) SetVersion(v int) *WorkflowExecutionUpsertOne {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *WorkflowExecutionUpsertOne) AddVersion(v int) *WorkflowExecutionUpsertOne {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *WorkflowExecutionUpsertOne) UpdateVersion() *WorkflowExecutionUpsertOne {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.UpdateVersion()
	})
}

// SetExecuteTime sets the "execute_time" field.
func (u *WorkflowExecutionUpsertOne) SetExecuteTime(v time.Time) *WorkflowExecutionUpsertOne {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.SetExecuteTime(v)
	})
}

// UpdateExecuteTime sets the "execute_time" field to the value that was provided on create.
func (u *WorkflowExecutionUpsertOne) UpdateExecuteTime() *WorkflowExecutionUpsertOne {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.UpdateExecuteTime()
	})
}

// ClearExecuteTime clears the value of the "execute_time" field.
func (u *WorkflowExecutionUpsertOne) ClearExecuteTime() *WorkflowExecutionUpsertOne {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.ClearExecuteTime()
	})
}

// SetTimes sets the "times" field.
func (u *WorkflowExecutionUpsertOne) SetTimes(v int) *WorkflowExecutionUpsertOne {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.SetTimes(v)
	})
}

// AddTimes adds v to the "times" field.
func (u *WorkflowExecutionUpsertOne) AddTimes(v int) *WorkflowExecutionUpsertOne {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.AddTimes(v)
	})
}

// UpdateTimes sets the "times" field to the value that was provided on create.
func (u *WorkflowExecutionUpsertOne) UpdateTimes() *WorkflowExecutionUpsertOne {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.UpdateTimes()
	})
}

// SetDuration sets the "duration" field.
func (u *WorkflowExecutionUpsertOne) SetDuration(v int) *WorkflowExecutionUpsertOne {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.SetDuration(v)
	})
}

// AddDuration adds v to the "duration" field.
func (u *WorkflowExecutionUpsertOne) AddDuration(v int) *WorkflowExecutionUpsertOne {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.AddDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *WorkflowExecutionUpsertOne) UpdateDuration() *WorkflowExecutionUpsertOne {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.UpdateDuration()
	})
}

// SetParallelism sets the "parallelism" field.
func (u *WorkflowExecutionUpsertOne) SetParallelism(v int) *WorkflowExecutionUpsertOne {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.SetParallelism(v)
	})
}

// AddParallelism adds v to the "parallelism" field.
func (u *WorkflowExecutionUpsertOne) AddParallelism(v int) *WorkflowExecutionUpsertOne {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.AddParallelism(v)
	})
}

// UpdateParallelism sets the "parallelism" field to the value that was provided on create.
func (u *WorkflowExecutionUpsertOne) UpdateParallelism() *WorkflowExecutionUpsertOne {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.UpdateParallelism()
	})
}

// SetTimeout sets the "timeout" field.
func (u *WorkflowExecutionUpsertOne) SetTimeout(v int) *WorkflowExecutionUpsertOne {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.SetTimeout(v)
	})
}

// AddTimeout adds v to the "timeout" field.
func (u *WorkflowExecutionUpsertOne) AddTimeout(v int) *WorkflowExecutionUpsertOne {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.AddTimeout(v)
	})
}

// UpdateTimeout sets the "timeout" field to the value that was provided on create.
func (u *WorkflowExecutionUpsertOne) UpdateTimeout() *WorkflowExecutionUpsertOne {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.UpdateTimeout()
	})
}

// SetTrigger sets the "trigger" field.
func (u *WorkflowExecutionUpsertOne) SetTrigger(v types.WorkflowExecutionTrigger) *WorkflowExecutionUpsertOne {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.SetTrigger(v)
	})
}

// UpdateTrigger sets the "trigger" field to the value that was provided on create.
func (u *WorkflowExecutionUpsertOne) UpdateTrigger() *WorkflowExecutionUpsertOne {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.UpdateTrigger()
	})
}

// Exec executes the query.
func (u *WorkflowExecutionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for WorkflowExecutionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WorkflowExecutionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *WorkflowExecutionUpsertOne) ID(ctx context.Context) (id object.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("model: WorkflowExecutionUpsertOne.ID is not supported by MySQL driver. Use WorkflowExecutionUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *WorkflowExecutionUpsertOne) IDX(ctx context.Context) object.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// WorkflowExecutionCreateBulk is the builder for creating many WorkflowExecution entities in bulk.
type WorkflowExecutionCreateBulk struct {
	config
	err        error
	builders   []*WorkflowExecutionCreate
	conflict   []sql.ConflictOption
	objects    []*WorkflowExecution
	fromUpsert bool
}

// Save creates the WorkflowExecution entities in the database.
func (wecb *WorkflowExecutionCreateBulk) Save(ctx context.Context) ([]*WorkflowExecution, error) {
	if wecb.err != nil {
		return nil, wecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wecb.builders))
	nodes := make([]*WorkflowExecution, len(wecb.builders))
	mutators := make([]Mutator, len(wecb.builders))
	for i := range wecb.builders {
		func(i int, root context.Context) {
			builder := wecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkflowExecutionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = wecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wecb *WorkflowExecutionCreateBulk) SaveX(ctx context.Context) []*WorkflowExecution {
	v, err := wecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wecb *WorkflowExecutionCreateBulk) Exec(ctx context.Context) error {
	_, err := wecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wecb *WorkflowExecutionCreateBulk) ExecX(ctx context.Context) {
	if err := wecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WorkflowExecution.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WorkflowExecutionUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (wecb *WorkflowExecutionCreateBulk) OnConflict(opts ...sql.ConflictOption) *WorkflowExecutionUpsertBulk {
	wecb.conflict = opts
	return &WorkflowExecutionUpsertBulk{
		create: wecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WorkflowExecution.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wecb *WorkflowExecutionCreateBulk) OnConflictColumns(columns ...string) *WorkflowExecutionUpsertBulk {
	wecb.conflict = append(wecb.conflict, sql.ConflictColumns(columns...))
	return &WorkflowExecutionUpsertBulk{
		create: wecb,
	}
}

// WorkflowExecutionUpsertBulk is the builder for "upsert"-ing
// a bulk of WorkflowExecution nodes.
type WorkflowExecutionUpsertBulk struct {
	create *WorkflowExecutionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.WorkflowExecution.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(workflowexecution.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WorkflowExecutionUpsertBulk) UpdateNewValues() *WorkflowExecutionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(workflowexecution.FieldID)
			}
			if _, exists := b.mutation.Name(); exists {
				s.SetIgnore(workflowexecution.FieldName)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(workflowexecution.FieldCreateTime)
			}
			if _, exists := b.mutation.ProjectID(); exists {
				s.SetIgnore(workflowexecution.FieldProjectID)
			}
			if _, exists := b.mutation.GetType(); exists {
				s.SetIgnore(workflowexecution.FieldType)
			}
			if _, exists := b.mutation.WorkflowID(); exists {
				s.SetIgnore(workflowexecution.FieldWorkflowID)
			}
			if _, exists := b.mutation.SubjectID(); exists {
				s.SetIgnore(workflowexecution.FieldSubjectID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WorkflowExecution.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *WorkflowExecutionUpsertBulk) Ignore() *WorkflowExecutionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WorkflowExecutionUpsertBulk) DoNothing() *WorkflowExecutionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WorkflowExecutionCreateBulk.OnConflict
// documentation for more info.
func (u *WorkflowExecutionUpsertBulk) Update(set func(*WorkflowExecutionUpsert)) *WorkflowExecutionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WorkflowExecutionUpsert{UpdateSet: update})
	}))
	return u
}

// SetDescription sets the "description" field.
func (u *WorkflowExecutionUpsertBulk) SetDescription(v string) *WorkflowExecutionUpsertBulk {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *WorkflowExecutionUpsertBulk) UpdateDescription() *WorkflowExecutionUpsertBulk {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *WorkflowExecutionUpsertBulk) ClearDescription() *WorkflowExecutionUpsertBulk {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.ClearDescription()
	})
}

// SetLabels sets the "labels" field.
func (u *WorkflowExecutionUpsertBulk) SetLabels(v map[string]string) *WorkflowExecutionUpsertBulk {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.SetLabels(v)
	})
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *WorkflowExecutionUpsertBulk) UpdateLabels() *WorkflowExecutionUpsertBulk {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.UpdateLabels()
	})
}

// ClearLabels clears the value of the "labels" field.
func (u *WorkflowExecutionUpsertBulk) ClearLabels() *WorkflowExecutionUpsertBulk {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.ClearLabels()
	})
}

// SetAnnotations sets the "annotations" field.
func (u *WorkflowExecutionUpsertBulk) SetAnnotations(v map[string]string) *WorkflowExecutionUpsertBulk {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.SetAnnotations(v)
	})
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *WorkflowExecutionUpsertBulk) UpdateAnnotations() *WorkflowExecutionUpsertBulk {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.UpdateAnnotations()
	})
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *WorkflowExecutionUpsertBulk) ClearAnnotations() *WorkflowExecutionUpsertBulk {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.ClearAnnotations()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *WorkflowExecutionUpsertBulk) SetUpdateTime(v time.Time) *WorkflowExecutionUpsertBulk {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *WorkflowExecutionUpsertBulk) UpdateUpdateTime() *WorkflowExecutionUpsertBulk {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetStatus sets the "status" field.
func (u *WorkflowExecutionUpsertBulk) SetStatus(v status.Status) *WorkflowExecutionUpsertBulk {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *WorkflowExecutionUpsertBulk) UpdateStatus() *WorkflowExecutionUpsertBulk {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *WorkflowExecutionUpsertBulk) ClearStatus() *WorkflowExecutionUpsertBulk {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.ClearStatus()
	})
}

// SetVersion sets the "version" field.
func (u *WorkflowExecutionUpsertBulk) SetVersion(v int) *WorkflowExecutionUpsertBulk {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *WorkflowExecutionUpsertBulk) AddVersion(v int) *WorkflowExecutionUpsertBulk {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *WorkflowExecutionUpsertBulk) UpdateVersion() *WorkflowExecutionUpsertBulk {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.UpdateVersion()
	})
}

// SetExecuteTime sets the "execute_time" field.
func (u *WorkflowExecutionUpsertBulk) SetExecuteTime(v time.Time) *WorkflowExecutionUpsertBulk {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.SetExecuteTime(v)
	})
}

// UpdateExecuteTime sets the "execute_time" field to the value that was provided on create.
func (u *WorkflowExecutionUpsertBulk) UpdateExecuteTime() *WorkflowExecutionUpsertBulk {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.UpdateExecuteTime()
	})
}

// ClearExecuteTime clears the value of the "execute_time" field.
func (u *WorkflowExecutionUpsertBulk) ClearExecuteTime() *WorkflowExecutionUpsertBulk {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.ClearExecuteTime()
	})
}

// SetTimes sets the "times" field.
func (u *WorkflowExecutionUpsertBulk) SetTimes(v int) *WorkflowExecutionUpsertBulk {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.SetTimes(v)
	})
}

// AddTimes adds v to the "times" field.
func (u *WorkflowExecutionUpsertBulk) AddTimes(v int) *WorkflowExecutionUpsertBulk {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.AddTimes(v)
	})
}

// UpdateTimes sets the "times" field to the value that was provided on create.
func (u *WorkflowExecutionUpsertBulk) UpdateTimes() *WorkflowExecutionUpsertBulk {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.UpdateTimes()
	})
}

// SetDuration sets the "duration" field.
func (u *WorkflowExecutionUpsertBulk) SetDuration(v int) *WorkflowExecutionUpsertBulk {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.SetDuration(v)
	})
}

// AddDuration adds v to the "duration" field.
func (u *WorkflowExecutionUpsertBulk) AddDuration(v int) *WorkflowExecutionUpsertBulk {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.AddDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *WorkflowExecutionUpsertBulk) UpdateDuration() *WorkflowExecutionUpsertBulk {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.UpdateDuration()
	})
}

// SetParallelism sets the "parallelism" field.
func (u *WorkflowExecutionUpsertBulk) SetParallelism(v int) *WorkflowExecutionUpsertBulk {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.SetParallelism(v)
	})
}

// AddParallelism adds v to the "parallelism" field.
func (u *WorkflowExecutionUpsertBulk) AddParallelism(v int) *WorkflowExecutionUpsertBulk {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.AddParallelism(v)
	})
}

// UpdateParallelism sets the "parallelism" field to the value that was provided on create.
func (u *WorkflowExecutionUpsertBulk) UpdateParallelism() *WorkflowExecutionUpsertBulk {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.UpdateParallelism()
	})
}

// SetTimeout sets the "timeout" field.
func (u *WorkflowExecutionUpsertBulk) SetTimeout(v int) *WorkflowExecutionUpsertBulk {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.SetTimeout(v)
	})
}

// AddTimeout adds v to the "timeout" field.
func (u *WorkflowExecutionUpsertBulk) AddTimeout(v int) *WorkflowExecutionUpsertBulk {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.AddTimeout(v)
	})
}

// UpdateTimeout sets the "timeout" field to the value that was provided on create.
func (u *WorkflowExecutionUpsertBulk) UpdateTimeout() *WorkflowExecutionUpsertBulk {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.UpdateTimeout()
	})
}

// SetTrigger sets the "trigger" field.
func (u *WorkflowExecutionUpsertBulk) SetTrigger(v types.WorkflowExecutionTrigger) *WorkflowExecutionUpsertBulk {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.SetTrigger(v)
	})
}

// UpdateTrigger sets the "trigger" field to the value that was provided on create.
func (u *WorkflowExecutionUpsertBulk) UpdateTrigger() *WorkflowExecutionUpsertBulk {
	return u.Update(func(s *WorkflowExecutionUpsert) {
		s.UpdateTrigger()
	})
}

// Exec executes the query.
func (u *WorkflowExecutionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model: OnConflict was set for builder %d. Set it on the WorkflowExecutionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for WorkflowExecutionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WorkflowExecutionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
