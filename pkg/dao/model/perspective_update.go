// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus". DO NOT EDIT.

package model

import (
	"context"
	stdsql "database/sql"
	"errors"
	"fmt"
	"reflect"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"

	"github.com/seal-io/walrus/pkg/dao/model/internal"
	"github.com/seal-io/walrus/pkg/dao/model/perspective"
	"github.com/seal-io/walrus/pkg/dao/model/predicate"
	"github.com/seal-io/walrus/pkg/dao/types"
)

// PerspectiveUpdate is the builder for updating Perspective entities.
type PerspectiveUpdate struct {
	config
	hooks     []Hook
	mutation  *PerspectiveMutation
	modifiers []func(*sql.UpdateBuilder)
	object    *Perspective
}

// Where appends a list predicates to the PerspectiveUpdate builder.
func (pu *PerspectiveUpdate) Where(ps ...predicate.Perspective) *PerspectiveUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetDescription sets the "description" field.
func (pu *PerspectiveUpdate) SetDescription(s string) *PerspectiveUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *PerspectiveUpdate) SetNillableDescription(s *string) *PerspectiveUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// ClearDescription clears the value of the "description" field.
func (pu *PerspectiveUpdate) ClearDescription() *PerspectiveUpdate {
	pu.mutation.ClearDescription()
	return pu
}

// SetLabels sets the "labels" field.
func (pu *PerspectiveUpdate) SetLabels(m map[string]string) *PerspectiveUpdate {
	pu.mutation.SetLabels(m)
	return pu
}

// ClearLabels clears the value of the "labels" field.
func (pu *PerspectiveUpdate) ClearLabels() *PerspectiveUpdate {
	pu.mutation.ClearLabels()
	return pu
}

// SetAnnotations sets the "annotations" field.
func (pu *PerspectiveUpdate) SetAnnotations(m map[string]string) *PerspectiveUpdate {
	pu.mutation.SetAnnotations(m)
	return pu
}

// ClearAnnotations clears the value of the "annotations" field.
func (pu *PerspectiveUpdate) ClearAnnotations() *PerspectiveUpdate {
	pu.mutation.ClearAnnotations()
	return pu
}

// SetUpdateTime sets the "update_time" field.
func (pu *PerspectiveUpdate) SetUpdateTime(t time.Time) *PerspectiveUpdate {
	pu.mutation.SetUpdateTime(t)
	return pu
}

// SetStartTime sets the "start_time" field.
func (pu *PerspectiveUpdate) SetStartTime(s string) *PerspectiveUpdate {
	pu.mutation.SetStartTime(s)
	return pu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (pu *PerspectiveUpdate) SetNillableStartTime(s *string) *PerspectiveUpdate {
	if s != nil {
		pu.SetStartTime(*s)
	}
	return pu
}

// SetEndTime sets the "end_time" field.
func (pu *PerspectiveUpdate) SetEndTime(s string) *PerspectiveUpdate {
	pu.mutation.SetEndTime(s)
	return pu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (pu *PerspectiveUpdate) SetNillableEndTime(s *string) *PerspectiveUpdate {
	if s != nil {
		pu.SetEndTime(*s)
	}
	return pu
}

// SetBuiltin sets the "builtin" field.
func (pu *PerspectiveUpdate) SetBuiltin(b bool) *PerspectiveUpdate {
	pu.mutation.SetBuiltin(b)
	return pu
}

// SetNillableBuiltin sets the "builtin" field if the given value is not nil.
func (pu *PerspectiveUpdate) SetNillableBuiltin(b *bool) *PerspectiveUpdate {
	if b != nil {
		pu.SetBuiltin(*b)
	}
	return pu
}

// SetCostQueries sets the "cost_queries" field.
func (pu *PerspectiveUpdate) SetCostQueries(tc []types.QueryCondition) *PerspectiveUpdate {
	pu.mutation.SetCostQueries(tc)
	return pu
}

// AppendCostQueries appends tc to the "cost_queries" field.
func (pu *PerspectiveUpdate) AppendCostQueries(tc []types.QueryCondition) *PerspectiveUpdate {
	pu.mutation.AppendCostQueries(tc)
	return pu
}

// Mutation returns the PerspectiveMutation object of the builder.
func (pu *PerspectiveUpdate) Mutation() *PerspectiveMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PerspectiveUpdate) Save(ctx context.Context) (int, error) {
	if err := pu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PerspectiveUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PerspectiveUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PerspectiveUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PerspectiveUpdate) defaults() error {
	if _, ok := pu.mutation.UpdateTime(); !ok {
		if perspective.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("model: uninitialized perspective.UpdateDefaultUpdateTime (forgotten import model/runtime?)")
		}
		v := perspective.UpdateDefaultUpdateTime()
		pu.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pu *PerspectiveUpdate) check() error {
	if v, ok := pu.mutation.StartTime(); ok {
		if err := perspective.StartTimeValidator(v); err != nil {
			return &ValidationError{Name: "start_time", err: fmt.Errorf(`model: validator failed for field "Perspective.start_time": %w`, err)}
		}
	}
	if v, ok := pu.mutation.EndTime(); ok {
		if err := perspective.EndTimeValidator(v); err != nil {
			return &ValidationError{Name: "end_time", err: fmt.Errorf(`model: validator failed for field "Perspective.end_time": %w`, err)}
		}
	}
	return nil
}

// Set is different from other Set* methods,
// it sets the value by judging the definition of each field within the entire object.
//
// For default fields, Set calls if the value is not zero.
//
// For no default but required fields, Set calls directly.
//
// For no default but optional fields, Set calls if the value is not zero,
// or clears if the value is zero.
//
// For example:
//
//	## Without Default
//
//	### Required
//
//	db.SetX(obj.X)
//
//	### Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	} else {
//	   db.ClearX()
//	}
//
//	## With Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (pu *PerspectiveUpdate) Set(obj *Perspective) *PerspectiveUpdate {
	// Without Default.
	if obj.Description != "" {
		pu.SetDescription(obj.Description)
	} else {
		pu.ClearDescription()
	}
	if !reflect.ValueOf(obj.Labels).IsZero() {
		pu.SetLabels(obj.Labels)
	}
	if !reflect.ValueOf(obj.Annotations).IsZero() {
		pu.SetAnnotations(obj.Annotations)
	}
	pu.SetStartTime(obj.StartTime)
	pu.SetEndTime(obj.EndTime)
	pu.SetBuiltin(obj.Builtin)
	pu.SetCostQueries(obj.CostQueries)

	// With Default.
	if obj.UpdateTime != nil {
		pu.SetUpdateTime(*obj.UpdateTime)
	}

	// Record the given object.
	pu.object = obj

	return pu
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pu *PerspectiveUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PerspectiveUpdate {
	pu.modifiers = append(pu.modifiers, modifiers...)
	return pu
}

func (pu *PerspectiveUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(perspective.Table, perspective.Columns, sqlgraph.NewFieldSpec(perspective.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(perspective.FieldDescription, field.TypeString, value)
	}
	if pu.mutation.DescriptionCleared() {
		_spec.ClearField(perspective.FieldDescription, field.TypeString)
	}
	if value, ok := pu.mutation.Labels(); ok {
		_spec.SetField(perspective.FieldLabels, field.TypeJSON, value)
	}
	if pu.mutation.LabelsCleared() {
		_spec.ClearField(perspective.FieldLabels, field.TypeJSON)
	}
	if value, ok := pu.mutation.Annotations(); ok {
		_spec.SetField(perspective.FieldAnnotations, field.TypeJSON, value)
	}
	if pu.mutation.AnnotationsCleared() {
		_spec.ClearField(perspective.FieldAnnotations, field.TypeJSON)
	}
	if value, ok := pu.mutation.UpdateTime(); ok {
		_spec.SetField(perspective.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := pu.mutation.StartTime(); ok {
		_spec.SetField(perspective.FieldStartTime, field.TypeString, value)
	}
	if value, ok := pu.mutation.EndTime(); ok {
		_spec.SetField(perspective.FieldEndTime, field.TypeString, value)
	}
	if value, ok := pu.mutation.Builtin(); ok {
		_spec.SetField(perspective.FieldBuiltin, field.TypeBool, value)
	}
	if value, ok := pu.mutation.CostQueries(); ok {
		_spec.SetField(perspective.FieldCostQueries, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedCostQueries(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, perspective.FieldCostQueries, value)
		})
	}
	_spec.Node.Schema = pu.schemaConfig.Perspective
	ctx = internal.NewSchemaConfigContext(ctx, pu.schemaConfig)
	_spec.AddModifiers(pu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{perspective.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PerspectiveUpdateOne is the builder for updating a single Perspective entity.
type PerspectiveUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PerspectiveMutation
	modifiers []func(*sql.UpdateBuilder)
	object    *Perspective
}

// SetDescription sets the "description" field.
func (puo *PerspectiveUpdateOne) SetDescription(s string) *PerspectiveUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *PerspectiveUpdateOne) SetNillableDescription(s *string) *PerspectiveUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// ClearDescription clears the value of the "description" field.
func (puo *PerspectiveUpdateOne) ClearDescription() *PerspectiveUpdateOne {
	puo.mutation.ClearDescription()
	return puo
}

// SetLabels sets the "labels" field.
func (puo *PerspectiveUpdateOne) SetLabels(m map[string]string) *PerspectiveUpdateOne {
	puo.mutation.SetLabels(m)
	return puo
}

// ClearLabels clears the value of the "labels" field.
func (puo *PerspectiveUpdateOne) ClearLabels() *PerspectiveUpdateOne {
	puo.mutation.ClearLabels()
	return puo
}

// SetAnnotations sets the "annotations" field.
func (puo *PerspectiveUpdateOne) SetAnnotations(m map[string]string) *PerspectiveUpdateOne {
	puo.mutation.SetAnnotations(m)
	return puo
}

// ClearAnnotations clears the value of the "annotations" field.
func (puo *PerspectiveUpdateOne) ClearAnnotations() *PerspectiveUpdateOne {
	puo.mutation.ClearAnnotations()
	return puo
}

// SetUpdateTime sets the "update_time" field.
func (puo *PerspectiveUpdateOne) SetUpdateTime(t time.Time) *PerspectiveUpdateOne {
	puo.mutation.SetUpdateTime(t)
	return puo
}

// SetStartTime sets the "start_time" field.
func (puo *PerspectiveUpdateOne) SetStartTime(s string) *PerspectiveUpdateOne {
	puo.mutation.SetStartTime(s)
	return puo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (puo *PerspectiveUpdateOne) SetNillableStartTime(s *string) *PerspectiveUpdateOne {
	if s != nil {
		puo.SetStartTime(*s)
	}
	return puo
}

// SetEndTime sets the "end_time" field.
func (puo *PerspectiveUpdateOne) SetEndTime(s string) *PerspectiveUpdateOne {
	puo.mutation.SetEndTime(s)
	return puo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (puo *PerspectiveUpdateOne) SetNillableEndTime(s *string) *PerspectiveUpdateOne {
	if s != nil {
		puo.SetEndTime(*s)
	}
	return puo
}

// SetBuiltin sets the "builtin" field.
func (puo *PerspectiveUpdateOne) SetBuiltin(b bool) *PerspectiveUpdateOne {
	puo.mutation.SetBuiltin(b)
	return puo
}

// SetNillableBuiltin sets the "builtin" field if the given value is not nil.
func (puo *PerspectiveUpdateOne) SetNillableBuiltin(b *bool) *PerspectiveUpdateOne {
	if b != nil {
		puo.SetBuiltin(*b)
	}
	return puo
}

// SetCostQueries sets the "cost_queries" field.
func (puo *PerspectiveUpdateOne) SetCostQueries(tc []types.QueryCondition) *PerspectiveUpdateOne {
	puo.mutation.SetCostQueries(tc)
	return puo
}

// AppendCostQueries appends tc to the "cost_queries" field.
func (puo *PerspectiveUpdateOne) AppendCostQueries(tc []types.QueryCondition) *PerspectiveUpdateOne {
	puo.mutation.AppendCostQueries(tc)
	return puo
}

// Mutation returns the PerspectiveMutation object of the builder.
func (puo *PerspectiveUpdateOne) Mutation() *PerspectiveMutation {
	return puo.mutation
}

// Where appends a list predicates to the PerspectiveUpdate builder.
func (puo *PerspectiveUpdateOne) Where(ps ...predicate.Perspective) *PerspectiveUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PerspectiveUpdateOne) Select(field string, fields ...string) *PerspectiveUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Perspective entity.
func (puo *PerspectiveUpdateOne) Save(ctx context.Context) (*Perspective, error) {
	if err := puo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PerspectiveUpdateOne) SaveX(ctx context.Context) *Perspective {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PerspectiveUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PerspectiveUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PerspectiveUpdateOne) defaults() error {
	if _, ok := puo.mutation.UpdateTime(); !ok {
		if perspective.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("model: uninitialized perspective.UpdateDefaultUpdateTime (forgotten import model/runtime?)")
		}
		v := perspective.UpdateDefaultUpdateTime()
		puo.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (puo *PerspectiveUpdateOne) check() error {
	if v, ok := puo.mutation.StartTime(); ok {
		if err := perspective.StartTimeValidator(v); err != nil {
			return &ValidationError{Name: "start_time", err: fmt.Errorf(`model: validator failed for field "Perspective.start_time": %w`, err)}
		}
	}
	if v, ok := puo.mutation.EndTime(); ok {
		if err := perspective.EndTimeValidator(v); err != nil {
			return &ValidationError{Name: "end_time", err: fmt.Errorf(`model: validator failed for field "Perspective.end_time": %w`, err)}
		}
	}
	return nil
}

// Set is different from other Set* methods,
// it sets the value by judging the definition of each field within the entire object.
//
// For default fields, Set calls if the value changes from the original.
//
// For no default but required fields, Set calls if the value changes from the original.
//
// For no default but optional fields, Set calls if the value changes from the original,
// or clears if changes to zero.
//
// For example:
//
//	## Without Default
//
//	### Required
//
//	db.SetX(obj.X)
//
//	### Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   if _is_not_equal_(db.X, obj.X) {
//	      db.SetX(obj.X)
//	   }
//	} else {
//	   db.ClearX()
//	}
//
//	## With Default
//
//	if _is_zero_value_(obj.X) && _is_not_equal_(db.X, obj.X) {
//	   db.SetX(obj.X)
//	}
func (puo *PerspectiveUpdateOne) Set(obj *Perspective) *PerspectiveUpdateOne {
	h := func(n ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			mt := m.(*PerspectiveMutation)
			db, err := mt.Client().Perspective.Get(ctx, *mt.id)
			if err != nil {
				return nil, fmt.Errorf("failed getting Perspective with id: %v", *mt.id)
			}

			// Without Default.
			if obj.Description != "" {
				if db.Description != obj.Description {
					puo.SetDescription(obj.Description)
				}
			} else {
				puo.ClearDescription()
			}
			if !reflect.ValueOf(obj.Labels).IsZero() {
				if !reflect.DeepEqual(db.Labels, obj.Labels) {
					puo.SetLabels(obj.Labels)
				}
			}
			if !reflect.ValueOf(obj.Annotations).IsZero() {
				if !reflect.DeepEqual(db.Annotations, obj.Annotations) {
					puo.SetAnnotations(obj.Annotations)
				}
			}
			if db.StartTime != obj.StartTime {
				puo.SetStartTime(obj.StartTime)
			}
			if db.EndTime != obj.EndTime {
				puo.SetEndTime(obj.EndTime)
			}
			if db.Builtin != obj.Builtin {
				puo.SetBuiltin(obj.Builtin)
			}
			if !reflect.DeepEqual(db.CostQueries, obj.CostQueries) {
				puo.SetCostQueries(obj.CostQueries)
			}

			// With Default.
			if (obj.UpdateTime != nil) && (!reflect.DeepEqual(db.UpdateTime, obj.UpdateTime)) {
				puo.SetUpdateTime(*obj.UpdateTime)
			}

			// Record the given object.
			puo.object = obj

			return n.Mutate(ctx, m)
		})
	}

	puo.hooks = append(puo.hooks, h)

	return puo
}

// getClientSet returns the ClientSet for the given builder.
func (puo *PerspectiveUpdateOne) getClientSet() (mc ClientSet) {
	if _, ok := puo.config.driver.(*txDriver); ok {
		tx := &Tx{config: puo.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: puo.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after updated the Perspective entity,
// which is always good for cascading update operations.
func (puo *PerspectiveUpdateOne) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *Perspective) error) (*Perspective, error) {
	obj, err := puo.Save(ctx)
	if err != nil &&
		(puo.object == nil || !errors.Is(err, stdsql.ErrNoRows)) {
		return nil, err
	}

	if len(cbs) == 0 {
		return obj, err
	}

	mc := puo.getClientSet()

	if obj == nil {
		obj = puo.object
	} else if x := puo.object; x != nil {
		if _, set := puo.mutation.Field(perspective.FieldDescription); set {
			obj.Description = x.Description
		}
		if _, set := puo.mutation.Field(perspective.FieldLabels); set {
			obj.Labels = x.Labels
		}
		if _, set := puo.mutation.Field(perspective.FieldAnnotations); set {
			obj.Annotations = x.Annotations
		}
		if _, set := puo.mutation.Field(perspective.FieldStartTime); set {
			obj.StartTime = x.StartTime
		}
		if _, set := puo.mutation.Field(perspective.FieldEndTime); set {
			obj.EndTime = x.EndTime
		}
		if _, set := puo.mutation.Field(perspective.FieldBuiltin); set {
			obj.Builtin = x.Builtin
		}
		if _, set := puo.mutation.Field(perspective.FieldCostQueries); set {
			obj.CostQueries = x.CostQueries
		}
	}

	for i := range cbs {
		if err = cbs[i](ctx, mc, obj); err != nil {
			return nil, err
		}
	}

	return obj, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (puo *PerspectiveUpdateOne) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *Perspective) error) *Perspective {
	obj, err := puo.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return obj
}

// ExecE calls the given function after executed the query,
// which is always good for cascading update operations.
func (puo *PerspectiveUpdateOne) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *Perspective) error) error {
	_, err := puo.SaveE(ctx, cbs...)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PerspectiveUpdateOne) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *Perspective) error) {
	if err := puo.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (puo *PerspectiveUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PerspectiveUpdateOne {
	puo.modifiers = append(puo.modifiers, modifiers...)
	return puo
}

func (puo *PerspectiveUpdateOne) sqlSave(ctx context.Context) (_node *Perspective, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(perspective.Table, perspective.Columns, sqlgraph.NewFieldSpec(perspective.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`model: missing "Perspective.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, perspective.FieldID)
		for _, f := range fields {
			if !perspective.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
			}
			if f != perspective.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(perspective.FieldDescription, field.TypeString, value)
	}
	if puo.mutation.DescriptionCleared() {
		_spec.ClearField(perspective.FieldDescription, field.TypeString)
	}
	if value, ok := puo.mutation.Labels(); ok {
		_spec.SetField(perspective.FieldLabels, field.TypeJSON, value)
	}
	if puo.mutation.LabelsCleared() {
		_spec.ClearField(perspective.FieldLabels, field.TypeJSON)
	}
	if value, ok := puo.mutation.Annotations(); ok {
		_spec.SetField(perspective.FieldAnnotations, field.TypeJSON, value)
	}
	if puo.mutation.AnnotationsCleared() {
		_spec.ClearField(perspective.FieldAnnotations, field.TypeJSON)
	}
	if value, ok := puo.mutation.UpdateTime(); ok {
		_spec.SetField(perspective.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := puo.mutation.StartTime(); ok {
		_spec.SetField(perspective.FieldStartTime, field.TypeString, value)
	}
	if value, ok := puo.mutation.EndTime(); ok {
		_spec.SetField(perspective.FieldEndTime, field.TypeString, value)
	}
	if value, ok := puo.mutation.Builtin(); ok {
		_spec.SetField(perspective.FieldBuiltin, field.TypeBool, value)
	}
	if value, ok := puo.mutation.CostQueries(); ok {
		_spec.SetField(perspective.FieldCostQueries, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedCostQueries(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, perspective.FieldCostQueries, value)
		})
	}
	_spec.Node.Schema = puo.schemaConfig.Perspective
	ctx = internal.NewSchemaConfigContext(ctx, puo.schemaConfig)
	_spec.AddModifiers(puo.modifiers...)
	_node = &Perspective{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{perspective.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
