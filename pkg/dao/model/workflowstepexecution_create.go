// SPDX-FileCopyrightText: 2023 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus". DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/seal-io/walrus/pkg/dao/model/project"
	"github.com/seal-io/walrus/pkg/dao/model/workflowstageexecution"
	"github.com/seal-io/walrus/pkg/dao/model/workflowstepexecution"
	"github.com/seal-io/walrus/pkg/dao/types"
	"github.com/seal-io/walrus/pkg/dao/types/object"
	"github.com/seal-io/walrus/pkg/dao/types/status"
)

// WorkflowStepExecutionCreate is the builder for creating a WorkflowStepExecution entity.
type WorkflowStepExecutionCreate struct {
	config
	mutation   *WorkflowStepExecutionMutation
	hooks      []Hook
	conflict   []sql.ConflictOption
	object     *WorkflowStepExecution
	fromUpsert bool
}

// SetName sets the "name" field.
func (wsec *WorkflowStepExecutionCreate) SetName(s string) *WorkflowStepExecutionCreate {
	wsec.mutation.SetName(s)
	return wsec
}

// SetDescription sets the "description" field.
func (wsec *WorkflowStepExecutionCreate) SetDescription(s string) *WorkflowStepExecutionCreate {
	wsec.mutation.SetDescription(s)
	return wsec
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (wsec *WorkflowStepExecutionCreate) SetNillableDescription(s *string) *WorkflowStepExecutionCreate {
	if s != nil {
		wsec.SetDescription(*s)
	}
	return wsec
}

// SetLabels sets the "labels" field.
func (wsec *WorkflowStepExecutionCreate) SetLabels(m map[string]string) *WorkflowStepExecutionCreate {
	wsec.mutation.SetLabels(m)
	return wsec
}

// SetAnnotations sets the "annotations" field.
func (wsec *WorkflowStepExecutionCreate) SetAnnotations(m map[string]string) *WorkflowStepExecutionCreate {
	wsec.mutation.SetAnnotations(m)
	return wsec
}

// SetCreateTime sets the "create_time" field.
func (wsec *WorkflowStepExecutionCreate) SetCreateTime(t time.Time) *WorkflowStepExecutionCreate {
	wsec.mutation.SetCreateTime(t)
	return wsec
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (wsec *WorkflowStepExecutionCreate) SetNillableCreateTime(t *time.Time) *WorkflowStepExecutionCreate {
	if t != nil {
		wsec.SetCreateTime(*t)
	}
	return wsec
}

// SetUpdateTime sets the "update_time" field.
func (wsec *WorkflowStepExecutionCreate) SetUpdateTime(t time.Time) *WorkflowStepExecutionCreate {
	wsec.mutation.SetUpdateTime(t)
	return wsec
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (wsec *WorkflowStepExecutionCreate) SetNillableUpdateTime(t *time.Time) *WorkflowStepExecutionCreate {
	if t != nil {
		wsec.SetUpdateTime(*t)
	}
	return wsec
}

// SetStatus sets the "status" field.
func (wsec *WorkflowStepExecutionCreate) SetStatus(s status.Status) *WorkflowStepExecutionCreate {
	wsec.mutation.SetStatus(s)
	return wsec
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (wsec *WorkflowStepExecutionCreate) SetNillableStatus(s *status.Status) *WorkflowStepExecutionCreate {
	if s != nil {
		wsec.SetStatus(*s)
	}
	return wsec
}

// SetWorkflowStepID sets the "workflow_step_id" field.
func (wsec *WorkflowStepExecutionCreate) SetWorkflowStepID(o object.ID) *WorkflowStepExecutionCreate {
	wsec.mutation.SetWorkflowStepID(o)
	return wsec
}

// SetWorkflowExecutionID sets the "workflow_execution_id" field.
func (wsec *WorkflowStepExecutionCreate) SetWorkflowExecutionID(o object.ID) *WorkflowStepExecutionCreate {
	wsec.mutation.SetWorkflowExecutionID(o)
	return wsec
}

// SetWorkflowStageExecutionID sets the "workflow_stage_execution_id" field.
func (wsec *WorkflowStepExecutionCreate) SetWorkflowStageExecutionID(o object.ID) *WorkflowStepExecutionCreate {
	wsec.mutation.SetWorkflowStageExecutionID(o)
	return wsec
}

// SetProjectID sets the "project_id" field.
func (wsec *WorkflowStepExecutionCreate) SetProjectID(o object.ID) *WorkflowStepExecutionCreate {
	wsec.mutation.SetProjectID(o)
	return wsec
}

// SetWorkflowID sets the "workflow_id" field.
func (wsec *WorkflowStepExecutionCreate) SetWorkflowID(o object.ID) *WorkflowStepExecutionCreate {
	wsec.mutation.SetWorkflowID(o)
	return wsec
}

// SetType sets the "type" field.
func (wsec *WorkflowStepExecutionCreate) SetType(s string) *WorkflowStepExecutionCreate {
	wsec.mutation.SetType(s)
	return wsec
}

// SetAttributes sets the "attributes" field.
func (wsec *WorkflowStepExecutionCreate) SetAttributes(m map[string]any) *WorkflowStepExecutionCreate {
	wsec.mutation.SetAttributes(m)
	return wsec
}

// SetTimes sets the "times" field.
func (wsec *WorkflowStepExecutionCreate) SetTimes(i int) *WorkflowStepExecutionCreate {
	wsec.mutation.SetTimes(i)
	return wsec
}

// SetNillableTimes sets the "times" field if the given value is not nil.
func (wsec *WorkflowStepExecutionCreate) SetNillableTimes(i *int) *WorkflowStepExecutionCreate {
	if i != nil {
		wsec.SetTimes(*i)
	}
	return wsec
}

// SetExecuteTime sets the "execute_time" field.
func (wsec *WorkflowStepExecutionCreate) SetExecuteTime(t time.Time) *WorkflowStepExecutionCreate {
	wsec.mutation.SetExecuteTime(t)
	return wsec
}

// SetNillableExecuteTime sets the "execute_time" field if the given value is not nil.
func (wsec *WorkflowStepExecutionCreate) SetNillableExecuteTime(t *time.Time) *WorkflowStepExecutionCreate {
	if t != nil {
		wsec.SetExecuteTime(*t)
	}
	return wsec
}

// SetDuration sets the "duration" field.
func (wsec *WorkflowStepExecutionCreate) SetDuration(i int) *WorkflowStepExecutionCreate {
	wsec.mutation.SetDuration(i)
	return wsec
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (wsec *WorkflowStepExecutionCreate) SetNillableDuration(i *int) *WorkflowStepExecutionCreate {
	if i != nil {
		wsec.SetDuration(*i)
	}
	return wsec
}

// SetRetryStrategy sets the "retryStrategy" field.
func (wsec *WorkflowStepExecutionCreate) SetRetryStrategy(ts *types.RetryStrategy) *WorkflowStepExecutionCreate {
	wsec.mutation.SetRetryStrategy(ts)
	return wsec
}

// SetTimeout sets the "timeout" field.
func (wsec *WorkflowStepExecutionCreate) SetTimeout(i int) *WorkflowStepExecutionCreate {
	wsec.mutation.SetTimeout(i)
	return wsec
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (wsec *WorkflowStepExecutionCreate) SetNillableTimeout(i *int) *WorkflowStepExecutionCreate {
	if i != nil {
		wsec.SetTimeout(*i)
	}
	return wsec
}

// SetOrder sets the "order" field.
func (wsec *WorkflowStepExecutionCreate) SetOrder(i int) *WorkflowStepExecutionCreate {
	wsec.mutation.SetOrder(i)
	return wsec
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (wsec *WorkflowStepExecutionCreate) SetNillableOrder(i *int) *WorkflowStepExecutionCreate {
	if i != nil {
		wsec.SetOrder(*i)
	}
	return wsec
}

// SetRecord sets the "record" field.
func (wsec *WorkflowStepExecutionCreate) SetRecord(s string) *WorkflowStepExecutionCreate {
	wsec.mutation.SetRecord(s)
	return wsec
}

// SetNillableRecord sets the "record" field if the given value is not nil.
func (wsec *WorkflowStepExecutionCreate) SetNillableRecord(s *string) *WorkflowStepExecutionCreate {
	if s != nil {
		wsec.SetRecord(*s)
	}
	return wsec
}

// SetID sets the "id" field.
func (wsec *WorkflowStepExecutionCreate) SetID(o object.ID) *WorkflowStepExecutionCreate {
	wsec.mutation.SetID(o)
	return wsec
}

// SetProject sets the "project" edge to the Project entity.
func (wsec *WorkflowStepExecutionCreate) SetProject(p *Project) *WorkflowStepExecutionCreate {
	return wsec.SetProjectID(p.ID)
}

// SetStageExecutionID sets the "stage_execution" edge to the WorkflowStageExecution entity by ID.
func (wsec *WorkflowStepExecutionCreate) SetStageExecutionID(id object.ID) *WorkflowStepExecutionCreate {
	wsec.mutation.SetStageExecutionID(id)
	return wsec
}

// SetStageExecution sets the "stage_execution" edge to the WorkflowStageExecution entity.
func (wsec *WorkflowStepExecutionCreate) SetStageExecution(w *WorkflowStageExecution) *WorkflowStepExecutionCreate {
	return wsec.SetStageExecutionID(w.ID)
}

// Mutation returns the WorkflowStepExecutionMutation object of the builder.
func (wsec *WorkflowStepExecutionCreate) Mutation() *WorkflowStepExecutionMutation {
	return wsec.mutation
}

// Save creates the WorkflowStepExecution in the database.
func (wsec *WorkflowStepExecutionCreate) Save(ctx context.Context) (*WorkflowStepExecution, error) {
	if err := wsec.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, wsec.sqlSave, wsec.mutation, wsec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wsec *WorkflowStepExecutionCreate) SaveX(ctx context.Context) *WorkflowStepExecution {
	v, err := wsec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wsec *WorkflowStepExecutionCreate) Exec(ctx context.Context) error {
	_, err := wsec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wsec *WorkflowStepExecutionCreate) ExecX(ctx context.Context) {
	if err := wsec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wsec *WorkflowStepExecutionCreate) defaults() error {
	if _, ok := wsec.mutation.Labels(); !ok {
		v := workflowstepexecution.DefaultLabels
		wsec.mutation.SetLabels(v)
	}
	if _, ok := wsec.mutation.Annotations(); !ok {
		v := workflowstepexecution.DefaultAnnotations
		wsec.mutation.SetAnnotations(v)
	}
	if _, ok := wsec.mutation.CreateTime(); !ok {
		if workflowstepexecution.DefaultCreateTime == nil {
			return fmt.Errorf("model: uninitialized workflowstepexecution.DefaultCreateTime (forgotten import model/runtime?)")
		}
		v := workflowstepexecution.DefaultCreateTime()
		wsec.mutation.SetCreateTime(v)
	}
	if _, ok := wsec.mutation.UpdateTime(); !ok {
		if workflowstepexecution.DefaultUpdateTime == nil {
			return fmt.Errorf("model: uninitialized workflowstepexecution.DefaultUpdateTime (forgotten import model/runtime?)")
		}
		v := workflowstepexecution.DefaultUpdateTime()
		wsec.mutation.SetUpdateTime(v)
	}
	if _, ok := wsec.mutation.Times(); !ok {
		v := workflowstepexecution.DefaultTimes
		wsec.mutation.SetTimes(v)
	}
	if _, ok := wsec.mutation.Duration(); !ok {
		v := workflowstepexecution.DefaultDuration
		wsec.mutation.SetDuration(v)
	}
	if _, ok := wsec.mutation.Timeout(); !ok {
		v := workflowstepexecution.DefaultTimeout
		wsec.mutation.SetTimeout(v)
	}
	if _, ok := wsec.mutation.Order(); !ok {
		v := workflowstepexecution.DefaultOrder
		wsec.mutation.SetOrder(v)
	}
	if _, ok := wsec.mutation.Record(); !ok {
		v := workflowstepexecution.DefaultRecord
		wsec.mutation.SetRecord(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (wsec *WorkflowStepExecutionCreate) check() error {
	if _, ok := wsec.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`model: missing required field "WorkflowStepExecution.name"`)}
	}
	if v, ok := wsec.mutation.Name(); ok {
		if err := workflowstepexecution.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`model: validator failed for field "WorkflowStepExecution.name": %w`, err)}
		}
	}
	if _, ok := wsec.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`model: missing required field "WorkflowStepExecution.create_time"`)}
	}
	if _, ok := wsec.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`model: missing required field "WorkflowStepExecution.update_time"`)}
	}
	if _, ok := wsec.mutation.WorkflowStepID(); !ok {
		return &ValidationError{Name: "workflow_step_id", err: errors.New(`model: missing required field "WorkflowStepExecution.workflow_step_id"`)}
	}
	if _, ok := wsec.mutation.WorkflowExecutionID(); !ok {
		return &ValidationError{Name: "workflow_execution_id", err: errors.New(`model: missing required field "WorkflowStepExecution.workflow_execution_id"`)}
	}
	if _, ok := wsec.mutation.WorkflowStageExecutionID(); !ok {
		return &ValidationError{Name: "workflow_stage_execution_id", err: errors.New(`model: missing required field "WorkflowStepExecution.workflow_stage_execution_id"`)}
	}
	if _, ok := wsec.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project_id", err: errors.New(`model: missing required field "WorkflowStepExecution.project_id"`)}
	}
	if v, ok := wsec.mutation.ProjectID(); ok {
		if err := workflowstepexecution.ProjectIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "project_id", err: fmt.Errorf(`model: validator failed for field "WorkflowStepExecution.project_id": %w`, err)}
		}
	}
	if _, ok := wsec.mutation.WorkflowID(); !ok {
		return &ValidationError{Name: "workflow_id", err: errors.New(`model: missing required field "WorkflowStepExecution.workflow_id"`)}
	}
	if v, ok := wsec.mutation.WorkflowID(); ok {
		if err := workflowstepexecution.WorkflowIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "workflow_id", err: fmt.Errorf(`model: validator failed for field "WorkflowStepExecution.workflow_id": %w`, err)}
		}
	}
	if _, ok := wsec.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`model: missing required field "WorkflowStepExecution.type"`)}
	}
	if v, ok := wsec.mutation.GetType(); ok {
		if err := workflowstepexecution.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`model: validator failed for field "WorkflowStepExecution.type": %w`, err)}
		}
	}
	if _, ok := wsec.mutation.Times(); !ok {
		return &ValidationError{Name: "times", err: errors.New(`model: missing required field "WorkflowStepExecution.times"`)}
	}
	if v, ok := wsec.mutation.Times(); ok {
		if err := workflowstepexecution.TimesValidator(v); err != nil {
			return &ValidationError{Name: "times", err: fmt.Errorf(`model: validator failed for field "WorkflowStepExecution.times": %w`, err)}
		}
	}
	if _, ok := wsec.mutation.Duration(); !ok {
		return &ValidationError{Name: "duration", err: errors.New(`model: missing required field "WorkflowStepExecution.duration"`)}
	}
	if v, ok := wsec.mutation.Duration(); ok {
		if err := workflowstepexecution.DurationValidator(v); err != nil {
			return &ValidationError{Name: "duration", err: fmt.Errorf(`model: validator failed for field "WorkflowStepExecution.duration": %w`, err)}
		}
	}
	if _, ok := wsec.mutation.Timeout(); !ok {
		return &ValidationError{Name: "timeout", err: errors.New(`model: missing required field "WorkflowStepExecution.timeout"`)}
	}
	if v, ok := wsec.mutation.Timeout(); ok {
		if err := workflowstepexecution.TimeoutValidator(v); err != nil {
			return &ValidationError{Name: "timeout", err: fmt.Errorf(`model: validator failed for field "WorkflowStepExecution.timeout": %w`, err)}
		}
	}
	if _, ok := wsec.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`model: missing required field "WorkflowStepExecution.order"`)}
	}
	if v, ok := wsec.mutation.Order(); ok {
		if err := workflowstepexecution.OrderValidator(v); err != nil {
			return &ValidationError{Name: "order", err: fmt.Errorf(`model: validator failed for field "WorkflowStepExecution.order": %w`, err)}
		}
	}
	if _, ok := wsec.mutation.Record(); !ok {
		return &ValidationError{Name: "record", err: errors.New(`model: missing required field "WorkflowStepExecution.record"`)}
	}
	if _, ok := wsec.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project", err: errors.New(`model: missing required edge "WorkflowStepExecution.project"`)}
	}
	if _, ok := wsec.mutation.StageExecutionID(); !ok {
		return &ValidationError{Name: "stage_execution", err: errors.New(`model: missing required edge "WorkflowStepExecution.stage_execution"`)}
	}
	return nil
}

func (wsec *WorkflowStepExecutionCreate) sqlSave(ctx context.Context) (*WorkflowStepExecution, error) {
	if err := wsec.check(); err != nil {
		return nil, err
	}
	_node, _spec := wsec.createSpec()
	if err := sqlgraph.CreateNode(ctx, wsec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*object.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	wsec.mutation.id = &_node.ID
	wsec.mutation.done = true
	return _node, nil
}

func (wsec *WorkflowStepExecutionCreate) createSpec() (*WorkflowStepExecution, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkflowStepExecution{config: wsec.config}
		_spec = sqlgraph.NewCreateSpec(workflowstepexecution.Table, sqlgraph.NewFieldSpec(workflowstepexecution.FieldID, field.TypeString))
	)
	_spec.Schema = wsec.schemaConfig.WorkflowStepExecution
	_spec.OnConflict = wsec.conflict
	if id, ok := wsec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := wsec.mutation.Name(); ok {
		_spec.SetField(workflowstepexecution.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := wsec.mutation.Description(); ok {
		_spec.SetField(workflowstepexecution.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := wsec.mutation.Labels(); ok {
		_spec.SetField(workflowstepexecution.FieldLabels, field.TypeJSON, value)
		_node.Labels = value
	}
	if value, ok := wsec.mutation.Annotations(); ok {
		_spec.SetField(workflowstepexecution.FieldAnnotations, field.TypeJSON, value)
		_node.Annotations = value
	}
	if value, ok := wsec.mutation.CreateTime(); ok {
		_spec.SetField(workflowstepexecution.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = &value
	}
	if value, ok := wsec.mutation.UpdateTime(); ok {
		_spec.SetField(workflowstepexecution.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = &value
	}
	if value, ok := wsec.mutation.Status(); ok {
		_spec.SetField(workflowstepexecution.FieldStatus, field.TypeJSON, value)
		_node.Status = value
	}
	if value, ok := wsec.mutation.WorkflowStepID(); ok {
		_spec.SetField(workflowstepexecution.FieldWorkflowStepID, field.TypeString, value)
		_node.WorkflowStepID = value
	}
	if value, ok := wsec.mutation.WorkflowExecutionID(); ok {
		_spec.SetField(workflowstepexecution.FieldWorkflowExecutionID, field.TypeString, value)
		_node.WorkflowExecutionID = value
	}
	if value, ok := wsec.mutation.WorkflowID(); ok {
		_spec.SetField(workflowstepexecution.FieldWorkflowID, field.TypeString, value)
		_node.WorkflowID = value
	}
	if value, ok := wsec.mutation.GetType(); ok {
		_spec.SetField(workflowstepexecution.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := wsec.mutation.Attributes(); ok {
		_spec.SetField(workflowstepexecution.FieldAttributes, field.TypeJSON, value)
		_node.Attributes = value
	}
	if value, ok := wsec.mutation.Times(); ok {
		_spec.SetField(workflowstepexecution.FieldTimes, field.TypeInt, value)
		_node.Times = value
	}
	if value, ok := wsec.mutation.ExecuteTime(); ok {
		_spec.SetField(workflowstepexecution.FieldExecuteTime, field.TypeTime, value)
		_node.ExecuteTime = value
	}
	if value, ok := wsec.mutation.Duration(); ok {
		_spec.SetField(workflowstepexecution.FieldDuration, field.TypeInt, value)
		_node.Duration = value
	}
	if value, ok := wsec.mutation.RetryStrategy(); ok {
		_spec.SetField(workflowstepexecution.FieldRetryStrategy, field.TypeJSON, value)
		_node.RetryStrategy = value
	}
	if value, ok := wsec.mutation.Timeout(); ok {
		_spec.SetField(workflowstepexecution.FieldTimeout, field.TypeInt, value)
		_node.Timeout = value
	}
	if value, ok := wsec.mutation.Order(); ok {
		_spec.SetField(workflowstepexecution.FieldOrder, field.TypeInt, value)
		_node.Order = value
	}
	if value, ok := wsec.mutation.Record(); ok {
		_spec.SetField(workflowstepexecution.FieldRecord, field.TypeString, value)
		_node.Record = value
	}
	if nodes := wsec.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowstepexecution.ProjectTable,
			Columns: []string{workflowstepexecution.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		edge.Schema = wsec.schemaConfig.WorkflowStepExecution
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wsec.mutation.StageExecutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowstepexecution.StageExecutionTable,
			Columns: []string{workflowstepexecution.StageExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowstageexecution.FieldID, field.TypeString),
			},
		}
		edge.Schema = wsec.schemaConfig.WorkflowStepExecution
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WorkflowStageExecutionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// Set is different from other Set* methods,
// it sets the value by judging the definition of each field within the entire object.
//
// For required fields, Set calls directly.
//
// For optional fields, Set calls if the value is not zero.
//
// For example:
//
//	## Required
//
//	db.SetX(obj.X)
//
//	## Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (wsec *WorkflowStepExecutionCreate) Set(obj *WorkflowStepExecution) *WorkflowStepExecutionCreate {
	// Required.
	wsec.SetName(obj.Name)
	wsec.SetWorkflowStepID(obj.WorkflowStepID)
	wsec.SetWorkflowExecutionID(obj.WorkflowExecutionID)
	wsec.SetWorkflowStageExecutionID(obj.WorkflowStageExecutionID)
	wsec.SetProjectID(obj.ProjectID)
	wsec.SetWorkflowID(obj.WorkflowID)
	wsec.SetType(obj.Type)
	wsec.SetTimes(obj.Times)
	wsec.SetDuration(obj.Duration)
	wsec.SetTimeout(obj.Timeout)
	wsec.SetOrder(obj.Order)
	wsec.SetRecord(obj.Record)

	// Optional.
	if obj.Description != "" {
		wsec.SetDescription(obj.Description)
	}
	if !reflect.ValueOf(obj.Labels).IsZero() {
		wsec.SetLabels(obj.Labels)
	}
	if !reflect.ValueOf(obj.Annotations).IsZero() {
		wsec.SetAnnotations(obj.Annotations)
	}
	if obj.CreateTime != nil {
		wsec.SetCreateTime(*obj.CreateTime)
	}
	if obj.UpdateTime != nil {
		wsec.SetUpdateTime(*obj.UpdateTime)
	}
	if !reflect.ValueOf(obj.Status).IsZero() {
		wsec.SetStatus(obj.Status)
	}
	if !reflect.ValueOf(obj.Attributes).IsZero() {
		wsec.SetAttributes(obj.Attributes)
	}
	if !obj.ExecuteTime.IsZero() {
		wsec.SetExecuteTime(obj.ExecuteTime)
	}
	if !reflect.ValueOf(obj.RetryStrategy).IsZero() {
		wsec.SetRetryStrategy(obj.RetryStrategy)
	}

	// Record the given object.
	wsec.object = obj

	return wsec
}

// getClientSet returns the ClientSet for the given builder.
func (wsec *WorkflowStepExecutionCreate) getClientSet() (mc ClientSet) {
	if _, ok := wsec.config.driver.(*txDriver); ok {
		tx := &Tx{config: wsec.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: wsec.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after created the WorkflowStepExecution entity,
// which is always good for cascading create operations.
func (wsec *WorkflowStepExecutionCreate) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *WorkflowStepExecution) error) (*WorkflowStepExecution, error) {
	obj, err := wsec.Save(ctx)
	if err != nil {
		return nil, err
	}

	if len(cbs) == 0 {
		return obj, err
	}

	mc := wsec.getClientSet()

	if x := wsec.object; x != nil {
		if _, set := wsec.mutation.Field(workflowstepexecution.FieldName); set {
			obj.Name = x.Name
		}
		if _, set := wsec.mutation.Field(workflowstepexecution.FieldDescription); set {
			obj.Description = x.Description
		}
		if _, set := wsec.mutation.Field(workflowstepexecution.FieldStatus); set {
			obj.Status = x.Status
		}
		if _, set := wsec.mutation.Field(workflowstepexecution.FieldWorkflowStepID); set {
			obj.WorkflowStepID = x.WorkflowStepID
		}
		if _, set := wsec.mutation.Field(workflowstepexecution.FieldWorkflowExecutionID); set {
			obj.WorkflowExecutionID = x.WorkflowExecutionID
		}
		if _, set := wsec.mutation.Field(workflowstepexecution.FieldWorkflowStageExecutionID); set {
			obj.WorkflowStageExecutionID = x.WorkflowStageExecutionID
		}
		if _, set := wsec.mutation.Field(workflowstepexecution.FieldProjectID); set {
			obj.ProjectID = x.ProjectID
		}
		if _, set := wsec.mutation.Field(workflowstepexecution.FieldWorkflowID); set {
			obj.WorkflowID = x.WorkflowID
		}
		if _, set := wsec.mutation.Field(workflowstepexecution.FieldType); set {
			obj.Type = x.Type
		}
		if _, set := wsec.mutation.Field(workflowstepexecution.FieldAttributes); set {
			obj.Attributes = x.Attributes
		}
		if _, set := wsec.mutation.Field(workflowstepexecution.FieldExecuteTime); set {
			obj.ExecuteTime = x.ExecuteTime
		}
		if _, set := wsec.mutation.Field(workflowstepexecution.FieldRetryStrategy); set {
			obj.RetryStrategy = x.RetryStrategy
		}
		obj.Edges = x.Edges
	}

	for i := range cbs {
		if err = cbs[i](ctx, mc, obj); err != nil {
			return nil, err
		}
	}

	return obj, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (wsec *WorkflowStepExecutionCreate) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *WorkflowStepExecution) error) *WorkflowStepExecution {
	obj, err := wsec.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return obj
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (wsec *WorkflowStepExecutionCreate) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *WorkflowStepExecution) error) error {
	_, err := wsec.SaveE(ctx, cbs...)
	return err
}

// ExecEX is like ExecE, but panics if an error occurs.
func (wsec *WorkflowStepExecutionCreate) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *WorkflowStepExecution) error) {
	if err := wsec.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// Set leverages the WorkflowStepExecutionCreate Set method,
// it sets the value by judging the definition of each field within the entire item of the given list.
//
// For required fields, Set calls directly.
//
// For optional fields, Set calls if the value is not zero.
//
// For example:
//
//	## Required
//
//	db.SetX(obj.X)
//
//	## Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (wsecb *WorkflowStepExecutionCreateBulk) Set(objs ...*WorkflowStepExecution) *WorkflowStepExecutionCreateBulk {
	if len(objs) != 0 {
		client := NewWorkflowStepExecutionClient(wsecb.config)

		wsecb.builders = make([]*WorkflowStepExecutionCreate, len(objs))
		for i := range objs {
			wsecb.builders[i] = client.Create().Set(objs[i])
		}

		// Record the given objects.
		wsecb.objects = objs
	}

	return wsecb
}

// getClientSet returns the ClientSet for the given builder.
func (wsecb *WorkflowStepExecutionCreateBulk) getClientSet() (mc ClientSet) {
	if _, ok := wsecb.config.driver.(*txDriver); ok {
		tx := &Tx{config: wsecb.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: wsecb.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after created the WorkflowStepExecution entities,
// which is always good for cascading create operations.
func (wsecb *WorkflowStepExecutionCreateBulk) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *WorkflowStepExecution) error) ([]*WorkflowStepExecution, error) {
	objs, err := wsecb.Save(ctx)
	if err != nil {
		return nil, err
	}

	if len(cbs) == 0 {
		return objs, err
	}

	mc := wsecb.getClientSet()

	if x := wsecb.objects; x != nil {
		for i := range x {
			if _, set := wsecb.builders[i].mutation.Field(workflowstepexecution.FieldName); set {
				objs[i].Name = x[i].Name
			}
			if _, set := wsecb.builders[i].mutation.Field(workflowstepexecution.FieldDescription); set {
				objs[i].Description = x[i].Description
			}
			if _, set := wsecb.builders[i].mutation.Field(workflowstepexecution.FieldStatus); set {
				objs[i].Status = x[i].Status
			}
			if _, set := wsecb.builders[i].mutation.Field(workflowstepexecution.FieldWorkflowStepID); set {
				objs[i].WorkflowStepID = x[i].WorkflowStepID
			}
			if _, set := wsecb.builders[i].mutation.Field(workflowstepexecution.FieldWorkflowExecutionID); set {
				objs[i].WorkflowExecutionID = x[i].WorkflowExecutionID
			}
			if _, set := wsecb.builders[i].mutation.Field(workflowstepexecution.FieldWorkflowStageExecutionID); set {
				objs[i].WorkflowStageExecutionID = x[i].WorkflowStageExecutionID
			}
			if _, set := wsecb.builders[i].mutation.Field(workflowstepexecution.FieldProjectID); set {
				objs[i].ProjectID = x[i].ProjectID
			}
			if _, set := wsecb.builders[i].mutation.Field(workflowstepexecution.FieldWorkflowID); set {
				objs[i].WorkflowID = x[i].WorkflowID
			}
			if _, set := wsecb.builders[i].mutation.Field(workflowstepexecution.FieldType); set {
				objs[i].Type = x[i].Type
			}
			if _, set := wsecb.builders[i].mutation.Field(workflowstepexecution.FieldAttributes); set {
				objs[i].Attributes = x[i].Attributes
			}
			if _, set := wsecb.builders[i].mutation.Field(workflowstepexecution.FieldExecuteTime); set {
				objs[i].ExecuteTime = x[i].ExecuteTime
			}
			if _, set := wsecb.builders[i].mutation.Field(workflowstepexecution.FieldRetryStrategy); set {
				objs[i].RetryStrategy = x[i].RetryStrategy
			}
			objs[i].Edges = x[i].Edges
		}
	}

	for i := range objs {
		for j := range cbs {
			if err = cbs[j](ctx, mc, objs[i]); err != nil {
				return nil, err
			}
		}
	}

	return objs, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (wsecb *WorkflowStepExecutionCreateBulk) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *WorkflowStepExecution) error) []*WorkflowStepExecution {
	objs, err := wsecb.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return objs
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (wsecb *WorkflowStepExecutionCreateBulk) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *WorkflowStepExecution) error) error {
	_, err := wsecb.SaveE(ctx, cbs...)
	return err
}

// ExecEX is like ExecE, but panics if an error occurs.
func (wsecb *WorkflowStepExecutionCreateBulk) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *WorkflowStepExecution) error) {
	if err := wsecb.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (u *WorkflowStepExecutionUpsertOne) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *WorkflowStepExecution) error) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for WorkflowStepExecutionUpsertOne.OnConflict")
	}
	u.create.fromUpsert = true
	return u.create.ExecE(ctx, cbs...)
}

// ExecEX is like ExecE, but panics if an error occurs.
func (u *WorkflowStepExecutionUpsertOne) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *WorkflowStepExecution) error) {
	if err := u.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (u *WorkflowStepExecutionUpsertBulk) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *WorkflowStepExecution) error) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model: OnConflict was set for builder %d. Set it on the WorkflowStepExecutionUpsertBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for WorkflowStepExecutionUpsertBulk.OnConflict")
	}
	u.create.fromUpsert = true
	return u.create.ExecE(ctx, cbs...)
}

// ExecEX is like ExecE, but panics if an error occurs.
func (u *WorkflowStepExecutionUpsertBulk) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *WorkflowStepExecution) error) {
	if err := u.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WorkflowStepExecution.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WorkflowStepExecutionUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (wsec *WorkflowStepExecutionCreate) OnConflict(opts ...sql.ConflictOption) *WorkflowStepExecutionUpsertOne {
	wsec.conflict = opts
	return &WorkflowStepExecutionUpsertOne{
		create: wsec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WorkflowStepExecution.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wsec *WorkflowStepExecutionCreate) OnConflictColumns(columns ...string) *WorkflowStepExecutionUpsertOne {
	wsec.conflict = append(wsec.conflict, sql.ConflictColumns(columns...))
	return &WorkflowStepExecutionUpsertOne{
		create: wsec,
	}
}

type (
	// WorkflowStepExecutionUpsertOne is the builder for "upsert"-ing
	//  one WorkflowStepExecution node.
	WorkflowStepExecutionUpsertOne struct {
		create *WorkflowStepExecutionCreate
	}

	// WorkflowStepExecutionUpsert is the "OnConflict" setter.
	WorkflowStepExecutionUpsert struct {
		*sql.UpdateSet
	}
)

// SetDescription sets the "description" field.
func (u *WorkflowStepExecutionUpsert) SetDescription(v string) *WorkflowStepExecutionUpsert {
	u.Set(workflowstepexecution.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *WorkflowStepExecutionUpsert) UpdateDescription() *WorkflowStepExecutionUpsert {
	u.SetExcluded(workflowstepexecution.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *WorkflowStepExecutionUpsert) ClearDescription() *WorkflowStepExecutionUpsert {
	u.SetNull(workflowstepexecution.FieldDescription)
	return u
}

// SetLabels sets the "labels" field.
func (u *WorkflowStepExecutionUpsert) SetLabels(v map[string]string) *WorkflowStepExecutionUpsert {
	u.Set(workflowstepexecution.FieldLabels, v)
	return u
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *WorkflowStepExecutionUpsert) UpdateLabels() *WorkflowStepExecutionUpsert {
	u.SetExcluded(workflowstepexecution.FieldLabels)
	return u
}

// ClearLabels clears the value of the "labels" field.
func (u *WorkflowStepExecutionUpsert) ClearLabels() *WorkflowStepExecutionUpsert {
	u.SetNull(workflowstepexecution.FieldLabels)
	return u
}

// SetAnnotations sets the "annotations" field.
func (u *WorkflowStepExecutionUpsert) SetAnnotations(v map[string]string) *WorkflowStepExecutionUpsert {
	u.Set(workflowstepexecution.FieldAnnotations, v)
	return u
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *WorkflowStepExecutionUpsert) UpdateAnnotations() *WorkflowStepExecutionUpsert {
	u.SetExcluded(workflowstepexecution.FieldAnnotations)
	return u
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *WorkflowStepExecutionUpsert) ClearAnnotations() *WorkflowStepExecutionUpsert {
	u.SetNull(workflowstepexecution.FieldAnnotations)
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *WorkflowStepExecutionUpsert) SetUpdateTime(v time.Time) *WorkflowStepExecutionUpsert {
	u.Set(workflowstepexecution.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *WorkflowStepExecutionUpsert) UpdateUpdateTime() *WorkflowStepExecutionUpsert {
	u.SetExcluded(workflowstepexecution.FieldUpdateTime)
	return u
}

// SetStatus sets the "status" field.
func (u *WorkflowStepExecutionUpsert) SetStatus(v status.Status) *WorkflowStepExecutionUpsert {
	u.Set(workflowstepexecution.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *WorkflowStepExecutionUpsert) UpdateStatus() *WorkflowStepExecutionUpsert {
	u.SetExcluded(workflowstepexecution.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *WorkflowStepExecutionUpsert) ClearStatus() *WorkflowStepExecutionUpsert {
	u.SetNull(workflowstepexecution.FieldStatus)
	return u
}

// SetAttributes sets the "attributes" field.
func (u *WorkflowStepExecutionUpsert) SetAttributes(v map[string]any) *WorkflowStepExecutionUpsert {
	u.Set(workflowstepexecution.FieldAttributes, v)
	return u
}

// UpdateAttributes sets the "attributes" field to the value that was provided on create.
func (u *WorkflowStepExecutionUpsert) UpdateAttributes() *WorkflowStepExecutionUpsert {
	u.SetExcluded(workflowstepexecution.FieldAttributes)
	return u
}

// ClearAttributes clears the value of the "attributes" field.
func (u *WorkflowStepExecutionUpsert) ClearAttributes() *WorkflowStepExecutionUpsert {
	u.SetNull(workflowstepexecution.FieldAttributes)
	return u
}

// SetTimes sets the "times" field.
func (u *WorkflowStepExecutionUpsert) SetTimes(v int) *WorkflowStepExecutionUpsert {
	u.Set(workflowstepexecution.FieldTimes, v)
	return u
}

// UpdateTimes sets the "times" field to the value that was provided on create.
func (u *WorkflowStepExecutionUpsert) UpdateTimes() *WorkflowStepExecutionUpsert {
	u.SetExcluded(workflowstepexecution.FieldTimes)
	return u
}

// AddTimes adds v to the "times" field.
func (u *WorkflowStepExecutionUpsert) AddTimes(v int) *WorkflowStepExecutionUpsert {
	u.Add(workflowstepexecution.FieldTimes, v)
	return u
}

// SetExecuteTime sets the "execute_time" field.
func (u *WorkflowStepExecutionUpsert) SetExecuteTime(v time.Time) *WorkflowStepExecutionUpsert {
	u.Set(workflowstepexecution.FieldExecuteTime, v)
	return u
}

// UpdateExecuteTime sets the "execute_time" field to the value that was provided on create.
func (u *WorkflowStepExecutionUpsert) UpdateExecuteTime() *WorkflowStepExecutionUpsert {
	u.SetExcluded(workflowstepexecution.FieldExecuteTime)
	return u
}

// ClearExecuteTime clears the value of the "execute_time" field.
func (u *WorkflowStepExecutionUpsert) ClearExecuteTime() *WorkflowStepExecutionUpsert {
	u.SetNull(workflowstepexecution.FieldExecuteTime)
	return u
}

// SetDuration sets the "duration" field.
func (u *WorkflowStepExecutionUpsert) SetDuration(v int) *WorkflowStepExecutionUpsert {
	u.Set(workflowstepexecution.FieldDuration, v)
	return u
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *WorkflowStepExecutionUpsert) UpdateDuration() *WorkflowStepExecutionUpsert {
	u.SetExcluded(workflowstepexecution.FieldDuration)
	return u
}

// AddDuration adds v to the "duration" field.
func (u *WorkflowStepExecutionUpsert) AddDuration(v int) *WorkflowStepExecutionUpsert {
	u.Add(workflowstepexecution.FieldDuration, v)
	return u
}

// SetRetryStrategy sets the "retryStrategy" field.
func (u *WorkflowStepExecutionUpsert) SetRetryStrategy(v *types.RetryStrategy) *WorkflowStepExecutionUpsert {
	u.Set(workflowstepexecution.FieldRetryStrategy, v)
	return u
}

// UpdateRetryStrategy sets the "retryStrategy" field to the value that was provided on create.
func (u *WorkflowStepExecutionUpsert) UpdateRetryStrategy() *WorkflowStepExecutionUpsert {
	u.SetExcluded(workflowstepexecution.FieldRetryStrategy)
	return u
}

// ClearRetryStrategy clears the value of the "retryStrategy" field.
func (u *WorkflowStepExecutionUpsert) ClearRetryStrategy() *WorkflowStepExecutionUpsert {
	u.SetNull(workflowstepexecution.FieldRetryStrategy)
	return u
}

// SetTimeout sets the "timeout" field.
func (u *WorkflowStepExecutionUpsert) SetTimeout(v int) *WorkflowStepExecutionUpsert {
	u.Set(workflowstepexecution.FieldTimeout, v)
	return u
}

// UpdateTimeout sets the "timeout" field to the value that was provided on create.
func (u *WorkflowStepExecutionUpsert) UpdateTimeout() *WorkflowStepExecutionUpsert {
	u.SetExcluded(workflowstepexecution.FieldTimeout)
	return u
}

// AddTimeout adds v to the "timeout" field.
func (u *WorkflowStepExecutionUpsert) AddTimeout(v int) *WorkflowStepExecutionUpsert {
	u.Add(workflowstepexecution.FieldTimeout, v)
	return u
}

// SetOrder sets the "order" field.
func (u *WorkflowStepExecutionUpsert) SetOrder(v int) *WorkflowStepExecutionUpsert {
	u.Set(workflowstepexecution.FieldOrder, v)
	return u
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *WorkflowStepExecutionUpsert) UpdateOrder() *WorkflowStepExecutionUpsert {
	u.SetExcluded(workflowstepexecution.FieldOrder)
	return u
}

// AddOrder adds v to the "order" field.
func (u *WorkflowStepExecutionUpsert) AddOrder(v int) *WorkflowStepExecutionUpsert {
	u.Add(workflowstepexecution.FieldOrder, v)
	return u
}

// SetRecord sets the "record" field.
func (u *WorkflowStepExecutionUpsert) SetRecord(v string) *WorkflowStepExecutionUpsert {
	u.Set(workflowstepexecution.FieldRecord, v)
	return u
}

// UpdateRecord sets the "record" field to the value that was provided on create.
func (u *WorkflowStepExecutionUpsert) UpdateRecord() *WorkflowStepExecutionUpsert {
	u.SetExcluded(workflowstepexecution.FieldRecord)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.WorkflowStepExecution.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(workflowstepexecution.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WorkflowStepExecutionUpsertOne) UpdateNewValues() *WorkflowStepExecutionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(workflowstepexecution.FieldID)
		}
		if _, exists := u.create.mutation.Name(); exists {
			s.SetIgnore(workflowstepexecution.FieldName)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(workflowstepexecution.FieldCreateTime)
		}
		if _, exists := u.create.mutation.WorkflowStepID(); exists {
			s.SetIgnore(workflowstepexecution.FieldWorkflowStepID)
		}
		if _, exists := u.create.mutation.WorkflowExecutionID(); exists {
			s.SetIgnore(workflowstepexecution.FieldWorkflowExecutionID)
		}
		if _, exists := u.create.mutation.WorkflowStageExecutionID(); exists {
			s.SetIgnore(workflowstepexecution.FieldWorkflowStageExecutionID)
		}
		if _, exists := u.create.mutation.ProjectID(); exists {
			s.SetIgnore(workflowstepexecution.FieldProjectID)
		}
		if _, exists := u.create.mutation.WorkflowID(); exists {
			s.SetIgnore(workflowstepexecution.FieldWorkflowID)
		}
		if _, exists := u.create.mutation.GetType(); exists {
			s.SetIgnore(workflowstepexecution.FieldType)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WorkflowStepExecution.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *WorkflowStepExecutionUpsertOne) Ignore() *WorkflowStepExecutionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WorkflowStepExecutionUpsertOne) DoNothing() *WorkflowStepExecutionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WorkflowStepExecutionCreate.OnConflict
// documentation for more info.
func (u *WorkflowStepExecutionUpsertOne) Update(set func(*WorkflowStepExecutionUpsert)) *WorkflowStepExecutionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WorkflowStepExecutionUpsert{UpdateSet: update})
	}))
	return u
}

// SetDescription sets the "description" field.
func (u *WorkflowStepExecutionUpsertOne) SetDescription(v string) *WorkflowStepExecutionUpsertOne {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *WorkflowStepExecutionUpsertOne) UpdateDescription() *WorkflowStepExecutionUpsertOne {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *WorkflowStepExecutionUpsertOne) ClearDescription() *WorkflowStepExecutionUpsertOne {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.ClearDescription()
	})
}

// SetLabels sets the "labels" field.
func (u *WorkflowStepExecutionUpsertOne) SetLabels(v map[string]string) *WorkflowStepExecutionUpsertOne {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.SetLabels(v)
	})
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *WorkflowStepExecutionUpsertOne) UpdateLabels() *WorkflowStepExecutionUpsertOne {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.UpdateLabels()
	})
}

// ClearLabels clears the value of the "labels" field.
func (u *WorkflowStepExecutionUpsertOne) ClearLabels() *WorkflowStepExecutionUpsertOne {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.ClearLabels()
	})
}

// SetAnnotations sets the "annotations" field.
func (u *WorkflowStepExecutionUpsertOne) SetAnnotations(v map[string]string) *WorkflowStepExecutionUpsertOne {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.SetAnnotations(v)
	})
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *WorkflowStepExecutionUpsertOne) UpdateAnnotations() *WorkflowStepExecutionUpsertOne {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.UpdateAnnotations()
	})
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *WorkflowStepExecutionUpsertOne) ClearAnnotations() *WorkflowStepExecutionUpsertOne {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.ClearAnnotations()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *WorkflowStepExecutionUpsertOne) SetUpdateTime(v time.Time) *WorkflowStepExecutionUpsertOne {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *WorkflowStepExecutionUpsertOne) UpdateUpdateTime() *WorkflowStepExecutionUpsertOne {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetStatus sets the "status" field.
func (u *WorkflowStepExecutionUpsertOne) SetStatus(v status.Status) *WorkflowStepExecutionUpsertOne {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *WorkflowStepExecutionUpsertOne) UpdateStatus() *WorkflowStepExecutionUpsertOne {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *WorkflowStepExecutionUpsertOne) ClearStatus() *WorkflowStepExecutionUpsertOne {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.ClearStatus()
	})
}

// SetAttributes sets the "attributes" field.
func (u *WorkflowStepExecutionUpsertOne) SetAttributes(v map[string]any) *WorkflowStepExecutionUpsertOne {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.SetAttributes(v)
	})
}

// UpdateAttributes sets the "attributes" field to the value that was provided on create.
func (u *WorkflowStepExecutionUpsertOne) UpdateAttributes() *WorkflowStepExecutionUpsertOne {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.UpdateAttributes()
	})
}

// ClearAttributes clears the value of the "attributes" field.
func (u *WorkflowStepExecutionUpsertOne) ClearAttributes() *WorkflowStepExecutionUpsertOne {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.ClearAttributes()
	})
}

// SetTimes sets the "times" field.
func (u *WorkflowStepExecutionUpsertOne) SetTimes(v int) *WorkflowStepExecutionUpsertOne {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.SetTimes(v)
	})
}

// AddTimes adds v to the "times" field.
func (u *WorkflowStepExecutionUpsertOne) AddTimes(v int) *WorkflowStepExecutionUpsertOne {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.AddTimes(v)
	})
}

// UpdateTimes sets the "times" field to the value that was provided on create.
func (u *WorkflowStepExecutionUpsertOne) UpdateTimes() *WorkflowStepExecutionUpsertOne {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.UpdateTimes()
	})
}

// SetExecuteTime sets the "execute_time" field.
func (u *WorkflowStepExecutionUpsertOne) SetExecuteTime(v time.Time) *WorkflowStepExecutionUpsertOne {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.SetExecuteTime(v)
	})
}

// UpdateExecuteTime sets the "execute_time" field to the value that was provided on create.
func (u *WorkflowStepExecutionUpsertOne) UpdateExecuteTime() *WorkflowStepExecutionUpsertOne {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.UpdateExecuteTime()
	})
}

// ClearExecuteTime clears the value of the "execute_time" field.
func (u *WorkflowStepExecutionUpsertOne) ClearExecuteTime() *WorkflowStepExecutionUpsertOne {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.ClearExecuteTime()
	})
}

// SetDuration sets the "duration" field.
func (u *WorkflowStepExecutionUpsertOne) SetDuration(v int) *WorkflowStepExecutionUpsertOne {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.SetDuration(v)
	})
}

// AddDuration adds v to the "duration" field.
func (u *WorkflowStepExecutionUpsertOne) AddDuration(v int) *WorkflowStepExecutionUpsertOne {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.AddDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *WorkflowStepExecutionUpsertOne) UpdateDuration() *WorkflowStepExecutionUpsertOne {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.UpdateDuration()
	})
}

// SetRetryStrategy sets the "retryStrategy" field.
func (u *WorkflowStepExecutionUpsertOne) SetRetryStrategy(v *types.RetryStrategy) *WorkflowStepExecutionUpsertOne {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.SetRetryStrategy(v)
	})
}

// UpdateRetryStrategy sets the "retryStrategy" field to the value that was provided on create.
func (u *WorkflowStepExecutionUpsertOne) UpdateRetryStrategy() *WorkflowStepExecutionUpsertOne {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.UpdateRetryStrategy()
	})
}

// ClearRetryStrategy clears the value of the "retryStrategy" field.
func (u *WorkflowStepExecutionUpsertOne) ClearRetryStrategy() *WorkflowStepExecutionUpsertOne {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.ClearRetryStrategy()
	})
}

// SetTimeout sets the "timeout" field.
func (u *WorkflowStepExecutionUpsertOne) SetTimeout(v int) *WorkflowStepExecutionUpsertOne {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.SetTimeout(v)
	})
}

// AddTimeout adds v to the "timeout" field.
func (u *WorkflowStepExecutionUpsertOne) AddTimeout(v int) *WorkflowStepExecutionUpsertOne {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.AddTimeout(v)
	})
}

// UpdateTimeout sets the "timeout" field to the value that was provided on create.
func (u *WorkflowStepExecutionUpsertOne) UpdateTimeout() *WorkflowStepExecutionUpsertOne {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.UpdateTimeout()
	})
}

// SetOrder sets the "order" field.
func (u *WorkflowStepExecutionUpsertOne) SetOrder(v int) *WorkflowStepExecutionUpsertOne {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.SetOrder(v)
	})
}

// AddOrder adds v to the "order" field.
func (u *WorkflowStepExecutionUpsertOne) AddOrder(v int) *WorkflowStepExecutionUpsertOne {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.AddOrder(v)
	})
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *WorkflowStepExecutionUpsertOne) UpdateOrder() *WorkflowStepExecutionUpsertOne {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.UpdateOrder()
	})
}

// SetRecord sets the "record" field.
func (u *WorkflowStepExecutionUpsertOne) SetRecord(v string) *WorkflowStepExecutionUpsertOne {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.SetRecord(v)
	})
}

// UpdateRecord sets the "record" field to the value that was provided on create.
func (u *WorkflowStepExecutionUpsertOne) UpdateRecord() *WorkflowStepExecutionUpsertOne {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.UpdateRecord()
	})
}

// Exec executes the query.
func (u *WorkflowStepExecutionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for WorkflowStepExecutionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WorkflowStepExecutionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *WorkflowStepExecutionUpsertOne) ID(ctx context.Context) (id object.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("model: WorkflowStepExecutionUpsertOne.ID is not supported by MySQL driver. Use WorkflowStepExecutionUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *WorkflowStepExecutionUpsertOne) IDX(ctx context.Context) object.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// WorkflowStepExecutionCreateBulk is the builder for creating many WorkflowStepExecution entities in bulk.
type WorkflowStepExecutionCreateBulk struct {
	config
	err        error
	builders   []*WorkflowStepExecutionCreate
	conflict   []sql.ConflictOption
	objects    []*WorkflowStepExecution
	fromUpsert bool
}

// Save creates the WorkflowStepExecution entities in the database.
func (wsecb *WorkflowStepExecutionCreateBulk) Save(ctx context.Context) ([]*WorkflowStepExecution, error) {
	if wsecb.err != nil {
		return nil, wsecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wsecb.builders))
	nodes := make([]*WorkflowStepExecution, len(wsecb.builders))
	mutators := make([]Mutator, len(wsecb.builders))
	for i := range wsecb.builders {
		func(i int, root context.Context) {
			builder := wsecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkflowStepExecutionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wsecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = wsecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wsecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wsecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wsecb *WorkflowStepExecutionCreateBulk) SaveX(ctx context.Context) []*WorkflowStepExecution {
	v, err := wsecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wsecb *WorkflowStepExecutionCreateBulk) Exec(ctx context.Context) error {
	_, err := wsecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wsecb *WorkflowStepExecutionCreateBulk) ExecX(ctx context.Context) {
	if err := wsecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WorkflowStepExecution.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WorkflowStepExecutionUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (wsecb *WorkflowStepExecutionCreateBulk) OnConflict(opts ...sql.ConflictOption) *WorkflowStepExecutionUpsertBulk {
	wsecb.conflict = opts
	return &WorkflowStepExecutionUpsertBulk{
		create: wsecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WorkflowStepExecution.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wsecb *WorkflowStepExecutionCreateBulk) OnConflictColumns(columns ...string) *WorkflowStepExecutionUpsertBulk {
	wsecb.conflict = append(wsecb.conflict, sql.ConflictColumns(columns...))
	return &WorkflowStepExecutionUpsertBulk{
		create: wsecb,
	}
}

// WorkflowStepExecutionUpsertBulk is the builder for "upsert"-ing
// a bulk of WorkflowStepExecution nodes.
type WorkflowStepExecutionUpsertBulk struct {
	create *WorkflowStepExecutionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.WorkflowStepExecution.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(workflowstepexecution.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WorkflowStepExecutionUpsertBulk) UpdateNewValues() *WorkflowStepExecutionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(workflowstepexecution.FieldID)
			}
			if _, exists := b.mutation.Name(); exists {
				s.SetIgnore(workflowstepexecution.FieldName)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(workflowstepexecution.FieldCreateTime)
			}
			if _, exists := b.mutation.WorkflowStepID(); exists {
				s.SetIgnore(workflowstepexecution.FieldWorkflowStepID)
			}
			if _, exists := b.mutation.WorkflowExecutionID(); exists {
				s.SetIgnore(workflowstepexecution.FieldWorkflowExecutionID)
			}
			if _, exists := b.mutation.WorkflowStageExecutionID(); exists {
				s.SetIgnore(workflowstepexecution.FieldWorkflowStageExecutionID)
			}
			if _, exists := b.mutation.ProjectID(); exists {
				s.SetIgnore(workflowstepexecution.FieldProjectID)
			}
			if _, exists := b.mutation.WorkflowID(); exists {
				s.SetIgnore(workflowstepexecution.FieldWorkflowID)
			}
			if _, exists := b.mutation.GetType(); exists {
				s.SetIgnore(workflowstepexecution.FieldType)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WorkflowStepExecution.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *WorkflowStepExecutionUpsertBulk) Ignore() *WorkflowStepExecutionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WorkflowStepExecutionUpsertBulk) DoNothing() *WorkflowStepExecutionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WorkflowStepExecutionCreateBulk.OnConflict
// documentation for more info.
func (u *WorkflowStepExecutionUpsertBulk) Update(set func(*WorkflowStepExecutionUpsert)) *WorkflowStepExecutionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WorkflowStepExecutionUpsert{UpdateSet: update})
	}))
	return u
}

// SetDescription sets the "description" field.
func (u *WorkflowStepExecutionUpsertBulk) SetDescription(v string) *WorkflowStepExecutionUpsertBulk {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *WorkflowStepExecutionUpsertBulk) UpdateDescription() *WorkflowStepExecutionUpsertBulk {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *WorkflowStepExecutionUpsertBulk) ClearDescription() *WorkflowStepExecutionUpsertBulk {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.ClearDescription()
	})
}

// SetLabels sets the "labels" field.
func (u *WorkflowStepExecutionUpsertBulk) SetLabels(v map[string]string) *WorkflowStepExecutionUpsertBulk {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.SetLabels(v)
	})
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *WorkflowStepExecutionUpsertBulk) UpdateLabels() *WorkflowStepExecutionUpsertBulk {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.UpdateLabels()
	})
}

// ClearLabels clears the value of the "labels" field.
func (u *WorkflowStepExecutionUpsertBulk) ClearLabels() *WorkflowStepExecutionUpsertBulk {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.ClearLabels()
	})
}

// SetAnnotations sets the "annotations" field.
func (u *WorkflowStepExecutionUpsertBulk) SetAnnotations(v map[string]string) *WorkflowStepExecutionUpsertBulk {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.SetAnnotations(v)
	})
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *WorkflowStepExecutionUpsertBulk) UpdateAnnotations() *WorkflowStepExecutionUpsertBulk {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.UpdateAnnotations()
	})
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *WorkflowStepExecutionUpsertBulk) ClearAnnotations() *WorkflowStepExecutionUpsertBulk {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.ClearAnnotations()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *WorkflowStepExecutionUpsertBulk) SetUpdateTime(v time.Time) *WorkflowStepExecutionUpsertBulk {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *WorkflowStepExecutionUpsertBulk) UpdateUpdateTime() *WorkflowStepExecutionUpsertBulk {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetStatus sets the "status" field.
func (u *WorkflowStepExecutionUpsertBulk) SetStatus(v status.Status) *WorkflowStepExecutionUpsertBulk {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *WorkflowStepExecutionUpsertBulk) UpdateStatus() *WorkflowStepExecutionUpsertBulk {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *WorkflowStepExecutionUpsertBulk) ClearStatus() *WorkflowStepExecutionUpsertBulk {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.ClearStatus()
	})
}

// SetAttributes sets the "attributes" field.
func (u *WorkflowStepExecutionUpsertBulk) SetAttributes(v map[string]any) *WorkflowStepExecutionUpsertBulk {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.SetAttributes(v)
	})
}

// UpdateAttributes sets the "attributes" field to the value that was provided on create.
func (u *WorkflowStepExecutionUpsertBulk) UpdateAttributes() *WorkflowStepExecutionUpsertBulk {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.UpdateAttributes()
	})
}

// ClearAttributes clears the value of the "attributes" field.
func (u *WorkflowStepExecutionUpsertBulk) ClearAttributes() *WorkflowStepExecutionUpsertBulk {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.ClearAttributes()
	})
}

// SetTimes sets the "times" field.
func (u *WorkflowStepExecutionUpsertBulk) SetTimes(v int) *WorkflowStepExecutionUpsertBulk {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.SetTimes(v)
	})
}

// AddTimes adds v to the "times" field.
func (u *WorkflowStepExecutionUpsertBulk) AddTimes(v int) *WorkflowStepExecutionUpsertBulk {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.AddTimes(v)
	})
}

// UpdateTimes sets the "times" field to the value that was provided on create.
func (u *WorkflowStepExecutionUpsertBulk) UpdateTimes() *WorkflowStepExecutionUpsertBulk {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.UpdateTimes()
	})
}

// SetExecuteTime sets the "execute_time" field.
func (u *WorkflowStepExecutionUpsertBulk) SetExecuteTime(v time.Time) *WorkflowStepExecutionUpsertBulk {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.SetExecuteTime(v)
	})
}

// UpdateExecuteTime sets the "execute_time" field to the value that was provided on create.
func (u *WorkflowStepExecutionUpsertBulk) UpdateExecuteTime() *WorkflowStepExecutionUpsertBulk {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.UpdateExecuteTime()
	})
}

// ClearExecuteTime clears the value of the "execute_time" field.
func (u *WorkflowStepExecutionUpsertBulk) ClearExecuteTime() *WorkflowStepExecutionUpsertBulk {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.ClearExecuteTime()
	})
}

// SetDuration sets the "duration" field.
func (u *WorkflowStepExecutionUpsertBulk) SetDuration(v int) *WorkflowStepExecutionUpsertBulk {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.SetDuration(v)
	})
}

// AddDuration adds v to the "duration" field.
func (u *WorkflowStepExecutionUpsertBulk) AddDuration(v int) *WorkflowStepExecutionUpsertBulk {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.AddDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *WorkflowStepExecutionUpsertBulk) UpdateDuration() *WorkflowStepExecutionUpsertBulk {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.UpdateDuration()
	})
}

// SetRetryStrategy sets the "retryStrategy" field.
func (u *WorkflowStepExecutionUpsertBulk) SetRetryStrategy(v *types.RetryStrategy) *WorkflowStepExecutionUpsertBulk {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.SetRetryStrategy(v)
	})
}

// UpdateRetryStrategy sets the "retryStrategy" field to the value that was provided on create.
func (u *WorkflowStepExecutionUpsertBulk) UpdateRetryStrategy() *WorkflowStepExecutionUpsertBulk {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.UpdateRetryStrategy()
	})
}

// ClearRetryStrategy clears the value of the "retryStrategy" field.
func (u *WorkflowStepExecutionUpsertBulk) ClearRetryStrategy() *WorkflowStepExecutionUpsertBulk {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.ClearRetryStrategy()
	})
}

// SetTimeout sets the "timeout" field.
func (u *WorkflowStepExecutionUpsertBulk) SetTimeout(v int) *WorkflowStepExecutionUpsertBulk {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.SetTimeout(v)
	})
}

// AddTimeout adds v to the "timeout" field.
func (u *WorkflowStepExecutionUpsertBulk) AddTimeout(v int) *WorkflowStepExecutionUpsertBulk {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.AddTimeout(v)
	})
}

// UpdateTimeout sets the "timeout" field to the value that was provided on create.
func (u *WorkflowStepExecutionUpsertBulk) UpdateTimeout() *WorkflowStepExecutionUpsertBulk {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.UpdateTimeout()
	})
}

// SetOrder sets the "order" field.
func (u *WorkflowStepExecutionUpsertBulk) SetOrder(v int) *WorkflowStepExecutionUpsertBulk {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.SetOrder(v)
	})
}

// AddOrder adds v to the "order" field.
func (u *WorkflowStepExecutionUpsertBulk) AddOrder(v int) *WorkflowStepExecutionUpsertBulk {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.AddOrder(v)
	})
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *WorkflowStepExecutionUpsertBulk) UpdateOrder() *WorkflowStepExecutionUpsertBulk {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.UpdateOrder()
	})
}

// SetRecord sets the "record" field.
func (u *WorkflowStepExecutionUpsertBulk) SetRecord(v string) *WorkflowStepExecutionUpsertBulk {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.SetRecord(v)
	})
}

// UpdateRecord sets the "record" field to the value that was provided on create.
func (u *WorkflowStepExecutionUpsertBulk) UpdateRecord() *WorkflowStepExecutionUpsertBulk {
	return u.Update(func(s *WorkflowStepExecutionUpsert) {
		s.UpdateRecord()
	})
}

// Exec executes the query.
func (u *WorkflowStepExecutionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model: OnConflict was set for builder %d. Set it on the WorkflowStepExecutionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for WorkflowStepExecutionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WorkflowStepExecutionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
