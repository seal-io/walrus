// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus". DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/seal-io/walrus/pkg/dao/model/project"
	"github.com/seal-io/walrus/pkg/dao/model/workflow"
	"github.com/seal-io/walrus/pkg/dao/model/workflowexecution"
	"github.com/seal-io/walrus/pkg/dao/model/workflowstage"
	"github.com/seal-io/walrus/pkg/dao/types"
	"github.com/seal-io/walrus/pkg/dao/types/object"
)

// WorkflowCreate is the builder for creating a Workflow entity.
type WorkflowCreate struct {
	config
	mutation   *WorkflowMutation
	hooks      []Hook
	conflict   []sql.ConflictOption
	object     *Workflow
	fromUpsert bool
}

// SetName sets the "name" field.
func (wc *WorkflowCreate) SetName(s string) *WorkflowCreate {
	wc.mutation.SetName(s)
	return wc
}

// SetDescription sets the "description" field.
func (wc *WorkflowCreate) SetDescription(s string) *WorkflowCreate {
	wc.mutation.SetDescription(s)
	return wc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (wc *WorkflowCreate) SetNillableDescription(s *string) *WorkflowCreate {
	if s != nil {
		wc.SetDescription(*s)
	}
	return wc
}

// SetLabels sets the "labels" field.
func (wc *WorkflowCreate) SetLabels(m map[string]string) *WorkflowCreate {
	wc.mutation.SetLabels(m)
	return wc
}

// SetAnnotations sets the "annotations" field.
func (wc *WorkflowCreate) SetAnnotations(m map[string]string) *WorkflowCreate {
	wc.mutation.SetAnnotations(m)
	return wc
}

// SetCreateTime sets the "create_time" field.
func (wc *WorkflowCreate) SetCreateTime(t time.Time) *WorkflowCreate {
	wc.mutation.SetCreateTime(t)
	return wc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (wc *WorkflowCreate) SetNillableCreateTime(t *time.Time) *WorkflowCreate {
	if t != nil {
		wc.SetCreateTime(*t)
	}
	return wc
}

// SetUpdateTime sets the "update_time" field.
func (wc *WorkflowCreate) SetUpdateTime(t time.Time) *WorkflowCreate {
	wc.mutation.SetUpdateTime(t)
	return wc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (wc *WorkflowCreate) SetNillableUpdateTime(t *time.Time) *WorkflowCreate {
	if t != nil {
		wc.SetUpdateTime(*t)
	}
	return wc
}

// SetProjectID sets the "project_id" field.
func (wc *WorkflowCreate) SetProjectID(o object.ID) *WorkflowCreate {
	wc.mutation.SetProjectID(o)
	return wc
}

// SetEnvironmentID sets the "environment_id" field.
func (wc *WorkflowCreate) SetEnvironmentID(o object.ID) *WorkflowCreate {
	wc.mutation.SetEnvironmentID(o)
	return wc
}

// SetNillableEnvironmentID sets the "environment_id" field if the given value is not nil.
func (wc *WorkflowCreate) SetNillableEnvironmentID(o *object.ID) *WorkflowCreate {
	if o != nil {
		wc.SetEnvironmentID(*o)
	}
	return wc
}

// SetType sets the "type" field.
func (wc *WorkflowCreate) SetType(s string) *WorkflowCreate {
	wc.mutation.SetType(s)
	return wc
}

// SetParallelism sets the "parallelism" field.
func (wc *WorkflowCreate) SetParallelism(i int) *WorkflowCreate {
	wc.mutation.SetParallelism(i)
	return wc
}

// SetNillableParallelism sets the "parallelism" field if the given value is not nil.
func (wc *WorkflowCreate) SetNillableParallelism(i *int) *WorkflowCreate {
	if i != nil {
		wc.SetParallelism(*i)
	}
	return wc
}

// SetTimeout sets the "timeout" field.
func (wc *WorkflowCreate) SetTimeout(i int) *WorkflowCreate {
	wc.mutation.SetTimeout(i)
	return wc
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (wc *WorkflowCreate) SetNillableTimeout(i *int) *WorkflowCreate {
	if i != nil {
		wc.SetTimeout(*i)
	}
	return wc
}

// SetVersion sets the "version" field.
func (wc *WorkflowCreate) SetVersion(i int) *WorkflowCreate {
	wc.mutation.SetVersion(i)
	return wc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (wc *WorkflowCreate) SetNillableVersion(i *int) *WorkflowCreate {
	if i != nil {
		wc.SetVersion(*i)
	}
	return wc
}

// SetVariables sets the "variables" field.
func (wc *WorkflowCreate) SetVariables(tv types.WorkflowVariables) *WorkflowCreate {
	wc.mutation.SetVariables(tv)
	return wc
}

// SetID sets the "id" field.
func (wc *WorkflowCreate) SetID(o object.ID) *WorkflowCreate {
	wc.mutation.SetID(o)
	return wc
}

// SetProject sets the "project" edge to the Project entity.
func (wc *WorkflowCreate) SetProject(p *Project) *WorkflowCreate {
	return wc.SetProjectID(p.ID)
}

// AddStageIDs adds the "stages" edge to the WorkflowStage entity by IDs.
func (wc *WorkflowCreate) AddStageIDs(ids ...object.ID) *WorkflowCreate {
	wc.mutation.AddStageIDs(ids...)
	return wc
}

// AddStages adds the "stages" edges to the WorkflowStage entity.
func (wc *WorkflowCreate) AddStages(w ...*WorkflowStage) *WorkflowCreate {
	ids := make([]object.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wc.AddStageIDs(ids...)
}

// AddExecutionIDs adds the "executions" edge to the WorkflowExecution entity by IDs.
func (wc *WorkflowCreate) AddExecutionIDs(ids ...object.ID) *WorkflowCreate {
	wc.mutation.AddExecutionIDs(ids...)
	return wc
}

// AddExecutions adds the "executions" edges to the WorkflowExecution entity.
func (wc *WorkflowCreate) AddExecutions(w ...*WorkflowExecution) *WorkflowCreate {
	ids := make([]object.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wc.AddExecutionIDs(ids...)
}

// Mutation returns the WorkflowMutation object of the builder.
func (wc *WorkflowCreate) Mutation() *WorkflowMutation {
	return wc.mutation
}

// Save creates the Workflow in the database.
func (wc *WorkflowCreate) Save(ctx context.Context) (*Workflow, error) {
	if err := wc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, wc.sqlSave, wc.mutation, wc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wc *WorkflowCreate) SaveX(ctx context.Context) *Workflow {
	v, err := wc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wc *WorkflowCreate) Exec(ctx context.Context) error {
	_, err := wc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wc *WorkflowCreate) ExecX(ctx context.Context) {
	if err := wc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wc *WorkflowCreate) defaults() error {
	if _, ok := wc.mutation.Labels(); !ok {
		v := workflow.DefaultLabels
		wc.mutation.SetLabels(v)
	}
	if _, ok := wc.mutation.Annotations(); !ok {
		v := workflow.DefaultAnnotations
		wc.mutation.SetAnnotations(v)
	}
	if _, ok := wc.mutation.CreateTime(); !ok {
		if workflow.DefaultCreateTime == nil {
			return fmt.Errorf("model: uninitialized workflow.DefaultCreateTime (forgotten import model/runtime?)")
		}
		v := workflow.DefaultCreateTime()
		wc.mutation.SetCreateTime(v)
	}
	if _, ok := wc.mutation.UpdateTime(); !ok {
		if workflow.DefaultUpdateTime == nil {
			return fmt.Errorf("model: uninitialized workflow.DefaultUpdateTime (forgotten import model/runtime?)")
		}
		v := workflow.DefaultUpdateTime()
		wc.mutation.SetUpdateTime(v)
	}
	if _, ok := wc.mutation.Parallelism(); !ok {
		v := workflow.DefaultParallelism
		wc.mutation.SetParallelism(v)
	}
	if _, ok := wc.mutation.Timeout(); !ok {
		v := workflow.DefaultTimeout
		wc.mutation.SetTimeout(v)
	}
	if _, ok := wc.mutation.Version(); !ok {
		v := workflow.DefaultVersion
		wc.mutation.SetVersion(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (wc *WorkflowCreate) check() error {
	if _, ok := wc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`model: missing required field "Workflow.name"`)}
	}
	if v, ok := wc.mutation.Name(); ok {
		if err := workflow.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`model: validator failed for field "Workflow.name": %w`, err)}
		}
	}
	if _, ok := wc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`model: missing required field "Workflow.create_time"`)}
	}
	if _, ok := wc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`model: missing required field "Workflow.update_time"`)}
	}
	if _, ok := wc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project_id", err: errors.New(`model: missing required field "Workflow.project_id"`)}
	}
	if v, ok := wc.mutation.ProjectID(); ok {
		if err := workflow.ProjectIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "project_id", err: fmt.Errorf(`model: validator failed for field "Workflow.project_id": %w`, err)}
		}
	}
	if _, ok := wc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`model: missing required field "Workflow.type"`)}
	}
	if v, ok := wc.mutation.GetType(); ok {
		if err := workflow.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`model: validator failed for field "Workflow.type": %w`, err)}
		}
	}
	if _, ok := wc.mutation.Parallelism(); !ok {
		return &ValidationError{Name: "parallelism", err: errors.New(`model: missing required field "Workflow.parallelism"`)}
	}
	if v, ok := wc.mutation.Parallelism(); ok {
		if err := workflow.ParallelismValidator(v); err != nil {
			return &ValidationError{Name: "parallelism", err: fmt.Errorf(`model: validator failed for field "Workflow.parallelism": %w`, err)}
		}
	}
	if _, ok := wc.mutation.Timeout(); !ok {
		return &ValidationError{Name: "timeout", err: errors.New(`model: missing required field "Workflow.timeout"`)}
	}
	if v, ok := wc.mutation.Timeout(); ok {
		if err := workflow.TimeoutValidator(v); err != nil {
			return &ValidationError{Name: "timeout", err: fmt.Errorf(`model: validator failed for field "Workflow.timeout": %w`, err)}
		}
	}
	if _, ok := wc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`model: missing required field "Workflow.version"`)}
	}
	if v, ok := wc.mutation.Version(); ok {
		if err := workflow.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`model: validator failed for field "Workflow.version": %w`, err)}
		}
	}
	if v, ok := wc.mutation.Variables(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "variables", err: fmt.Errorf(`model: validator failed for field "Workflow.variables": %w`, err)}
		}
	}
	if _, ok := wc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project", err: errors.New(`model: missing required edge "Workflow.project"`)}
	}
	return nil
}

func (wc *WorkflowCreate) sqlSave(ctx context.Context) (*Workflow, error) {
	if err := wc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*object.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	wc.mutation.id = &_node.ID
	wc.mutation.done = true
	return _node, nil
}

func (wc *WorkflowCreate) createSpec() (*Workflow, *sqlgraph.CreateSpec) {
	var (
		_node = &Workflow{config: wc.config}
		_spec = sqlgraph.NewCreateSpec(workflow.Table, sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeString))
	)
	_spec.Schema = wc.schemaConfig.Workflow
	_spec.OnConflict = wc.conflict
	if id, ok := wc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := wc.mutation.Name(); ok {
		_spec.SetField(workflow.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := wc.mutation.Description(); ok {
		_spec.SetField(workflow.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := wc.mutation.Labels(); ok {
		_spec.SetField(workflow.FieldLabels, field.TypeJSON, value)
		_node.Labels = value
	}
	if value, ok := wc.mutation.Annotations(); ok {
		_spec.SetField(workflow.FieldAnnotations, field.TypeJSON, value)
		_node.Annotations = value
	}
	if value, ok := wc.mutation.CreateTime(); ok {
		_spec.SetField(workflow.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = &value
	}
	if value, ok := wc.mutation.UpdateTime(); ok {
		_spec.SetField(workflow.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = &value
	}
	if value, ok := wc.mutation.EnvironmentID(); ok {
		_spec.SetField(workflow.FieldEnvironmentID, field.TypeString, value)
		_node.EnvironmentID = value
	}
	if value, ok := wc.mutation.GetType(); ok {
		_spec.SetField(workflow.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := wc.mutation.Parallelism(); ok {
		_spec.SetField(workflow.FieldParallelism, field.TypeInt, value)
		_node.Parallelism = value
	}
	if value, ok := wc.mutation.Timeout(); ok {
		_spec.SetField(workflow.FieldTimeout, field.TypeInt, value)
		_node.Timeout = value
	}
	if value, ok := wc.mutation.Version(); ok {
		_spec.SetField(workflow.FieldVersion, field.TypeInt, value)
		_node.Version = value
	}
	if value, ok := wc.mutation.Variables(); ok {
		_spec.SetField(workflow.FieldVariables, field.TypeJSON, value)
		_node.Variables = value
	}
	if nodes := wc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflow.ProjectTable,
			Columns: []string{workflow.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		edge.Schema = wc.schemaConfig.Workflow
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wc.mutation.StagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.StagesTable,
			Columns: []string{workflow.StagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowstage.FieldID, field.TypeString),
			},
		}
		edge.Schema = wc.schemaConfig.WorkflowStage
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wc.mutation.ExecutionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.ExecutionsTable,
			Columns: []string{workflow.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeString),
			},
		}
		edge.Schema = wc.schemaConfig.WorkflowExecution
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// Set is different from other Set* methods,
// it sets the value by judging the definition of each field within the entire object.
//
// For required fields, Set calls directly.
//
// For optional fields, Set calls if the value is not zero.
//
// For example:
//
//	## Required
//
//	db.SetX(obj.X)
//
//	## Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (wc *WorkflowCreate) Set(obj *Workflow) *WorkflowCreate {
	// Required.
	wc.SetName(obj.Name)
	wc.SetProjectID(obj.ProjectID)
	wc.SetType(obj.Type)
	wc.SetParallelism(obj.Parallelism)
	wc.SetTimeout(obj.Timeout)
	wc.SetVersion(obj.Version)

	// Optional.
	if obj.Description != "" {
		wc.SetDescription(obj.Description)
	}
	if !reflect.ValueOf(obj.Labels).IsZero() {
		wc.SetLabels(obj.Labels)
	}
	if !reflect.ValueOf(obj.Annotations).IsZero() {
		wc.SetAnnotations(obj.Annotations)
	}
	if obj.CreateTime != nil {
		wc.SetCreateTime(*obj.CreateTime)
	}
	if obj.UpdateTime != nil {
		wc.SetUpdateTime(*obj.UpdateTime)
	}
	if obj.EnvironmentID != "" {
		wc.SetEnvironmentID(obj.EnvironmentID)
	}
	if !reflect.ValueOf(obj.Variables).IsZero() {
		wc.SetVariables(obj.Variables)
	}

	// Record the given object.
	wc.object = obj

	return wc
}

// getClientSet returns the ClientSet for the given builder.
func (wc *WorkflowCreate) getClientSet() (mc ClientSet) {
	if _, ok := wc.config.driver.(*txDriver); ok {
		tx := &Tx{config: wc.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: wc.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after created the Workflow entity,
// which is always good for cascading create operations.
func (wc *WorkflowCreate) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *Workflow) error) (*Workflow, error) {
	obj, err := wc.Save(ctx)
	if err != nil {
		return nil, err
	}

	if len(cbs) == 0 {
		return obj, err
	}

	mc := wc.getClientSet()
	if wc.fromUpsert {
		q := mc.Workflows().Query().
			Where(
				workflow.ProjectID(obj.ProjectID),
				workflow.Name(obj.Name),
			)
		obj.ID, err = q.OnlyID(ctx)
		if err != nil {
			return nil, fmt.Errorf("model: failed to query id of Workflow entity: %w", err)
		}
	}

	if x := wc.object; x != nil {
		if _, set := wc.mutation.Field(workflow.FieldName); set {
			obj.Name = x.Name
		}
		if _, set := wc.mutation.Field(workflow.FieldDescription); set {
			obj.Description = x.Description
		}
		if _, set := wc.mutation.Field(workflow.FieldProjectID); set {
			obj.ProjectID = x.ProjectID
		}
		if _, set := wc.mutation.Field(workflow.FieldEnvironmentID); set {
			obj.EnvironmentID = x.EnvironmentID
		}
		if _, set := wc.mutation.Field(workflow.FieldType); set {
			obj.Type = x.Type
		}
		if _, set := wc.mutation.Field(workflow.FieldVariables); set {
			obj.Variables = x.Variables
		}
		obj.Edges = x.Edges
	}

	for i := range cbs {
		if err = cbs[i](ctx, mc, obj); err != nil {
			return nil, err
		}
	}

	return obj, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (wc *WorkflowCreate) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *Workflow) error) *Workflow {
	obj, err := wc.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return obj
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (wc *WorkflowCreate) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *Workflow) error) error {
	_, err := wc.SaveE(ctx, cbs...)
	return err
}

// ExecEX is like ExecE, but panics if an error occurs.
func (wc *WorkflowCreate) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *Workflow) error) {
	if err := wc.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// Set leverages the WorkflowCreate Set method,
// it sets the value by judging the definition of each field within the entire item of the given list.
//
// For required fields, Set calls directly.
//
// For optional fields, Set calls if the value is not zero.
//
// For example:
//
//	## Required
//
//	db.SetX(obj.X)
//
//	## Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (wcb *WorkflowCreateBulk) Set(objs ...*Workflow) *WorkflowCreateBulk {
	if len(objs) != 0 {
		client := NewWorkflowClient(wcb.config)

		wcb.builders = make([]*WorkflowCreate, len(objs))
		for i := range objs {
			wcb.builders[i] = client.Create().Set(objs[i])
		}

		// Record the given objects.
		wcb.objects = objs
	}

	return wcb
}

// getClientSet returns the ClientSet for the given builder.
func (wcb *WorkflowCreateBulk) getClientSet() (mc ClientSet) {
	if _, ok := wcb.config.driver.(*txDriver); ok {
		tx := &Tx{config: wcb.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: wcb.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after created the Workflow entities,
// which is always good for cascading create operations.
func (wcb *WorkflowCreateBulk) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *Workflow) error) ([]*Workflow, error) {
	objs, err := wcb.Save(ctx)
	if err != nil {
		return nil, err
	}

	if len(cbs) == 0 {
		return objs, err
	}

	mc := wcb.getClientSet()
	if wcb.fromUpsert {
		for i := range objs {
			obj := objs[i]
			q := mc.Workflows().Query().
				Where(
					workflow.ProjectID(obj.ProjectID),
					workflow.Name(obj.Name),
				)
			objs[i].ID, err = q.OnlyID(ctx)
			if err != nil {
				return nil, fmt.Errorf("model: failed to query id of Workflow entity: %w", err)
			}
		}
	}

	if x := wcb.objects; x != nil {
		for i := range x {
			if _, set := wcb.builders[i].mutation.Field(workflow.FieldName); set {
				objs[i].Name = x[i].Name
			}
			if _, set := wcb.builders[i].mutation.Field(workflow.FieldDescription); set {
				objs[i].Description = x[i].Description
			}
			if _, set := wcb.builders[i].mutation.Field(workflow.FieldProjectID); set {
				objs[i].ProjectID = x[i].ProjectID
			}
			if _, set := wcb.builders[i].mutation.Field(workflow.FieldEnvironmentID); set {
				objs[i].EnvironmentID = x[i].EnvironmentID
			}
			if _, set := wcb.builders[i].mutation.Field(workflow.FieldType); set {
				objs[i].Type = x[i].Type
			}
			if _, set := wcb.builders[i].mutation.Field(workflow.FieldVariables); set {
				objs[i].Variables = x[i].Variables
			}
			objs[i].Edges = x[i].Edges
		}
	}

	for i := range objs {
		for j := range cbs {
			if err = cbs[j](ctx, mc, objs[i]); err != nil {
				return nil, err
			}
		}
	}

	return objs, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (wcb *WorkflowCreateBulk) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *Workflow) error) []*Workflow {
	objs, err := wcb.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return objs
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (wcb *WorkflowCreateBulk) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *Workflow) error) error {
	_, err := wcb.SaveE(ctx, cbs...)
	return err
}

// ExecEX is like ExecE, but panics if an error occurs.
func (wcb *WorkflowCreateBulk) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *Workflow) error) {
	if err := wcb.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (u *WorkflowUpsertOne) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *Workflow) error) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for WorkflowUpsertOne.OnConflict")
	}
	u.create.fromUpsert = true
	return u.create.ExecE(ctx, cbs...)
}

// ExecEX is like ExecE, but panics if an error occurs.
func (u *WorkflowUpsertOne) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *Workflow) error) {
	if err := u.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (u *WorkflowUpsertBulk) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *Workflow) error) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model: OnConflict was set for builder %d. Set it on the WorkflowUpsertBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for WorkflowUpsertBulk.OnConflict")
	}
	u.create.fromUpsert = true
	return u.create.ExecE(ctx, cbs...)
}

// ExecEX is like ExecE, but panics if an error occurs.
func (u *WorkflowUpsertBulk) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *Workflow) error) {
	if err := u.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Workflow.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WorkflowUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (wc *WorkflowCreate) OnConflict(opts ...sql.ConflictOption) *WorkflowUpsertOne {
	wc.conflict = opts
	return &WorkflowUpsertOne{
		create: wc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Workflow.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wc *WorkflowCreate) OnConflictColumns(columns ...string) *WorkflowUpsertOne {
	wc.conflict = append(wc.conflict, sql.ConflictColumns(columns...))
	return &WorkflowUpsertOne{
		create: wc,
	}
}

type (
	// WorkflowUpsertOne is the builder for "upsert"-ing
	//  one Workflow node.
	WorkflowUpsertOne struct {
		create *WorkflowCreate
	}

	// WorkflowUpsert is the "OnConflict" setter.
	WorkflowUpsert struct {
		*sql.UpdateSet
	}
)

// SetDescription sets the "description" field.
func (u *WorkflowUpsert) SetDescription(v string) *WorkflowUpsert {
	u.Set(workflow.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *WorkflowUpsert) UpdateDescription() *WorkflowUpsert {
	u.SetExcluded(workflow.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *WorkflowUpsert) ClearDescription() *WorkflowUpsert {
	u.SetNull(workflow.FieldDescription)
	return u
}

// SetLabels sets the "labels" field.
func (u *WorkflowUpsert) SetLabels(v map[string]string) *WorkflowUpsert {
	u.Set(workflow.FieldLabels, v)
	return u
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *WorkflowUpsert) UpdateLabels() *WorkflowUpsert {
	u.SetExcluded(workflow.FieldLabels)
	return u
}

// ClearLabels clears the value of the "labels" field.
func (u *WorkflowUpsert) ClearLabels() *WorkflowUpsert {
	u.SetNull(workflow.FieldLabels)
	return u
}

// SetAnnotations sets the "annotations" field.
func (u *WorkflowUpsert) SetAnnotations(v map[string]string) *WorkflowUpsert {
	u.Set(workflow.FieldAnnotations, v)
	return u
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *WorkflowUpsert) UpdateAnnotations() *WorkflowUpsert {
	u.SetExcluded(workflow.FieldAnnotations)
	return u
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *WorkflowUpsert) ClearAnnotations() *WorkflowUpsert {
	u.SetNull(workflow.FieldAnnotations)
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *WorkflowUpsert) SetUpdateTime(v time.Time) *WorkflowUpsert {
	u.Set(workflow.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *WorkflowUpsert) UpdateUpdateTime() *WorkflowUpsert {
	u.SetExcluded(workflow.FieldUpdateTime)
	return u
}

// SetParallelism sets the "parallelism" field.
func (u *WorkflowUpsert) SetParallelism(v int) *WorkflowUpsert {
	u.Set(workflow.FieldParallelism, v)
	return u
}

// UpdateParallelism sets the "parallelism" field to the value that was provided on create.
func (u *WorkflowUpsert) UpdateParallelism() *WorkflowUpsert {
	u.SetExcluded(workflow.FieldParallelism)
	return u
}

// AddParallelism adds v to the "parallelism" field.
func (u *WorkflowUpsert) AddParallelism(v int) *WorkflowUpsert {
	u.Add(workflow.FieldParallelism, v)
	return u
}

// SetTimeout sets the "timeout" field.
func (u *WorkflowUpsert) SetTimeout(v int) *WorkflowUpsert {
	u.Set(workflow.FieldTimeout, v)
	return u
}

// UpdateTimeout sets the "timeout" field to the value that was provided on create.
func (u *WorkflowUpsert) UpdateTimeout() *WorkflowUpsert {
	u.SetExcluded(workflow.FieldTimeout)
	return u
}

// AddTimeout adds v to the "timeout" field.
func (u *WorkflowUpsert) AddTimeout(v int) *WorkflowUpsert {
	u.Add(workflow.FieldTimeout, v)
	return u
}

// SetVersion sets the "version" field.
func (u *WorkflowUpsert) SetVersion(v int) *WorkflowUpsert {
	u.Set(workflow.FieldVersion, v)
	return u
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *WorkflowUpsert) UpdateVersion() *WorkflowUpsert {
	u.SetExcluded(workflow.FieldVersion)
	return u
}

// AddVersion adds v to the "version" field.
func (u *WorkflowUpsert) AddVersion(v int) *WorkflowUpsert {
	u.Add(workflow.FieldVersion, v)
	return u
}

// SetVariables sets the "variables" field.
func (u *WorkflowUpsert) SetVariables(v types.WorkflowVariables) *WorkflowUpsert {
	u.Set(workflow.FieldVariables, v)
	return u
}

// UpdateVariables sets the "variables" field to the value that was provided on create.
func (u *WorkflowUpsert) UpdateVariables() *WorkflowUpsert {
	u.SetExcluded(workflow.FieldVariables)
	return u
}

// ClearVariables clears the value of the "variables" field.
func (u *WorkflowUpsert) ClearVariables() *WorkflowUpsert {
	u.SetNull(workflow.FieldVariables)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Workflow.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(workflow.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WorkflowUpsertOne) UpdateNewValues() *WorkflowUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(workflow.FieldID)
		}
		if _, exists := u.create.mutation.Name(); exists {
			s.SetIgnore(workflow.FieldName)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(workflow.FieldCreateTime)
		}
		if _, exists := u.create.mutation.ProjectID(); exists {
			s.SetIgnore(workflow.FieldProjectID)
		}
		if _, exists := u.create.mutation.EnvironmentID(); exists {
			s.SetIgnore(workflow.FieldEnvironmentID)
		}
		if _, exists := u.create.mutation.GetType(); exists {
			s.SetIgnore(workflow.FieldType)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Workflow.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *WorkflowUpsertOne) Ignore() *WorkflowUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WorkflowUpsertOne) DoNothing() *WorkflowUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WorkflowCreate.OnConflict
// documentation for more info.
func (u *WorkflowUpsertOne) Update(set func(*WorkflowUpsert)) *WorkflowUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WorkflowUpsert{UpdateSet: update})
	}))
	return u
}

// SetDescription sets the "description" field.
func (u *WorkflowUpsertOne) SetDescription(v string) *WorkflowUpsertOne {
	return u.Update(func(s *WorkflowUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *WorkflowUpsertOne) UpdateDescription() *WorkflowUpsertOne {
	return u.Update(func(s *WorkflowUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *WorkflowUpsertOne) ClearDescription() *WorkflowUpsertOne {
	return u.Update(func(s *WorkflowUpsert) {
		s.ClearDescription()
	})
}

// SetLabels sets the "labels" field.
func (u *WorkflowUpsertOne) SetLabels(v map[string]string) *WorkflowUpsertOne {
	return u.Update(func(s *WorkflowUpsert) {
		s.SetLabels(v)
	})
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *WorkflowUpsertOne) UpdateLabels() *WorkflowUpsertOne {
	return u.Update(func(s *WorkflowUpsert) {
		s.UpdateLabels()
	})
}

// ClearLabels clears the value of the "labels" field.
func (u *WorkflowUpsertOne) ClearLabels() *WorkflowUpsertOne {
	return u.Update(func(s *WorkflowUpsert) {
		s.ClearLabels()
	})
}

// SetAnnotations sets the "annotations" field.
func (u *WorkflowUpsertOne) SetAnnotations(v map[string]string) *WorkflowUpsertOne {
	return u.Update(func(s *WorkflowUpsert) {
		s.SetAnnotations(v)
	})
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *WorkflowUpsertOne) UpdateAnnotations() *WorkflowUpsertOne {
	return u.Update(func(s *WorkflowUpsert) {
		s.UpdateAnnotations()
	})
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *WorkflowUpsertOne) ClearAnnotations() *WorkflowUpsertOne {
	return u.Update(func(s *WorkflowUpsert) {
		s.ClearAnnotations()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *WorkflowUpsertOne) SetUpdateTime(v time.Time) *WorkflowUpsertOne {
	return u.Update(func(s *WorkflowUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *WorkflowUpsertOne) UpdateUpdateTime() *WorkflowUpsertOne {
	return u.Update(func(s *WorkflowUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetParallelism sets the "parallelism" field.
func (u *WorkflowUpsertOne) SetParallelism(v int) *WorkflowUpsertOne {
	return u.Update(func(s *WorkflowUpsert) {
		s.SetParallelism(v)
	})
}

// AddParallelism adds v to the "parallelism" field.
func (u *WorkflowUpsertOne) AddParallelism(v int) *WorkflowUpsertOne {
	return u.Update(func(s *WorkflowUpsert) {
		s.AddParallelism(v)
	})
}

// UpdateParallelism sets the "parallelism" field to the value that was provided on create.
func (u *WorkflowUpsertOne) UpdateParallelism() *WorkflowUpsertOne {
	return u.Update(func(s *WorkflowUpsert) {
		s.UpdateParallelism()
	})
}

// SetTimeout sets the "timeout" field.
func (u *WorkflowUpsertOne) SetTimeout(v int) *WorkflowUpsertOne {
	return u.Update(func(s *WorkflowUpsert) {
		s.SetTimeout(v)
	})
}

// AddTimeout adds v to the "timeout" field.
func (u *WorkflowUpsertOne) AddTimeout(v int) *WorkflowUpsertOne {
	return u.Update(func(s *WorkflowUpsert) {
		s.AddTimeout(v)
	})
}

// UpdateTimeout sets the "timeout" field to the value that was provided on create.
func (u *WorkflowUpsertOne) UpdateTimeout() *WorkflowUpsertOne {
	return u.Update(func(s *WorkflowUpsert) {
		s.UpdateTimeout()
	})
}

// SetVersion sets the "version" field.
func (u *WorkflowUpsertOne) SetVersion(v int) *WorkflowUpsertOne {
	return u.Update(func(s *WorkflowUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *WorkflowUpsertOne) AddVersion(v int) *WorkflowUpsertOne {
	return u.Update(func(s *WorkflowUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *WorkflowUpsertOne) UpdateVersion() *WorkflowUpsertOne {
	return u.Update(func(s *WorkflowUpsert) {
		s.UpdateVersion()
	})
}

// SetVariables sets the "variables" field.
func (u *WorkflowUpsertOne) SetVariables(v types.WorkflowVariables) *WorkflowUpsertOne {
	return u.Update(func(s *WorkflowUpsert) {
		s.SetVariables(v)
	})
}

// UpdateVariables sets the "variables" field to the value that was provided on create.
func (u *WorkflowUpsertOne) UpdateVariables() *WorkflowUpsertOne {
	return u.Update(func(s *WorkflowUpsert) {
		s.UpdateVariables()
	})
}

// ClearVariables clears the value of the "variables" field.
func (u *WorkflowUpsertOne) ClearVariables() *WorkflowUpsertOne {
	return u.Update(func(s *WorkflowUpsert) {
		s.ClearVariables()
	})
}

// Exec executes the query.
func (u *WorkflowUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for WorkflowCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WorkflowUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *WorkflowUpsertOne) ID(ctx context.Context) (id object.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("model: WorkflowUpsertOne.ID is not supported by MySQL driver. Use WorkflowUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *WorkflowUpsertOne) IDX(ctx context.Context) object.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// WorkflowCreateBulk is the builder for creating many Workflow entities in bulk.
type WorkflowCreateBulk struct {
	config
	err        error
	builders   []*WorkflowCreate
	conflict   []sql.ConflictOption
	objects    []*Workflow
	fromUpsert bool
}

// Save creates the Workflow entities in the database.
func (wcb *WorkflowCreateBulk) Save(ctx context.Context) ([]*Workflow, error) {
	if wcb.err != nil {
		return nil, wcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wcb.builders))
	nodes := make([]*Workflow, len(wcb.builders))
	mutators := make([]Mutator, len(wcb.builders))
	for i := range wcb.builders {
		func(i int, root context.Context) {
			builder := wcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkflowMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = wcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wcb *WorkflowCreateBulk) SaveX(ctx context.Context) []*Workflow {
	v, err := wcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wcb *WorkflowCreateBulk) Exec(ctx context.Context) error {
	_, err := wcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcb *WorkflowCreateBulk) ExecX(ctx context.Context) {
	if err := wcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Workflow.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WorkflowUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (wcb *WorkflowCreateBulk) OnConflict(opts ...sql.ConflictOption) *WorkflowUpsertBulk {
	wcb.conflict = opts
	return &WorkflowUpsertBulk{
		create: wcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Workflow.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wcb *WorkflowCreateBulk) OnConflictColumns(columns ...string) *WorkflowUpsertBulk {
	wcb.conflict = append(wcb.conflict, sql.ConflictColumns(columns...))
	return &WorkflowUpsertBulk{
		create: wcb,
	}
}

// WorkflowUpsertBulk is the builder for "upsert"-ing
// a bulk of Workflow nodes.
type WorkflowUpsertBulk struct {
	create *WorkflowCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Workflow.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(workflow.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WorkflowUpsertBulk) UpdateNewValues() *WorkflowUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(workflow.FieldID)
			}
			if _, exists := b.mutation.Name(); exists {
				s.SetIgnore(workflow.FieldName)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(workflow.FieldCreateTime)
			}
			if _, exists := b.mutation.ProjectID(); exists {
				s.SetIgnore(workflow.FieldProjectID)
			}
			if _, exists := b.mutation.EnvironmentID(); exists {
				s.SetIgnore(workflow.FieldEnvironmentID)
			}
			if _, exists := b.mutation.GetType(); exists {
				s.SetIgnore(workflow.FieldType)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Workflow.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *WorkflowUpsertBulk) Ignore() *WorkflowUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WorkflowUpsertBulk) DoNothing() *WorkflowUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WorkflowCreateBulk.OnConflict
// documentation for more info.
func (u *WorkflowUpsertBulk) Update(set func(*WorkflowUpsert)) *WorkflowUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WorkflowUpsert{UpdateSet: update})
	}))
	return u
}

// SetDescription sets the "description" field.
func (u *WorkflowUpsertBulk) SetDescription(v string) *WorkflowUpsertBulk {
	return u.Update(func(s *WorkflowUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *WorkflowUpsertBulk) UpdateDescription() *WorkflowUpsertBulk {
	return u.Update(func(s *WorkflowUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *WorkflowUpsertBulk) ClearDescription() *WorkflowUpsertBulk {
	return u.Update(func(s *WorkflowUpsert) {
		s.ClearDescription()
	})
}

// SetLabels sets the "labels" field.
func (u *WorkflowUpsertBulk) SetLabels(v map[string]string) *WorkflowUpsertBulk {
	return u.Update(func(s *WorkflowUpsert) {
		s.SetLabels(v)
	})
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *WorkflowUpsertBulk) UpdateLabels() *WorkflowUpsertBulk {
	return u.Update(func(s *WorkflowUpsert) {
		s.UpdateLabels()
	})
}

// ClearLabels clears the value of the "labels" field.
func (u *WorkflowUpsertBulk) ClearLabels() *WorkflowUpsertBulk {
	return u.Update(func(s *WorkflowUpsert) {
		s.ClearLabels()
	})
}

// SetAnnotations sets the "annotations" field.
func (u *WorkflowUpsertBulk) SetAnnotations(v map[string]string) *WorkflowUpsertBulk {
	return u.Update(func(s *WorkflowUpsert) {
		s.SetAnnotations(v)
	})
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *WorkflowUpsertBulk) UpdateAnnotations() *WorkflowUpsertBulk {
	return u.Update(func(s *WorkflowUpsert) {
		s.UpdateAnnotations()
	})
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *WorkflowUpsertBulk) ClearAnnotations() *WorkflowUpsertBulk {
	return u.Update(func(s *WorkflowUpsert) {
		s.ClearAnnotations()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *WorkflowUpsertBulk) SetUpdateTime(v time.Time) *WorkflowUpsertBulk {
	return u.Update(func(s *WorkflowUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *WorkflowUpsertBulk) UpdateUpdateTime() *WorkflowUpsertBulk {
	return u.Update(func(s *WorkflowUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetParallelism sets the "parallelism" field.
func (u *WorkflowUpsertBulk) SetParallelism(v int) *WorkflowUpsertBulk {
	return u.Update(func(s *WorkflowUpsert) {
		s.SetParallelism(v)
	})
}

// AddParallelism adds v to the "parallelism" field.
func (u *WorkflowUpsertBulk) AddParallelism(v int) *WorkflowUpsertBulk {
	return u.Update(func(s *WorkflowUpsert) {
		s.AddParallelism(v)
	})
}

// UpdateParallelism sets the "parallelism" field to the value that was provided on create.
func (u *WorkflowUpsertBulk) UpdateParallelism() *WorkflowUpsertBulk {
	return u.Update(func(s *WorkflowUpsert) {
		s.UpdateParallelism()
	})
}

// SetTimeout sets the "timeout" field.
func (u *WorkflowUpsertBulk) SetTimeout(v int) *WorkflowUpsertBulk {
	return u.Update(func(s *WorkflowUpsert) {
		s.SetTimeout(v)
	})
}

// AddTimeout adds v to the "timeout" field.
func (u *WorkflowUpsertBulk) AddTimeout(v int) *WorkflowUpsertBulk {
	return u.Update(func(s *WorkflowUpsert) {
		s.AddTimeout(v)
	})
}

// UpdateTimeout sets the "timeout" field to the value that was provided on create.
func (u *WorkflowUpsertBulk) UpdateTimeout() *WorkflowUpsertBulk {
	return u.Update(func(s *WorkflowUpsert) {
		s.UpdateTimeout()
	})
}

// SetVersion sets the "version" field.
func (u *WorkflowUpsertBulk) SetVersion(v int) *WorkflowUpsertBulk {
	return u.Update(func(s *WorkflowUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *WorkflowUpsertBulk) AddVersion(v int) *WorkflowUpsertBulk {
	return u.Update(func(s *WorkflowUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *WorkflowUpsertBulk) UpdateVersion() *WorkflowUpsertBulk {
	return u.Update(func(s *WorkflowUpsert) {
		s.UpdateVersion()
	})
}

// SetVariables sets the "variables" field.
func (u *WorkflowUpsertBulk) SetVariables(v types.WorkflowVariables) *WorkflowUpsertBulk {
	return u.Update(func(s *WorkflowUpsert) {
		s.SetVariables(v)
	})
}

// UpdateVariables sets the "variables" field to the value that was provided on create.
func (u *WorkflowUpsertBulk) UpdateVariables() *WorkflowUpsertBulk {
	return u.Update(func(s *WorkflowUpsert) {
		s.UpdateVariables()
	})
}

// ClearVariables clears the value of the "variables" field.
func (u *WorkflowUpsertBulk) ClearVariables() *WorkflowUpsertBulk {
	return u.Update(func(s *WorkflowUpsert) {
		s.ClearVariables()
	})
}

// Exec executes the query.
func (u *WorkflowUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model: OnConflict was set for builder %d. Set it on the WorkflowCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for WorkflowCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WorkflowUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
