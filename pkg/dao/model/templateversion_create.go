// SPDX-FileCopyrightText: 2023 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "ent". DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/seal-io/seal/pkg/dao/model/template"
	"github.com/seal-io/seal/pkg/dao/model/templateversion"
	"github.com/seal-io/seal/pkg/dao/types"
	"github.com/seal-io/seal/pkg/dao/types/oid"
)

// TemplateVersionCreate is the builder for creating a TemplateVersion entity.
type TemplateVersionCreate struct {
	config
	mutation *TemplateVersionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "createTime" field.
func (tvc *TemplateVersionCreate) SetCreateTime(t time.Time) *TemplateVersionCreate {
	tvc.mutation.SetCreateTime(t)
	return tvc
}

// SetNillableCreateTime sets the "createTime" field if the given value is not nil.
func (tvc *TemplateVersionCreate) SetNillableCreateTime(t *time.Time) *TemplateVersionCreate {
	if t != nil {
		tvc.SetCreateTime(*t)
	}
	return tvc
}

// SetUpdateTime sets the "updateTime" field.
func (tvc *TemplateVersionCreate) SetUpdateTime(t time.Time) *TemplateVersionCreate {
	tvc.mutation.SetUpdateTime(t)
	return tvc
}

// SetNillableUpdateTime sets the "updateTime" field if the given value is not nil.
func (tvc *TemplateVersionCreate) SetNillableUpdateTime(t *time.Time) *TemplateVersionCreate {
	if t != nil {
		tvc.SetUpdateTime(*t)
	}
	return tvc
}

// SetTemplateID sets the "templateID" field.
func (tvc *TemplateVersionCreate) SetTemplateID(s string) *TemplateVersionCreate {
	tvc.mutation.SetTemplateID(s)
	return tvc
}

// SetVersion sets the "version" field.
func (tvc *TemplateVersionCreate) SetVersion(s string) *TemplateVersionCreate {
	tvc.mutation.SetVersion(s)
	return tvc
}

// SetSource sets the "source" field.
func (tvc *TemplateVersionCreate) SetSource(s string) *TemplateVersionCreate {
	tvc.mutation.SetSource(s)
	return tvc
}

// SetSchema sets the "schema" field.
func (tvc *TemplateVersionCreate) SetSchema(ts *types.TemplateSchema) *TemplateVersionCreate {
	tvc.mutation.SetSchema(ts)
	return tvc
}

// SetID sets the "id" field.
func (tvc *TemplateVersionCreate) SetID(o oid.ID) *TemplateVersionCreate {
	tvc.mutation.SetID(o)
	return tvc
}

// SetTemplate sets the "template" edge to the Template entity.
func (tvc *TemplateVersionCreate) SetTemplate(t *Template) *TemplateVersionCreate {
	return tvc.SetTemplateID(t.ID)
}

// Mutation returns the TemplateVersionMutation object of the builder.
func (tvc *TemplateVersionCreate) Mutation() *TemplateVersionMutation {
	return tvc.mutation
}

// Save creates the TemplateVersion in the database.
func (tvc *TemplateVersionCreate) Save(ctx context.Context) (*TemplateVersion, error) {
	if err := tvc.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*TemplateVersion, TemplateVersionMutation](ctx, tvc.sqlSave, tvc.mutation, tvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tvc *TemplateVersionCreate) SaveX(ctx context.Context) *TemplateVersion {
	v, err := tvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tvc *TemplateVersionCreate) Exec(ctx context.Context) error {
	_, err := tvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tvc *TemplateVersionCreate) ExecX(ctx context.Context) {
	if err := tvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tvc *TemplateVersionCreate) defaults() error {
	if _, ok := tvc.mutation.CreateTime(); !ok {
		if templateversion.DefaultCreateTime == nil {
			return fmt.Errorf("model: uninitialized templateversion.DefaultCreateTime (forgotten import model/runtime?)")
		}
		v := templateversion.DefaultCreateTime()
		tvc.mutation.SetCreateTime(v)
	}
	if _, ok := tvc.mutation.UpdateTime(); !ok {
		if templateversion.DefaultUpdateTime == nil {
			return fmt.Errorf("model: uninitialized templateversion.DefaultUpdateTime (forgotten import model/runtime?)")
		}
		v := templateversion.DefaultUpdateTime()
		tvc.mutation.SetUpdateTime(v)
	}
	if _, ok := tvc.mutation.Schema(); !ok {
		v := templateversion.DefaultSchema
		tvc.mutation.SetSchema(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tvc *TemplateVersionCreate) check() error {
	if _, ok := tvc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "createTime", err: errors.New(`model: missing required field "TemplateVersion.createTime"`)}
	}
	if _, ok := tvc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "updateTime", err: errors.New(`model: missing required field "TemplateVersion.updateTime"`)}
	}
	if _, ok := tvc.mutation.TemplateID(); !ok {
		return &ValidationError{Name: "templateID", err: errors.New(`model: missing required field "TemplateVersion.templateID"`)}
	}
	if v, ok := tvc.mutation.TemplateID(); ok {
		if err := templateversion.TemplateIDValidator(v); err != nil {
			return &ValidationError{Name: "templateID", err: fmt.Errorf(`model: validator failed for field "TemplateVersion.templateID": %w`, err)}
		}
	}
	if _, ok := tvc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`model: missing required field "TemplateVersion.version"`)}
	}
	if v, ok := tvc.mutation.Version(); ok {
		if err := templateversion.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`model: validator failed for field "TemplateVersion.version": %w`, err)}
		}
	}
	if _, ok := tvc.mutation.Source(); !ok {
		return &ValidationError{Name: "source", err: errors.New(`model: missing required field "TemplateVersion.source"`)}
	}
	if v, ok := tvc.mutation.Source(); ok {
		if err := templateversion.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`model: validator failed for field "TemplateVersion.source": %w`, err)}
		}
	}
	if _, ok := tvc.mutation.Schema(); !ok {
		return &ValidationError{Name: "schema", err: errors.New(`model: missing required field "TemplateVersion.schema"`)}
	}
	if _, ok := tvc.mutation.TemplateID(); !ok {
		return &ValidationError{Name: "template", err: errors.New(`model: missing required edge "TemplateVersion.template"`)}
	}
	return nil
}

func (tvc *TemplateVersionCreate) sqlSave(ctx context.Context) (*TemplateVersion, error) {
	if err := tvc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*oid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tvc.mutation.id = &_node.ID
	tvc.mutation.done = true
	return _node, nil
}

func (tvc *TemplateVersionCreate) createSpec() (*TemplateVersion, *sqlgraph.CreateSpec) {
	var (
		_node = &TemplateVersion{config: tvc.config}
		_spec = sqlgraph.NewCreateSpec(templateversion.Table, sqlgraph.NewFieldSpec(templateversion.FieldID, field.TypeString))
	)
	_spec.Schema = tvc.schemaConfig.TemplateVersion
	_spec.OnConflict = tvc.conflict
	if id, ok := tvc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tvc.mutation.CreateTime(); ok {
		_spec.SetField(templateversion.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = &value
	}
	if value, ok := tvc.mutation.UpdateTime(); ok {
		_spec.SetField(templateversion.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = &value
	}
	if value, ok := tvc.mutation.Version(); ok {
		_spec.SetField(templateversion.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := tvc.mutation.Source(); ok {
		_spec.SetField(templateversion.FieldSource, field.TypeString, value)
		_node.Source = value
	}
	if value, ok := tvc.mutation.Schema(); ok {
		_spec.SetField(templateversion.FieldSchema, field.TypeJSON, value)
		_node.Schema = value
	}
	if nodes := tvc.mutation.TemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   templateversion.TemplateTable,
			Columns: []string{templateversion.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeString),
			},
		}
		edge.Schema = tvc.schemaConfig.TemplateVersion
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TemplateID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TemplateVersion.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TemplateVersionUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (tvc *TemplateVersionCreate) OnConflict(opts ...sql.ConflictOption) *TemplateVersionUpsertOne {
	tvc.conflict = opts
	return &TemplateVersionUpsertOne{
		create: tvc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TemplateVersion.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tvc *TemplateVersionCreate) OnConflictColumns(columns ...string) *TemplateVersionUpsertOne {
	tvc.conflict = append(tvc.conflict, sql.ConflictColumns(columns...))
	return &TemplateVersionUpsertOne{
		create: tvc,
	}
}

type (
	// TemplateVersionUpsertOne is the builder for "upsert"-ing
	//  one TemplateVersion node.
	TemplateVersionUpsertOne struct {
		create *TemplateVersionCreate
	}

	// TemplateVersionUpsert is the "OnConflict" setter.
	TemplateVersionUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "updateTime" field.
func (u *TemplateVersionUpsert) SetUpdateTime(v time.Time) *TemplateVersionUpsert {
	u.Set(templateversion.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "updateTime" field to the value that was provided on create.
func (u *TemplateVersionUpsert) UpdateUpdateTime() *TemplateVersionUpsert {
	u.SetExcluded(templateversion.FieldUpdateTime)
	return u
}

// SetSchema sets the "schema" field.
func (u *TemplateVersionUpsert) SetSchema(v *types.TemplateSchema) *TemplateVersionUpsert {
	u.Set(templateversion.FieldSchema, v)
	return u
}

// UpdateSchema sets the "schema" field to the value that was provided on create.
func (u *TemplateVersionUpsert) UpdateSchema() *TemplateVersionUpsert {
	u.SetExcluded(templateversion.FieldSchema)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TemplateVersion.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(templateversion.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TemplateVersionUpsertOne) UpdateNewValues() *TemplateVersionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(templateversion.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(templateversion.FieldCreateTime)
		}
		if _, exists := u.create.mutation.TemplateID(); exists {
			s.SetIgnore(templateversion.FieldTemplateID)
		}
		if _, exists := u.create.mutation.Version(); exists {
			s.SetIgnore(templateversion.FieldVersion)
		}
		if _, exists := u.create.mutation.Source(); exists {
			s.SetIgnore(templateversion.FieldSource)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TemplateVersion.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TemplateVersionUpsertOne) Ignore() *TemplateVersionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TemplateVersionUpsertOne) DoNothing() *TemplateVersionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TemplateVersionCreate.OnConflict
// documentation for more info.
func (u *TemplateVersionUpsertOne) Update(set func(*TemplateVersionUpsert)) *TemplateVersionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TemplateVersionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "updateTime" field.
func (u *TemplateVersionUpsertOne) SetUpdateTime(v time.Time) *TemplateVersionUpsertOne {
	return u.Update(func(s *TemplateVersionUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "updateTime" field to the value that was provided on create.
func (u *TemplateVersionUpsertOne) UpdateUpdateTime() *TemplateVersionUpsertOne {
	return u.Update(func(s *TemplateVersionUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetSchema sets the "schema" field.
func (u *TemplateVersionUpsertOne) SetSchema(v *types.TemplateSchema) *TemplateVersionUpsertOne {
	return u.Update(func(s *TemplateVersionUpsert) {
		s.SetSchema(v)
	})
}

// UpdateSchema sets the "schema" field to the value that was provided on create.
func (u *TemplateVersionUpsertOne) UpdateSchema() *TemplateVersionUpsertOne {
	return u.Update(func(s *TemplateVersionUpsert) {
		s.UpdateSchema()
	})
}

// Exec executes the query.
func (u *TemplateVersionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for TemplateVersionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TemplateVersionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TemplateVersionUpsertOne) ID(ctx context.Context) (id oid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("model: TemplateVersionUpsertOne.ID is not supported by MySQL driver. Use TemplateVersionUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TemplateVersionUpsertOne) IDX(ctx context.Context) oid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TemplateVersionCreateBulk is the builder for creating many TemplateVersion entities in bulk.
type TemplateVersionCreateBulk struct {
	config
	builders []*TemplateVersionCreate
	conflict []sql.ConflictOption
}

// Save creates the TemplateVersion entities in the database.
func (tvcb *TemplateVersionCreateBulk) Save(ctx context.Context) ([]*TemplateVersion, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tvcb.builders))
	nodes := make([]*TemplateVersion, len(tvcb.builders))
	mutators := make([]Mutator, len(tvcb.builders))
	for i := range tvcb.builders {
		func(i int, root context.Context) {
			builder := tvcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TemplateVersionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tvcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tvcb *TemplateVersionCreateBulk) SaveX(ctx context.Context) []*TemplateVersion {
	v, err := tvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tvcb *TemplateVersionCreateBulk) Exec(ctx context.Context) error {
	_, err := tvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tvcb *TemplateVersionCreateBulk) ExecX(ctx context.Context) {
	if err := tvcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TemplateVersion.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TemplateVersionUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (tvcb *TemplateVersionCreateBulk) OnConflict(opts ...sql.ConflictOption) *TemplateVersionUpsertBulk {
	tvcb.conflict = opts
	return &TemplateVersionUpsertBulk{
		create: tvcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TemplateVersion.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tvcb *TemplateVersionCreateBulk) OnConflictColumns(columns ...string) *TemplateVersionUpsertBulk {
	tvcb.conflict = append(tvcb.conflict, sql.ConflictColumns(columns...))
	return &TemplateVersionUpsertBulk{
		create: tvcb,
	}
}

// TemplateVersionUpsertBulk is the builder for "upsert"-ing
// a bulk of TemplateVersion nodes.
type TemplateVersionUpsertBulk struct {
	create *TemplateVersionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TemplateVersion.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(templateversion.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TemplateVersionUpsertBulk) UpdateNewValues() *TemplateVersionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(templateversion.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(templateversion.FieldCreateTime)
			}
			if _, exists := b.mutation.TemplateID(); exists {
				s.SetIgnore(templateversion.FieldTemplateID)
			}
			if _, exists := b.mutation.Version(); exists {
				s.SetIgnore(templateversion.FieldVersion)
			}
			if _, exists := b.mutation.Source(); exists {
				s.SetIgnore(templateversion.FieldSource)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TemplateVersion.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TemplateVersionUpsertBulk) Ignore() *TemplateVersionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TemplateVersionUpsertBulk) DoNothing() *TemplateVersionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TemplateVersionCreateBulk.OnConflict
// documentation for more info.
func (u *TemplateVersionUpsertBulk) Update(set func(*TemplateVersionUpsert)) *TemplateVersionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TemplateVersionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "updateTime" field.
func (u *TemplateVersionUpsertBulk) SetUpdateTime(v time.Time) *TemplateVersionUpsertBulk {
	return u.Update(func(s *TemplateVersionUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "updateTime" field to the value that was provided on create.
func (u *TemplateVersionUpsertBulk) UpdateUpdateTime() *TemplateVersionUpsertBulk {
	return u.Update(func(s *TemplateVersionUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetSchema sets the "schema" field.
func (u *TemplateVersionUpsertBulk) SetSchema(v *types.TemplateSchema) *TemplateVersionUpsertBulk {
	return u.Update(func(s *TemplateVersionUpsert) {
		s.SetSchema(v)
	})
}

// UpdateSchema sets the "schema" field to the value that was provided on create.
func (u *TemplateVersionUpsertBulk) UpdateSchema() *TemplateVersionUpsertBulk {
	return u.Update(func(s *TemplateVersionUpsert) {
		s.UpdateSchema()
	})
}

// Exec executes the query.
func (u *TemplateVersionUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model: OnConflict was set for builder %d. Set it on the TemplateVersionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for TemplateVersionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TemplateVersionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
