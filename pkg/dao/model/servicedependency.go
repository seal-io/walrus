// SPDX-FileCopyrightText: 2023 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "ent". DO NOT EDIT.

package model

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"

	"github.com/seal-io/seal/pkg/dao/model/service"
	"github.com/seal-io/seal/pkg/dao/model/servicedependency"
	"github.com/seal-io/seal/pkg/dao/types/oid"
	"github.com/seal-io/seal/utils/json"
)

// ServiceDependency is the model entity for the ServiceDependency schema.
type ServiceDependency struct {
	config `json:"-"`
	// ID of the ent.
	ID oid.ID `json:"id,omitempty" sql:"id"`
	// CreateTime holds the value of the "createTime" field.
	CreateTime *time.Time `json:"createTime,omitempty" sql:"createTime"`
	// ID of the service.
	ServiceID oid.ID `json:"serviceID,omitempty" sql:"serviceID"`
	// ID of the service that dependent by the service specified by serviceID.
	DependentID oid.ID `json:"dependentID,omitempty" sql:"dependentID"`
	// ID list (from root to leaf) of the service that dependent by the service specified by serviceID.
	Path []oid.ID `json:"path,omitempty" sql:"path"`
	// Type of the service dependency.
	Type string `json:"type,omitempty" sql:"type"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ServiceDependencyQuery when eager-loading is set.
	Edges        ServiceDependencyEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ServiceDependencyEdges holds the relations/edges for other nodes in the graph.
type ServiceDependencyEdges struct {
	// Service to which the dependency belongs.
	Service *Service `json:"service,omitempty" sql:"service"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ServiceOrErr returns the Service value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServiceDependencyEdges) ServiceOrErr() (*Service, error) {
	if e.loadedTypes[0] {
		if e.Service == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: service.Label}
		}
		return e.Service, nil
	}
	return nil, &NotLoadedError{edge: "service"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ServiceDependency) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case servicedependency.FieldPath:
			values[i] = new([]byte)
		case servicedependency.FieldID, servicedependency.FieldServiceID, servicedependency.FieldDependentID:
			values[i] = new(oid.ID)
		case servicedependency.FieldType:
			values[i] = new(sql.NullString)
		case servicedependency.FieldCreateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ServiceDependency fields.
func (sd *ServiceDependency) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case servicedependency.FieldID:
			if value, ok := values[i].(*oid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sd.ID = *value
			}
		case servicedependency.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createTime", values[i])
			} else if value.Valid {
				sd.CreateTime = new(time.Time)
				*sd.CreateTime = value.Time
			}
		case servicedependency.FieldServiceID:
			if value, ok := values[i].(*oid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field serviceID", values[i])
			} else if value != nil {
				sd.ServiceID = *value
			}
		case servicedependency.FieldDependentID:
			if value, ok := values[i].(*oid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field dependentID", values[i])
			} else if value != nil {
				sd.DependentID = *value
			}
		case servicedependency.FieldPath:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sd.Path); err != nil {
					return fmt.Errorf("unmarshal field path: %w", err)
				}
			}
		case servicedependency.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				sd.Type = value.String
			}
		default:
			sd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ServiceDependency.
// This includes values selected through modifiers, order, etc.
func (sd *ServiceDependency) Value(name string) (ent.Value, error) {
	return sd.selectValues.Get(name)
}

// QueryService queries the "service" edge of the ServiceDependency entity.
func (sd *ServiceDependency) QueryService() *ServiceQuery {
	return NewServiceDependencyClient(sd.config).QueryService(sd)
}

// Update returns a builder for updating this ServiceDependency.
// Note that you need to call ServiceDependency.Unwrap() before calling this method if this ServiceDependency
// was returned from a transaction, and the transaction was committed or rolled back.
func (sd *ServiceDependency) Update() *ServiceDependencyUpdateOne {
	return NewServiceDependencyClient(sd.config).UpdateOne(sd)
}

// Unwrap unwraps the ServiceDependency entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sd *ServiceDependency) Unwrap() *ServiceDependency {
	_tx, ok := sd.config.driver.(*txDriver)
	if !ok {
		panic("model: ServiceDependency is not a transactional entity")
	}
	sd.config.driver = _tx.drv
	return sd
}

// String implements the fmt.Stringer.
func (sd *ServiceDependency) String() string {
	var builder strings.Builder
	builder.WriteString("ServiceDependency(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sd.ID))
	if v := sd.CreateTime; v != nil {
		builder.WriteString("createTime=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("serviceID=")
	builder.WriteString(fmt.Sprintf("%v", sd.ServiceID))
	builder.WriteString(", ")
	builder.WriteString("dependentID=")
	builder.WriteString(fmt.Sprintf("%v", sd.DependentID))
	builder.WriteString(", ")
	builder.WriteString("path=")
	builder.WriteString(fmt.Sprintf("%v", sd.Path))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(sd.Type)
	builder.WriteByte(')')
	return builder.String()
}

// ServiceDependencies is a parsable slice of ServiceDependency.
type ServiceDependencies []*ServiceDependency
