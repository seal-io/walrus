// SPDX-FileCopyrightText: 2023 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus". DO NOT EDIT.

package model

import (
	"context"
	stdsql "database/sql"
	"errors"
	"fmt"
	"reflect"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/seal-io/walrus/pkg/dao/model/connector"
	"github.com/seal-io/walrus/pkg/dao/model/costreport"
	"github.com/seal-io/walrus/pkg/dao/model/environmentconnectorrelationship"
	"github.com/seal-io/walrus/pkg/dao/model/internal"
	"github.com/seal-io/walrus/pkg/dao/model/predicate"
	"github.com/seal-io/walrus/pkg/dao/model/serviceresource"
	"github.com/seal-io/walrus/pkg/dao/types"
	"github.com/seal-io/walrus/pkg/dao/types/crypto"
	"github.com/seal-io/walrus/pkg/dao/types/object"
	"github.com/seal-io/walrus/pkg/dao/types/status"
)

// ConnectorUpdate is the builder for updating Connector entities.
type ConnectorUpdate struct {
	config
	hooks     []Hook
	mutation  *ConnectorMutation
	modifiers []func(*sql.UpdateBuilder)
	object    *Connector
}

// Where appends a list predicates to the ConnectorUpdate builder.
func (cu *ConnectorUpdate) Where(ps ...predicate.Connector) *ConnectorUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetDescription sets the "description" field.
func (cu *ConnectorUpdate) SetDescription(s string) *ConnectorUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cu *ConnectorUpdate) SetNillableDescription(s *string) *ConnectorUpdate {
	if s != nil {
		cu.SetDescription(*s)
	}
	return cu
}

// ClearDescription clears the value of the "description" field.
func (cu *ConnectorUpdate) ClearDescription() *ConnectorUpdate {
	cu.mutation.ClearDescription()
	return cu
}

// SetLabels sets the "labels" field.
func (cu *ConnectorUpdate) SetLabels(m map[string]string) *ConnectorUpdate {
	cu.mutation.SetLabels(m)
	return cu
}

// ClearLabels clears the value of the "labels" field.
func (cu *ConnectorUpdate) ClearLabels() *ConnectorUpdate {
	cu.mutation.ClearLabels()
	return cu
}

// SetAnnotations sets the "annotations" field.
func (cu *ConnectorUpdate) SetAnnotations(m map[string]string) *ConnectorUpdate {
	cu.mutation.SetAnnotations(m)
	return cu
}

// ClearAnnotations clears the value of the "annotations" field.
func (cu *ConnectorUpdate) ClearAnnotations() *ConnectorUpdate {
	cu.mutation.ClearAnnotations()
	return cu
}

// SetUpdateTime sets the "update_time" field.
func (cu *ConnectorUpdate) SetUpdateTime(t time.Time) *ConnectorUpdate {
	cu.mutation.SetUpdateTime(t)
	return cu
}

// SetStatus sets the "status" field.
func (cu *ConnectorUpdate) SetStatus(s status.Status) *ConnectorUpdate {
	cu.mutation.SetStatus(s)
	return cu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cu *ConnectorUpdate) SetNillableStatus(s *status.Status) *ConnectorUpdate {
	if s != nil {
		cu.SetStatus(*s)
	}
	return cu
}

// ClearStatus clears the value of the "status" field.
func (cu *ConnectorUpdate) ClearStatus() *ConnectorUpdate {
	cu.mutation.ClearStatus()
	return cu
}

// SetConfigVersion sets the "config_version" field.
func (cu *ConnectorUpdate) SetConfigVersion(s string) *ConnectorUpdate {
	cu.mutation.SetConfigVersion(s)
	return cu
}

// SetConfigData sets the "config_data" field.
func (cu *ConnectorUpdate) SetConfigData(c crypto.Properties) *ConnectorUpdate {
	cu.mutation.SetConfigData(c)
	return cu
}

// ClearConfigData clears the value of the "config_data" field.
func (cu *ConnectorUpdate) ClearConfigData() *ConnectorUpdate {
	cu.mutation.ClearConfigData()
	return cu
}

// SetEnableFinOps sets the "enable_fin_ops" field.
func (cu *ConnectorUpdate) SetEnableFinOps(b bool) *ConnectorUpdate {
	cu.mutation.SetEnableFinOps(b)
	return cu
}

// SetFinOpsCustomPricing sets the "fin_ops_custom_pricing" field.
func (cu *ConnectorUpdate) SetFinOpsCustomPricing(tocp *types.FinOpsCustomPricing) *ConnectorUpdate {
	cu.mutation.SetFinOpsCustomPricing(tocp)
	return cu
}

// ClearFinOpsCustomPricing clears the value of the "fin_ops_custom_pricing" field.
func (cu *ConnectorUpdate) ClearFinOpsCustomPricing() *ConnectorUpdate {
	cu.mutation.ClearFinOpsCustomPricing()
	return cu
}

// AddEnvironmentIDs adds the "environments" edge to the EnvironmentConnectorRelationship entity by IDs.
func (cu *ConnectorUpdate) AddEnvironmentIDs(ids ...object.ID) *ConnectorUpdate {
	cu.mutation.AddEnvironmentIDs(ids...)
	return cu
}

// AddEnvironments adds the "environments" edges to the EnvironmentConnectorRelationship entity.
func (cu *ConnectorUpdate) AddEnvironments(e ...*EnvironmentConnectorRelationship) *ConnectorUpdate {
	ids := make([]object.ID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.AddEnvironmentIDs(ids...)
}

// AddResourceIDs adds the "resources" edge to the ServiceResource entity by IDs.
func (cu *ConnectorUpdate) AddResourceIDs(ids ...object.ID) *ConnectorUpdate {
	cu.mutation.AddResourceIDs(ids...)
	return cu
}

// AddResources adds the "resources" edges to the ServiceResource entity.
func (cu *ConnectorUpdate) AddResources(s ...*ServiceResource) *ConnectorUpdate {
	ids := make([]object.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.AddResourceIDs(ids...)
}

// AddCostReportIDs adds the "cost_reports" edge to the CostReport entity by IDs.
func (cu *ConnectorUpdate) AddCostReportIDs(ids ...int) *ConnectorUpdate {
	cu.mutation.AddCostReportIDs(ids...)
	return cu
}

// AddCostReports adds the "cost_reports" edges to the CostReport entity.
func (cu *ConnectorUpdate) AddCostReports(c ...*CostReport) *ConnectorUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCostReportIDs(ids...)
}

// Mutation returns the ConnectorMutation object of the builder.
func (cu *ConnectorUpdate) Mutation() *ConnectorMutation {
	return cu.mutation
}

// ClearEnvironments clears all "environments" edges to the EnvironmentConnectorRelationship entity.
func (cu *ConnectorUpdate) ClearEnvironments() *ConnectorUpdate {
	cu.mutation.ClearEnvironments()
	return cu
}

// RemoveEnvironmentIDs removes the "environments" edge to EnvironmentConnectorRelationship entities by IDs.
func (cu *ConnectorUpdate) RemoveEnvironmentIDs(ids ...object.ID) *ConnectorUpdate {
	cu.mutation.RemoveEnvironmentIDs(ids...)
	return cu
}

// RemoveEnvironments removes "environments" edges to EnvironmentConnectorRelationship entities.
func (cu *ConnectorUpdate) RemoveEnvironments(e ...*EnvironmentConnectorRelationship) *ConnectorUpdate {
	ids := make([]object.ID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.RemoveEnvironmentIDs(ids...)
}

// ClearResources clears all "resources" edges to the ServiceResource entity.
func (cu *ConnectorUpdate) ClearResources() *ConnectorUpdate {
	cu.mutation.ClearResources()
	return cu
}

// RemoveResourceIDs removes the "resources" edge to ServiceResource entities by IDs.
func (cu *ConnectorUpdate) RemoveResourceIDs(ids ...object.ID) *ConnectorUpdate {
	cu.mutation.RemoveResourceIDs(ids...)
	return cu
}

// RemoveResources removes "resources" edges to ServiceResource entities.
func (cu *ConnectorUpdate) RemoveResources(s ...*ServiceResource) *ConnectorUpdate {
	ids := make([]object.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.RemoveResourceIDs(ids...)
}

// ClearCostReports clears all "cost_reports" edges to the CostReport entity.
func (cu *ConnectorUpdate) ClearCostReports() *ConnectorUpdate {
	cu.mutation.ClearCostReports()
	return cu
}

// RemoveCostReportIDs removes the "cost_reports" edge to CostReport entities by IDs.
func (cu *ConnectorUpdate) RemoveCostReportIDs(ids ...int) *ConnectorUpdate {
	cu.mutation.RemoveCostReportIDs(ids...)
	return cu
}

// RemoveCostReports removes "cost_reports" edges to CostReport entities.
func (cu *ConnectorUpdate) RemoveCostReports(c ...*CostReport) *ConnectorUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCostReportIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ConnectorUpdate) Save(ctx context.Context) (int, error) {
	if err := cu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ConnectorUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ConnectorUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ConnectorUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *ConnectorUpdate) defaults() error {
	if _, ok := cu.mutation.UpdateTime(); !ok {
		if connector.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("model: uninitialized connector.UpdateDefaultUpdateTime (forgotten import model/runtime?)")
		}
		v := connector.UpdateDefaultUpdateTime()
		cu.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cu *ConnectorUpdate) check() error {
	if v, ok := cu.mutation.ConfigVersion(); ok {
		if err := connector.ConfigVersionValidator(v); err != nil {
			return &ValidationError{Name: "config_version", err: fmt.Errorf(`model: validator failed for field "Connector.config_version": %w`, err)}
		}
	}
	return nil
}

// Set is different from other Set* methods,
// it sets the value by judging the definition of each field within the entire object.
//
// For default fields, Set calls if the value is not zero.
//
// For no default but required fields, Set calls directly.
//
// For no default but optional fields, Set calls if the value is not zero,
// or clears if the value is zero.
//
// For example:
//
//	## Without Default
//
//	### Required
//
//	db.SetX(obj.X)
//
//	### Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	} else {
//	   db.ClearX()
//	}
//
//	## With Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (cu *ConnectorUpdate) Set(obj *Connector) *ConnectorUpdate {
	// Without Default.
	if obj.Description != "" {
		cu.SetDescription(obj.Description)
	} else {
		cu.ClearDescription()
	}
	if !reflect.ValueOf(obj.Labels).IsZero() {
		cu.SetLabels(obj.Labels)
	} else {
		cu.ClearLabels()
	}
	if !reflect.ValueOf(obj.Annotations).IsZero() {
		cu.SetAnnotations(obj.Annotations)
	}
	if !reflect.ValueOf(obj.Status).IsZero() {
		cu.SetStatus(obj.Status)
	}
	cu.SetConfigVersion(obj.ConfigVersion)
	if !reflect.ValueOf(obj.ConfigData).IsZero() {
		cu.SetConfigData(obj.ConfigData)
	}
	cu.SetEnableFinOps(obj.EnableFinOps)
	if obj.FinOpsCustomPricing != nil && !obj.FinOpsCustomPricing.IsZero() {
		cu.SetFinOpsCustomPricing(obj.FinOpsCustomPricing)
	}

	// With Default.
	if obj.UpdateTime != nil {
		cu.SetUpdateTime(*obj.UpdateTime)
	}

	// Record the given object.
	cu.object = obj

	return cu
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cu *ConnectorUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ConnectorUpdate {
	cu.modifiers = append(cu.modifiers, modifiers...)
	return cu
}

func (cu *ConnectorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(connector.Table, connector.Columns, sqlgraph.NewFieldSpec(connector.FieldID, field.TypeString))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.SetField(connector.FieldDescription, field.TypeString, value)
	}
	if cu.mutation.DescriptionCleared() {
		_spec.ClearField(connector.FieldDescription, field.TypeString)
	}
	if value, ok := cu.mutation.Labels(); ok {
		_spec.SetField(connector.FieldLabels, field.TypeJSON, value)
	}
	if cu.mutation.LabelsCleared() {
		_spec.ClearField(connector.FieldLabels, field.TypeJSON)
	}
	if value, ok := cu.mutation.Annotations(); ok {
		_spec.SetField(connector.FieldAnnotations, field.TypeJSON, value)
	}
	if cu.mutation.AnnotationsCleared() {
		_spec.ClearField(connector.FieldAnnotations, field.TypeJSON)
	}
	if value, ok := cu.mutation.UpdateTime(); ok {
		_spec.SetField(connector.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.SetField(connector.FieldStatus, field.TypeJSON, value)
	}
	if cu.mutation.StatusCleared() {
		_spec.ClearField(connector.FieldStatus, field.TypeJSON)
	}
	if value, ok := cu.mutation.ConfigVersion(); ok {
		_spec.SetField(connector.FieldConfigVersion, field.TypeString, value)
	}
	if value, ok := cu.mutation.ConfigData(); ok {
		_spec.SetField(connector.FieldConfigData, field.TypeOther, value)
	}
	if cu.mutation.ConfigDataCleared() {
		_spec.ClearField(connector.FieldConfigData, field.TypeOther)
	}
	if value, ok := cu.mutation.EnableFinOps(); ok {
		_spec.SetField(connector.FieldEnableFinOps, field.TypeBool, value)
	}
	if value, ok := cu.mutation.FinOpsCustomPricing(); ok {
		_spec.SetField(connector.FieldFinOpsCustomPricing, field.TypeJSON, value)
	}
	if cu.mutation.FinOpsCustomPricingCleared() {
		_spec.ClearField(connector.FieldFinOpsCustomPricing, field.TypeJSON)
	}
	if cu.mutation.EnvironmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   connector.EnvironmentsTable,
			Columns: []string{connector.EnvironmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environmentconnectorrelationship.FieldID, field.TypeString),
			},
		}
		edge.Schema = cu.schemaConfig.EnvironmentConnectorRelationship
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedEnvironmentsIDs(); len(nodes) > 0 && !cu.mutation.EnvironmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   connector.EnvironmentsTable,
			Columns: []string{connector.EnvironmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environmentconnectorrelationship.FieldID, field.TypeString),
			},
		}
		edge.Schema = cu.schemaConfig.EnvironmentConnectorRelationship
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.EnvironmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   connector.EnvironmentsTable,
			Columns: []string{connector.EnvironmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environmentconnectorrelationship.FieldID, field.TypeString),
			},
		}
		edge.Schema = cu.schemaConfig.EnvironmentConnectorRelationship
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ResourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connector.ResourcesTable,
			Columns: []string{connector.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceresource.FieldID, field.TypeString),
			},
		}
		edge.Schema = cu.schemaConfig.ServiceResource
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedResourcesIDs(); len(nodes) > 0 && !cu.mutation.ResourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connector.ResourcesTable,
			Columns: []string{connector.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceresource.FieldID, field.TypeString),
			},
		}
		edge.Schema = cu.schemaConfig.ServiceResource
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ResourcesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connector.ResourcesTable,
			Columns: []string{connector.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceresource.FieldID, field.TypeString),
			},
		}
		edge.Schema = cu.schemaConfig.ServiceResource
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CostReportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connector.CostReportsTable,
			Columns: []string{connector.CostReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costreport.FieldID, field.TypeInt),
			},
		}
		edge.Schema = cu.schemaConfig.CostReport
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCostReportsIDs(); len(nodes) > 0 && !cu.mutation.CostReportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connector.CostReportsTable,
			Columns: []string{connector.CostReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costreport.FieldID, field.TypeInt),
			},
		}
		edge.Schema = cu.schemaConfig.CostReport
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CostReportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connector.CostReportsTable,
			Columns: []string{connector.CostReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costreport.FieldID, field.TypeInt),
			},
		}
		edge.Schema = cu.schemaConfig.CostReport
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = cu.schemaConfig.Connector
	ctx = internal.NewSchemaConfigContext(ctx, cu.schemaConfig)
	_spec.AddModifiers(cu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{connector.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ConnectorUpdateOne is the builder for updating a single Connector entity.
type ConnectorUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ConnectorMutation
	modifiers []func(*sql.UpdateBuilder)
	object    *Connector
}

// SetDescription sets the "description" field.
func (cuo *ConnectorUpdateOne) SetDescription(s string) *ConnectorUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cuo *ConnectorUpdateOne) SetNillableDescription(s *string) *ConnectorUpdateOne {
	if s != nil {
		cuo.SetDescription(*s)
	}
	return cuo
}

// ClearDescription clears the value of the "description" field.
func (cuo *ConnectorUpdateOne) ClearDescription() *ConnectorUpdateOne {
	cuo.mutation.ClearDescription()
	return cuo
}

// SetLabels sets the "labels" field.
func (cuo *ConnectorUpdateOne) SetLabels(m map[string]string) *ConnectorUpdateOne {
	cuo.mutation.SetLabels(m)
	return cuo
}

// ClearLabels clears the value of the "labels" field.
func (cuo *ConnectorUpdateOne) ClearLabels() *ConnectorUpdateOne {
	cuo.mutation.ClearLabels()
	return cuo
}

// SetAnnotations sets the "annotations" field.
func (cuo *ConnectorUpdateOne) SetAnnotations(m map[string]string) *ConnectorUpdateOne {
	cuo.mutation.SetAnnotations(m)
	return cuo
}

// ClearAnnotations clears the value of the "annotations" field.
func (cuo *ConnectorUpdateOne) ClearAnnotations() *ConnectorUpdateOne {
	cuo.mutation.ClearAnnotations()
	return cuo
}

// SetUpdateTime sets the "update_time" field.
func (cuo *ConnectorUpdateOne) SetUpdateTime(t time.Time) *ConnectorUpdateOne {
	cuo.mutation.SetUpdateTime(t)
	return cuo
}

// SetStatus sets the "status" field.
func (cuo *ConnectorUpdateOne) SetStatus(s status.Status) *ConnectorUpdateOne {
	cuo.mutation.SetStatus(s)
	return cuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cuo *ConnectorUpdateOne) SetNillableStatus(s *status.Status) *ConnectorUpdateOne {
	if s != nil {
		cuo.SetStatus(*s)
	}
	return cuo
}

// ClearStatus clears the value of the "status" field.
func (cuo *ConnectorUpdateOne) ClearStatus() *ConnectorUpdateOne {
	cuo.mutation.ClearStatus()
	return cuo
}

// SetConfigVersion sets the "config_version" field.
func (cuo *ConnectorUpdateOne) SetConfigVersion(s string) *ConnectorUpdateOne {
	cuo.mutation.SetConfigVersion(s)
	return cuo
}

// SetConfigData sets the "config_data" field.
func (cuo *ConnectorUpdateOne) SetConfigData(c crypto.Properties) *ConnectorUpdateOne {
	cuo.mutation.SetConfigData(c)
	return cuo
}

// ClearConfigData clears the value of the "config_data" field.
func (cuo *ConnectorUpdateOne) ClearConfigData() *ConnectorUpdateOne {
	cuo.mutation.ClearConfigData()
	return cuo
}

// SetEnableFinOps sets the "enable_fin_ops" field.
func (cuo *ConnectorUpdateOne) SetEnableFinOps(b bool) *ConnectorUpdateOne {
	cuo.mutation.SetEnableFinOps(b)
	return cuo
}

// SetFinOpsCustomPricing sets the "fin_ops_custom_pricing" field.
func (cuo *ConnectorUpdateOne) SetFinOpsCustomPricing(tocp *types.FinOpsCustomPricing) *ConnectorUpdateOne {
	cuo.mutation.SetFinOpsCustomPricing(tocp)
	return cuo
}

// ClearFinOpsCustomPricing clears the value of the "fin_ops_custom_pricing" field.
func (cuo *ConnectorUpdateOne) ClearFinOpsCustomPricing() *ConnectorUpdateOne {
	cuo.mutation.ClearFinOpsCustomPricing()
	return cuo
}

// AddEnvironmentIDs adds the "environments" edge to the EnvironmentConnectorRelationship entity by IDs.
func (cuo *ConnectorUpdateOne) AddEnvironmentIDs(ids ...object.ID) *ConnectorUpdateOne {
	cuo.mutation.AddEnvironmentIDs(ids...)
	return cuo
}

// AddEnvironments adds the "environments" edges to the EnvironmentConnectorRelationship entity.
func (cuo *ConnectorUpdateOne) AddEnvironments(e ...*EnvironmentConnectorRelationship) *ConnectorUpdateOne {
	ids := make([]object.ID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.AddEnvironmentIDs(ids...)
}

// AddResourceIDs adds the "resources" edge to the ServiceResource entity by IDs.
func (cuo *ConnectorUpdateOne) AddResourceIDs(ids ...object.ID) *ConnectorUpdateOne {
	cuo.mutation.AddResourceIDs(ids...)
	return cuo
}

// AddResources adds the "resources" edges to the ServiceResource entity.
func (cuo *ConnectorUpdateOne) AddResources(s ...*ServiceResource) *ConnectorUpdateOne {
	ids := make([]object.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.AddResourceIDs(ids...)
}

// AddCostReportIDs adds the "cost_reports" edge to the CostReport entity by IDs.
func (cuo *ConnectorUpdateOne) AddCostReportIDs(ids ...int) *ConnectorUpdateOne {
	cuo.mutation.AddCostReportIDs(ids...)
	return cuo
}

// AddCostReports adds the "cost_reports" edges to the CostReport entity.
func (cuo *ConnectorUpdateOne) AddCostReports(c ...*CostReport) *ConnectorUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCostReportIDs(ids...)
}

// Mutation returns the ConnectorMutation object of the builder.
func (cuo *ConnectorUpdateOne) Mutation() *ConnectorMutation {
	return cuo.mutation
}

// ClearEnvironments clears all "environments" edges to the EnvironmentConnectorRelationship entity.
func (cuo *ConnectorUpdateOne) ClearEnvironments() *ConnectorUpdateOne {
	cuo.mutation.ClearEnvironments()
	return cuo
}

// RemoveEnvironmentIDs removes the "environments" edge to EnvironmentConnectorRelationship entities by IDs.
func (cuo *ConnectorUpdateOne) RemoveEnvironmentIDs(ids ...object.ID) *ConnectorUpdateOne {
	cuo.mutation.RemoveEnvironmentIDs(ids...)
	return cuo
}

// RemoveEnvironments removes "environments" edges to EnvironmentConnectorRelationship entities.
func (cuo *ConnectorUpdateOne) RemoveEnvironments(e ...*EnvironmentConnectorRelationship) *ConnectorUpdateOne {
	ids := make([]object.ID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.RemoveEnvironmentIDs(ids...)
}

// ClearResources clears all "resources" edges to the ServiceResource entity.
func (cuo *ConnectorUpdateOne) ClearResources() *ConnectorUpdateOne {
	cuo.mutation.ClearResources()
	return cuo
}

// RemoveResourceIDs removes the "resources" edge to ServiceResource entities by IDs.
func (cuo *ConnectorUpdateOne) RemoveResourceIDs(ids ...object.ID) *ConnectorUpdateOne {
	cuo.mutation.RemoveResourceIDs(ids...)
	return cuo
}

// RemoveResources removes "resources" edges to ServiceResource entities.
func (cuo *ConnectorUpdateOne) RemoveResources(s ...*ServiceResource) *ConnectorUpdateOne {
	ids := make([]object.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.RemoveResourceIDs(ids...)
}

// ClearCostReports clears all "cost_reports" edges to the CostReport entity.
func (cuo *ConnectorUpdateOne) ClearCostReports() *ConnectorUpdateOne {
	cuo.mutation.ClearCostReports()
	return cuo
}

// RemoveCostReportIDs removes the "cost_reports" edge to CostReport entities by IDs.
func (cuo *ConnectorUpdateOne) RemoveCostReportIDs(ids ...int) *ConnectorUpdateOne {
	cuo.mutation.RemoveCostReportIDs(ids...)
	return cuo
}

// RemoveCostReports removes "cost_reports" edges to CostReport entities.
func (cuo *ConnectorUpdateOne) RemoveCostReports(c ...*CostReport) *ConnectorUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCostReportIDs(ids...)
}

// Where appends a list predicates to the ConnectorUpdate builder.
func (cuo *ConnectorUpdateOne) Where(ps ...predicate.Connector) *ConnectorUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ConnectorUpdateOne) Select(field string, fields ...string) *ConnectorUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Connector entity.
func (cuo *ConnectorUpdateOne) Save(ctx context.Context) (*Connector, error) {
	if err := cuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ConnectorUpdateOne) SaveX(ctx context.Context) *Connector {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ConnectorUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ConnectorUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *ConnectorUpdateOne) defaults() error {
	if _, ok := cuo.mutation.UpdateTime(); !ok {
		if connector.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("model: uninitialized connector.UpdateDefaultUpdateTime (forgotten import model/runtime?)")
		}
		v := connector.UpdateDefaultUpdateTime()
		cuo.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ConnectorUpdateOne) check() error {
	if v, ok := cuo.mutation.ConfigVersion(); ok {
		if err := connector.ConfigVersionValidator(v); err != nil {
			return &ValidationError{Name: "config_version", err: fmt.Errorf(`model: validator failed for field "Connector.config_version": %w`, err)}
		}
	}
	return nil
}

// Set is different from other Set* methods,
// it sets the value by judging the definition of each field within the entire object.
//
// For default fields, Set calls if the value changes from the original.
//
// For no default but required fields, Set calls if the value changes from the original.
//
// For no default but optional fields, Set calls if the value changes from the original,
// or clears if changes to zero.
//
// For example:
//
//	## Without Default
//
//	### Required
//
//	db.SetX(obj.X)
//
//	### Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   if _is_not_equal_(db.X, obj.X) {
//	      db.SetX(obj.X)
//	   }
//	} else {
//	   db.ClearX()
//	}
//
//	## With Default
//
//	if _is_zero_value_(obj.X) && _is_not_equal_(db.X, obj.X) {
//	   db.SetX(obj.X)
//	}
func (cuo *ConnectorUpdateOne) Set(obj *Connector) *ConnectorUpdateOne {
	h := func(n ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			mt := m.(*ConnectorMutation)
			db, err := mt.Client().Connector.Get(ctx, *mt.id)
			if err != nil {
				return nil, fmt.Errorf("failed getting Connector with id: %v", *mt.id)
			}

			// Without Default.
			if obj.Description != "" {
				if db.Description != obj.Description {
					cuo.SetDescription(obj.Description)
				}
			} else {
				cuo.ClearDescription()
			}
			if !reflect.ValueOf(obj.Labels).IsZero() {
				if !reflect.DeepEqual(db.Labels, obj.Labels) {
					cuo.SetLabels(obj.Labels)
				}
			} else {
				cuo.ClearLabels()
			}
			if !reflect.ValueOf(obj.Annotations).IsZero() {
				if !reflect.DeepEqual(db.Annotations, obj.Annotations) {
					cuo.SetAnnotations(obj.Annotations)
				}
			}
			if !reflect.ValueOf(obj.Status).IsZero() {
				if !db.Status.Equal(obj.Status) {
					cuo.SetStatus(obj.Status)
				}
			}
			if db.ConfigVersion != obj.ConfigVersion {
				cuo.SetConfigVersion(obj.ConfigVersion)
			}
			if !reflect.ValueOf(obj.ConfigData).IsZero() {
				if !reflect.DeepEqual(db.ConfigData, obj.ConfigData) {
					cuo.SetConfigData(obj.ConfigData)
				}
			}
			if db.EnableFinOps != obj.EnableFinOps {
				cuo.SetEnableFinOps(obj.EnableFinOps)
			}
			if obj.FinOpsCustomPricing != nil && !obj.FinOpsCustomPricing.IsZero() {
				if !reflect.DeepEqual(db.FinOpsCustomPricing, obj.FinOpsCustomPricing) {
					cuo.SetFinOpsCustomPricing(obj.FinOpsCustomPricing)
				}
			}

			// With Default.
			if (obj.UpdateTime != nil) && (!reflect.DeepEqual(db.UpdateTime, obj.UpdateTime)) {
				cuo.SetUpdateTime(*obj.UpdateTime)
			}

			// Record the given object.
			cuo.object = obj

			return n.Mutate(ctx, m)
		})
	}

	cuo.hooks = append(cuo.hooks, h)

	return cuo
}

// getClientSet returns the ClientSet for the given builder.
func (cuo *ConnectorUpdateOne) getClientSet() (mc ClientSet) {
	if _, ok := cuo.config.driver.(*txDriver); ok {
		tx := &Tx{config: cuo.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: cuo.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after updated the Connector entity,
// which is always good for cascading update operations.
func (cuo *ConnectorUpdateOne) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *Connector) error) (*Connector, error) {
	obj, err := cuo.Save(ctx)
	if err != nil &&
		(cuo.object == nil || !errors.Is(err, stdsql.ErrNoRows)) {
		return nil, err
	}

	if len(cbs) == 0 {
		return obj, err
	}

	mc := cuo.getClientSet()

	if obj == nil {
		obj = cuo.object
	} else if x := cuo.object; x != nil {
		if _, set := cuo.mutation.Field(connector.FieldDescription); set {
			obj.Description = x.Description
		}
		if _, set := cuo.mutation.Field(connector.FieldLabels); set {
			obj.Labels = x.Labels
		}
		if _, set := cuo.mutation.Field(connector.FieldAnnotations); set {
			obj.Annotations = x.Annotations
		}
		if _, set := cuo.mutation.Field(connector.FieldStatus); set {
			obj.Status = x.Status
		}
		if _, set := cuo.mutation.Field(connector.FieldConfigVersion); set {
			obj.ConfigVersion = x.ConfigVersion
		}
		if _, set := cuo.mutation.Field(connector.FieldConfigData); set {
			obj.ConfigData = x.ConfigData
		}
		if _, set := cuo.mutation.Field(connector.FieldEnableFinOps); set {
			obj.EnableFinOps = x.EnableFinOps
		}
		if _, set := cuo.mutation.Field(connector.FieldFinOpsCustomPricing); set {
			obj.FinOpsCustomPricing = x.FinOpsCustomPricing
		}
		obj.Edges = x.Edges
	}

	for i := range cbs {
		if err = cbs[i](ctx, mc, obj); err != nil {
			return nil, err
		}
	}

	return obj, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (cuo *ConnectorUpdateOne) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *Connector) error) *Connector {
	obj, err := cuo.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return obj
}

// ExecE calls the given function after executed the query,
// which is always good for cascading update operations.
func (cuo *ConnectorUpdateOne) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *Connector) error) error {
	_, err := cuo.SaveE(ctx, cbs...)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ConnectorUpdateOne) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *Connector) error) {
	if err := cuo.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuo *ConnectorUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ConnectorUpdateOne {
	cuo.modifiers = append(cuo.modifiers, modifiers...)
	return cuo
}

func (cuo *ConnectorUpdateOne) sqlSave(ctx context.Context) (_node *Connector, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(connector.Table, connector.Columns, sqlgraph.NewFieldSpec(connector.FieldID, field.TypeString))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`model: missing "Connector.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, connector.FieldID)
		for _, f := range fields {
			if !connector.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
			}
			if f != connector.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.SetField(connector.FieldDescription, field.TypeString, value)
	}
	if cuo.mutation.DescriptionCleared() {
		_spec.ClearField(connector.FieldDescription, field.TypeString)
	}
	if value, ok := cuo.mutation.Labels(); ok {
		_spec.SetField(connector.FieldLabels, field.TypeJSON, value)
	}
	if cuo.mutation.LabelsCleared() {
		_spec.ClearField(connector.FieldLabels, field.TypeJSON)
	}
	if value, ok := cuo.mutation.Annotations(); ok {
		_spec.SetField(connector.FieldAnnotations, field.TypeJSON, value)
	}
	if cuo.mutation.AnnotationsCleared() {
		_spec.ClearField(connector.FieldAnnotations, field.TypeJSON)
	}
	if value, ok := cuo.mutation.UpdateTime(); ok {
		_spec.SetField(connector.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.SetField(connector.FieldStatus, field.TypeJSON, value)
	}
	if cuo.mutation.StatusCleared() {
		_spec.ClearField(connector.FieldStatus, field.TypeJSON)
	}
	if value, ok := cuo.mutation.ConfigVersion(); ok {
		_spec.SetField(connector.FieldConfigVersion, field.TypeString, value)
	}
	if value, ok := cuo.mutation.ConfigData(); ok {
		_spec.SetField(connector.FieldConfigData, field.TypeOther, value)
	}
	if cuo.mutation.ConfigDataCleared() {
		_spec.ClearField(connector.FieldConfigData, field.TypeOther)
	}
	if value, ok := cuo.mutation.EnableFinOps(); ok {
		_spec.SetField(connector.FieldEnableFinOps, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.FinOpsCustomPricing(); ok {
		_spec.SetField(connector.FieldFinOpsCustomPricing, field.TypeJSON, value)
	}
	if cuo.mutation.FinOpsCustomPricingCleared() {
		_spec.ClearField(connector.FieldFinOpsCustomPricing, field.TypeJSON)
	}
	if cuo.mutation.EnvironmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   connector.EnvironmentsTable,
			Columns: []string{connector.EnvironmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environmentconnectorrelationship.FieldID, field.TypeString),
			},
		}
		edge.Schema = cuo.schemaConfig.EnvironmentConnectorRelationship
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedEnvironmentsIDs(); len(nodes) > 0 && !cuo.mutation.EnvironmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   connector.EnvironmentsTable,
			Columns: []string{connector.EnvironmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environmentconnectorrelationship.FieldID, field.TypeString),
			},
		}
		edge.Schema = cuo.schemaConfig.EnvironmentConnectorRelationship
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.EnvironmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   connector.EnvironmentsTable,
			Columns: []string{connector.EnvironmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environmentconnectorrelationship.FieldID, field.TypeString),
			},
		}
		edge.Schema = cuo.schemaConfig.EnvironmentConnectorRelationship
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ResourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connector.ResourcesTable,
			Columns: []string{connector.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceresource.FieldID, field.TypeString),
			},
		}
		edge.Schema = cuo.schemaConfig.ServiceResource
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedResourcesIDs(); len(nodes) > 0 && !cuo.mutation.ResourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connector.ResourcesTable,
			Columns: []string{connector.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceresource.FieldID, field.TypeString),
			},
		}
		edge.Schema = cuo.schemaConfig.ServiceResource
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ResourcesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connector.ResourcesTable,
			Columns: []string{connector.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceresource.FieldID, field.TypeString),
			},
		}
		edge.Schema = cuo.schemaConfig.ServiceResource
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CostReportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connector.CostReportsTable,
			Columns: []string{connector.CostReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costreport.FieldID, field.TypeInt),
			},
		}
		edge.Schema = cuo.schemaConfig.CostReport
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCostReportsIDs(); len(nodes) > 0 && !cuo.mutation.CostReportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connector.CostReportsTable,
			Columns: []string{connector.CostReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costreport.FieldID, field.TypeInt),
			},
		}
		edge.Schema = cuo.schemaConfig.CostReport
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CostReportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connector.CostReportsTable,
			Columns: []string{connector.CostReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(costreport.FieldID, field.TypeInt),
			},
		}
		edge.Schema = cuo.schemaConfig.CostReport
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = cuo.schemaConfig.Connector
	ctx = internal.NewSchemaConfigContext(ctx, cuo.schemaConfig)
	_spec.AddModifiers(cuo.modifiers...)
	_node = &Connector{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{connector.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
