// SPDX-FileCopyrightText: 2023 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "seal". DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/seal-io/seal/pkg/dao/model/connector"
	"github.com/seal-io/seal/pkg/dao/model/costreport"
	"github.com/seal-io/seal/pkg/dao/types"
	"github.com/seal-io/seal/pkg/dao/types/object"
)

// CostReportCreate is the builder for creating a CostReport entity.
type CostReportCreate struct {
	config
	mutation   *CostReportMutation
	hooks      []Hook
	conflict   []sql.ConflictOption
	object     *CostReport
	fromUpsert bool
}

// SetStartTime sets the "start_time" field.
func (crc *CostReportCreate) SetStartTime(t time.Time) *CostReportCreate {
	crc.mutation.SetStartTime(t)
	return crc
}

// SetEndTime sets the "end_time" field.
func (crc *CostReportCreate) SetEndTime(t time.Time) *CostReportCreate {
	crc.mutation.SetEndTime(t)
	return crc
}

// SetMinutes sets the "minutes" field.
func (crc *CostReportCreate) SetMinutes(f float64) *CostReportCreate {
	crc.mutation.SetMinutes(f)
	return crc
}

// SetConnectorID sets the "connector_id" field.
func (crc *CostReportCreate) SetConnectorID(o object.ID) *CostReportCreate {
	crc.mutation.SetConnectorID(o)
	return crc
}

// SetName sets the "name" field.
func (crc *CostReportCreate) SetName(s string) *CostReportCreate {
	crc.mutation.SetName(s)
	return crc
}

// SetFingerprint sets the "fingerprint" field.
func (crc *CostReportCreate) SetFingerprint(s string) *CostReportCreate {
	crc.mutation.SetFingerprint(s)
	return crc
}

// SetClusterName sets the "cluster_name" field.
func (crc *CostReportCreate) SetClusterName(s string) *CostReportCreate {
	crc.mutation.SetClusterName(s)
	return crc
}

// SetNillableClusterName sets the "cluster_name" field if the given value is not nil.
func (crc *CostReportCreate) SetNillableClusterName(s *string) *CostReportCreate {
	if s != nil {
		crc.SetClusterName(*s)
	}
	return crc
}

// SetNamespace sets the "namespace" field.
func (crc *CostReportCreate) SetNamespace(s string) *CostReportCreate {
	crc.mutation.SetNamespace(s)
	return crc
}

// SetNillableNamespace sets the "namespace" field if the given value is not nil.
func (crc *CostReportCreate) SetNillableNamespace(s *string) *CostReportCreate {
	if s != nil {
		crc.SetNamespace(*s)
	}
	return crc
}

// SetNode sets the "node" field.
func (crc *CostReportCreate) SetNode(s string) *CostReportCreate {
	crc.mutation.SetNode(s)
	return crc
}

// SetNillableNode sets the "node" field if the given value is not nil.
func (crc *CostReportCreate) SetNillableNode(s *string) *CostReportCreate {
	if s != nil {
		crc.SetNode(*s)
	}
	return crc
}

// SetController sets the "controller" field.
func (crc *CostReportCreate) SetController(s string) *CostReportCreate {
	crc.mutation.SetController(s)
	return crc
}

// SetNillableController sets the "controller" field if the given value is not nil.
func (crc *CostReportCreate) SetNillableController(s *string) *CostReportCreate {
	if s != nil {
		crc.SetController(*s)
	}
	return crc
}

// SetControllerKind sets the "controller_kind" field.
func (crc *CostReportCreate) SetControllerKind(s string) *CostReportCreate {
	crc.mutation.SetControllerKind(s)
	return crc
}

// SetNillableControllerKind sets the "controller_kind" field if the given value is not nil.
func (crc *CostReportCreate) SetNillableControllerKind(s *string) *CostReportCreate {
	if s != nil {
		crc.SetControllerKind(*s)
	}
	return crc
}

// SetPod sets the "pod" field.
func (crc *CostReportCreate) SetPod(s string) *CostReportCreate {
	crc.mutation.SetPod(s)
	return crc
}

// SetNillablePod sets the "pod" field if the given value is not nil.
func (crc *CostReportCreate) SetNillablePod(s *string) *CostReportCreate {
	if s != nil {
		crc.SetPod(*s)
	}
	return crc
}

// SetContainer sets the "container" field.
func (crc *CostReportCreate) SetContainer(s string) *CostReportCreate {
	crc.mutation.SetContainer(s)
	return crc
}

// SetNillableContainer sets the "container" field if the given value is not nil.
func (crc *CostReportCreate) SetNillableContainer(s *string) *CostReportCreate {
	if s != nil {
		crc.SetContainer(*s)
	}
	return crc
}

// SetPvs sets the "pvs" field.
func (crc *CostReportCreate) SetPvs(mc map[string]types.PVCost) *CostReportCreate {
	crc.mutation.SetPvs(mc)
	return crc
}

// SetLabels sets the "labels" field.
func (crc *CostReportCreate) SetLabels(m map[string]string) *CostReportCreate {
	crc.mutation.SetLabels(m)
	return crc
}

// SetTotalCost sets the "totalCost" field.
func (crc *CostReportCreate) SetTotalCost(f float64) *CostReportCreate {
	crc.mutation.SetTotalCost(f)
	return crc
}

// SetNillableTotalCost sets the "totalCost" field if the given value is not nil.
func (crc *CostReportCreate) SetNillableTotalCost(f *float64) *CostReportCreate {
	if f != nil {
		crc.SetTotalCost(*f)
	}
	return crc
}

// SetCurrency sets the "currency" field.
func (crc *CostReportCreate) SetCurrency(i int) *CostReportCreate {
	crc.mutation.SetCurrency(i)
	return crc
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (crc *CostReportCreate) SetNillableCurrency(i *int) *CostReportCreate {
	if i != nil {
		crc.SetCurrency(*i)
	}
	return crc
}

// SetCPUCost sets the "cpu_cost" field.
func (crc *CostReportCreate) SetCPUCost(f float64) *CostReportCreate {
	crc.mutation.SetCPUCost(f)
	return crc
}

// SetNillableCPUCost sets the "cpu_cost" field if the given value is not nil.
func (crc *CostReportCreate) SetNillableCPUCost(f *float64) *CostReportCreate {
	if f != nil {
		crc.SetCPUCost(*f)
	}
	return crc
}

// SetCPUCoreRequest sets the "cpu_core_request" field.
func (crc *CostReportCreate) SetCPUCoreRequest(f float64) *CostReportCreate {
	crc.mutation.SetCPUCoreRequest(f)
	return crc
}

// SetNillableCPUCoreRequest sets the "cpu_core_request" field if the given value is not nil.
func (crc *CostReportCreate) SetNillableCPUCoreRequest(f *float64) *CostReportCreate {
	if f != nil {
		crc.SetCPUCoreRequest(*f)
	}
	return crc
}

// SetGpuCost sets the "gpu_cost" field.
func (crc *CostReportCreate) SetGpuCost(f float64) *CostReportCreate {
	crc.mutation.SetGpuCost(f)
	return crc
}

// SetNillableGpuCost sets the "gpu_cost" field if the given value is not nil.
func (crc *CostReportCreate) SetNillableGpuCost(f *float64) *CostReportCreate {
	if f != nil {
		crc.SetGpuCost(*f)
	}
	return crc
}

// SetGpuCount sets the "gpu_count" field.
func (crc *CostReportCreate) SetGpuCount(f float64) *CostReportCreate {
	crc.mutation.SetGpuCount(f)
	return crc
}

// SetNillableGpuCount sets the "gpu_count" field if the given value is not nil.
func (crc *CostReportCreate) SetNillableGpuCount(f *float64) *CostReportCreate {
	if f != nil {
		crc.SetGpuCount(*f)
	}
	return crc
}

// SetRAMCost sets the "ram_cost" field.
func (crc *CostReportCreate) SetRAMCost(f float64) *CostReportCreate {
	crc.mutation.SetRAMCost(f)
	return crc
}

// SetNillableRAMCost sets the "ram_cost" field if the given value is not nil.
func (crc *CostReportCreate) SetNillableRAMCost(f *float64) *CostReportCreate {
	if f != nil {
		crc.SetRAMCost(*f)
	}
	return crc
}

// SetRAMByteRequest sets the "ram_byte_request" field.
func (crc *CostReportCreate) SetRAMByteRequest(f float64) *CostReportCreate {
	crc.mutation.SetRAMByteRequest(f)
	return crc
}

// SetNillableRAMByteRequest sets the "ram_byte_request" field if the given value is not nil.
func (crc *CostReportCreate) SetNillableRAMByteRequest(f *float64) *CostReportCreate {
	if f != nil {
		crc.SetRAMByteRequest(*f)
	}
	return crc
}

// SetPvCost sets the "pv_cost" field.
func (crc *CostReportCreate) SetPvCost(f float64) *CostReportCreate {
	crc.mutation.SetPvCost(f)
	return crc
}

// SetNillablePvCost sets the "pv_cost" field if the given value is not nil.
func (crc *CostReportCreate) SetNillablePvCost(f *float64) *CostReportCreate {
	if f != nil {
		crc.SetPvCost(*f)
	}
	return crc
}

// SetPvBytes sets the "pv_bytes" field.
func (crc *CostReportCreate) SetPvBytes(f float64) *CostReportCreate {
	crc.mutation.SetPvBytes(f)
	return crc
}

// SetNillablePvBytes sets the "pv_bytes" field if the given value is not nil.
func (crc *CostReportCreate) SetNillablePvBytes(f *float64) *CostReportCreate {
	if f != nil {
		crc.SetPvBytes(*f)
	}
	return crc
}

// SetLoadBalancerCost sets the "load_balancer_cost" field.
func (crc *CostReportCreate) SetLoadBalancerCost(f float64) *CostReportCreate {
	crc.mutation.SetLoadBalancerCost(f)
	return crc
}

// SetNillableLoadBalancerCost sets the "load_balancer_cost" field if the given value is not nil.
func (crc *CostReportCreate) SetNillableLoadBalancerCost(f *float64) *CostReportCreate {
	if f != nil {
		crc.SetLoadBalancerCost(*f)
	}
	return crc
}

// SetCPUCoreUsageAverage sets the "cpu_core_usage_average" field.
func (crc *CostReportCreate) SetCPUCoreUsageAverage(f float64) *CostReportCreate {
	crc.mutation.SetCPUCoreUsageAverage(f)
	return crc
}

// SetNillableCPUCoreUsageAverage sets the "cpu_core_usage_average" field if the given value is not nil.
func (crc *CostReportCreate) SetNillableCPUCoreUsageAverage(f *float64) *CostReportCreate {
	if f != nil {
		crc.SetCPUCoreUsageAverage(*f)
	}
	return crc
}

// SetCPUCoreUsageMax sets the "cpu_core_usage_max" field.
func (crc *CostReportCreate) SetCPUCoreUsageMax(f float64) *CostReportCreate {
	crc.mutation.SetCPUCoreUsageMax(f)
	return crc
}

// SetNillableCPUCoreUsageMax sets the "cpu_core_usage_max" field if the given value is not nil.
func (crc *CostReportCreate) SetNillableCPUCoreUsageMax(f *float64) *CostReportCreate {
	if f != nil {
		crc.SetCPUCoreUsageMax(*f)
	}
	return crc
}

// SetRAMByteUsageAverage sets the "ram_byte_usage_average" field.
func (crc *CostReportCreate) SetRAMByteUsageAverage(f float64) *CostReportCreate {
	crc.mutation.SetRAMByteUsageAverage(f)
	return crc
}

// SetNillableRAMByteUsageAverage sets the "ram_byte_usage_average" field if the given value is not nil.
func (crc *CostReportCreate) SetNillableRAMByteUsageAverage(f *float64) *CostReportCreate {
	if f != nil {
		crc.SetRAMByteUsageAverage(*f)
	}
	return crc
}

// SetRAMByteUsageMax sets the "ram_byte_usage_max" field.
func (crc *CostReportCreate) SetRAMByteUsageMax(f float64) *CostReportCreate {
	crc.mutation.SetRAMByteUsageMax(f)
	return crc
}

// SetNillableRAMByteUsageMax sets the "ram_byte_usage_max" field if the given value is not nil.
func (crc *CostReportCreate) SetNillableRAMByteUsageMax(f *float64) *CostReportCreate {
	if f != nil {
		crc.SetRAMByteUsageMax(*f)
	}
	return crc
}

// SetConnector sets the "connector" edge to the Connector entity.
func (crc *CostReportCreate) SetConnector(c *Connector) *CostReportCreate {
	return crc.SetConnectorID(c.ID)
}

// Mutation returns the CostReportMutation object of the builder.
func (crc *CostReportCreate) Mutation() *CostReportMutation {
	return crc.mutation
}

// Save creates the CostReport in the database.
func (crc *CostReportCreate) Save(ctx context.Context) (*CostReport, error) {
	if err := crc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, crc.sqlSave, crc.mutation, crc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (crc *CostReportCreate) SaveX(ctx context.Context) *CostReport {
	v, err := crc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (crc *CostReportCreate) Exec(ctx context.Context) error {
	_, err := crc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crc *CostReportCreate) ExecX(ctx context.Context) {
	if err := crc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (crc *CostReportCreate) defaults() error {
	if _, ok := crc.mutation.Pvs(); !ok {
		v := costreport.DefaultPvs
		crc.mutation.SetPvs(v)
	}
	if _, ok := crc.mutation.Labels(); !ok {
		v := costreport.DefaultLabels
		crc.mutation.SetLabels(v)
	}
	if _, ok := crc.mutation.TotalCost(); !ok {
		v := costreport.DefaultTotalCost
		crc.mutation.SetTotalCost(v)
	}
	if _, ok := crc.mutation.CPUCost(); !ok {
		v := costreport.DefaultCPUCost
		crc.mutation.SetCPUCost(v)
	}
	if _, ok := crc.mutation.CPUCoreRequest(); !ok {
		v := costreport.DefaultCPUCoreRequest
		crc.mutation.SetCPUCoreRequest(v)
	}
	if _, ok := crc.mutation.GpuCost(); !ok {
		v := costreport.DefaultGpuCost
		crc.mutation.SetGpuCost(v)
	}
	if _, ok := crc.mutation.GpuCount(); !ok {
		v := costreport.DefaultGpuCount
		crc.mutation.SetGpuCount(v)
	}
	if _, ok := crc.mutation.RAMCost(); !ok {
		v := costreport.DefaultRAMCost
		crc.mutation.SetRAMCost(v)
	}
	if _, ok := crc.mutation.RAMByteRequest(); !ok {
		v := costreport.DefaultRAMByteRequest
		crc.mutation.SetRAMByteRequest(v)
	}
	if _, ok := crc.mutation.PvCost(); !ok {
		v := costreport.DefaultPvCost
		crc.mutation.SetPvCost(v)
	}
	if _, ok := crc.mutation.PvBytes(); !ok {
		v := costreport.DefaultPvBytes
		crc.mutation.SetPvBytes(v)
	}
	if _, ok := crc.mutation.LoadBalancerCost(); !ok {
		v := costreport.DefaultLoadBalancerCost
		crc.mutation.SetLoadBalancerCost(v)
	}
	if _, ok := crc.mutation.CPUCoreUsageAverage(); !ok {
		v := costreport.DefaultCPUCoreUsageAverage
		crc.mutation.SetCPUCoreUsageAverage(v)
	}
	if _, ok := crc.mutation.CPUCoreUsageMax(); !ok {
		v := costreport.DefaultCPUCoreUsageMax
		crc.mutation.SetCPUCoreUsageMax(v)
	}
	if _, ok := crc.mutation.RAMByteUsageAverage(); !ok {
		v := costreport.DefaultRAMByteUsageAverage
		crc.mutation.SetRAMByteUsageAverage(v)
	}
	if _, ok := crc.mutation.RAMByteUsageMax(); !ok {
		v := costreport.DefaultRAMByteUsageMax
		crc.mutation.SetRAMByteUsageMax(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (crc *CostReportCreate) check() error {
	if _, ok := crc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`model: missing required field "CostReport.start_time"`)}
	}
	if _, ok := crc.mutation.EndTime(); !ok {
		return &ValidationError{Name: "end_time", err: errors.New(`model: missing required field "CostReport.end_time"`)}
	}
	if _, ok := crc.mutation.Minutes(); !ok {
		return &ValidationError{Name: "minutes", err: errors.New(`model: missing required field "CostReport.minutes"`)}
	}
	if _, ok := crc.mutation.ConnectorID(); !ok {
		return &ValidationError{Name: "connector_id", err: errors.New(`model: missing required field "CostReport.connector_id"`)}
	}
	if v, ok := crc.mutation.ConnectorID(); ok {
		if err := costreport.ConnectorIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "connector_id", err: fmt.Errorf(`model: validator failed for field "CostReport.connector_id": %w`, err)}
		}
	}
	if _, ok := crc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`model: missing required field "CostReport.name"`)}
	}
	if _, ok := crc.mutation.Fingerprint(); !ok {
		return &ValidationError{Name: "fingerprint", err: errors.New(`model: missing required field "CostReport.fingerprint"`)}
	}
	if _, ok := crc.mutation.Pvs(); !ok {
		return &ValidationError{Name: "pvs", err: errors.New(`model: missing required field "CostReport.pvs"`)}
	}
	if _, ok := crc.mutation.Labels(); !ok {
		return &ValidationError{Name: "labels", err: errors.New(`model: missing required field "CostReport.labels"`)}
	}
	if _, ok := crc.mutation.TotalCost(); !ok {
		return &ValidationError{Name: "totalCost", err: errors.New(`model: missing required field "CostReport.totalCost"`)}
	}
	if v, ok := crc.mutation.TotalCost(); ok {
		if err := costreport.TotalCostValidator(v); err != nil {
			return &ValidationError{Name: "totalCost", err: fmt.Errorf(`model: validator failed for field "CostReport.totalCost": %w`, err)}
		}
	}
	if _, ok := crc.mutation.CPUCost(); !ok {
		return &ValidationError{Name: "cpu_cost", err: errors.New(`model: missing required field "CostReport.cpu_cost"`)}
	}
	if v, ok := crc.mutation.CPUCost(); ok {
		if err := costreport.CPUCostValidator(v); err != nil {
			return &ValidationError{Name: "cpu_cost", err: fmt.Errorf(`model: validator failed for field "CostReport.cpu_cost": %w`, err)}
		}
	}
	if _, ok := crc.mutation.CPUCoreRequest(); !ok {
		return &ValidationError{Name: "cpu_core_request", err: errors.New(`model: missing required field "CostReport.cpu_core_request"`)}
	}
	if v, ok := crc.mutation.CPUCoreRequest(); ok {
		if err := costreport.CPUCoreRequestValidator(v); err != nil {
			return &ValidationError{Name: "cpu_core_request", err: fmt.Errorf(`model: validator failed for field "CostReport.cpu_core_request": %w`, err)}
		}
	}
	if _, ok := crc.mutation.GpuCost(); !ok {
		return &ValidationError{Name: "gpu_cost", err: errors.New(`model: missing required field "CostReport.gpu_cost"`)}
	}
	if v, ok := crc.mutation.GpuCost(); ok {
		if err := costreport.GpuCostValidator(v); err != nil {
			return &ValidationError{Name: "gpu_cost", err: fmt.Errorf(`model: validator failed for field "CostReport.gpu_cost": %w`, err)}
		}
	}
	if _, ok := crc.mutation.GpuCount(); !ok {
		return &ValidationError{Name: "gpu_count", err: errors.New(`model: missing required field "CostReport.gpu_count"`)}
	}
	if v, ok := crc.mutation.GpuCount(); ok {
		if err := costreport.GpuCountValidator(v); err != nil {
			return &ValidationError{Name: "gpu_count", err: fmt.Errorf(`model: validator failed for field "CostReport.gpu_count": %w`, err)}
		}
	}
	if _, ok := crc.mutation.RAMCost(); !ok {
		return &ValidationError{Name: "ram_cost", err: errors.New(`model: missing required field "CostReport.ram_cost"`)}
	}
	if v, ok := crc.mutation.RAMCost(); ok {
		if err := costreport.RAMCostValidator(v); err != nil {
			return &ValidationError{Name: "ram_cost", err: fmt.Errorf(`model: validator failed for field "CostReport.ram_cost": %w`, err)}
		}
	}
	if _, ok := crc.mutation.RAMByteRequest(); !ok {
		return &ValidationError{Name: "ram_byte_request", err: errors.New(`model: missing required field "CostReport.ram_byte_request"`)}
	}
	if v, ok := crc.mutation.RAMByteRequest(); ok {
		if err := costreport.RAMByteRequestValidator(v); err != nil {
			return &ValidationError{Name: "ram_byte_request", err: fmt.Errorf(`model: validator failed for field "CostReport.ram_byte_request": %w`, err)}
		}
	}
	if _, ok := crc.mutation.PvCost(); !ok {
		return &ValidationError{Name: "pv_cost", err: errors.New(`model: missing required field "CostReport.pv_cost"`)}
	}
	if v, ok := crc.mutation.PvCost(); ok {
		if err := costreport.PvCostValidator(v); err != nil {
			return &ValidationError{Name: "pv_cost", err: fmt.Errorf(`model: validator failed for field "CostReport.pv_cost": %w`, err)}
		}
	}
	if _, ok := crc.mutation.PvBytes(); !ok {
		return &ValidationError{Name: "pv_bytes", err: errors.New(`model: missing required field "CostReport.pv_bytes"`)}
	}
	if v, ok := crc.mutation.PvBytes(); ok {
		if err := costreport.PvBytesValidator(v); err != nil {
			return &ValidationError{Name: "pv_bytes", err: fmt.Errorf(`model: validator failed for field "CostReport.pv_bytes": %w`, err)}
		}
	}
	if _, ok := crc.mutation.LoadBalancerCost(); !ok {
		return &ValidationError{Name: "load_balancer_cost", err: errors.New(`model: missing required field "CostReport.load_balancer_cost"`)}
	}
	if v, ok := crc.mutation.LoadBalancerCost(); ok {
		if err := costreport.LoadBalancerCostValidator(v); err != nil {
			return &ValidationError{Name: "load_balancer_cost", err: fmt.Errorf(`model: validator failed for field "CostReport.load_balancer_cost": %w`, err)}
		}
	}
	if _, ok := crc.mutation.CPUCoreUsageAverage(); !ok {
		return &ValidationError{Name: "cpu_core_usage_average", err: errors.New(`model: missing required field "CostReport.cpu_core_usage_average"`)}
	}
	if v, ok := crc.mutation.CPUCoreUsageAverage(); ok {
		if err := costreport.CPUCoreUsageAverageValidator(v); err != nil {
			return &ValidationError{Name: "cpu_core_usage_average", err: fmt.Errorf(`model: validator failed for field "CostReport.cpu_core_usage_average": %w`, err)}
		}
	}
	if _, ok := crc.mutation.CPUCoreUsageMax(); !ok {
		return &ValidationError{Name: "cpu_core_usage_max", err: errors.New(`model: missing required field "CostReport.cpu_core_usage_max"`)}
	}
	if v, ok := crc.mutation.CPUCoreUsageMax(); ok {
		if err := costreport.CPUCoreUsageMaxValidator(v); err != nil {
			return &ValidationError{Name: "cpu_core_usage_max", err: fmt.Errorf(`model: validator failed for field "CostReport.cpu_core_usage_max": %w`, err)}
		}
	}
	if _, ok := crc.mutation.RAMByteUsageAverage(); !ok {
		return &ValidationError{Name: "ram_byte_usage_average", err: errors.New(`model: missing required field "CostReport.ram_byte_usage_average"`)}
	}
	if v, ok := crc.mutation.RAMByteUsageAverage(); ok {
		if err := costreport.RAMByteUsageAverageValidator(v); err != nil {
			return &ValidationError{Name: "ram_byte_usage_average", err: fmt.Errorf(`model: validator failed for field "CostReport.ram_byte_usage_average": %w`, err)}
		}
	}
	if _, ok := crc.mutation.RAMByteUsageMax(); !ok {
		return &ValidationError{Name: "ram_byte_usage_max", err: errors.New(`model: missing required field "CostReport.ram_byte_usage_max"`)}
	}
	if v, ok := crc.mutation.RAMByteUsageMax(); ok {
		if err := costreport.RAMByteUsageMaxValidator(v); err != nil {
			return &ValidationError{Name: "ram_byte_usage_max", err: fmt.Errorf(`model: validator failed for field "CostReport.ram_byte_usage_max": %w`, err)}
		}
	}
	if _, ok := crc.mutation.ConnectorID(); !ok {
		return &ValidationError{Name: "connector", err: errors.New(`model: missing required edge "CostReport.connector"`)}
	}
	return nil
}

func (crc *CostReportCreate) sqlSave(ctx context.Context) (*CostReport, error) {
	if err := crc.check(); err != nil {
		return nil, err
	}
	_node, _spec := crc.createSpec()
	if err := sqlgraph.CreateNode(ctx, crc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	crc.mutation.id = &_node.ID
	crc.mutation.done = true
	return _node, nil
}

func (crc *CostReportCreate) createSpec() (*CostReport, *sqlgraph.CreateSpec) {
	var (
		_node = &CostReport{config: crc.config}
		_spec = sqlgraph.NewCreateSpec(costreport.Table, sqlgraph.NewFieldSpec(costreport.FieldID, field.TypeInt))
	)
	_spec.Schema = crc.schemaConfig.CostReport
	_spec.OnConflict = crc.conflict
	if value, ok := crc.mutation.StartTime(); ok {
		_spec.SetField(costreport.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := crc.mutation.EndTime(); ok {
		_spec.SetField(costreport.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	if value, ok := crc.mutation.Minutes(); ok {
		_spec.SetField(costreport.FieldMinutes, field.TypeFloat64, value)
		_node.Minutes = value
	}
	if value, ok := crc.mutation.Name(); ok {
		_spec.SetField(costreport.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := crc.mutation.Fingerprint(); ok {
		_spec.SetField(costreport.FieldFingerprint, field.TypeString, value)
		_node.Fingerprint = value
	}
	if value, ok := crc.mutation.ClusterName(); ok {
		_spec.SetField(costreport.FieldClusterName, field.TypeString, value)
		_node.ClusterName = value
	}
	if value, ok := crc.mutation.Namespace(); ok {
		_spec.SetField(costreport.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := crc.mutation.Node(); ok {
		_spec.SetField(costreport.FieldNode, field.TypeString, value)
		_node.Node = value
	}
	if value, ok := crc.mutation.Controller(); ok {
		_spec.SetField(costreport.FieldController, field.TypeString, value)
		_node.Controller = value
	}
	if value, ok := crc.mutation.ControllerKind(); ok {
		_spec.SetField(costreport.FieldControllerKind, field.TypeString, value)
		_node.ControllerKind = value
	}
	if value, ok := crc.mutation.Pod(); ok {
		_spec.SetField(costreport.FieldPod, field.TypeString, value)
		_node.Pod = value
	}
	if value, ok := crc.mutation.Container(); ok {
		_spec.SetField(costreport.FieldContainer, field.TypeString, value)
		_node.Container = value
	}
	if value, ok := crc.mutation.Pvs(); ok {
		_spec.SetField(costreport.FieldPvs, field.TypeJSON, value)
		_node.Pvs = value
	}
	if value, ok := crc.mutation.Labels(); ok {
		_spec.SetField(costreport.FieldLabels, field.TypeJSON, value)
		_node.Labels = value
	}
	if value, ok := crc.mutation.TotalCost(); ok {
		_spec.SetField(costreport.FieldTotalCost, field.TypeFloat64, value)
		_node.TotalCost = value
	}
	if value, ok := crc.mutation.Currency(); ok {
		_spec.SetField(costreport.FieldCurrency, field.TypeInt, value)
		_node.Currency = value
	}
	if value, ok := crc.mutation.CPUCost(); ok {
		_spec.SetField(costreport.FieldCPUCost, field.TypeFloat64, value)
		_node.CPUCost = value
	}
	if value, ok := crc.mutation.CPUCoreRequest(); ok {
		_spec.SetField(costreport.FieldCPUCoreRequest, field.TypeFloat64, value)
		_node.CPUCoreRequest = value
	}
	if value, ok := crc.mutation.GpuCost(); ok {
		_spec.SetField(costreport.FieldGpuCost, field.TypeFloat64, value)
		_node.GpuCost = value
	}
	if value, ok := crc.mutation.GpuCount(); ok {
		_spec.SetField(costreport.FieldGpuCount, field.TypeFloat64, value)
		_node.GpuCount = value
	}
	if value, ok := crc.mutation.RAMCost(); ok {
		_spec.SetField(costreport.FieldRAMCost, field.TypeFloat64, value)
		_node.RAMCost = value
	}
	if value, ok := crc.mutation.RAMByteRequest(); ok {
		_spec.SetField(costreport.FieldRAMByteRequest, field.TypeFloat64, value)
		_node.RAMByteRequest = value
	}
	if value, ok := crc.mutation.PvCost(); ok {
		_spec.SetField(costreport.FieldPvCost, field.TypeFloat64, value)
		_node.PvCost = value
	}
	if value, ok := crc.mutation.PvBytes(); ok {
		_spec.SetField(costreport.FieldPvBytes, field.TypeFloat64, value)
		_node.PvBytes = value
	}
	if value, ok := crc.mutation.LoadBalancerCost(); ok {
		_spec.SetField(costreport.FieldLoadBalancerCost, field.TypeFloat64, value)
		_node.LoadBalancerCost = value
	}
	if value, ok := crc.mutation.CPUCoreUsageAverage(); ok {
		_spec.SetField(costreport.FieldCPUCoreUsageAverage, field.TypeFloat64, value)
		_node.CPUCoreUsageAverage = value
	}
	if value, ok := crc.mutation.CPUCoreUsageMax(); ok {
		_spec.SetField(costreport.FieldCPUCoreUsageMax, field.TypeFloat64, value)
		_node.CPUCoreUsageMax = value
	}
	if value, ok := crc.mutation.RAMByteUsageAverage(); ok {
		_spec.SetField(costreport.FieldRAMByteUsageAverage, field.TypeFloat64, value)
		_node.RAMByteUsageAverage = value
	}
	if value, ok := crc.mutation.RAMByteUsageMax(); ok {
		_spec.SetField(costreport.FieldRAMByteUsageMax, field.TypeFloat64, value)
		_node.RAMByteUsageMax = value
	}
	if nodes := crc.mutation.ConnectorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   costreport.ConnectorTable,
			Columns: []string{costreport.ConnectorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connector.FieldID, field.TypeString),
			},
		}
		edge.Schema = crc.schemaConfig.CostReport
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ConnectorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// Set is different from other Set* methods,
// it sets the value by judging the definition of each field within the entire object.
//
// For required fields, Set calls directly.
//
// For optional fields, Set calls if the value is not zero.
//
// For example:
//
//	## Required
//
//	db.SetX(obj.X)
//
//	## Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (crc *CostReportCreate) Set(obj *CostReport) *CostReportCreate {
	// Required.
	crc.SetStartTime(obj.StartTime)
	crc.SetEndTime(obj.EndTime)
	crc.SetMinutes(obj.Minutes)
	crc.SetConnectorID(obj.ConnectorID)
	crc.SetName(obj.Name)
	crc.SetFingerprint(obj.Fingerprint)
	crc.SetPvs(obj.Pvs)
	crc.SetLabels(obj.Labels)
	crc.SetTotalCost(obj.TotalCost)
	crc.SetCPUCost(obj.CPUCost)
	crc.SetCPUCoreRequest(obj.CPUCoreRequest)
	crc.SetGpuCost(obj.GpuCost)
	crc.SetGpuCount(obj.GpuCount)
	crc.SetRAMCost(obj.RAMCost)
	crc.SetRAMByteRequest(obj.RAMByteRequest)
	crc.SetPvCost(obj.PvCost)
	crc.SetPvBytes(obj.PvBytes)
	crc.SetLoadBalancerCost(obj.LoadBalancerCost)
	crc.SetCPUCoreUsageAverage(obj.CPUCoreUsageAverage)
	crc.SetCPUCoreUsageMax(obj.CPUCoreUsageMax)
	crc.SetRAMByteUsageAverage(obj.RAMByteUsageAverage)
	crc.SetRAMByteUsageMax(obj.RAMByteUsageMax)

	// Optional.
	if obj.ClusterName != "" {
		crc.SetClusterName(obj.ClusterName)
	}
	if obj.Namespace != "" {
		crc.SetNamespace(obj.Namespace)
	}
	if obj.Node != "" {
		crc.SetNode(obj.Node)
	}
	if obj.Controller != "" {
		crc.SetController(obj.Controller)
	}
	if obj.ControllerKind != "" {
		crc.SetControllerKind(obj.ControllerKind)
	}
	if obj.Pod != "" {
		crc.SetPod(obj.Pod)
	}
	if obj.Container != "" {
		crc.SetContainer(obj.Container)
	}
	if obj.Currency != 0 {
		crc.SetCurrency(obj.Currency)
	}

	// Record the given object.
	crc.object = obj

	return crc
}

// getClientSet returns the ClientSet for the given builder.
func (crc *CostReportCreate) getClientSet() (mc ClientSet) {
	if _, ok := crc.config.driver.(*txDriver); ok {
		tx := &Tx{config: crc.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: crc.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after created the CostReport entity,
// which is always good for cascading create operations.
func (crc *CostReportCreate) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *CostReport) error) (*CostReport, error) {
	obj, err := crc.Save(ctx)
	if err != nil {
		return nil, err
	}

	if len(cbs) == 0 {
		return obj, err
	}

	mc := crc.getClientSet()

	if x := crc.object; x != nil {
		if _, set := crc.mutation.Field(costreport.FieldStartTime); set {
			obj.StartTime = x.StartTime
		}
		if _, set := crc.mutation.Field(costreport.FieldEndTime); set {
			obj.EndTime = x.EndTime
		}
		if _, set := crc.mutation.Field(costreport.FieldMinutes); set {
			obj.Minutes = x.Minutes
		}
		if _, set := crc.mutation.Field(costreport.FieldConnectorID); set {
			obj.ConnectorID = x.ConnectorID
		}
		if _, set := crc.mutation.Field(costreport.FieldName); set {
			obj.Name = x.Name
		}
		if _, set := crc.mutation.Field(costreport.FieldFingerprint); set {
			obj.Fingerprint = x.Fingerprint
		}
		if _, set := crc.mutation.Field(costreport.FieldClusterName); set {
			obj.ClusterName = x.ClusterName
		}
		if _, set := crc.mutation.Field(costreport.FieldNamespace); set {
			obj.Namespace = x.Namespace
		}
		if _, set := crc.mutation.Field(costreport.FieldNode); set {
			obj.Node = x.Node
		}
		if _, set := crc.mutation.Field(costreport.FieldController); set {
			obj.Controller = x.Controller
		}
		if _, set := crc.mutation.Field(costreport.FieldControllerKind); set {
			obj.ControllerKind = x.ControllerKind
		}
		if _, set := crc.mutation.Field(costreport.FieldPod); set {
			obj.Pod = x.Pod
		}
		if _, set := crc.mutation.Field(costreport.FieldContainer); set {
			obj.Container = x.Container
		}
		if _, set := crc.mutation.Field(costreport.FieldCurrency); set {
			obj.Currency = x.Currency
		}
		obj.Edges = x.Edges
	}

	for i := range cbs {
		if err = cbs[i](ctx, mc, obj); err != nil {
			return nil, err
		}
	}

	return obj, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (crc *CostReportCreate) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *CostReport) error) *CostReport {
	obj, err := crc.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return obj
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (crc *CostReportCreate) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *CostReport) error) error {
	_, err := crc.SaveE(ctx, cbs...)
	return err
}

// ExecEX is like ExecE, but panics if an error occurs.
func (crc *CostReportCreate) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *CostReport) error) {
	if err := crc.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// Set leverages the CostReportCreate Set method,
// it sets the value by judging the definition of each field within the entire item of the given list.
//
// For required fields, Set calls directly.
//
// For optional fields, Set calls if the value is not zero.
//
// For example:
//
//	## Required
//
//	db.SetX(obj.X)
//
//	## Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (crcb *CostReportCreateBulk) Set(objs ...*CostReport) *CostReportCreateBulk {
	if len(objs) != 0 {
		client := NewCostReportClient(crcb.config)

		crcb.builders = make([]*CostReportCreate, len(objs))
		for i := range objs {
			crcb.builders[i] = client.Create().Set(objs[i])
		}

		// Record the given objects.
		crcb.objects = objs
	}

	return crcb
}

// getClientSet returns the ClientSet for the given builder.
func (crcb *CostReportCreateBulk) getClientSet() (mc ClientSet) {
	if _, ok := crcb.config.driver.(*txDriver); ok {
		tx := &Tx{config: crcb.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: crcb.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after created the CostReport entities,
// which is always good for cascading create operations.
func (crcb *CostReportCreateBulk) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *CostReport) error) ([]*CostReport, error) {
	objs, err := crcb.Save(ctx)
	if err != nil {
		return nil, err
	}

	if len(cbs) == 0 {
		return objs, err
	}

	mc := crcb.getClientSet()

	if x := crcb.objects; x != nil {
		for i := range x {
			if _, set := crcb.builders[i].mutation.Field(costreport.FieldStartTime); set {
				objs[i].StartTime = x[i].StartTime
			}
			if _, set := crcb.builders[i].mutation.Field(costreport.FieldEndTime); set {
				objs[i].EndTime = x[i].EndTime
			}
			if _, set := crcb.builders[i].mutation.Field(costreport.FieldMinutes); set {
				objs[i].Minutes = x[i].Minutes
			}
			if _, set := crcb.builders[i].mutation.Field(costreport.FieldConnectorID); set {
				objs[i].ConnectorID = x[i].ConnectorID
			}
			if _, set := crcb.builders[i].mutation.Field(costreport.FieldName); set {
				objs[i].Name = x[i].Name
			}
			if _, set := crcb.builders[i].mutation.Field(costreport.FieldFingerprint); set {
				objs[i].Fingerprint = x[i].Fingerprint
			}
			if _, set := crcb.builders[i].mutation.Field(costreport.FieldClusterName); set {
				objs[i].ClusterName = x[i].ClusterName
			}
			if _, set := crcb.builders[i].mutation.Field(costreport.FieldNamespace); set {
				objs[i].Namespace = x[i].Namespace
			}
			if _, set := crcb.builders[i].mutation.Field(costreport.FieldNode); set {
				objs[i].Node = x[i].Node
			}
			if _, set := crcb.builders[i].mutation.Field(costreport.FieldController); set {
				objs[i].Controller = x[i].Controller
			}
			if _, set := crcb.builders[i].mutation.Field(costreport.FieldControllerKind); set {
				objs[i].ControllerKind = x[i].ControllerKind
			}
			if _, set := crcb.builders[i].mutation.Field(costreport.FieldPod); set {
				objs[i].Pod = x[i].Pod
			}
			if _, set := crcb.builders[i].mutation.Field(costreport.FieldContainer); set {
				objs[i].Container = x[i].Container
			}
			if _, set := crcb.builders[i].mutation.Field(costreport.FieldCurrency); set {
				objs[i].Currency = x[i].Currency
			}
			objs[i].Edges = x[i].Edges
		}
	}

	for i := range objs {
		for j := range cbs {
			if err = cbs[j](ctx, mc, objs[i]); err != nil {
				return nil, err
			}
		}
	}

	return objs, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (crcb *CostReportCreateBulk) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *CostReport) error) []*CostReport {
	objs, err := crcb.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return objs
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (crcb *CostReportCreateBulk) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *CostReport) error) error {
	_, err := crcb.SaveE(ctx, cbs...)
	return err
}

// ExecEX is like ExecE, but panics if an error occurs.
func (crcb *CostReportCreateBulk) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *CostReport) error) {
	if err := crcb.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (u *CostReportUpsertOne) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *CostReport) error) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for CostReportUpsertOne.OnConflict")
	}
	u.create.fromUpsert = true
	return u.create.ExecE(ctx, cbs...)
}

// ExecEX is like ExecE, but panics if an error occurs.
func (u *CostReportUpsertOne) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *CostReport) error) {
	if err := u.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (u *CostReportUpsertBulk) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *CostReport) error) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model: OnConflict was set for builder %d. Set it on the CostReportUpsertBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for CostReportUpsertBulk.OnConflict")
	}
	u.create.fromUpsert = true
	return u.create.ExecE(ctx, cbs...)
}

// ExecEX is like ExecE, but panics if an error occurs.
func (u *CostReportUpsertBulk) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *CostReport) error) {
	if err := u.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CostReport.Create().
//		SetStartTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CostReportUpsert) {
//			SetStartTime(v+v).
//		}).
//		Exec(ctx)
func (crc *CostReportCreate) OnConflict(opts ...sql.ConflictOption) *CostReportUpsertOne {
	crc.conflict = opts
	return &CostReportUpsertOne{
		create: crc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CostReport.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (crc *CostReportCreate) OnConflictColumns(columns ...string) *CostReportUpsertOne {
	crc.conflict = append(crc.conflict, sql.ConflictColumns(columns...))
	return &CostReportUpsertOne{
		create: crc,
	}
}

type (
	// CostReportUpsertOne is the builder for "upsert"-ing
	//  one CostReport node.
	CostReportUpsertOne struct {
		create *CostReportCreate
	}

	// CostReportUpsert is the "OnConflict" setter.
	CostReportUpsert struct {
		*sql.UpdateSet
	}
)

// SetTotalCost sets the "totalCost" field.
func (u *CostReportUpsert) SetTotalCost(v float64) *CostReportUpsert {
	u.Set(costreport.FieldTotalCost, v)
	return u
}

// UpdateTotalCost sets the "totalCost" field to the value that was provided on create.
func (u *CostReportUpsert) UpdateTotalCost() *CostReportUpsert {
	u.SetExcluded(costreport.FieldTotalCost)
	return u
}

// AddTotalCost adds v to the "totalCost" field.
func (u *CostReportUpsert) AddTotalCost(v float64) *CostReportUpsert {
	u.Add(costreport.FieldTotalCost, v)
	return u
}

// SetCurrency sets the "currency" field.
func (u *CostReportUpsert) SetCurrency(v int) *CostReportUpsert {
	u.Set(costreport.FieldCurrency, v)
	return u
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *CostReportUpsert) UpdateCurrency() *CostReportUpsert {
	u.SetExcluded(costreport.FieldCurrency)
	return u
}

// AddCurrency adds v to the "currency" field.
func (u *CostReportUpsert) AddCurrency(v int) *CostReportUpsert {
	u.Add(costreport.FieldCurrency, v)
	return u
}

// ClearCurrency clears the value of the "currency" field.
func (u *CostReportUpsert) ClearCurrency() *CostReportUpsert {
	u.SetNull(costreport.FieldCurrency)
	return u
}

// SetCPUCost sets the "cpu_cost" field.
func (u *CostReportUpsert) SetCPUCost(v float64) *CostReportUpsert {
	u.Set(costreport.FieldCPUCost, v)
	return u
}

// UpdateCPUCost sets the "cpu_cost" field to the value that was provided on create.
func (u *CostReportUpsert) UpdateCPUCost() *CostReportUpsert {
	u.SetExcluded(costreport.FieldCPUCost)
	return u
}

// AddCPUCost adds v to the "cpu_cost" field.
func (u *CostReportUpsert) AddCPUCost(v float64) *CostReportUpsert {
	u.Add(costreport.FieldCPUCost, v)
	return u
}

// SetGpuCost sets the "gpu_cost" field.
func (u *CostReportUpsert) SetGpuCost(v float64) *CostReportUpsert {
	u.Set(costreport.FieldGpuCost, v)
	return u
}

// UpdateGpuCost sets the "gpu_cost" field to the value that was provided on create.
func (u *CostReportUpsert) UpdateGpuCost() *CostReportUpsert {
	u.SetExcluded(costreport.FieldGpuCost)
	return u
}

// AddGpuCost adds v to the "gpu_cost" field.
func (u *CostReportUpsert) AddGpuCost(v float64) *CostReportUpsert {
	u.Add(costreport.FieldGpuCost, v)
	return u
}

// SetRAMCost sets the "ram_cost" field.
func (u *CostReportUpsert) SetRAMCost(v float64) *CostReportUpsert {
	u.Set(costreport.FieldRAMCost, v)
	return u
}

// UpdateRAMCost sets the "ram_cost" field to the value that was provided on create.
func (u *CostReportUpsert) UpdateRAMCost() *CostReportUpsert {
	u.SetExcluded(costreport.FieldRAMCost)
	return u
}

// AddRAMCost adds v to the "ram_cost" field.
func (u *CostReportUpsert) AddRAMCost(v float64) *CostReportUpsert {
	u.Add(costreport.FieldRAMCost, v)
	return u
}

// SetPvCost sets the "pv_cost" field.
func (u *CostReportUpsert) SetPvCost(v float64) *CostReportUpsert {
	u.Set(costreport.FieldPvCost, v)
	return u
}

// UpdatePvCost sets the "pv_cost" field to the value that was provided on create.
func (u *CostReportUpsert) UpdatePvCost() *CostReportUpsert {
	u.SetExcluded(costreport.FieldPvCost)
	return u
}

// AddPvCost adds v to the "pv_cost" field.
func (u *CostReportUpsert) AddPvCost(v float64) *CostReportUpsert {
	u.Add(costreport.FieldPvCost, v)
	return u
}

// SetPvBytes sets the "pv_bytes" field.
func (u *CostReportUpsert) SetPvBytes(v float64) *CostReportUpsert {
	u.Set(costreport.FieldPvBytes, v)
	return u
}

// UpdatePvBytes sets the "pv_bytes" field to the value that was provided on create.
func (u *CostReportUpsert) UpdatePvBytes() *CostReportUpsert {
	u.SetExcluded(costreport.FieldPvBytes)
	return u
}

// AddPvBytes adds v to the "pv_bytes" field.
func (u *CostReportUpsert) AddPvBytes(v float64) *CostReportUpsert {
	u.Add(costreport.FieldPvBytes, v)
	return u
}

// SetLoadBalancerCost sets the "load_balancer_cost" field.
func (u *CostReportUpsert) SetLoadBalancerCost(v float64) *CostReportUpsert {
	u.Set(costreport.FieldLoadBalancerCost, v)
	return u
}

// UpdateLoadBalancerCost sets the "load_balancer_cost" field to the value that was provided on create.
func (u *CostReportUpsert) UpdateLoadBalancerCost() *CostReportUpsert {
	u.SetExcluded(costreport.FieldLoadBalancerCost)
	return u
}

// AddLoadBalancerCost adds v to the "load_balancer_cost" field.
func (u *CostReportUpsert) AddLoadBalancerCost(v float64) *CostReportUpsert {
	u.Add(costreport.FieldLoadBalancerCost, v)
	return u
}

// SetCPUCoreUsageAverage sets the "cpu_core_usage_average" field.
func (u *CostReportUpsert) SetCPUCoreUsageAverage(v float64) *CostReportUpsert {
	u.Set(costreport.FieldCPUCoreUsageAverage, v)
	return u
}

// UpdateCPUCoreUsageAverage sets the "cpu_core_usage_average" field to the value that was provided on create.
func (u *CostReportUpsert) UpdateCPUCoreUsageAverage() *CostReportUpsert {
	u.SetExcluded(costreport.FieldCPUCoreUsageAverage)
	return u
}

// AddCPUCoreUsageAverage adds v to the "cpu_core_usage_average" field.
func (u *CostReportUpsert) AddCPUCoreUsageAverage(v float64) *CostReportUpsert {
	u.Add(costreport.FieldCPUCoreUsageAverage, v)
	return u
}

// SetCPUCoreUsageMax sets the "cpu_core_usage_max" field.
func (u *CostReportUpsert) SetCPUCoreUsageMax(v float64) *CostReportUpsert {
	u.Set(costreport.FieldCPUCoreUsageMax, v)
	return u
}

// UpdateCPUCoreUsageMax sets the "cpu_core_usage_max" field to the value that was provided on create.
func (u *CostReportUpsert) UpdateCPUCoreUsageMax() *CostReportUpsert {
	u.SetExcluded(costreport.FieldCPUCoreUsageMax)
	return u
}

// AddCPUCoreUsageMax adds v to the "cpu_core_usage_max" field.
func (u *CostReportUpsert) AddCPUCoreUsageMax(v float64) *CostReportUpsert {
	u.Add(costreport.FieldCPUCoreUsageMax, v)
	return u
}

// SetRAMByteUsageAverage sets the "ram_byte_usage_average" field.
func (u *CostReportUpsert) SetRAMByteUsageAverage(v float64) *CostReportUpsert {
	u.Set(costreport.FieldRAMByteUsageAverage, v)
	return u
}

// UpdateRAMByteUsageAverage sets the "ram_byte_usage_average" field to the value that was provided on create.
func (u *CostReportUpsert) UpdateRAMByteUsageAverage() *CostReportUpsert {
	u.SetExcluded(costreport.FieldRAMByteUsageAverage)
	return u
}

// AddRAMByteUsageAverage adds v to the "ram_byte_usage_average" field.
func (u *CostReportUpsert) AddRAMByteUsageAverage(v float64) *CostReportUpsert {
	u.Add(costreport.FieldRAMByteUsageAverage, v)
	return u
}

// SetRAMByteUsageMax sets the "ram_byte_usage_max" field.
func (u *CostReportUpsert) SetRAMByteUsageMax(v float64) *CostReportUpsert {
	u.Set(costreport.FieldRAMByteUsageMax, v)
	return u
}

// UpdateRAMByteUsageMax sets the "ram_byte_usage_max" field to the value that was provided on create.
func (u *CostReportUpsert) UpdateRAMByteUsageMax() *CostReportUpsert {
	u.SetExcluded(costreport.FieldRAMByteUsageMax)
	return u
}

// AddRAMByteUsageMax adds v to the "ram_byte_usage_max" field.
func (u *CostReportUpsert) AddRAMByteUsageMax(v float64) *CostReportUpsert {
	u.Add(costreport.FieldRAMByteUsageMax, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.CostReport.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CostReportUpsertOne) UpdateNewValues() *CostReportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.StartTime(); exists {
			s.SetIgnore(costreport.FieldStartTime)
		}
		if _, exists := u.create.mutation.EndTime(); exists {
			s.SetIgnore(costreport.FieldEndTime)
		}
		if _, exists := u.create.mutation.Minutes(); exists {
			s.SetIgnore(costreport.FieldMinutes)
		}
		if _, exists := u.create.mutation.ConnectorID(); exists {
			s.SetIgnore(costreport.FieldConnectorID)
		}
		if _, exists := u.create.mutation.Name(); exists {
			s.SetIgnore(costreport.FieldName)
		}
		if _, exists := u.create.mutation.Fingerprint(); exists {
			s.SetIgnore(costreport.FieldFingerprint)
		}
		if _, exists := u.create.mutation.ClusterName(); exists {
			s.SetIgnore(costreport.FieldClusterName)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(costreport.FieldNamespace)
		}
		if _, exists := u.create.mutation.Node(); exists {
			s.SetIgnore(costreport.FieldNode)
		}
		if _, exists := u.create.mutation.Controller(); exists {
			s.SetIgnore(costreport.FieldController)
		}
		if _, exists := u.create.mutation.ControllerKind(); exists {
			s.SetIgnore(costreport.FieldControllerKind)
		}
		if _, exists := u.create.mutation.Pod(); exists {
			s.SetIgnore(costreport.FieldPod)
		}
		if _, exists := u.create.mutation.Container(); exists {
			s.SetIgnore(costreport.FieldContainer)
		}
		if _, exists := u.create.mutation.Pvs(); exists {
			s.SetIgnore(costreport.FieldPvs)
		}
		if _, exists := u.create.mutation.Labels(); exists {
			s.SetIgnore(costreport.FieldLabels)
		}
		if _, exists := u.create.mutation.CPUCoreRequest(); exists {
			s.SetIgnore(costreport.FieldCPUCoreRequest)
		}
		if _, exists := u.create.mutation.GpuCount(); exists {
			s.SetIgnore(costreport.FieldGpuCount)
		}
		if _, exists := u.create.mutation.RAMByteRequest(); exists {
			s.SetIgnore(costreport.FieldRAMByteRequest)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CostReport.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CostReportUpsertOne) Ignore() *CostReportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CostReportUpsertOne) DoNothing() *CostReportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CostReportCreate.OnConflict
// documentation for more info.
func (u *CostReportUpsertOne) Update(set func(*CostReportUpsert)) *CostReportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CostReportUpsert{UpdateSet: update})
	}))
	return u
}

// SetTotalCost sets the "totalCost" field.
func (u *CostReportUpsertOne) SetTotalCost(v float64) *CostReportUpsertOne {
	return u.Update(func(s *CostReportUpsert) {
		s.SetTotalCost(v)
	})
}

// AddTotalCost adds v to the "totalCost" field.
func (u *CostReportUpsertOne) AddTotalCost(v float64) *CostReportUpsertOne {
	return u.Update(func(s *CostReportUpsert) {
		s.AddTotalCost(v)
	})
}

// UpdateTotalCost sets the "totalCost" field to the value that was provided on create.
func (u *CostReportUpsertOne) UpdateTotalCost() *CostReportUpsertOne {
	return u.Update(func(s *CostReportUpsert) {
		s.UpdateTotalCost()
	})
}

// SetCurrency sets the "currency" field.
func (u *CostReportUpsertOne) SetCurrency(v int) *CostReportUpsertOne {
	return u.Update(func(s *CostReportUpsert) {
		s.SetCurrency(v)
	})
}

// AddCurrency adds v to the "currency" field.
func (u *CostReportUpsertOne) AddCurrency(v int) *CostReportUpsertOne {
	return u.Update(func(s *CostReportUpsert) {
		s.AddCurrency(v)
	})
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *CostReportUpsertOne) UpdateCurrency() *CostReportUpsertOne {
	return u.Update(func(s *CostReportUpsert) {
		s.UpdateCurrency()
	})
}

// ClearCurrency clears the value of the "currency" field.
func (u *CostReportUpsertOne) ClearCurrency() *CostReportUpsertOne {
	return u.Update(func(s *CostReportUpsert) {
		s.ClearCurrency()
	})
}

// SetCPUCost sets the "cpu_cost" field.
func (u *CostReportUpsertOne) SetCPUCost(v float64) *CostReportUpsertOne {
	return u.Update(func(s *CostReportUpsert) {
		s.SetCPUCost(v)
	})
}

// AddCPUCost adds v to the "cpu_cost" field.
func (u *CostReportUpsertOne) AddCPUCost(v float64) *CostReportUpsertOne {
	return u.Update(func(s *CostReportUpsert) {
		s.AddCPUCost(v)
	})
}

// UpdateCPUCost sets the "cpu_cost" field to the value that was provided on create.
func (u *CostReportUpsertOne) UpdateCPUCost() *CostReportUpsertOne {
	return u.Update(func(s *CostReportUpsert) {
		s.UpdateCPUCost()
	})
}

// SetGpuCost sets the "gpu_cost" field.
func (u *CostReportUpsertOne) SetGpuCost(v float64) *CostReportUpsertOne {
	return u.Update(func(s *CostReportUpsert) {
		s.SetGpuCost(v)
	})
}

// AddGpuCost adds v to the "gpu_cost" field.
func (u *CostReportUpsertOne) AddGpuCost(v float64) *CostReportUpsertOne {
	return u.Update(func(s *CostReportUpsert) {
		s.AddGpuCost(v)
	})
}

// UpdateGpuCost sets the "gpu_cost" field to the value that was provided on create.
func (u *CostReportUpsertOne) UpdateGpuCost() *CostReportUpsertOne {
	return u.Update(func(s *CostReportUpsert) {
		s.UpdateGpuCost()
	})
}

// SetRAMCost sets the "ram_cost" field.
func (u *CostReportUpsertOne) SetRAMCost(v float64) *CostReportUpsertOne {
	return u.Update(func(s *CostReportUpsert) {
		s.SetRAMCost(v)
	})
}

// AddRAMCost adds v to the "ram_cost" field.
func (u *CostReportUpsertOne) AddRAMCost(v float64) *CostReportUpsertOne {
	return u.Update(func(s *CostReportUpsert) {
		s.AddRAMCost(v)
	})
}

// UpdateRAMCost sets the "ram_cost" field to the value that was provided on create.
func (u *CostReportUpsertOne) UpdateRAMCost() *CostReportUpsertOne {
	return u.Update(func(s *CostReportUpsert) {
		s.UpdateRAMCost()
	})
}

// SetPvCost sets the "pv_cost" field.
func (u *CostReportUpsertOne) SetPvCost(v float64) *CostReportUpsertOne {
	return u.Update(func(s *CostReportUpsert) {
		s.SetPvCost(v)
	})
}

// AddPvCost adds v to the "pv_cost" field.
func (u *CostReportUpsertOne) AddPvCost(v float64) *CostReportUpsertOne {
	return u.Update(func(s *CostReportUpsert) {
		s.AddPvCost(v)
	})
}

// UpdatePvCost sets the "pv_cost" field to the value that was provided on create.
func (u *CostReportUpsertOne) UpdatePvCost() *CostReportUpsertOne {
	return u.Update(func(s *CostReportUpsert) {
		s.UpdatePvCost()
	})
}

// SetPvBytes sets the "pv_bytes" field.
func (u *CostReportUpsertOne) SetPvBytes(v float64) *CostReportUpsertOne {
	return u.Update(func(s *CostReportUpsert) {
		s.SetPvBytes(v)
	})
}

// AddPvBytes adds v to the "pv_bytes" field.
func (u *CostReportUpsertOne) AddPvBytes(v float64) *CostReportUpsertOne {
	return u.Update(func(s *CostReportUpsert) {
		s.AddPvBytes(v)
	})
}

// UpdatePvBytes sets the "pv_bytes" field to the value that was provided on create.
func (u *CostReportUpsertOne) UpdatePvBytes() *CostReportUpsertOne {
	return u.Update(func(s *CostReportUpsert) {
		s.UpdatePvBytes()
	})
}

// SetLoadBalancerCost sets the "load_balancer_cost" field.
func (u *CostReportUpsertOne) SetLoadBalancerCost(v float64) *CostReportUpsertOne {
	return u.Update(func(s *CostReportUpsert) {
		s.SetLoadBalancerCost(v)
	})
}

// AddLoadBalancerCost adds v to the "load_balancer_cost" field.
func (u *CostReportUpsertOne) AddLoadBalancerCost(v float64) *CostReportUpsertOne {
	return u.Update(func(s *CostReportUpsert) {
		s.AddLoadBalancerCost(v)
	})
}

// UpdateLoadBalancerCost sets the "load_balancer_cost" field to the value that was provided on create.
func (u *CostReportUpsertOne) UpdateLoadBalancerCost() *CostReportUpsertOne {
	return u.Update(func(s *CostReportUpsert) {
		s.UpdateLoadBalancerCost()
	})
}

// SetCPUCoreUsageAverage sets the "cpu_core_usage_average" field.
func (u *CostReportUpsertOne) SetCPUCoreUsageAverage(v float64) *CostReportUpsertOne {
	return u.Update(func(s *CostReportUpsert) {
		s.SetCPUCoreUsageAverage(v)
	})
}

// AddCPUCoreUsageAverage adds v to the "cpu_core_usage_average" field.
func (u *CostReportUpsertOne) AddCPUCoreUsageAverage(v float64) *CostReportUpsertOne {
	return u.Update(func(s *CostReportUpsert) {
		s.AddCPUCoreUsageAverage(v)
	})
}

// UpdateCPUCoreUsageAverage sets the "cpu_core_usage_average" field to the value that was provided on create.
func (u *CostReportUpsertOne) UpdateCPUCoreUsageAverage() *CostReportUpsertOne {
	return u.Update(func(s *CostReportUpsert) {
		s.UpdateCPUCoreUsageAverage()
	})
}

// SetCPUCoreUsageMax sets the "cpu_core_usage_max" field.
func (u *CostReportUpsertOne) SetCPUCoreUsageMax(v float64) *CostReportUpsertOne {
	return u.Update(func(s *CostReportUpsert) {
		s.SetCPUCoreUsageMax(v)
	})
}

// AddCPUCoreUsageMax adds v to the "cpu_core_usage_max" field.
func (u *CostReportUpsertOne) AddCPUCoreUsageMax(v float64) *CostReportUpsertOne {
	return u.Update(func(s *CostReportUpsert) {
		s.AddCPUCoreUsageMax(v)
	})
}

// UpdateCPUCoreUsageMax sets the "cpu_core_usage_max" field to the value that was provided on create.
func (u *CostReportUpsertOne) UpdateCPUCoreUsageMax() *CostReportUpsertOne {
	return u.Update(func(s *CostReportUpsert) {
		s.UpdateCPUCoreUsageMax()
	})
}

// SetRAMByteUsageAverage sets the "ram_byte_usage_average" field.
func (u *CostReportUpsertOne) SetRAMByteUsageAverage(v float64) *CostReportUpsertOne {
	return u.Update(func(s *CostReportUpsert) {
		s.SetRAMByteUsageAverage(v)
	})
}

// AddRAMByteUsageAverage adds v to the "ram_byte_usage_average" field.
func (u *CostReportUpsertOne) AddRAMByteUsageAverage(v float64) *CostReportUpsertOne {
	return u.Update(func(s *CostReportUpsert) {
		s.AddRAMByteUsageAverage(v)
	})
}

// UpdateRAMByteUsageAverage sets the "ram_byte_usage_average" field to the value that was provided on create.
func (u *CostReportUpsertOne) UpdateRAMByteUsageAverage() *CostReportUpsertOne {
	return u.Update(func(s *CostReportUpsert) {
		s.UpdateRAMByteUsageAverage()
	})
}

// SetRAMByteUsageMax sets the "ram_byte_usage_max" field.
func (u *CostReportUpsertOne) SetRAMByteUsageMax(v float64) *CostReportUpsertOne {
	return u.Update(func(s *CostReportUpsert) {
		s.SetRAMByteUsageMax(v)
	})
}

// AddRAMByteUsageMax adds v to the "ram_byte_usage_max" field.
func (u *CostReportUpsertOne) AddRAMByteUsageMax(v float64) *CostReportUpsertOne {
	return u.Update(func(s *CostReportUpsert) {
		s.AddRAMByteUsageMax(v)
	})
}

// UpdateRAMByteUsageMax sets the "ram_byte_usage_max" field to the value that was provided on create.
func (u *CostReportUpsertOne) UpdateRAMByteUsageMax() *CostReportUpsertOne {
	return u.Update(func(s *CostReportUpsert) {
		s.UpdateRAMByteUsageMax()
	})
}

// Exec executes the query.
func (u *CostReportUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for CostReportCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CostReportUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CostReportUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CostReportUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CostReportCreateBulk is the builder for creating many CostReport entities in bulk.
type CostReportCreateBulk struct {
	config
	builders   []*CostReportCreate
	conflict   []sql.ConflictOption
	objects    []*CostReport
	fromUpsert bool
}

// Save creates the CostReport entities in the database.
func (crcb *CostReportCreateBulk) Save(ctx context.Context) ([]*CostReport, error) {
	specs := make([]*sqlgraph.CreateSpec, len(crcb.builders))
	nodes := make([]*CostReport, len(crcb.builders))
	mutators := make([]Mutator, len(crcb.builders))
	for i := range crcb.builders {
		func(i int, root context.Context) {
			builder := crcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CostReportMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, crcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = crcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, crcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, crcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (crcb *CostReportCreateBulk) SaveX(ctx context.Context) []*CostReport {
	v, err := crcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (crcb *CostReportCreateBulk) Exec(ctx context.Context) error {
	_, err := crcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crcb *CostReportCreateBulk) ExecX(ctx context.Context) {
	if err := crcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CostReport.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CostReportUpsert) {
//			SetStartTime(v+v).
//		}).
//		Exec(ctx)
func (crcb *CostReportCreateBulk) OnConflict(opts ...sql.ConflictOption) *CostReportUpsertBulk {
	crcb.conflict = opts
	return &CostReportUpsertBulk{
		create: crcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CostReport.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (crcb *CostReportCreateBulk) OnConflictColumns(columns ...string) *CostReportUpsertBulk {
	crcb.conflict = append(crcb.conflict, sql.ConflictColumns(columns...))
	return &CostReportUpsertBulk{
		create: crcb,
	}
}

// CostReportUpsertBulk is the builder for "upsert"-ing
// a bulk of CostReport nodes.
type CostReportUpsertBulk struct {
	create *CostReportCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CostReport.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CostReportUpsertBulk) UpdateNewValues() *CostReportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.StartTime(); exists {
				s.SetIgnore(costreport.FieldStartTime)
			}
			if _, exists := b.mutation.EndTime(); exists {
				s.SetIgnore(costreport.FieldEndTime)
			}
			if _, exists := b.mutation.Minutes(); exists {
				s.SetIgnore(costreport.FieldMinutes)
			}
			if _, exists := b.mutation.ConnectorID(); exists {
				s.SetIgnore(costreport.FieldConnectorID)
			}
			if _, exists := b.mutation.Name(); exists {
				s.SetIgnore(costreport.FieldName)
			}
			if _, exists := b.mutation.Fingerprint(); exists {
				s.SetIgnore(costreport.FieldFingerprint)
			}
			if _, exists := b.mutation.ClusterName(); exists {
				s.SetIgnore(costreport.FieldClusterName)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(costreport.FieldNamespace)
			}
			if _, exists := b.mutation.Node(); exists {
				s.SetIgnore(costreport.FieldNode)
			}
			if _, exists := b.mutation.Controller(); exists {
				s.SetIgnore(costreport.FieldController)
			}
			if _, exists := b.mutation.ControllerKind(); exists {
				s.SetIgnore(costreport.FieldControllerKind)
			}
			if _, exists := b.mutation.Pod(); exists {
				s.SetIgnore(costreport.FieldPod)
			}
			if _, exists := b.mutation.Container(); exists {
				s.SetIgnore(costreport.FieldContainer)
			}
			if _, exists := b.mutation.Pvs(); exists {
				s.SetIgnore(costreport.FieldPvs)
			}
			if _, exists := b.mutation.Labels(); exists {
				s.SetIgnore(costreport.FieldLabels)
			}
			if _, exists := b.mutation.CPUCoreRequest(); exists {
				s.SetIgnore(costreport.FieldCPUCoreRequest)
			}
			if _, exists := b.mutation.GpuCount(); exists {
				s.SetIgnore(costreport.FieldGpuCount)
			}
			if _, exists := b.mutation.RAMByteRequest(); exists {
				s.SetIgnore(costreport.FieldRAMByteRequest)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CostReport.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CostReportUpsertBulk) Ignore() *CostReportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CostReportUpsertBulk) DoNothing() *CostReportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CostReportCreateBulk.OnConflict
// documentation for more info.
func (u *CostReportUpsertBulk) Update(set func(*CostReportUpsert)) *CostReportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CostReportUpsert{UpdateSet: update})
	}))
	return u
}

// SetTotalCost sets the "totalCost" field.
func (u *CostReportUpsertBulk) SetTotalCost(v float64) *CostReportUpsertBulk {
	return u.Update(func(s *CostReportUpsert) {
		s.SetTotalCost(v)
	})
}

// AddTotalCost adds v to the "totalCost" field.
func (u *CostReportUpsertBulk) AddTotalCost(v float64) *CostReportUpsertBulk {
	return u.Update(func(s *CostReportUpsert) {
		s.AddTotalCost(v)
	})
}

// UpdateTotalCost sets the "totalCost" field to the value that was provided on create.
func (u *CostReportUpsertBulk) UpdateTotalCost() *CostReportUpsertBulk {
	return u.Update(func(s *CostReportUpsert) {
		s.UpdateTotalCost()
	})
}

// SetCurrency sets the "currency" field.
func (u *CostReportUpsertBulk) SetCurrency(v int) *CostReportUpsertBulk {
	return u.Update(func(s *CostReportUpsert) {
		s.SetCurrency(v)
	})
}

// AddCurrency adds v to the "currency" field.
func (u *CostReportUpsertBulk) AddCurrency(v int) *CostReportUpsertBulk {
	return u.Update(func(s *CostReportUpsert) {
		s.AddCurrency(v)
	})
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *CostReportUpsertBulk) UpdateCurrency() *CostReportUpsertBulk {
	return u.Update(func(s *CostReportUpsert) {
		s.UpdateCurrency()
	})
}

// ClearCurrency clears the value of the "currency" field.
func (u *CostReportUpsertBulk) ClearCurrency() *CostReportUpsertBulk {
	return u.Update(func(s *CostReportUpsert) {
		s.ClearCurrency()
	})
}

// SetCPUCost sets the "cpu_cost" field.
func (u *CostReportUpsertBulk) SetCPUCost(v float64) *CostReportUpsertBulk {
	return u.Update(func(s *CostReportUpsert) {
		s.SetCPUCost(v)
	})
}

// AddCPUCost adds v to the "cpu_cost" field.
func (u *CostReportUpsertBulk) AddCPUCost(v float64) *CostReportUpsertBulk {
	return u.Update(func(s *CostReportUpsert) {
		s.AddCPUCost(v)
	})
}

// UpdateCPUCost sets the "cpu_cost" field to the value that was provided on create.
func (u *CostReportUpsertBulk) UpdateCPUCost() *CostReportUpsertBulk {
	return u.Update(func(s *CostReportUpsert) {
		s.UpdateCPUCost()
	})
}

// SetGpuCost sets the "gpu_cost" field.
func (u *CostReportUpsertBulk) SetGpuCost(v float64) *CostReportUpsertBulk {
	return u.Update(func(s *CostReportUpsert) {
		s.SetGpuCost(v)
	})
}

// AddGpuCost adds v to the "gpu_cost" field.
func (u *CostReportUpsertBulk) AddGpuCost(v float64) *CostReportUpsertBulk {
	return u.Update(func(s *CostReportUpsert) {
		s.AddGpuCost(v)
	})
}

// UpdateGpuCost sets the "gpu_cost" field to the value that was provided on create.
func (u *CostReportUpsertBulk) UpdateGpuCost() *CostReportUpsertBulk {
	return u.Update(func(s *CostReportUpsert) {
		s.UpdateGpuCost()
	})
}

// SetRAMCost sets the "ram_cost" field.
func (u *CostReportUpsertBulk) SetRAMCost(v float64) *CostReportUpsertBulk {
	return u.Update(func(s *CostReportUpsert) {
		s.SetRAMCost(v)
	})
}

// AddRAMCost adds v to the "ram_cost" field.
func (u *CostReportUpsertBulk) AddRAMCost(v float64) *CostReportUpsertBulk {
	return u.Update(func(s *CostReportUpsert) {
		s.AddRAMCost(v)
	})
}

// UpdateRAMCost sets the "ram_cost" field to the value that was provided on create.
func (u *CostReportUpsertBulk) UpdateRAMCost() *CostReportUpsertBulk {
	return u.Update(func(s *CostReportUpsert) {
		s.UpdateRAMCost()
	})
}

// SetPvCost sets the "pv_cost" field.
func (u *CostReportUpsertBulk) SetPvCost(v float64) *CostReportUpsertBulk {
	return u.Update(func(s *CostReportUpsert) {
		s.SetPvCost(v)
	})
}

// AddPvCost adds v to the "pv_cost" field.
func (u *CostReportUpsertBulk) AddPvCost(v float64) *CostReportUpsertBulk {
	return u.Update(func(s *CostReportUpsert) {
		s.AddPvCost(v)
	})
}

// UpdatePvCost sets the "pv_cost" field to the value that was provided on create.
func (u *CostReportUpsertBulk) UpdatePvCost() *CostReportUpsertBulk {
	return u.Update(func(s *CostReportUpsert) {
		s.UpdatePvCost()
	})
}

// SetPvBytes sets the "pv_bytes" field.
func (u *CostReportUpsertBulk) SetPvBytes(v float64) *CostReportUpsertBulk {
	return u.Update(func(s *CostReportUpsert) {
		s.SetPvBytes(v)
	})
}

// AddPvBytes adds v to the "pv_bytes" field.
func (u *CostReportUpsertBulk) AddPvBytes(v float64) *CostReportUpsertBulk {
	return u.Update(func(s *CostReportUpsert) {
		s.AddPvBytes(v)
	})
}

// UpdatePvBytes sets the "pv_bytes" field to the value that was provided on create.
func (u *CostReportUpsertBulk) UpdatePvBytes() *CostReportUpsertBulk {
	return u.Update(func(s *CostReportUpsert) {
		s.UpdatePvBytes()
	})
}

// SetLoadBalancerCost sets the "load_balancer_cost" field.
func (u *CostReportUpsertBulk) SetLoadBalancerCost(v float64) *CostReportUpsertBulk {
	return u.Update(func(s *CostReportUpsert) {
		s.SetLoadBalancerCost(v)
	})
}

// AddLoadBalancerCost adds v to the "load_balancer_cost" field.
func (u *CostReportUpsertBulk) AddLoadBalancerCost(v float64) *CostReportUpsertBulk {
	return u.Update(func(s *CostReportUpsert) {
		s.AddLoadBalancerCost(v)
	})
}

// UpdateLoadBalancerCost sets the "load_balancer_cost" field to the value that was provided on create.
func (u *CostReportUpsertBulk) UpdateLoadBalancerCost() *CostReportUpsertBulk {
	return u.Update(func(s *CostReportUpsert) {
		s.UpdateLoadBalancerCost()
	})
}

// SetCPUCoreUsageAverage sets the "cpu_core_usage_average" field.
func (u *CostReportUpsertBulk) SetCPUCoreUsageAverage(v float64) *CostReportUpsertBulk {
	return u.Update(func(s *CostReportUpsert) {
		s.SetCPUCoreUsageAverage(v)
	})
}

// AddCPUCoreUsageAverage adds v to the "cpu_core_usage_average" field.
func (u *CostReportUpsertBulk) AddCPUCoreUsageAverage(v float64) *CostReportUpsertBulk {
	return u.Update(func(s *CostReportUpsert) {
		s.AddCPUCoreUsageAverage(v)
	})
}

// UpdateCPUCoreUsageAverage sets the "cpu_core_usage_average" field to the value that was provided on create.
func (u *CostReportUpsertBulk) UpdateCPUCoreUsageAverage() *CostReportUpsertBulk {
	return u.Update(func(s *CostReportUpsert) {
		s.UpdateCPUCoreUsageAverage()
	})
}

// SetCPUCoreUsageMax sets the "cpu_core_usage_max" field.
func (u *CostReportUpsertBulk) SetCPUCoreUsageMax(v float64) *CostReportUpsertBulk {
	return u.Update(func(s *CostReportUpsert) {
		s.SetCPUCoreUsageMax(v)
	})
}

// AddCPUCoreUsageMax adds v to the "cpu_core_usage_max" field.
func (u *CostReportUpsertBulk) AddCPUCoreUsageMax(v float64) *CostReportUpsertBulk {
	return u.Update(func(s *CostReportUpsert) {
		s.AddCPUCoreUsageMax(v)
	})
}

// UpdateCPUCoreUsageMax sets the "cpu_core_usage_max" field to the value that was provided on create.
func (u *CostReportUpsertBulk) UpdateCPUCoreUsageMax() *CostReportUpsertBulk {
	return u.Update(func(s *CostReportUpsert) {
		s.UpdateCPUCoreUsageMax()
	})
}

// SetRAMByteUsageAverage sets the "ram_byte_usage_average" field.
func (u *CostReportUpsertBulk) SetRAMByteUsageAverage(v float64) *CostReportUpsertBulk {
	return u.Update(func(s *CostReportUpsert) {
		s.SetRAMByteUsageAverage(v)
	})
}

// AddRAMByteUsageAverage adds v to the "ram_byte_usage_average" field.
func (u *CostReportUpsertBulk) AddRAMByteUsageAverage(v float64) *CostReportUpsertBulk {
	return u.Update(func(s *CostReportUpsert) {
		s.AddRAMByteUsageAverage(v)
	})
}

// UpdateRAMByteUsageAverage sets the "ram_byte_usage_average" field to the value that was provided on create.
func (u *CostReportUpsertBulk) UpdateRAMByteUsageAverage() *CostReportUpsertBulk {
	return u.Update(func(s *CostReportUpsert) {
		s.UpdateRAMByteUsageAverage()
	})
}

// SetRAMByteUsageMax sets the "ram_byte_usage_max" field.
func (u *CostReportUpsertBulk) SetRAMByteUsageMax(v float64) *CostReportUpsertBulk {
	return u.Update(func(s *CostReportUpsert) {
		s.SetRAMByteUsageMax(v)
	})
}

// AddRAMByteUsageMax adds v to the "ram_byte_usage_max" field.
func (u *CostReportUpsertBulk) AddRAMByteUsageMax(v float64) *CostReportUpsertBulk {
	return u.Update(func(s *CostReportUpsert) {
		s.AddRAMByteUsageMax(v)
	})
}

// UpdateRAMByteUsageMax sets the "ram_byte_usage_max" field to the value that was provided on create.
func (u *CostReportUpsertBulk) UpdateRAMByteUsageMax() *CostReportUpsertBulk {
	return u.Update(func(s *CostReportUpsert) {
		s.UpdateRAMByteUsageMax()
	})
}

// Exec executes the query.
func (u *CostReportUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model: OnConflict was set for builder %d. Set it on the CostReportCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for CostReportCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CostReportUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
