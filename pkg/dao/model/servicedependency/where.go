// SPDX-FileCopyrightText: 2023 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "ent". DO NOT EDIT.

package servicedependency

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"

	"github.com/seal-io/seal/pkg/dao/model/internal"
	"github.com/seal-io/seal/pkg/dao/model/predicate"
	"github.com/seal-io/seal/pkg/dao/types/oid"
)

// ID filters vertices based on their ID field.
func ID(id oid.ID) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id oid.ID) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id oid.ID) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...oid.ID) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...oid.ID) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id oid.ID) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id oid.ID) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id oid.ID) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id oid.ID) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "createTime" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldEQ(FieldCreateTime, v))
}

// ServiceID applies equality check predicate on the "serviceID" field. It's identical to ServiceIDEQ.
func ServiceID(v oid.ID) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldEQ(FieldServiceID, v))
}

// DependentID applies equality check predicate on the "dependentID" field. It's identical to DependentIDEQ.
func DependentID(v oid.ID) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldEQ(FieldDependentID, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldEQ(FieldType, v))
}

// CreateTimeEQ applies the EQ predicate on the "createTime" field.
func CreateTimeEQ(v time.Time) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "createTime" field.
func CreateTimeNEQ(v time.Time) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "createTime" field.
func CreateTimeIn(vs ...time.Time) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "createTime" field.
func CreateTimeNotIn(vs ...time.Time) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "createTime" field.
func CreateTimeGT(v time.Time) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "createTime" field.
func CreateTimeGTE(v time.Time) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "createTime" field.
func CreateTimeLT(v time.Time) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "createTime" field.
func CreateTimeLTE(v time.Time) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldLTE(FieldCreateTime, v))
}

// ServiceIDEQ applies the EQ predicate on the "serviceID" field.
func ServiceIDEQ(v oid.ID) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldEQ(FieldServiceID, v))
}

// ServiceIDNEQ applies the NEQ predicate on the "serviceID" field.
func ServiceIDNEQ(v oid.ID) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldNEQ(FieldServiceID, v))
}

// ServiceIDIn applies the In predicate on the "serviceID" field.
func ServiceIDIn(vs ...oid.ID) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldIn(FieldServiceID, vs...))
}

// ServiceIDNotIn applies the NotIn predicate on the "serviceID" field.
func ServiceIDNotIn(vs ...oid.ID) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldNotIn(FieldServiceID, vs...))
}

// ServiceIDGT applies the GT predicate on the "serviceID" field.
func ServiceIDGT(v oid.ID) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldGT(FieldServiceID, v))
}

// ServiceIDGTE applies the GTE predicate on the "serviceID" field.
func ServiceIDGTE(v oid.ID) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldGTE(FieldServiceID, v))
}

// ServiceIDLT applies the LT predicate on the "serviceID" field.
func ServiceIDLT(v oid.ID) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldLT(FieldServiceID, v))
}

// ServiceIDLTE applies the LTE predicate on the "serviceID" field.
func ServiceIDLTE(v oid.ID) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldLTE(FieldServiceID, v))
}

// ServiceIDContains applies the Contains predicate on the "serviceID" field.
func ServiceIDContains(v oid.ID) predicate.ServiceDependency {
	vc := string(v)
	return predicate.ServiceDependency(sql.FieldContains(FieldServiceID, vc))
}

// ServiceIDHasPrefix applies the HasPrefix predicate on the "serviceID" field.
func ServiceIDHasPrefix(v oid.ID) predicate.ServiceDependency {
	vc := string(v)
	return predicate.ServiceDependency(sql.FieldHasPrefix(FieldServiceID, vc))
}

// ServiceIDHasSuffix applies the HasSuffix predicate on the "serviceID" field.
func ServiceIDHasSuffix(v oid.ID) predicate.ServiceDependency {
	vc := string(v)
	return predicate.ServiceDependency(sql.FieldHasSuffix(FieldServiceID, vc))
}

// ServiceIDEqualFold applies the EqualFold predicate on the "serviceID" field.
func ServiceIDEqualFold(v oid.ID) predicate.ServiceDependency {
	vc := string(v)
	return predicate.ServiceDependency(sql.FieldEqualFold(FieldServiceID, vc))
}

// ServiceIDContainsFold applies the ContainsFold predicate on the "serviceID" field.
func ServiceIDContainsFold(v oid.ID) predicate.ServiceDependency {
	vc := string(v)
	return predicate.ServiceDependency(sql.FieldContainsFold(FieldServiceID, vc))
}

// DependentIDEQ applies the EQ predicate on the "dependentID" field.
func DependentIDEQ(v oid.ID) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldEQ(FieldDependentID, v))
}

// DependentIDNEQ applies the NEQ predicate on the "dependentID" field.
func DependentIDNEQ(v oid.ID) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldNEQ(FieldDependentID, v))
}

// DependentIDIn applies the In predicate on the "dependentID" field.
func DependentIDIn(vs ...oid.ID) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldIn(FieldDependentID, vs...))
}

// DependentIDNotIn applies the NotIn predicate on the "dependentID" field.
func DependentIDNotIn(vs ...oid.ID) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldNotIn(FieldDependentID, vs...))
}

// DependentIDGT applies the GT predicate on the "dependentID" field.
func DependentIDGT(v oid.ID) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldGT(FieldDependentID, v))
}

// DependentIDGTE applies the GTE predicate on the "dependentID" field.
func DependentIDGTE(v oid.ID) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldGTE(FieldDependentID, v))
}

// DependentIDLT applies the LT predicate on the "dependentID" field.
func DependentIDLT(v oid.ID) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldLT(FieldDependentID, v))
}

// DependentIDLTE applies the LTE predicate on the "dependentID" field.
func DependentIDLTE(v oid.ID) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldLTE(FieldDependentID, v))
}

// DependentIDContains applies the Contains predicate on the "dependentID" field.
func DependentIDContains(v oid.ID) predicate.ServiceDependency {
	vc := string(v)
	return predicate.ServiceDependency(sql.FieldContains(FieldDependentID, vc))
}

// DependentIDHasPrefix applies the HasPrefix predicate on the "dependentID" field.
func DependentIDHasPrefix(v oid.ID) predicate.ServiceDependency {
	vc := string(v)
	return predicate.ServiceDependency(sql.FieldHasPrefix(FieldDependentID, vc))
}

// DependentIDHasSuffix applies the HasSuffix predicate on the "dependentID" field.
func DependentIDHasSuffix(v oid.ID) predicate.ServiceDependency {
	vc := string(v)
	return predicate.ServiceDependency(sql.FieldHasSuffix(FieldDependentID, vc))
}

// DependentIDEqualFold applies the EqualFold predicate on the "dependentID" field.
func DependentIDEqualFold(v oid.ID) predicate.ServiceDependency {
	vc := string(v)
	return predicate.ServiceDependency(sql.FieldEqualFold(FieldDependentID, vc))
}

// DependentIDContainsFold applies the ContainsFold predicate on the "dependentID" field.
func DependentIDContainsFold(v oid.ID) predicate.ServiceDependency {
	vc := string(v)
	return predicate.ServiceDependency(sql.FieldContainsFold(FieldDependentID, vc))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.ServiceDependency {
	return predicate.ServiceDependency(sql.FieldContainsFold(FieldType, v))
}

// HasService applies the HasEdge predicate on the "service" edge.
func HasService() predicate.ServiceDependency {
	return predicate.ServiceDependency(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ServiceTable, ServiceColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Service
		step.Edge.Schema = schemaConfig.ServiceDependency
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServiceWith applies the HasEdge predicate on the "service" edge with a given conditions (other predicates).
func HasServiceWith(preds ...predicate.Service) predicate.ServiceDependency {
	return predicate.ServiceDependency(func(s *sql.Selector) {
		step := newServiceStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Service
		step.Edge.Schema = schemaConfig.ServiceDependency
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ServiceDependency) predicate.ServiceDependency {
	return predicate.ServiceDependency(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ServiceDependency) predicate.ServiceDependency {
	return predicate.ServiceDependency(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ServiceDependency) predicate.ServiceDependency {
	return predicate.ServiceDependency(func(s *sql.Selector) {
		p(s.Not())
	})
}
