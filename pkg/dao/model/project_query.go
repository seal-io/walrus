// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus". DO NOT EDIT.

package model

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/seal-io/walrus/pkg/dao/model/catalog"
	"github.com/seal-io/walrus/pkg/dao/model/connector"
	"github.com/seal-io/walrus/pkg/dao/model/environment"
	"github.com/seal-io/walrus/pkg/dao/model/internal"
	"github.com/seal-io/walrus/pkg/dao/model/predicate"
	"github.com/seal-io/walrus/pkg/dao/model/project"
	"github.com/seal-io/walrus/pkg/dao/model/resource"
	"github.com/seal-io/walrus/pkg/dao/model/resourcecomponent"
	"github.com/seal-io/walrus/pkg/dao/model/resourcerevision"
	"github.com/seal-io/walrus/pkg/dao/model/subjectrolerelationship"
	"github.com/seal-io/walrus/pkg/dao/model/template"
	"github.com/seal-io/walrus/pkg/dao/model/templateversion"
	"github.com/seal-io/walrus/pkg/dao/model/variable"
	"github.com/seal-io/walrus/pkg/dao/model/workflow"
	"github.com/seal-io/walrus/pkg/dao/model/workflowexecution"
	"github.com/seal-io/walrus/pkg/dao/model/workflowstage"
	"github.com/seal-io/walrus/pkg/dao/model/workflowstageexecution"
	"github.com/seal-io/walrus/pkg/dao/model/workflowstep"
	"github.com/seal-io/walrus/pkg/dao/model/workflowstepexecution"
	"github.com/seal-io/walrus/pkg/dao/types/object"
)

// ProjectQuery is the builder for querying Project entities.
type ProjectQuery struct {
	config
	ctx                         *QueryContext
	order                       []project.OrderOption
	inters                      []Interceptor
	predicates                  []predicate.Project
	withEnvironments            *EnvironmentQuery
	withConnectors              *ConnectorQuery
	withSubjectRoles            *SubjectRoleRelationshipQuery
	withResources               *ResourceQuery
	withResourceComponents      *ResourceComponentQuery
	withResourceRevisions       *ResourceRevisionQuery
	withVariables               *VariableQuery
	withTemplates               *TemplateQuery
	withTemplateVersions        *TemplateVersionQuery
	withCatalogs                *CatalogQuery
	withWorkflows               *WorkflowQuery
	withWorkflowStages          *WorkflowStageQuery
	withWorkflowSteps           *WorkflowStepQuery
	withWorkflowExecutions      *WorkflowExecutionQuery
	withWorkflowStageExecutions *WorkflowStageExecutionQuery
	withWorkflowStepExecutions  *WorkflowStepExecutionQuery
	modifiers                   []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProjectQuery builder.
func (pq *ProjectQuery) Where(ps ...predicate.Project) *ProjectQuery {
	pq.predicates = append(pq.predicates, ps...)
	return pq
}

// Limit the number of records to be returned by this query.
func (pq *ProjectQuery) Limit(limit int) *ProjectQuery {
	pq.ctx.Limit = &limit
	return pq
}

// Offset to start from.
func (pq *ProjectQuery) Offset(offset int) *ProjectQuery {
	pq.ctx.Offset = &offset
	return pq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pq *ProjectQuery) Unique(unique bool) *ProjectQuery {
	pq.ctx.Unique = &unique
	return pq
}

// Order specifies how the records should be ordered.
func (pq *ProjectQuery) Order(o ...project.OrderOption) *ProjectQuery {
	pq.order = append(pq.order, o...)
	return pq
}

// QueryEnvironments chains the current query on the "environments" edge.
func (pq *ProjectQuery) QueryEnvironments() *EnvironmentQuery {
	query := (&EnvironmentClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, selector),
			sqlgraph.To(environment.Table, environment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.EnvironmentsTable, project.EnvironmentsColumn),
		)
		schemaConfig := pq.schemaConfig
		step.To.Schema = schemaConfig.Environment
		step.Edge.Schema = schemaConfig.Environment
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryConnectors chains the current query on the "connectors" edge.
func (pq *ProjectQuery) QueryConnectors() *ConnectorQuery {
	query := (&ConnectorClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, selector),
			sqlgraph.To(connector.Table, connector.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.ConnectorsTable, project.ConnectorsColumn),
		)
		schemaConfig := pq.schemaConfig
		step.To.Schema = schemaConfig.Connector
		step.Edge.Schema = schemaConfig.Connector
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubjectRoles chains the current query on the "subject_roles" edge.
func (pq *ProjectQuery) QuerySubjectRoles() *SubjectRoleRelationshipQuery {
	query := (&SubjectRoleRelationshipClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, selector),
			sqlgraph.To(subjectrolerelationship.Table, subjectrolerelationship.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.SubjectRolesTable, project.SubjectRolesColumn),
		)
		schemaConfig := pq.schemaConfig
		step.To.Schema = schemaConfig.SubjectRoleRelationship
		step.Edge.Schema = schemaConfig.SubjectRoleRelationship
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryResources chains the current query on the "resources" edge.
func (pq *ProjectQuery) QueryResources() *ResourceQuery {
	query := (&ResourceClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, selector),
			sqlgraph.To(resource.Table, resource.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.ResourcesTable, project.ResourcesColumn),
		)
		schemaConfig := pq.schemaConfig
		step.To.Schema = schemaConfig.Resource
		step.Edge.Schema = schemaConfig.Resource
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryResourceComponents chains the current query on the "resource_components" edge.
func (pq *ProjectQuery) QueryResourceComponents() *ResourceComponentQuery {
	query := (&ResourceComponentClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, selector),
			sqlgraph.To(resourcecomponent.Table, resourcecomponent.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.ResourceComponentsTable, project.ResourceComponentsColumn),
		)
		schemaConfig := pq.schemaConfig
		step.To.Schema = schemaConfig.ResourceComponent
		step.Edge.Schema = schemaConfig.ResourceComponent
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryResourceRevisions chains the current query on the "resource_revisions" edge.
func (pq *ProjectQuery) QueryResourceRevisions() *ResourceRevisionQuery {
	query := (&ResourceRevisionClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, selector),
			sqlgraph.To(resourcerevision.Table, resourcerevision.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.ResourceRevisionsTable, project.ResourceRevisionsColumn),
		)
		schemaConfig := pq.schemaConfig
		step.To.Schema = schemaConfig.ResourceRevision
		step.Edge.Schema = schemaConfig.ResourceRevision
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryVariables chains the current query on the "variables" edge.
func (pq *ProjectQuery) QueryVariables() *VariableQuery {
	query := (&VariableClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, selector),
			sqlgraph.To(variable.Table, variable.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.VariablesTable, project.VariablesColumn),
		)
		schemaConfig := pq.schemaConfig
		step.To.Schema = schemaConfig.Variable
		step.Edge.Schema = schemaConfig.Variable
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTemplates chains the current query on the "templates" edge.
func (pq *ProjectQuery) QueryTemplates() *TemplateQuery {
	query := (&TemplateClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, selector),
			sqlgraph.To(template.Table, template.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.TemplatesTable, project.TemplatesColumn),
		)
		schemaConfig := pq.schemaConfig
		step.To.Schema = schemaConfig.Template
		step.Edge.Schema = schemaConfig.Template
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTemplateVersions chains the current query on the "template_versions" edge.
func (pq *ProjectQuery) QueryTemplateVersions() *TemplateVersionQuery {
	query := (&TemplateVersionClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, selector),
			sqlgraph.To(templateversion.Table, templateversion.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.TemplateVersionsTable, project.TemplateVersionsColumn),
		)
		schemaConfig := pq.schemaConfig
		step.To.Schema = schemaConfig.TemplateVersion
		step.Edge.Schema = schemaConfig.TemplateVersion
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCatalogs chains the current query on the "catalogs" edge.
func (pq *ProjectQuery) QueryCatalogs() *CatalogQuery {
	query := (&CatalogClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, selector),
			sqlgraph.To(catalog.Table, catalog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.CatalogsTable, project.CatalogsColumn),
		)
		schemaConfig := pq.schemaConfig
		step.To.Schema = schemaConfig.Catalog
		step.Edge.Schema = schemaConfig.Catalog
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWorkflows chains the current query on the "workflows" edge.
func (pq *ProjectQuery) QueryWorkflows() *WorkflowQuery {
	query := (&WorkflowClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, selector),
			sqlgraph.To(workflow.Table, workflow.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.WorkflowsTable, project.WorkflowsColumn),
		)
		schemaConfig := pq.schemaConfig
		step.To.Schema = schemaConfig.Workflow
		step.Edge.Schema = schemaConfig.Workflow
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWorkflowStages chains the current query on the "workflow_stages" edge.
func (pq *ProjectQuery) QueryWorkflowStages() *WorkflowStageQuery {
	query := (&WorkflowStageClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, selector),
			sqlgraph.To(workflowstage.Table, workflowstage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.WorkflowStagesTable, project.WorkflowStagesColumn),
		)
		schemaConfig := pq.schemaConfig
		step.To.Schema = schemaConfig.WorkflowStage
		step.Edge.Schema = schemaConfig.WorkflowStage
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWorkflowSteps chains the current query on the "workflow_steps" edge.
func (pq *ProjectQuery) QueryWorkflowSteps() *WorkflowStepQuery {
	query := (&WorkflowStepClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, selector),
			sqlgraph.To(workflowstep.Table, workflowstep.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.WorkflowStepsTable, project.WorkflowStepsColumn),
		)
		schemaConfig := pq.schemaConfig
		step.To.Schema = schemaConfig.WorkflowStep
		step.Edge.Schema = schemaConfig.WorkflowStep
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWorkflowExecutions chains the current query on the "workflow_executions" edge.
func (pq *ProjectQuery) QueryWorkflowExecutions() *WorkflowExecutionQuery {
	query := (&WorkflowExecutionClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, selector),
			sqlgraph.To(workflowexecution.Table, workflowexecution.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.WorkflowExecutionsTable, project.WorkflowExecutionsColumn),
		)
		schemaConfig := pq.schemaConfig
		step.To.Schema = schemaConfig.WorkflowExecution
		step.Edge.Schema = schemaConfig.WorkflowExecution
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWorkflowStageExecutions chains the current query on the "workflow_stage_executions" edge.
func (pq *ProjectQuery) QueryWorkflowStageExecutions() *WorkflowStageExecutionQuery {
	query := (&WorkflowStageExecutionClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, selector),
			sqlgraph.To(workflowstageexecution.Table, workflowstageexecution.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.WorkflowStageExecutionsTable, project.WorkflowStageExecutionsColumn),
		)
		schemaConfig := pq.schemaConfig
		step.To.Schema = schemaConfig.WorkflowStageExecution
		step.Edge.Schema = schemaConfig.WorkflowStageExecution
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWorkflowStepExecutions chains the current query on the "workflow_step_executions" edge.
func (pq *ProjectQuery) QueryWorkflowStepExecutions() *WorkflowStepExecutionQuery {
	query := (&WorkflowStepExecutionClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, selector),
			sqlgraph.To(workflowstepexecution.Table, workflowstepexecution.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.WorkflowStepExecutionsTable, project.WorkflowStepExecutionsColumn),
		)
		schemaConfig := pq.schemaConfig
		step.To.Schema = schemaConfig.WorkflowStepExecution
		step.Edge.Schema = schemaConfig.WorkflowStepExecution
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Project entity from the query.
// Returns a *NotFoundError when no Project was found.
func (pq *ProjectQuery) First(ctx context.Context) (*Project, error) {
	nodes, err := pq.Limit(1).All(setContextOp(ctx, pq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{project.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pq *ProjectQuery) FirstX(ctx context.Context) *Project {
	node, err := pq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Project ID from the query.
// Returns a *NotFoundError when no Project ID was found.
func (pq *ProjectQuery) FirstID(ctx context.Context) (id object.ID, err error) {
	var ids []object.ID
	if ids, err = pq.Limit(1).IDs(setContextOp(ctx, pq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{project.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pq *ProjectQuery) FirstIDX(ctx context.Context) object.ID {
	id, err := pq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Project entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Project entity is found.
// Returns a *NotFoundError when no Project entities are found.
func (pq *ProjectQuery) Only(ctx context.Context) (*Project, error) {
	nodes, err := pq.Limit(2).All(setContextOp(ctx, pq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{project.Label}
	default:
		return nil, &NotSingularError{project.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pq *ProjectQuery) OnlyX(ctx context.Context) *Project {
	node, err := pq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Project ID in the query.
// Returns a *NotSingularError when more than one Project ID is found.
// Returns a *NotFoundError when no entities are found.
func (pq *ProjectQuery) OnlyID(ctx context.Context) (id object.ID, err error) {
	var ids []object.ID
	if ids, err = pq.Limit(2).IDs(setContextOp(ctx, pq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{project.Label}
	default:
		err = &NotSingularError{project.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pq *ProjectQuery) OnlyIDX(ctx context.Context) object.ID {
	id, err := pq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Projects.
func (pq *ProjectQuery) All(ctx context.Context) ([]*Project, error) {
	ctx = setContextOp(ctx, pq.ctx, "All")
	if err := pq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Project, *ProjectQuery]()
	return withInterceptors[[]*Project](ctx, pq, qr, pq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pq *ProjectQuery) AllX(ctx context.Context) []*Project {
	nodes, err := pq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Project IDs.
func (pq *ProjectQuery) IDs(ctx context.Context) (ids []object.ID, err error) {
	if pq.ctx.Unique == nil && pq.path != nil {
		pq.Unique(true)
	}
	ctx = setContextOp(ctx, pq.ctx, "IDs")
	if err = pq.Select(project.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pq *ProjectQuery) IDsX(ctx context.Context) []object.ID {
	ids, err := pq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pq *ProjectQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pq.ctx, "Count")
	if err := pq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pq, querierCount[*ProjectQuery](), pq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pq *ProjectQuery) CountX(ctx context.Context) int {
	count, err := pq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pq *ProjectQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pq.ctx, "Exist")
	switch _, err := pq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("model: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pq *ProjectQuery) ExistX(ctx context.Context) bool {
	exist, err := pq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProjectQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pq *ProjectQuery) Clone() *ProjectQuery {
	if pq == nil {
		return nil
	}
	return &ProjectQuery{
		config:                      pq.config,
		ctx:                         pq.ctx.Clone(),
		order:                       append([]project.OrderOption{}, pq.order...),
		inters:                      append([]Interceptor{}, pq.inters...),
		predicates:                  append([]predicate.Project{}, pq.predicates...),
		withEnvironments:            pq.withEnvironments.Clone(),
		withConnectors:              pq.withConnectors.Clone(),
		withSubjectRoles:            pq.withSubjectRoles.Clone(),
		withResources:               pq.withResources.Clone(),
		withResourceComponents:      pq.withResourceComponents.Clone(),
		withResourceRevisions:       pq.withResourceRevisions.Clone(),
		withVariables:               pq.withVariables.Clone(),
		withTemplates:               pq.withTemplates.Clone(),
		withTemplateVersions:        pq.withTemplateVersions.Clone(),
		withCatalogs:                pq.withCatalogs.Clone(),
		withWorkflows:               pq.withWorkflows.Clone(),
		withWorkflowStages:          pq.withWorkflowStages.Clone(),
		withWorkflowSteps:           pq.withWorkflowSteps.Clone(),
		withWorkflowExecutions:      pq.withWorkflowExecutions.Clone(),
		withWorkflowStageExecutions: pq.withWorkflowStageExecutions.Clone(),
		withWorkflowStepExecutions:  pq.withWorkflowStepExecutions.Clone(),
		// clone intermediate query.
		sql:  pq.sql.Clone(),
		path: pq.path,
	}
}

// WithEnvironments tells the query-builder to eager-load the nodes that are connected to
// the "environments" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProjectQuery) WithEnvironments(opts ...func(*EnvironmentQuery)) *ProjectQuery {
	query := (&EnvironmentClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withEnvironments = query
	return pq
}

// WithConnectors tells the query-builder to eager-load the nodes that are connected to
// the "connectors" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProjectQuery) WithConnectors(opts ...func(*ConnectorQuery)) *ProjectQuery {
	query := (&ConnectorClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withConnectors = query
	return pq
}

// WithSubjectRoles tells the query-builder to eager-load the nodes that are connected to
// the "subject_roles" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProjectQuery) WithSubjectRoles(opts ...func(*SubjectRoleRelationshipQuery)) *ProjectQuery {
	query := (&SubjectRoleRelationshipClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withSubjectRoles = query
	return pq
}

// WithResources tells the query-builder to eager-load the nodes that are connected to
// the "resources" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProjectQuery) WithResources(opts ...func(*ResourceQuery)) *ProjectQuery {
	query := (&ResourceClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withResources = query
	return pq
}

// WithResourceComponents tells the query-builder to eager-load the nodes that are connected to
// the "resource_components" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProjectQuery) WithResourceComponents(opts ...func(*ResourceComponentQuery)) *ProjectQuery {
	query := (&ResourceComponentClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withResourceComponents = query
	return pq
}

// WithResourceRevisions tells the query-builder to eager-load the nodes that are connected to
// the "resource_revisions" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProjectQuery) WithResourceRevisions(opts ...func(*ResourceRevisionQuery)) *ProjectQuery {
	query := (&ResourceRevisionClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withResourceRevisions = query
	return pq
}

// WithVariables tells the query-builder to eager-load the nodes that are connected to
// the "variables" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProjectQuery) WithVariables(opts ...func(*VariableQuery)) *ProjectQuery {
	query := (&VariableClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withVariables = query
	return pq
}

// WithTemplates tells the query-builder to eager-load the nodes that are connected to
// the "templates" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProjectQuery) WithTemplates(opts ...func(*TemplateQuery)) *ProjectQuery {
	query := (&TemplateClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withTemplates = query
	return pq
}

// WithTemplateVersions tells the query-builder to eager-load the nodes that are connected to
// the "template_versions" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProjectQuery) WithTemplateVersions(opts ...func(*TemplateVersionQuery)) *ProjectQuery {
	query := (&TemplateVersionClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withTemplateVersions = query
	return pq
}

// WithCatalogs tells the query-builder to eager-load the nodes that are connected to
// the "catalogs" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProjectQuery) WithCatalogs(opts ...func(*CatalogQuery)) *ProjectQuery {
	query := (&CatalogClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withCatalogs = query
	return pq
}

// WithWorkflows tells the query-builder to eager-load the nodes that are connected to
// the "workflows" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProjectQuery) WithWorkflows(opts ...func(*WorkflowQuery)) *ProjectQuery {
	query := (&WorkflowClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withWorkflows = query
	return pq
}

// WithWorkflowStages tells the query-builder to eager-load the nodes that are connected to
// the "workflow_stages" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProjectQuery) WithWorkflowStages(opts ...func(*WorkflowStageQuery)) *ProjectQuery {
	query := (&WorkflowStageClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withWorkflowStages = query
	return pq
}

// WithWorkflowSteps tells the query-builder to eager-load the nodes that are connected to
// the "workflow_steps" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProjectQuery) WithWorkflowSteps(opts ...func(*WorkflowStepQuery)) *ProjectQuery {
	query := (&WorkflowStepClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withWorkflowSteps = query
	return pq
}

// WithWorkflowExecutions tells the query-builder to eager-load the nodes that are connected to
// the "workflow_executions" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProjectQuery) WithWorkflowExecutions(opts ...func(*WorkflowExecutionQuery)) *ProjectQuery {
	query := (&WorkflowExecutionClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withWorkflowExecutions = query
	return pq
}

// WithWorkflowStageExecutions tells the query-builder to eager-load the nodes that are connected to
// the "workflow_stage_executions" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProjectQuery) WithWorkflowStageExecutions(opts ...func(*WorkflowStageExecutionQuery)) *ProjectQuery {
	query := (&WorkflowStageExecutionClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withWorkflowStageExecutions = query
	return pq
}

// WithWorkflowStepExecutions tells the query-builder to eager-load the nodes that are connected to
// the "workflow_step_executions" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProjectQuery) WithWorkflowStepExecutions(opts ...func(*WorkflowStepExecutionQuery)) *ProjectQuery {
	query := (&WorkflowStepExecutionClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withWorkflowStepExecutions = query
	return pq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Project.Query().
//		GroupBy(project.FieldName).
//		Aggregate(model.Count()).
//		Scan(ctx, &v)
func (pq *ProjectQuery) GroupBy(field string, fields ...string) *ProjectGroupBy {
	pq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ProjectGroupBy{build: pq}
	grbuild.flds = &pq.ctx.Fields
	grbuild.label = project.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.Project.Query().
//		Select(project.FieldName).
//		Scan(ctx, &v)
func (pq *ProjectQuery) Select(fields ...string) *ProjectSelect {
	pq.ctx.Fields = append(pq.ctx.Fields, fields...)
	sbuild := &ProjectSelect{ProjectQuery: pq}
	sbuild.label = project.Label
	sbuild.flds, sbuild.scan = &pq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ProjectSelect configured with the given aggregations.
func (pq *ProjectQuery) Aggregate(fns ...AggregateFunc) *ProjectSelect {
	return pq.Select().Aggregate(fns...)
}

func (pq *ProjectQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pq.inters {
		if inter == nil {
			return fmt.Errorf("model: uninitialized interceptor (forgotten import model/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pq); err != nil {
				return err
			}
		}
	}
	for _, f := range pq.ctx.Fields {
		if !project.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
		}
	}
	if pq.path != nil {
		prev, err := pq.path(ctx)
		if err != nil {
			return err
		}
		pq.sql = prev
	}
	return nil
}

func (pq *ProjectQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Project, error) {
	var (
		nodes       = []*Project{}
		_spec       = pq.querySpec()
		loadedTypes = [16]bool{
			pq.withEnvironments != nil,
			pq.withConnectors != nil,
			pq.withSubjectRoles != nil,
			pq.withResources != nil,
			pq.withResourceComponents != nil,
			pq.withResourceRevisions != nil,
			pq.withVariables != nil,
			pq.withTemplates != nil,
			pq.withTemplateVersions != nil,
			pq.withCatalogs != nil,
			pq.withWorkflows != nil,
			pq.withWorkflowStages != nil,
			pq.withWorkflowSteps != nil,
			pq.withWorkflowExecutions != nil,
			pq.withWorkflowStageExecutions != nil,
			pq.withWorkflowStepExecutions != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Project).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Project{config: pq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = pq.schemaConfig.Project
	ctx = internal.NewSchemaConfigContext(ctx, pq.schemaConfig)
	if len(pq.modifiers) > 0 {
		_spec.Modifiers = pq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pq.withEnvironments; query != nil {
		if err := pq.loadEnvironments(ctx, query, nodes,
			func(n *Project) { n.Edges.Environments = []*Environment{} },
			func(n *Project, e *Environment) { n.Edges.Environments = append(n.Edges.Environments, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withConnectors; query != nil {
		if err := pq.loadConnectors(ctx, query, nodes,
			func(n *Project) { n.Edges.Connectors = []*Connector{} },
			func(n *Project, e *Connector) { n.Edges.Connectors = append(n.Edges.Connectors, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withSubjectRoles; query != nil {
		if err := pq.loadSubjectRoles(ctx, query, nodes,
			func(n *Project) { n.Edges.SubjectRoles = []*SubjectRoleRelationship{} },
			func(n *Project, e *SubjectRoleRelationship) { n.Edges.SubjectRoles = append(n.Edges.SubjectRoles, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withResources; query != nil {
		if err := pq.loadResources(ctx, query, nodes,
			func(n *Project) { n.Edges.Resources = []*Resource{} },
			func(n *Project, e *Resource) { n.Edges.Resources = append(n.Edges.Resources, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withResourceComponents; query != nil {
		if err := pq.loadResourceComponents(ctx, query, nodes,
			func(n *Project) { n.Edges.ResourceComponents = []*ResourceComponent{} },
			func(n *Project, e *ResourceComponent) {
				n.Edges.ResourceComponents = append(n.Edges.ResourceComponents, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := pq.withResourceRevisions; query != nil {
		if err := pq.loadResourceRevisions(ctx, query, nodes,
			func(n *Project) { n.Edges.ResourceRevisions = []*ResourceRevision{} },
			func(n *Project, e *ResourceRevision) {
				n.Edges.ResourceRevisions = append(n.Edges.ResourceRevisions, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := pq.withVariables; query != nil {
		if err := pq.loadVariables(ctx, query, nodes,
			func(n *Project) { n.Edges.Variables = []*Variable{} },
			func(n *Project, e *Variable) { n.Edges.Variables = append(n.Edges.Variables, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withTemplates; query != nil {
		if err := pq.loadTemplates(ctx, query, nodes,
			func(n *Project) { n.Edges.Templates = []*Template{} },
			func(n *Project, e *Template) { n.Edges.Templates = append(n.Edges.Templates, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withTemplateVersions; query != nil {
		if err := pq.loadTemplateVersions(ctx, query, nodes,
			func(n *Project) { n.Edges.TemplateVersions = []*TemplateVersion{} },
			func(n *Project, e *TemplateVersion) { n.Edges.TemplateVersions = append(n.Edges.TemplateVersions, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withCatalogs; query != nil {
		if err := pq.loadCatalogs(ctx, query, nodes,
			func(n *Project) { n.Edges.Catalogs = []*Catalog{} },
			func(n *Project, e *Catalog) { n.Edges.Catalogs = append(n.Edges.Catalogs, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withWorkflows; query != nil {
		if err := pq.loadWorkflows(ctx, query, nodes,
			func(n *Project) { n.Edges.Workflows = []*Workflow{} },
			func(n *Project, e *Workflow) { n.Edges.Workflows = append(n.Edges.Workflows, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withWorkflowStages; query != nil {
		if err := pq.loadWorkflowStages(ctx, query, nodes,
			func(n *Project) { n.Edges.WorkflowStages = []*WorkflowStage{} },
			func(n *Project, e *WorkflowStage) { n.Edges.WorkflowStages = append(n.Edges.WorkflowStages, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withWorkflowSteps; query != nil {
		if err := pq.loadWorkflowSteps(ctx, query, nodes,
			func(n *Project) { n.Edges.WorkflowSteps = []*WorkflowStep{} },
			func(n *Project, e *WorkflowStep) { n.Edges.WorkflowSteps = append(n.Edges.WorkflowSteps, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withWorkflowExecutions; query != nil {
		if err := pq.loadWorkflowExecutions(ctx, query, nodes,
			func(n *Project) { n.Edges.WorkflowExecutions = []*WorkflowExecution{} },
			func(n *Project, e *WorkflowExecution) {
				n.Edges.WorkflowExecutions = append(n.Edges.WorkflowExecutions, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := pq.withWorkflowStageExecutions; query != nil {
		if err := pq.loadWorkflowStageExecutions(ctx, query, nodes,
			func(n *Project) { n.Edges.WorkflowStageExecutions = []*WorkflowStageExecution{} },
			func(n *Project, e *WorkflowStageExecution) {
				n.Edges.WorkflowStageExecutions = append(n.Edges.WorkflowStageExecutions, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := pq.withWorkflowStepExecutions; query != nil {
		if err := pq.loadWorkflowStepExecutions(ctx, query, nodes,
			func(n *Project) { n.Edges.WorkflowStepExecutions = []*WorkflowStepExecution{} },
			func(n *Project, e *WorkflowStepExecution) {
				n.Edges.WorkflowStepExecutions = append(n.Edges.WorkflowStepExecutions, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pq *ProjectQuery) loadEnvironments(ctx context.Context, query *EnvironmentQuery, nodes []*Project, init func(*Project), assign func(*Project, *Environment)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[object.ID]*Project)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(environment.FieldProjectID)
	}
	query.Where(predicate.Environment(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(project.EnvironmentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ProjectID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "project_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProjectQuery) loadConnectors(ctx context.Context, query *ConnectorQuery, nodes []*Project, init func(*Project), assign func(*Project, *Connector)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[object.ID]*Project)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(connector.FieldProjectID)
	}
	query.Where(predicate.Connector(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(project.ConnectorsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ProjectID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "project_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProjectQuery) loadSubjectRoles(ctx context.Context, query *SubjectRoleRelationshipQuery, nodes []*Project, init func(*Project), assign func(*Project, *SubjectRoleRelationship)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[object.ID]*Project)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(subjectrolerelationship.FieldProjectID)
	}
	query.Where(predicate.SubjectRoleRelationship(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(project.SubjectRolesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ProjectID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "project_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProjectQuery) loadResources(ctx context.Context, query *ResourceQuery, nodes []*Project, init func(*Project), assign func(*Project, *Resource)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[object.ID]*Project)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(resource.FieldProjectID)
	}
	query.Where(predicate.Resource(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(project.ResourcesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ProjectID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "project_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProjectQuery) loadResourceComponents(ctx context.Context, query *ResourceComponentQuery, nodes []*Project, init func(*Project), assign func(*Project, *ResourceComponent)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[object.ID]*Project)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(resourcecomponent.FieldProjectID)
	}
	query.Where(predicate.ResourceComponent(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(project.ResourceComponentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ProjectID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "project_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProjectQuery) loadResourceRevisions(ctx context.Context, query *ResourceRevisionQuery, nodes []*Project, init func(*Project), assign func(*Project, *ResourceRevision)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[object.ID]*Project)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(resourcerevision.FieldProjectID)
	}
	query.Where(predicate.ResourceRevision(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(project.ResourceRevisionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ProjectID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "project_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProjectQuery) loadVariables(ctx context.Context, query *VariableQuery, nodes []*Project, init func(*Project), assign func(*Project, *Variable)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[object.ID]*Project)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(variable.FieldProjectID)
	}
	query.Where(predicate.Variable(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(project.VariablesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ProjectID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "project_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProjectQuery) loadTemplates(ctx context.Context, query *TemplateQuery, nodes []*Project, init func(*Project), assign func(*Project, *Template)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[object.ID]*Project)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(template.FieldProjectID)
	}
	query.Where(predicate.Template(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(project.TemplatesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ProjectID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "project_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProjectQuery) loadTemplateVersions(ctx context.Context, query *TemplateVersionQuery, nodes []*Project, init func(*Project), assign func(*Project, *TemplateVersion)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[object.ID]*Project)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(templateversion.FieldProjectID)
	}
	query.Where(predicate.TemplateVersion(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(project.TemplateVersionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ProjectID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "project_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProjectQuery) loadCatalogs(ctx context.Context, query *CatalogQuery, nodes []*Project, init func(*Project), assign func(*Project, *Catalog)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[object.ID]*Project)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(catalog.FieldProjectID)
	}
	query.Where(predicate.Catalog(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(project.CatalogsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ProjectID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "project_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProjectQuery) loadWorkflows(ctx context.Context, query *WorkflowQuery, nodes []*Project, init func(*Project), assign func(*Project, *Workflow)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[object.ID]*Project)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(workflow.FieldProjectID)
	}
	query.Where(predicate.Workflow(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(project.WorkflowsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ProjectID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "project_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProjectQuery) loadWorkflowStages(ctx context.Context, query *WorkflowStageQuery, nodes []*Project, init func(*Project), assign func(*Project, *WorkflowStage)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[object.ID]*Project)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(workflowstage.FieldProjectID)
	}
	query.Where(predicate.WorkflowStage(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(project.WorkflowStagesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ProjectID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "project_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProjectQuery) loadWorkflowSteps(ctx context.Context, query *WorkflowStepQuery, nodes []*Project, init func(*Project), assign func(*Project, *WorkflowStep)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[object.ID]*Project)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(workflowstep.FieldProjectID)
	}
	query.Where(predicate.WorkflowStep(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(project.WorkflowStepsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ProjectID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "project_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProjectQuery) loadWorkflowExecutions(ctx context.Context, query *WorkflowExecutionQuery, nodes []*Project, init func(*Project), assign func(*Project, *WorkflowExecution)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[object.ID]*Project)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(workflowexecution.FieldProjectID)
	}
	query.Where(predicate.WorkflowExecution(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(project.WorkflowExecutionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ProjectID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "project_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProjectQuery) loadWorkflowStageExecutions(ctx context.Context, query *WorkflowStageExecutionQuery, nodes []*Project, init func(*Project), assign func(*Project, *WorkflowStageExecution)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[object.ID]*Project)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(workflowstageexecution.FieldProjectID)
	}
	query.Where(predicate.WorkflowStageExecution(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(project.WorkflowStageExecutionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ProjectID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "project_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProjectQuery) loadWorkflowStepExecutions(ctx context.Context, query *WorkflowStepExecutionQuery, nodes []*Project, init func(*Project), assign func(*Project, *WorkflowStepExecution)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[object.ID]*Project)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(workflowstepexecution.FieldProjectID)
	}
	query.Where(predicate.WorkflowStepExecution(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(project.WorkflowStepExecutionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ProjectID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "project_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (pq *ProjectQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pq.querySpec()
	_spec.Node.Schema = pq.schemaConfig.Project
	ctx = internal.NewSchemaConfigContext(ctx, pq.schemaConfig)
	if len(pq.modifiers) > 0 {
		_spec.Modifiers = pq.modifiers
	}
	_spec.Node.Columns = pq.ctx.Fields
	if len(pq.ctx.Fields) > 0 {
		_spec.Unique = pq.ctx.Unique != nil && *pq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pq.driver, _spec)
}

func (pq *ProjectQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(project.Table, project.Columns, sqlgraph.NewFieldSpec(project.FieldID, field.TypeString))
	_spec.From = pq.sql
	if unique := pq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pq.path != nil {
		_spec.Unique = true
	}
	if fields := pq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, project.FieldID)
		for i := range fields {
			if fields[i] != project.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pq *ProjectQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pq.driver.Dialect())
	t1 := builder.Table(project.Table)
	columns := pq.ctx.Fields
	if len(columns) == 0 {
		columns = project.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pq.sql != nil {
		selector = pq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pq.ctx.Unique != nil && *pq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(pq.schemaConfig.Project)
	ctx = internal.NewSchemaConfigContext(ctx, pq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range pq.modifiers {
		m(selector)
	}
	for _, p := range pq.predicates {
		p(selector)
	}
	for _, p := range pq.order {
		p(selector)
	}
	if offset := pq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (pq *ProjectQuery) ForUpdate(opts ...sql.LockOption) *ProjectQuery {
	if pq.driver.Dialect() == dialect.Postgres {
		pq.Unique(false)
	}
	pq.modifiers = append(pq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return pq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (pq *ProjectQuery) ForShare(opts ...sql.LockOption) *ProjectQuery {
	if pq.driver.Dialect() == dialect.Postgres {
		pq.Unique(false)
	}
	pq.modifiers = append(pq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return pq
}

// Modify adds a query modifier for attaching custom logic to queries.
func (pq *ProjectQuery) Modify(modifiers ...func(s *sql.Selector)) *ProjectSelect {
	pq.modifiers = append(pq.modifiers, modifiers...)
	return pq.Select()
}

// WhereP appends storage-level predicates to the ProjectQuery builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (pq *ProjectQuery) WhereP(ps ...func(*sql.Selector)) {
	var wps = make([]predicate.Project, 0, len(ps))
	for i := 0; i < len(ps); i++ {
		wps = append(wps, predicate.Project(ps[i]))
	}
	pq.predicates = append(pq.predicates, wps...)
}

// ProjectGroupBy is the group-by builder for Project entities.
type ProjectGroupBy struct {
	selector
	build *ProjectQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pgb *ProjectGroupBy) Aggregate(fns ...AggregateFunc) *ProjectGroupBy {
	pgb.fns = append(pgb.fns, fns...)
	return pgb
}

// Scan applies the selector query and scans the result into the given value.
func (pgb *ProjectGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pgb.build.ctx, "GroupBy")
	if err := pgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProjectQuery, *ProjectGroupBy](ctx, pgb.build, pgb, pgb.build.inters, v)
}

func (pgb *ProjectGroupBy) sqlScan(ctx context.Context, root *ProjectQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pgb.fns))
	for _, fn := range pgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pgb.flds)+len(pgb.fns))
		for _, f := range *pgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ProjectSelect is the builder for selecting fields of Project entities.
type ProjectSelect struct {
	*ProjectQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ps *ProjectSelect) Aggregate(fns ...AggregateFunc) *ProjectSelect {
	ps.fns = append(ps.fns, fns...)
	return ps
}

// Scan applies the selector query and scans the result into the given value.
func (ps *ProjectSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ps.ctx, "Select")
	if err := ps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProjectQuery, *ProjectSelect](ctx, ps.ProjectQuery, ps, ps.inters, v)
}

func (ps *ProjectSelect) sqlScan(ctx context.Context, root *ProjectQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ps.fns))
	for _, fn := range ps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ps *ProjectSelect) Modify(modifiers ...func(s *sql.Selector)) *ProjectSelect {
	ps.modifiers = append(ps.modifiers, modifiers...)
	return ps
}
