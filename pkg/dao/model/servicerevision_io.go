// SPDX-FileCopyrightText: 2023 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "ent". DO NOT EDIT.

package model

import (
	"time"

	"github.com/seal-io/seal/pkg/dao/types"
	"github.com/seal-io/seal/pkg/dao/types/crypto"
	"github.com/seal-io/seal/pkg/dao/types/oid"
	"github.com/seal-io/seal/pkg/dao/types/property"
)

// ServiceRevisionQueryInput is the input for the ServiceRevision query.
type ServiceRevisionQueryInput struct {
	// ID holds the value of the "id" field.
	ID oid.ID `uri:"id,omitempty" json:"id,omitempty"`
}

// Model converts the ServiceRevisionQueryInput to ServiceRevision.
func (in ServiceRevisionQueryInput) Model() *ServiceRevision {
	return &ServiceRevision{
		ID: in.ID,
	}
}

// ServiceRevisionCreateInput is the input for the ServiceRevision creation.
type ServiceRevisionCreateInput struct {
	// Status of the resource.
	Status string `json:"status,omitempty"`
	// Extra message for status, like error details.
	StatusMessage string `json:"statusMessage,omitempty"`
	// ID of the template.
	TemplateID string `json:"templateID"`
	// Version of the template.
	TemplateVersion string `json:"templateVersion"`
	// Attributes to configure the template.
	Attributes property.Values `json:"attributes,omitempty"`
	// Secrets of the revision.
	Secrets crypto.Map[string, string] `json:"secrets,omitempty"`
	// Input plan of the revision.
	InputPlan string `json:"inputPlan,omitempty"`
	// Output of the revision.
	Output string `json:"output,omitempty"`
	// Type of deployer.
	DeployerType string `json:"deployerType,omitempty"`
	// Duration in seconds of the revision deploying.
	Duration int `json:"duration,omitempty"`
	// Previous provider requirement of the revision.
	PreviousRequiredProviders []types.ProviderRequirement `json:"previousRequiredProviders,omitempty"`
	// Tags of the revision.
	Tags []string `json:"tags,omitempty"`
	// Service to which the revision belongs.
	Service ServiceQueryInput `json:"service"`
	// Environment to which the revision deploys.
	Environment EnvironmentQueryInput `json:"environment"`
	// Project to which the revision belongs.
	Project ProjectQueryInput `json:"project"`
}

// Model converts the ServiceRevisionCreateInput to ServiceRevision.
func (in ServiceRevisionCreateInput) Model() *ServiceRevision {
	var entity = &ServiceRevision{
		Status:                    in.Status,
		StatusMessage:             in.StatusMessage,
		TemplateID:                in.TemplateID,
		TemplateVersion:           in.TemplateVersion,
		Attributes:                in.Attributes,
		Secrets:                   in.Secrets,
		InputPlan:                 in.InputPlan,
		Output:                    in.Output,
		DeployerType:              in.DeployerType,
		Duration:                  in.Duration,
		PreviousRequiredProviders: in.PreviousRequiredProviders,
		Tags:                      in.Tags,
	}
	entity.ServiceID = in.Service.ID
	entity.EnvironmentID = in.Environment.ID
	entity.ProjectID = in.Project.ID
	return entity
}

// ServiceRevisionUpdateInput is the input for the ServiceRevision modification.
type ServiceRevisionUpdateInput struct {
	// ID holds the value of the "id" field.
	ID oid.ID `uri:"id" json:"-"`
	// Status of the resource.
	Status string `json:"status,omitempty"`
	// Extra message for status, like error details.
	StatusMessage string `json:"statusMessage,omitempty"`
	// Version of the template.
	TemplateVersion string `json:"templateVersion,omitempty"`
	// Attributes to configure the template.
	Attributes property.Values `json:"attributes,omitempty"`
	// Secrets of the revision.
	Secrets crypto.Map[string, string] `json:"secrets,omitempty"`
	// Input plan of the revision.
	InputPlan string `json:"inputPlan,omitempty"`
	// Output of the revision.
	Output string `json:"output,omitempty"`
	// Type of deployer.
	DeployerType string `json:"deployerType,omitempty"`
	// Duration in seconds of the revision deploying.
	Duration int `json:"duration,omitempty"`
	// Previous provider requirement of the revision.
	PreviousRequiredProviders []types.ProviderRequirement `json:"previousRequiredProviders,omitempty"`
	// Tags of the revision.
	Tags []string `json:"tags,omitempty"`
}

// Model converts the ServiceRevisionUpdateInput to ServiceRevision.
func (in ServiceRevisionUpdateInput) Model() *ServiceRevision {
	var entity = &ServiceRevision{
		ID:                        in.ID,
		Status:                    in.Status,
		StatusMessage:             in.StatusMessage,
		TemplateVersion:           in.TemplateVersion,
		Attributes:                in.Attributes,
		Secrets:                   in.Secrets,
		InputPlan:                 in.InputPlan,
		Output:                    in.Output,
		DeployerType:              in.DeployerType,
		Duration:                  in.Duration,
		PreviousRequiredProviders: in.PreviousRequiredProviders,
		Tags:                      in.Tags,
	}
	return entity
}

// ServiceRevisionOutput is the output for the ServiceRevision.
type ServiceRevisionOutput struct {
	// ID holds the value of the "id" field.
	ID oid.ID `json:"id,omitempty"`
	// Status of the resource.
	Status string `json:"status,omitempty"`
	// Extra message for status, like error details.
	StatusMessage string `json:"statusMessage,omitempty"`
	// Describe creation time.
	CreateTime *time.Time `json:"createTime,omitempty"`
	// ID of the template.
	TemplateID string `json:"templateID,omitempty"`
	// Version of the template.
	TemplateVersion string `json:"templateVersion,omitempty"`
	// Attributes to configure the template.
	Attributes property.Values `json:"attributes,omitempty"`
	// Secrets of the revision.
	Secrets crypto.Map[string, string] `json:"secrets,omitempty"`
	// Type of deployer.
	DeployerType string `json:"deployerType,omitempty"`
	// Duration in seconds of the revision deploying.
	Duration int `json:"duration,omitempty"`
	// Previous provider requirement of the revision.
	PreviousRequiredProviders []types.ProviderRequirement `json:"previousRequiredProviders,omitempty"`
	// Tags of the revision.
	Tags []string `json:"tags,omitempty"`
	// Service to which the revision belongs.
	Service *ServiceOutput `json:"service,omitempty"`
	// Environment to which the revision deploys.
	Environment *EnvironmentOutput `json:"environment,omitempty"`
	// Project to which the revision belongs.
	Project *ProjectOutput `json:"project,omitempty"`
}

// ExposeServiceRevision converts the ServiceRevision to ServiceRevisionOutput.
func ExposeServiceRevision(in *ServiceRevision) *ServiceRevisionOutput {
	if in == nil {
		return nil
	}
	var entity = &ServiceRevisionOutput{
		ID:                        in.ID,
		Status:                    in.Status,
		StatusMessage:             in.StatusMessage,
		CreateTime:                in.CreateTime,
		TemplateID:                in.TemplateID,
		TemplateVersion:           in.TemplateVersion,
		Attributes:                in.Attributes,
		Secrets:                   in.Secrets,
		DeployerType:              in.DeployerType,
		Duration:                  in.Duration,
		PreviousRequiredProviders: in.PreviousRequiredProviders,
		Tags:                      in.Tags,
		Service:                   ExposeService(in.Edges.Service),
		Environment:               ExposeEnvironment(in.Edges.Environment),
		Project:                   ExposeProject(in.Edges.Project),
	}
	if in.ServiceID != "" {
		if entity.Service == nil {
			entity.Service = &ServiceOutput{}
		}
		entity.Service.ID = in.ServiceID
	}
	if in.EnvironmentID != "" {
		if entity.Environment == nil {
			entity.Environment = &EnvironmentOutput{}
		}
		entity.Environment.ID = in.EnvironmentID
	}
	if in.ProjectID != "" {
		if entity.Project == nil {
			entity.Project = &ProjectOutput{}
		}
		entity.Project.ID = in.ProjectID
	}
	return entity
}

// ExposeServiceRevisions converts the ServiceRevision slice to ServiceRevisionOutput pointer slice.
func ExposeServiceRevisions(in []*ServiceRevision) []*ServiceRevisionOutput {
	var out = make([]*ServiceRevisionOutput, 0, len(in))
	for i := 0; i < len(in); i++ {
		var o = ExposeServiceRevision(in[i])
		if o == nil {
			continue
		}
		out = append(out, o)
	}
	if len(out) == 0 {
		return nil
	}
	return out
}
