// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus". DO NOT EDIT.

package model

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/seal-io/walrus/pkg/dao/model/connector"
	"github.com/seal-io/walrus/pkg/dao/model/environment"
	"github.com/seal-io/walrus/pkg/dao/model/internal"
	"github.com/seal-io/walrus/pkg/dao/model/predicate"
	"github.com/seal-io/walrus/pkg/dao/model/project"
	"github.com/seal-io/walrus/pkg/dao/model/resource"
	"github.com/seal-io/walrus/pkg/dao/model/resourcecomponent"
	"github.com/seal-io/walrus/pkg/dao/model/resourcecomponentrelationship"
	"github.com/seal-io/walrus/pkg/dao/types/object"
)

// ResourceComponentQuery is the builder for querying ResourceComponent entities.
type ResourceComponentQuery struct {
	config
	ctx              *QueryContext
	order            []resourcecomponent.OrderOption
	inters           []Interceptor
	predicates       []predicate.ResourceComponent
	withProject      *ProjectQuery
	withEnvironment  *EnvironmentQuery
	withResource     *ResourceQuery
	withConnector    *ConnectorQuery
	withComposition  *ResourceComponentQuery
	withComponents   *ResourceComponentQuery
	withClass        *ResourceComponentQuery
	withInstances    *ResourceComponentQuery
	withDependencies *ResourceComponentRelationshipQuery
	modifiers        []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ResourceComponentQuery builder.
func (rcq *ResourceComponentQuery) Where(ps ...predicate.ResourceComponent) *ResourceComponentQuery {
	rcq.predicates = append(rcq.predicates, ps...)
	return rcq
}

// Limit the number of records to be returned by this query.
func (rcq *ResourceComponentQuery) Limit(limit int) *ResourceComponentQuery {
	rcq.ctx.Limit = &limit
	return rcq
}

// Offset to start from.
func (rcq *ResourceComponentQuery) Offset(offset int) *ResourceComponentQuery {
	rcq.ctx.Offset = &offset
	return rcq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rcq *ResourceComponentQuery) Unique(unique bool) *ResourceComponentQuery {
	rcq.ctx.Unique = &unique
	return rcq
}

// Order specifies how the records should be ordered.
func (rcq *ResourceComponentQuery) Order(o ...resourcecomponent.OrderOption) *ResourceComponentQuery {
	rcq.order = append(rcq.order, o...)
	return rcq
}

// QueryProject chains the current query on the "project" edge.
func (rcq *ResourceComponentQuery) QueryProject() *ProjectQuery {
	query := (&ProjectClient{config: rcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(resourcecomponent.Table, resourcecomponent.FieldID, selector),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, resourcecomponent.ProjectTable, resourcecomponent.ProjectColumn),
		)
		schemaConfig := rcq.schemaConfig
		step.To.Schema = schemaConfig.Project
		step.Edge.Schema = schemaConfig.ResourceComponent
		fromU = sqlgraph.SetNeighbors(rcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEnvironment chains the current query on the "environment" edge.
func (rcq *ResourceComponentQuery) QueryEnvironment() *EnvironmentQuery {
	query := (&EnvironmentClient{config: rcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(resourcecomponent.Table, resourcecomponent.FieldID, selector),
			sqlgraph.To(environment.Table, environment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, resourcecomponent.EnvironmentTable, resourcecomponent.EnvironmentColumn),
		)
		schemaConfig := rcq.schemaConfig
		step.To.Schema = schemaConfig.Environment
		step.Edge.Schema = schemaConfig.ResourceComponent
		fromU = sqlgraph.SetNeighbors(rcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryResource chains the current query on the "resource" edge.
func (rcq *ResourceComponentQuery) QueryResource() *ResourceQuery {
	query := (&ResourceClient{config: rcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(resourcecomponent.Table, resourcecomponent.FieldID, selector),
			sqlgraph.To(resource.Table, resource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, resourcecomponent.ResourceTable, resourcecomponent.ResourceColumn),
		)
		schemaConfig := rcq.schemaConfig
		step.To.Schema = schemaConfig.Resource
		step.Edge.Schema = schemaConfig.ResourceComponent
		fromU = sqlgraph.SetNeighbors(rcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryConnector chains the current query on the "connector" edge.
func (rcq *ResourceComponentQuery) QueryConnector() *ConnectorQuery {
	query := (&ConnectorClient{config: rcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(resourcecomponent.Table, resourcecomponent.FieldID, selector),
			sqlgraph.To(connector.Table, connector.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, resourcecomponent.ConnectorTable, resourcecomponent.ConnectorColumn),
		)
		schemaConfig := rcq.schemaConfig
		step.To.Schema = schemaConfig.Connector
		step.Edge.Schema = schemaConfig.ResourceComponent
		fromU = sqlgraph.SetNeighbors(rcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryComposition chains the current query on the "composition" edge.
func (rcq *ResourceComponentQuery) QueryComposition() *ResourceComponentQuery {
	query := (&ResourceComponentClient{config: rcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(resourcecomponent.Table, resourcecomponent.FieldID, selector),
			sqlgraph.To(resourcecomponent.Table, resourcecomponent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, resourcecomponent.CompositionTable, resourcecomponent.CompositionColumn),
		)
		schemaConfig := rcq.schemaConfig
		step.To.Schema = schemaConfig.ResourceComponent
		step.Edge.Schema = schemaConfig.ResourceComponent
		fromU = sqlgraph.SetNeighbors(rcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryComponents chains the current query on the "components" edge.
func (rcq *ResourceComponentQuery) QueryComponents() *ResourceComponentQuery {
	query := (&ResourceComponentClient{config: rcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(resourcecomponent.Table, resourcecomponent.FieldID, selector),
			sqlgraph.To(resourcecomponent.Table, resourcecomponent.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, resourcecomponent.ComponentsTable, resourcecomponent.ComponentsColumn),
		)
		schemaConfig := rcq.schemaConfig
		step.To.Schema = schemaConfig.ResourceComponent
		step.Edge.Schema = schemaConfig.ResourceComponent
		fromU = sqlgraph.SetNeighbors(rcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryClass chains the current query on the "class" edge.
func (rcq *ResourceComponentQuery) QueryClass() *ResourceComponentQuery {
	query := (&ResourceComponentClient{config: rcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(resourcecomponent.Table, resourcecomponent.FieldID, selector),
			sqlgraph.To(resourcecomponent.Table, resourcecomponent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, resourcecomponent.ClassTable, resourcecomponent.ClassColumn),
		)
		schemaConfig := rcq.schemaConfig
		step.To.Schema = schemaConfig.ResourceComponent
		step.Edge.Schema = schemaConfig.ResourceComponent
		fromU = sqlgraph.SetNeighbors(rcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInstances chains the current query on the "instances" edge.
func (rcq *ResourceComponentQuery) QueryInstances() *ResourceComponentQuery {
	query := (&ResourceComponentClient{config: rcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(resourcecomponent.Table, resourcecomponent.FieldID, selector),
			sqlgraph.To(resourcecomponent.Table, resourcecomponent.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, resourcecomponent.InstancesTable, resourcecomponent.InstancesColumn),
		)
		schemaConfig := rcq.schemaConfig
		step.To.Schema = schemaConfig.ResourceComponent
		step.Edge.Schema = schemaConfig.ResourceComponent
		fromU = sqlgraph.SetNeighbors(rcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDependencies chains the current query on the "dependencies" edge.
func (rcq *ResourceComponentQuery) QueryDependencies() *ResourceComponentRelationshipQuery {
	query := (&ResourceComponentRelationshipClient{config: rcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(resourcecomponent.Table, resourcecomponent.FieldID, selector),
			sqlgraph.To(resourcecomponentrelationship.Table, resourcecomponentrelationship.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, resourcecomponent.DependenciesTable, resourcecomponent.DependenciesColumn),
		)
		schemaConfig := rcq.schemaConfig
		step.To.Schema = schemaConfig.ResourceComponentRelationship
		step.Edge.Schema = schemaConfig.ResourceComponentRelationship
		fromU = sqlgraph.SetNeighbors(rcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ResourceComponent entity from the query.
// Returns a *NotFoundError when no ResourceComponent was found.
func (rcq *ResourceComponentQuery) First(ctx context.Context) (*ResourceComponent, error) {
	nodes, err := rcq.Limit(1).All(setContextOp(ctx, rcq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{resourcecomponent.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rcq *ResourceComponentQuery) FirstX(ctx context.Context) *ResourceComponent {
	node, err := rcq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ResourceComponent ID from the query.
// Returns a *NotFoundError when no ResourceComponent ID was found.
func (rcq *ResourceComponentQuery) FirstID(ctx context.Context) (id object.ID, err error) {
	var ids []object.ID
	if ids, err = rcq.Limit(1).IDs(setContextOp(ctx, rcq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{resourcecomponent.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rcq *ResourceComponentQuery) FirstIDX(ctx context.Context) object.ID {
	id, err := rcq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ResourceComponent entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ResourceComponent entity is found.
// Returns a *NotFoundError when no ResourceComponent entities are found.
func (rcq *ResourceComponentQuery) Only(ctx context.Context) (*ResourceComponent, error) {
	nodes, err := rcq.Limit(2).All(setContextOp(ctx, rcq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{resourcecomponent.Label}
	default:
		return nil, &NotSingularError{resourcecomponent.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rcq *ResourceComponentQuery) OnlyX(ctx context.Context) *ResourceComponent {
	node, err := rcq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ResourceComponent ID in the query.
// Returns a *NotSingularError when more than one ResourceComponent ID is found.
// Returns a *NotFoundError when no entities are found.
func (rcq *ResourceComponentQuery) OnlyID(ctx context.Context) (id object.ID, err error) {
	var ids []object.ID
	if ids, err = rcq.Limit(2).IDs(setContextOp(ctx, rcq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{resourcecomponent.Label}
	default:
		err = &NotSingularError{resourcecomponent.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rcq *ResourceComponentQuery) OnlyIDX(ctx context.Context) object.ID {
	id, err := rcq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ResourceComponents.
func (rcq *ResourceComponentQuery) All(ctx context.Context) ([]*ResourceComponent, error) {
	ctx = setContextOp(ctx, rcq.ctx, "All")
	if err := rcq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ResourceComponent, *ResourceComponentQuery]()
	return withInterceptors[[]*ResourceComponent](ctx, rcq, qr, rcq.inters)
}

// AllX is like All, but panics if an error occurs.
func (rcq *ResourceComponentQuery) AllX(ctx context.Context) []*ResourceComponent {
	nodes, err := rcq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ResourceComponent IDs.
func (rcq *ResourceComponentQuery) IDs(ctx context.Context) (ids []object.ID, err error) {
	if rcq.ctx.Unique == nil && rcq.path != nil {
		rcq.Unique(true)
	}
	ctx = setContextOp(ctx, rcq.ctx, "IDs")
	if err = rcq.Select(resourcecomponent.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rcq *ResourceComponentQuery) IDsX(ctx context.Context) []object.ID {
	ids, err := rcq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rcq *ResourceComponentQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, rcq.ctx, "Count")
	if err := rcq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, rcq, querierCount[*ResourceComponentQuery](), rcq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (rcq *ResourceComponentQuery) CountX(ctx context.Context) int {
	count, err := rcq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rcq *ResourceComponentQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, rcq.ctx, "Exist")
	switch _, err := rcq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("model: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (rcq *ResourceComponentQuery) ExistX(ctx context.Context) bool {
	exist, err := rcq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ResourceComponentQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rcq *ResourceComponentQuery) Clone() *ResourceComponentQuery {
	if rcq == nil {
		return nil
	}
	return &ResourceComponentQuery{
		config:           rcq.config,
		ctx:              rcq.ctx.Clone(),
		order:            append([]resourcecomponent.OrderOption{}, rcq.order...),
		inters:           append([]Interceptor{}, rcq.inters...),
		predicates:       append([]predicate.ResourceComponent{}, rcq.predicates...),
		withProject:      rcq.withProject.Clone(),
		withEnvironment:  rcq.withEnvironment.Clone(),
		withResource:     rcq.withResource.Clone(),
		withConnector:    rcq.withConnector.Clone(),
		withComposition:  rcq.withComposition.Clone(),
		withComponents:   rcq.withComponents.Clone(),
		withClass:        rcq.withClass.Clone(),
		withInstances:    rcq.withInstances.Clone(),
		withDependencies: rcq.withDependencies.Clone(),
		// clone intermediate query.
		sql:  rcq.sql.Clone(),
		path: rcq.path,
	}
}

// WithProject tells the query-builder to eager-load the nodes that are connected to
// the "project" edge. The optional arguments are used to configure the query builder of the edge.
func (rcq *ResourceComponentQuery) WithProject(opts ...func(*ProjectQuery)) *ResourceComponentQuery {
	query := (&ProjectClient{config: rcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rcq.withProject = query
	return rcq
}

// WithEnvironment tells the query-builder to eager-load the nodes that are connected to
// the "environment" edge. The optional arguments are used to configure the query builder of the edge.
func (rcq *ResourceComponentQuery) WithEnvironment(opts ...func(*EnvironmentQuery)) *ResourceComponentQuery {
	query := (&EnvironmentClient{config: rcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rcq.withEnvironment = query
	return rcq
}

// WithResource tells the query-builder to eager-load the nodes that are connected to
// the "resource" edge. The optional arguments are used to configure the query builder of the edge.
func (rcq *ResourceComponentQuery) WithResource(opts ...func(*ResourceQuery)) *ResourceComponentQuery {
	query := (&ResourceClient{config: rcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rcq.withResource = query
	return rcq
}

// WithConnector tells the query-builder to eager-load the nodes that are connected to
// the "connector" edge. The optional arguments are used to configure the query builder of the edge.
func (rcq *ResourceComponentQuery) WithConnector(opts ...func(*ConnectorQuery)) *ResourceComponentQuery {
	query := (&ConnectorClient{config: rcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rcq.withConnector = query
	return rcq
}

// WithComposition tells the query-builder to eager-load the nodes that are connected to
// the "composition" edge. The optional arguments are used to configure the query builder of the edge.
func (rcq *ResourceComponentQuery) WithComposition(opts ...func(*ResourceComponentQuery)) *ResourceComponentQuery {
	query := (&ResourceComponentClient{config: rcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rcq.withComposition = query
	return rcq
}

// WithComponents tells the query-builder to eager-load the nodes that are connected to
// the "components" edge. The optional arguments are used to configure the query builder of the edge.
func (rcq *ResourceComponentQuery) WithComponents(opts ...func(*ResourceComponentQuery)) *ResourceComponentQuery {
	query := (&ResourceComponentClient{config: rcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rcq.withComponents = query
	return rcq
}

// WithClass tells the query-builder to eager-load the nodes that are connected to
// the "class" edge. The optional arguments are used to configure the query builder of the edge.
func (rcq *ResourceComponentQuery) WithClass(opts ...func(*ResourceComponentQuery)) *ResourceComponentQuery {
	query := (&ResourceComponentClient{config: rcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rcq.withClass = query
	return rcq
}

// WithInstances tells the query-builder to eager-load the nodes that are connected to
// the "instances" edge. The optional arguments are used to configure the query builder of the edge.
func (rcq *ResourceComponentQuery) WithInstances(opts ...func(*ResourceComponentQuery)) *ResourceComponentQuery {
	query := (&ResourceComponentClient{config: rcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rcq.withInstances = query
	return rcq
}

// WithDependencies tells the query-builder to eager-load the nodes that are connected to
// the "dependencies" edge. The optional arguments are used to configure the query builder of the edge.
func (rcq *ResourceComponentQuery) WithDependencies(opts ...func(*ResourceComponentRelationshipQuery)) *ResourceComponentQuery {
	query := (&ResourceComponentRelationshipClient{config: rcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rcq.withDependencies = query
	return rcq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ResourceComponent.Query().
//		GroupBy(resourcecomponent.FieldCreateTime).
//		Aggregate(model.Count()).
//		Scan(ctx, &v)
func (rcq *ResourceComponentQuery) GroupBy(field string, fields ...string) *ResourceComponentGroupBy {
	rcq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ResourceComponentGroupBy{build: rcq}
	grbuild.flds = &rcq.ctx.Fields
	grbuild.label = resourcecomponent.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.ResourceComponent.Query().
//		Select(resourcecomponent.FieldCreateTime).
//		Scan(ctx, &v)
func (rcq *ResourceComponentQuery) Select(fields ...string) *ResourceComponentSelect {
	rcq.ctx.Fields = append(rcq.ctx.Fields, fields...)
	sbuild := &ResourceComponentSelect{ResourceComponentQuery: rcq}
	sbuild.label = resourcecomponent.Label
	sbuild.flds, sbuild.scan = &rcq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ResourceComponentSelect configured with the given aggregations.
func (rcq *ResourceComponentQuery) Aggregate(fns ...AggregateFunc) *ResourceComponentSelect {
	return rcq.Select().Aggregate(fns...)
}

func (rcq *ResourceComponentQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range rcq.inters {
		if inter == nil {
			return fmt.Errorf("model: uninitialized interceptor (forgotten import model/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, rcq); err != nil {
				return err
			}
		}
	}
	for _, f := range rcq.ctx.Fields {
		if !resourcecomponent.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
		}
	}
	if rcq.path != nil {
		prev, err := rcq.path(ctx)
		if err != nil {
			return err
		}
		rcq.sql = prev
	}
	return nil
}

func (rcq *ResourceComponentQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ResourceComponent, error) {
	var (
		nodes       = []*ResourceComponent{}
		_spec       = rcq.querySpec()
		loadedTypes = [9]bool{
			rcq.withProject != nil,
			rcq.withEnvironment != nil,
			rcq.withResource != nil,
			rcq.withConnector != nil,
			rcq.withComposition != nil,
			rcq.withComponents != nil,
			rcq.withClass != nil,
			rcq.withInstances != nil,
			rcq.withDependencies != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ResourceComponent).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ResourceComponent{config: rcq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = rcq.schemaConfig.ResourceComponent
	ctx = internal.NewSchemaConfigContext(ctx, rcq.schemaConfig)
	if len(rcq.modifiers) > 0 {
		_spec.Modifiers = rcq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, rcq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := rcq.withProject; query != nil {
		if err := rcq.loadProject(ctx, query, nodes, nil,
			func(n *ResourceComponent, e *Project) { n.Edges.Project = e }); err != nil {
			return nil, err
		}
	}
	if query := rcq.withEnvironment; query != nil {
		if err := rcq.loadEnvironment(ctx, query, nodes, nil,
			func(n *ResourceComponent, e *Environment) { n.Edges.Environment = e }); err != nil {
			return nil, err
		}
	}
	if query := rcq.withResource; query != nil {
		if err := rcq.loadResource(ctx, query, nodes, nil,
			func(n *ResourceComponent, e *Resource) { n.Edges.Resource = e }); err != nil {
			return nil, err
		}
	}
	if query := rcq.withConnector; query != nil {
		if err := rcq.loadConnector(ctx, query, nodes, nil,
			func(n *ResourceComponent, e *Connector) { n.Edges.Connector = e }); err != nil {
			return nil, err
		}
	}
	if query := rcq.withComposition; query != nil {
		if err := rcq.loadComposition(ctx, query, nodes, nil,
			func(n *ResourceComponent, e *ResourceComponent) { n.Edges.Composition = e }); err != nil {
			return nil, err
		}
	}
	if query := rcq.withComponents; query != nil {
		if err := rcq.loadComponents(ctx, query, nodes,
			func(n *ResourceComponent) { n.Edges.Components = []*ResourceComponent{} },
			func(n *ResourceComponent, e *ResourceComponent) { n.Edges.Components = append(n.Edges.Components, e) }); err != nil {
			return nil, err
		}
	}
	if query := rcq.withClass; query != nil {
		if err := rcq.loadClass(ctx, query, nodes, nil,
			func(n *ResourceComponent, e *ResourceComponent) { n.Edges.Class = e }); err != nil {
			return nil, err
		}
	}
	if query := rcq.withInstances; query != nil {
		if err := rcq.loadInstances(ctx, query, nodes,
			func(n *ResourceComponent) { n.Edges.Instances = []*ResourceComponent{} },
			func(n *ResourceComponent, e *ResourceComponent) { n.Edges.Instances = append(n.Edges.Instances, e) }); err != nil {
			return nil, err
		}
	}
	if query := rcq.withDependencies; query != nil {
		if err := rcq.loadDependencies(ctx, query, nodes,
			func(n *ResourceComponent) { n.Edges.Dependencies = []*ResourceComponentRelationship{} },
			func(n *ResourceComponent, e *ResourceComponentRelationship) {
				n.Edges.Dependencies = append(n.Edges.Dependencies, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (rcq *ResourceComponentQuery) loadProject(ctx context.Context, query *ProjectQuery, nodes []*ResourceComponent, init func(*ResourceComponent), assign func(*ResourceComponent, *Project)) error {
	ids := make([]object.ID, 0, len(nodes))
	nodeids := make(map[object.ID][]*ResourceComponent)
	for i := range nodes {
		fk := nodes[i].ProjectID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(project.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "project_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rcq *ResourceComponentQuery) loadEnvironment(ctx context.Context, query *EnvironmentQuery, nodes []*ResourceComponent, init func(*ResourceComponent), assign func(*ResourceComponent, *Environment)) error {
	ids := make([]object.ID, 0, len(nodes))
	nodeids := make(map[object.ID][]*ResourceComponent)
	for i := range nodes {
		fk := nodes[i].EnvironmentID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(environment.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "environment_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rcq *ResourceComponentQuery) loadResource(ctx context.Context, query *ResourceQuery, nodes []*ResourceComponent, init func(*ResourceComponent), assign func(*ResourceComponent, *Resource)) error {
	ids := make([]object.ID, 0, len(nodes))
	nodeids := make(map[object.ID][]*ResourceComponent)
	for i := range nodes {
		fk := nodes[i].ResourceID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(resource.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "resource_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rcq *ResourceComponentQuery) loadConnector(ctx context.Context, query *ConnectorQuery, nodes []*ResourceComponent, init func(*ResourceComponent), assign func(*ResourceComponent, *Connector)) error {
	ids := make([]object.ID, 0, len(nodes))
	nodeids := make(map[object.ID][]*ResourceComponent)
	for i := range nodes {
		fk := nodes[i].ConnectorID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(connector.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "connector_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rcq *ResourceComponentQuery) loadComposition(ctx context.Context, query *ResourceComponentQuery, nodes []*ResourceComponent, init func(*ResourceComponent), assign func(*ResourceComponent, *ResourceComponent)) error {
	ids := make([]object.ID, 0, len(nodes))
	nodeids := make(map[object.ID][]*ResourceComponent)
	for i := range nodes {
		fk := nodes[i].CompositionID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(resourcecomponent.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "composition_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rcq *ResourceComponentQuery) loadComponents(ctx context.Context, query *ResourceComponentQuery, nodes []*ResourceComponent, init func(*ResourceComponent), assign func(*ResourceComponent, *ResourceComponent)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[object.ID]*ResourceComponent)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(resourcecomponent.FieldCompositionID)
	}
	query.Where(predicate.ResourceComponent(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(resourcecomponent.ComponentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CompositionID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "composition_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (rcq *ResourceComponentQuery) loadClass(ctx context.Context, query *ResourceComponentQuery, nodes []*ResourceComponent, init func(*ResourceComponent), assign func(*ResourceComponent, *ResourceComponent)) error {
	ids := make([]object.ID, 0, len(nodes))
	nodeids := make(map[object.ID][]*ResourceComponent)
	for i := range nodes {
		fk := nodes[i].ClassID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(resourcecomponent.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "class_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rcq *ResourceComponentQuery) loadInstances(ctx context.Context, query *ResourceComponentQuery, nodes []*ResourceComponent, init func(*ResourceComponent), assign func(*ResourceComponent, *ResourceComponent)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[object.ID]*ResourceComponent)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(resourcecomponent.FieldClassID)
	}
	query.Where(predicate.ResourceComponent(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(resourcecomponent.InstancesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ClassID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "class_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (rcq *ResourceComponentQuery) loadDependencies(ctx context.Context, query *ResourceComponentRelationshipQuery, nodes []*ResourceComponent, init func(*ResourceComponent), assign func(*ResourceComponent, *ResourceComponentRelationship)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[object.ID]*ResourceComponent)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(resourcecomponentrelationship.FieldResourceComponentID)
	}
	query.Where(predicate.ResourceComponentRelationship(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(resourcecomponent.DependenciesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ResourceComponentID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "resource_component_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (rcq *ResourceComponentQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rcq.querySpec()
	_spec.Node.Schema = rcq.schemaConfig.ResourceComponent
	ctx = internal.NewSchemaConfigContext(ctx, rcq.schemaConfig)
	if len(rcq.modifiers) > 0 {
		_spec.Modifiers = rcq.modifiers
	}
	_spec.Node.Columns = rcq.ctx.Fields
	if len(rcq.ctx.Fields) > 0 {
		_spec.Unique = rcq.ctx.Unique != nil && *rcq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, rcq.driver, _spec)
}

func (rcq *ResourceComponentQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(resourcecomponent.Table, resourcecomponent.Columns, sqlgraph.NewFieldSpec(resourcecomponent.FieldID, field.TypeString))
	_spec.From = rcq.sql
	if unique := rcq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if rcq.path != nil {
		_spec.Unique = true
	}
	if fields := rcq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, resourcecomponent.FieldID)
		for i := range fields {
			if fields[i] != resourcecomponent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if rcq.withProject != nil {
			_spec.Node.AddColumnOnce(resourcecomponent.FieldProjectID)
		}
		if rcq.withEnvironment != nil {
			_spec.Node.AddColumnOnce(resourcecomponent.FieldEnvironmentID)
		}
		if rcq.withResource != nil {
			_spec.Node.AddColumnOnce(resourcecomponent.FieldResourceID)
		}
		if rcq.withConnector != nil {
			_spec.Node.AddColumnOnce(resourcecomponent.FieldConnectorID)
		}
		if rcq.withComposition != nil {
			_spec.Node.AddColumnOnce(resourcecomponent.FieldCompositionID)
		}
		if rcq.withClass != nil {
			_spec.Node.AddColumnOnce(resourcecomponent.FieldClassID)
		}
	}
	if ps := rcq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rcq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rcq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rcq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rcq *ResourceComponentQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rcq.driver.Dialect())
	t1 := builder.Table(resourcecomponent.Table)
	columns := rcq.ctx.Fields
	if len(columns) == 0 {
		columns = resourcecomponent.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rcq.sql != nil {
		selector = rcq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rcq.ctx.Unique != nil && *rcq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(rcq.schemaConfig.ResourceComponent)
	ctx = internal.NewSchemaConfigContext(ctx, rcq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range rcq.modifiers {
		m(selector)
	}
	for _, p := range rcq.predicates {
		p(selector)
	}
	for _, p := range rcq.order {
		p(selector)
	}
	if offset := rcq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rcq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (rcq *ResourceComponentQuery) ForUpdate(opts ...sql.LockOption) *ResourceComponentQuery {
	if rcq.driver.Dialect() == dialect.Postgres {
		rcq.Unique(false)
	}
	rcq.modifiers = append(rcq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return rcq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (rcq *ResourceComponentQuery) ForShare(opts ...sql.LockOption) *ResourceComponentQuery {
	if rcq.driver.Dialect() == dialect.Postgres {
		rcq.Unique(false)
	}
	rcq.modifiers = append(rcq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return rcq
}

// Modify adds a query modifier for attaching custom logic to queries.
func (rcq *ResourceComponentQuery) Modify(modifiers ...func(s *sql.Selector)) *ResourceComponentSelect {
	rcq.modifiers = append(rcq.modifiers, modifiers...)
	return rcq.Select()
}

// WhereP appends storage-level predicates to the ResourceComponentQuery builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (rcq *ResourceComponentQuery) WhereP(ps ...func(*sql.Selector)) {
	var wps = make([]predicate.ResourceComponent, 0, len(ps))
	for i := 0; i < len(ps); i++ {
		wps = append(wps, predicate.ResourceComponent(ps[i]))
	}
	rcq.predicates = append(rcq.predicates, wps...)
}

// ResourceComponentGroupBy is the group-by builder for ResourceComponent entities.
type ResourceComponentGroupBy struct {
	selector
	build *ResourceComponentQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rcgb *ResourceComponentGroupBy) Aggregate(fns ...AggregateFunc) *ResourceComponentGroupBy {
	rcgb.fns = append(rcgb.fns, fns...)
	return rcgb
}

// Scan applies the selector query and scans the result into the given value.
func (rcgb *ResourceComponentGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rcgb.build.ctx, "GroupBy")
	if err := rcgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ResourceComponentQuery, *ResourceComponentGroupBy](ctx, rcgb.build, rcgb, rcgb.build.inters, v)
}

func (rcgb *ResourceComponentGroupBy) sqlScan(ctx context.Context, root *ResourceComponentQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(rcgb.fns))
	for _, fn := range rcgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*rcgb.flds)+len(rcgb.fns))
		for _, f := range *rcgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*rcgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rcgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ResourceComponentSelect is the builder for selecting fields of ResourceComponent entities.
type ResourceComponentSelect struct {
	*ResourceComponentQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (rcs *ResourceComponentSelect) Aggregate(fns ...AggregateFunc) *ResourceComponentSelect {
	rcs.fns = append(rcs.fns, fns...)
	return rcs
}

// Scan applies the selector query and scans the result into the given value.
func (rcs *ResourceComponentSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rcs.ctx, "Select")
	if err := rcs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ResourceComponentQuery, *ResourceComponentSelect](ctx, rcs.ResourceComponentQuery, rcs, rcs.inters, v)
}

func (rcs *ResourceComponentSelect) sqlScan(ctx context.Context, root *ResourceComponentQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(rcs.fns))
	for _, fn := range rcs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*rcs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rcs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (rcs *ResourceComponentSelect) Modify(modifiers ...func(s *sql.Selector)) *ResourceComponentSelect {
	rcs.modifiers = append(rcs.modifiers, modifiers...)
	return rcs
}
