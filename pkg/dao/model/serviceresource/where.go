// SPDX-FileCopyrightText: 2023 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "seal". DO NOT EDIT.

package serviceresource

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"

	"github.com/seal-io/walrus/pkg/dao/model/internal"
	"github.com/seal-io/walrus/pkg/dao/model/predicate"
	"github.com/seal-io/walrus/pkg/dao/types/object"
)

// ID filters vertices based on their ID field.
func ID(id object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldEQ(FieldUpdateTime, v))
}

// ProjectID applies equality check predicate on the "project_id" field. It's identical to ProjectIDEQ.
func ProjectID(v object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldEQ(FieldProjectID, v))
}

// EnvironmentID applies equality check predicate on the "environment_id" field. It's identical to EnvironmentIDEQ.
func EnvironmentID(v object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldEQ(FieldEnvironmentID, v))
}

// ServiceID applies equality check predicate on the "service_id" field. It's identical to ServiceIDEQ.
func ServiceID(v object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldEQ(FieldServiceID, v))
}

// ConnectorID applies equality check predicate on the "connector_id" field. It's identical to ConnectorIDEQ.
func ConnectorID(v object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldEQ(FieldConnectorID, v))
}

// CompositionID applies equality check predicate on the "composition_id" field. It's identical to CompositionIDEQ.
func CompositionID(v object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldEQ(FieldCompositionID, v))
}

// ClassID applies equality check predicate on the "class_id" field. It's identical to ClassIDEQ.
func ClassID(v object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldEQ(FieldClassID, v))
}

// Mode applies equality check predicate on the "mode" field. It's identical to ModeEQ.
func Mode(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldEQ(FieldMode, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldEQ(FieldType, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldEQ(FieldName, v))
}

// DeployerType applies equality check predicate on the "deployer_type" field. It's identical to DeployerTypeEQ.
func DeployerType(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldEQ(FieldDeployerType, v))
}

// Shape applies equality check predicate on the "shape" field. It's identical to ShapeEQ.
func Shape(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldEQ(FieldShape, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldLTE(FieldUpdateTime, v))
}

// ProjectIDEQ applies the EQ predicate on the "project_id" field.
func ProjectIDEQ(v object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldEQ(FieldProjectID, v))
}

// ProjectIDNEQ applies the NEQ predicate on the "project_id" field.
func ProjectIDNEQ(v object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldNEQ(FieldProjectID, v))
}

// ProjectIDIn applies the In predicate on the "project_id" field.
func ProjectIDIn(vs ...object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldIn(FieldProjectID, vs...))
}

// ProjectIDNotIn applies the NotIn predicate on the "project_id" field.
func ProjectIDNotIn(vs ...object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldNotIn(FieldProjectID, vs...))
}

// ProjectIDGT applies the GT predicate on the "project_id" field.
func ProjectIDGT(v object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldGT(FieldProjectID, v))
}

// ProjectIDGTE applies the GTE predicate on the "project_id" field.
func ProjectIDGTE(v object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldGTE(FieldProjectID, v))
}

// ProjectIDLT applies the LT predicate on the "project_id" field.
func ProjectIDLT(v object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldLT(FieldProjectID, v))
}

// ProjectIDLTE applies the LTE predicate on the "project_id" field.
func ProjectIDLTE(v object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldLTE(FieldProjectID, v))
}

// ProjectIDContains applies the Contains predicate on the "project_id" field.
func ProjectIDContains(v object.ID) predicate.ServiceResource {
	vc := string(v)
	return predicate.ServiceResource(sql.FieldContains(FieldProjectID, vc))
}

// ProjectIDHasPrefix applies the HasPrefix predicate on the "project_id" field.
func ProjectIDHasPrefix(v object.ID) predicate.ServiceResource {
	vc := string(v)
	return predicate.ServiceResource(sql.FieldHasPrefix(FieldProjectID, vc))
}

// ProjectIDHasSuffix applies the HasSuffix predicate on the "project_id" field.
func ProjectIDHasSuffix(v object.ID) predicate.ServiceResource {
	vc := string(v)
	return predicate.ServiceResource(sql.FieldHasSuffix(FieldProjectID, vc))
}

// ProjectIDEqualFold applies the EqualFold predicate on the "project_id" field.
func ProjectIDEqualFold(v object.ID) predicate.ServiceResource {
	vc := string(v)
	return predicate.ServiceResource(sql.FieldEqualFold(FieldProjectID, vc))
}

// ProjectIDContainsFold applies the ContainsFold predicate on the "project_id" field.
func ProjectIDContainsFold(v object.ID) predicate.ServiceResource {
	vc := string(v)
	return predicate.ServiceResource(sql.FieldContainsFold(FieldProjectID, vc))
}

// EnvironmentIDEQ applies the EQ predicate on the "environment_id" field.
func EnvironmentIDEQ(v object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldEQ(FieldEnvironmentID, v))
}

// EnvironmentIDNEQ applies the NEQ predicate on the "environment_id" field.
func EnvironmentIDNEQ(v object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldNEQ(FieldEnvironmentID, v))
}

// EnvironmentIDIn applies the In predicate on the "environment_id" field.
func EnvironmentIDIn(vs ...object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldIn(FieldEnvironmentID, vs...))
}

// EnvironmentIDNotIn applies the NotIn predicate on the "environment_id" field.
func EnvironmentIDNotIn(vs ...object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldNotIn(FieldEnvironmentID, vs...))
}

// EnvironmentIDGT applies the GT predicate on the "environment_id" field.
func EnvironmentIDGT(v object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldGT(FieldEnvironmentID, v))
}

// EnvironmentIDGTE applies the GTE predicate on the "environment_id" field.
func EnvironmentIDGTE(v object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldGTE(FieldEnvironmentID, v))
}

// EnvironmentIDLT applies the LT predicate on the "environment_id" field.
func EnvironmentIDLT(v object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldLT(FieldEnvironmentID, v))
}

// EnvironmentIDLTE applies the LTE predicate on the "environment_id" field.
func EnvironmentIDLTE(v object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldLTE(FieldEnvironmentID, v))
}

// EnvironmentIDContains applies the Contains predicate on the "environment_id" field.
func EnvironmentIDContains(v object.ID) predicate.ServiceResource {
	vc := string(v)
	return predicate.ServiceResource(sql.FieldContains(FieldEnvironmentID, vc))
}

// EnvironmentIDHasPrefix applies the HasPrefix predicate on the "environment_id" field.
func EnvironmentIDHasPrefix(v object.ID) predicate.ServiceResource {
	vc := string(v)
	return predicate.ServiceResource(sql.FieldHasPrefix(FieldEnvironmentID, vc))
}

// EnvironmentIDHasSuffix applies the HasSuffix predicate on the "environment_id" field.
func EnvironmentIDHasSuffix(v object.ID) predicate.ServiceResource {
	vc := string(v)
	return predicate.ServiceResource(sql.FieldHasSuffix(FieldEnvironmentID, vc))
}

// EnvironmentIDEqualFold applies the EqualFold predicate on the "environment_id" field.
func EnvironmentIDEqualFold(v object.ID) predicate.ServiceResource {
	vc := string(v)
	return predicate.ServiceResource(sql.FieldEqualFold(FieldEnvironmentID, vc))
}

// EnvironmentIDContainsFold applies the ContainsFold predicate on the "environment_id" field.
func EnvironmentIDContainsFold(v object.ID) predicate.ServiceResource {
	vc := string(v)
	return predicate.ServiceResource(sql.FieldContainsFold(FieldEnvironmentID, vc))
}

// ServiceIDEQ applies the EQ predicate on the "service_id" field.
func ServiceIDEQ(v object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldEQ(FieldServiceID, v))
}

// ServiceIDNEQ applies the NEQ predicate on the "service_id" field.
func ServiceIDNEQ(v object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldNEQ(FieldServiceID, v))
}

// ServiceIDIn applies the In predicate on the "service_id" field.
func ServiceIDIn(vs ...object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldIn(FieldServiceID, vs...))
}

// ServiceIDNotIn applies the NotIn predicate on the "service_id" field.
func ServiceIDNotIn(vs ...object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldNotIn(FieldServiceID, vs...))
}

// ServiceIDGT applies the GT predicate on the "service_id" field.
func ServiceIDGT(v object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldGT(FieldServiceID, v))
}

// ServiceIDGTE applies the GTE predicate on the "service_id" field.
func ServiceIDGTE(v object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldGTE(FieldServiceID, v))
}

// ServiceIDLT applies the LT predicate on the "service_id" field.
func ServiceIDLT(v object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldLT(FieldServiceID, v))
}

// ServiceIDLTE applies the LTE predicate on the "service_id" field.
func ServiceIDLTE(v object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldLTE(FieldServiceID, v))
}

// ServiceIDContains applies the Contains predicate on the "service_id" field.
func ServiceIDContains(v object.ID) predicate.ServiceResource {
	vc := string(v)
	return predicate.ServiceResource(sql.FieldContains(FieldServiceID, vc))
}

// ServiceIDHasPrefix applies the HasPrefix predicate on the "service_id" field.
func ServiceIDHasPrefix(v object.ID) predicate.ServiceResource {
	vc := string(v)
	return predicate.ServiceResource(sql.FieldHasPrefix(FieldServiceID, vc))
}

// ServiceIDHasSuffix applies the HasSuffix predicate on the "service_id" field.
func ServiceIDHasSuffix(v object.ID) predicate.ServiceResource {
	vc := string(v)
	return predicate.ServiceResource(sql.FieldHasSuffix(FieldServiceID, vc))
}

// ServiceIDEqualFold applies the EqualFold predicate on the "service_id" field.
func ServiceIDEqualFold(v object.ID) predicate.ServiceResource {
	vc := string(v)
	return predicate.ServiceResource(sql.FieldEqualFold(FieldServiceID, vc))
}

// ServiceIDContainsFold applies the ContainsFold predicate on the "service_id" field.
func ServiceIDContainsFold(v object.ID) predicate.ServiceResource {
	vc := string(v)
	return predicate.ServiceResource(sql.FieldContainsFold(FieldServiceID, vc))
}

// ConnectorIDEQ applies the EQ predicate on the "connector_id" field.
func ConnectorIDEQ(v object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldEQ(FieldConnectorID, v))
}

// ConnectorIDNEQ applies the NEQ predicate on the "connector_id" field.
func ConnectorIDNEQ(v object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldNEQ(FieldConnectorID, v))
}

// ConnectorIDIn applies the In predicate on the "connector_id" field.
func ConnectorIDIn(vs ...object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldIn(FieldConnectorID, vs...))
}

// ConnectorIDNotIn applies the NotIn predicate on the "connector_id" field.
func ConnectorIDNotIn(vs ...object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldNotIn(FieldConnectorID, vs...))
}

// ConnectorIDGT applies the GT predicate on the "connector_id" field.
func ConnectorIDGT(v object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldGT(FieldConnectorID, v))
}

// ConnectorIDGTE applies the GTE predicate on the "connector_id" field.
func ConnectorIDGTE(v object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldGTE(FieldConnectorID, v))
}

// ConnectorIDLT applies the LT predicate on the "connector_id" field.
func ConnectorIDLT(v object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldLT(FieldConnectorID, v))
}

// ConnectorIDLTE applies the LTE predicate on the "connector_id" field.
func ConnectorIDLTE(v object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldLTE(FieldConnectorID, v))
}

// ConnectorIDContains applies the Contains predicate on the "connector_id" field.
func ConnectorIDContains(v object.ID) predicate.ServiceResource {
	vc := string(v)
	return predicate.ServiceResource(sql.FieldContains(FieldConnectorID, vc))
}

// ConnectorIDHasPrefix applies the HasPrefix predicate on the "connector_id" field.
func ConnectorIDHasPrefix(v object.ID) predicate.ServiceResource {
	vc := string(v)
	return predicate.ServiceResource(sql.FieldHasPrefix(FieldConnectorID, vc))
}

// ConnectorIDHasSuffix applies the HasSuffix predicate on the "connector_id" field.
func ConnectorIDHasSuffix(v object.ID) predicate.ServiceResource {
	vc := string(v)
	return predicate.ServiceResource(sql.FieldHasSuffix(FieldConnectorID, vc))
}

// ConnectorIDEqualFold applies the EqualFold predicate on the "connector_id" field.
func ConnectorIDEqualFold(v object.ID) predicate.ServiceResource {
	vc := string(v)
	return predicate.ServiceResource(sql.FieldEqualFold(FieldConnectorID, vc))
}

// ConnectorIDContainsFold applies the ContainsFold predicate on the "connector_id" field.
func ConnectorIDContainsFold(v object.ID) predicate.ServiceResource {
	vc := string(v)
	return predicate.ServiceResource(sql.FieldContainsFold(FieldConnectorID, vc))
}

// CompositionIDEQ applies the EQ predicate on the "composition_id" field.
func CompositionIDEQ(v object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldEQ(FieldCompositionID, v))
}

// CompositionIDNEQ applies the NEQ predicate on the "composition_id" field.
func CompositionIDNEQ(v object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldNEQ(FieldCompositionID, v))
}

// CompositionIDIn applies the In predicate on the "composition_id" field.
func CompositionIDIn(vs ...object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldIn(FieldCompositionID, vs...))
}

// CompositionIDNotIn applies the NotIn predicate on the "composition_id" field.
func CompositionIDNotIn(vs ...object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldNotIn(FieldCompositionID, vs...))
}

// CompositionIDGT applies the GT predicate on the "composition_id" field.
func CompositionIDGT(v object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldGT(FieldCompositionID, v))
}

// CompositionIDGTE applies the GTE predicate on the "composition_id" field.
func CompositionIDGTE(v object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldGTE(FieldCompositionID, v))
}

// CompositionIDLT applies the LT predicate on the "composition_id" field.
func CompositionIDLT(v object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldLT(FieldCompositionID, v))
}

// CompositionIDLTE applies the LTE predicate on the "composition_id" field.
func CompositionIDLTE(v object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldLTE(FieldCompositionID, v))
}

// CompositionIDContains applies the Contains predicate on the "composition_id" field.
func CompositionIDContains(v object.ID) predicate.ServiceResource {
	vc := string(v)
	return predicate.ServiceResource(sql.FieldContains(FieldCompositionID, vc))
}

// CompositionIDHasPrefix applies the HasPrefix predicate on the "composition_id" field.
func CompositionIDHasPrefix(v object.ID) predicate.ServiceResource {
	vc := string(v)
	return predicate.ServiceResource(sql.FieldHasPrefix(FieldCompositionID, vc))
}

// CompositionIDHasSuffix applies the HasSuffix predicate on the "composition_id" field.
func CompositionIDHasSuffix(v object.ID) predicate.ServiceResource {
	vc := string(v)
	return predicate.ServiceResource(sql.FieldHasSuffix(FieldCompositionID, vc))
}

// CompositionIDIsNil applies the IsNil predicate on the "composition_id" field.
func CompositionIDIsNil() predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldIsNull(FieldCompositionID))
}

// CompositionIDNotNil applies the NotNil predicate on the "composition_id" field.
func CompositionIDNotNil() predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldNotNull(FieldCompositionID))
}

// CompositionIDEqualFold applies the EqualFold predicate on the "composition_id" field.
func CompositionIDEqualFold(v object.ID) predicate.ServiceResource {
	vc := string(v)
	return predicate.ServiceResource(sql.FieldEqualFold(FieldCompositionID, vc))
}

// CompositionIDContainsFold applies the ContainsFold predicate on the "composition_id" field.
func CompositionIDContainsFold(v object.ID) predicate.ServiceResource {
	vc := string(v)
	return predicate.ServiceResource(sql.FieldContainsFold(FieldCompositionID, vc))
}

// ClassIDEQ applies the EQ predicate on the "class_id" field.
func ClassIDEQ(v object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldEQ(FieldClassID, v))
}

// ClassIDNEQ applies the NEQ predicate on the "class_id" field.
func ClassIDNEQ(v object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldNEQ(FieldClassID, v))
}

// ClassIDIn applies the In predicate on the "class_id" field.
func ClassIDIn(vs ...object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldIn(FieldClassID, vs...))
}

// ClassIDNotIn applies the NotIn predicate on the "class_id" field.
func ClassIDNotIn(vs ...object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldNotIn(FieldClassID, vs...))
}

// ClassIDGT applies the GT predicate on the "class_id" field.
func ClassIDGT(v object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldGT(FieldClassID, v))
}

// ClassIDGTE applies the GTE predicate on the "class_id" field.
func ClassIDGTE(v object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldGTE(FieldClassID, v))
}

// ClassIDLT applies the LT predicate on the "class_id" field.
func ClassIDLT(v object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldLT(FieldClassID, v))
}

// ClassIDLTE applies the LTE predicate on the "class_id" field.
func ClassIDLTE(v object.ID) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldLTE(FieldClassID, v))
}

// ClassIDContains applies the Contains predicate on the "class_id" field.
func ClassIDContains(v object.ID) predicate.ServiceResource {
	vc := string(v)
	return predicate.ServiceResource(sql.FieldContains(FieldClassID, vc))
}

// ClassIDHasPrefix applies the HasPrefix predicate on the "class_id" field.
func ClassIDHasPrefix(v object.ID) predicate.ServiceResource {
	vc := string(v)
	return predicate.ServiceResource(sql.FieldHasPrefix(FieldClassID, vc))
}

// ClassIDHasSuffix applies the HasSuffix predicate on the "class_id" field.
func ClassIDHasSuffix(v object.ID) predicate.ServiceResource {
	vc := string(v)
	return predicate.ServiceResource(sql.FieldHasSuffix(FieldClassID, vc))
}

// ClassIDIsNil applies the IsNil predicate on the "class_id" field.
func ClassIDIsNil() predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldIsNull(FieldClassID))
}

// ClassIDNotNil applies the NotNil predicate on the "class_id" field.
func ClassIDNotNil() predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldNotNull(FieldClassID))
}

// ClassIDEqualFold applies the EqualFold predicate on the "class_id" field.
func ClassIDEqualFold(v object.ID) predicate.ServiceResource {
	vc := string(v)
	return predicate.ServiceResource(sql.FieldEqualFold(FieldClassID, vc))
}

// ClassIDContainsFold applies the ContainsFold predicate on the "class_id" field.
func ClassIDContainsFold(v object.ID) predicate.ServiceResource {
	vc := string(v)
	return predicate.ServiceResource(sql.FieldContainsFold(FieldClassID, vc))
}

// ModeEQ applies the EQ predicate on the "mode" field.
func ModeEQ(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldEQ(FieldMode, v))
}

// ModeNEQ applies the NEQ predicate on the "mode" field.
func ModeNEQ(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldNEQ(FieldMode, v))
}

// ModeIn applies the In predicate on the "mode" field.
func ModeIn(vs ...string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldIn(FieldMode, vs...))
}

// ModeNotIn applies the NotIn predicate on the "mode" field.
func ModeNotIn(vs ...string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldNotIn(FieldMode, vs...))
}

// ModeGT applies the GT predicate on the "mode" field.
func ModeGT(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldGT(FieldMode, v))
}

// ModeGTE applies the GTE predicate on the "mode" field.
func ModeGTE(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldGTE(FieldMode, v))
}

// ModeLT applies the LT predicate on the "mode" field.
func ModeLT(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldLT(FieldMode, v))
}

// ModeLTE applies the LTE predicate on the "mode" field.
func ModeLTE(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldLTE(FieldMode, v))
}

// ModeContains applies the Contains predicate on the "mode" field.
func ModeContains(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldContains(FieldMode, v))
}

// ModeHasPrefix applies the HasPrefix predicate on the "mode" field.
func ModeHasPrefix(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldHasPrefix(FieldMode, v))
}

// ModeHasSuffix applies the HasSuffix predicate on the "mode" field.
func ModeHasSuffix(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldHasSuffix(FieldMode, v))
}

// ModeEqualFold applies the EqualFold predicate on the "mode" field.
func ModeEqualFold(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldEqualFold(FieldMode, v))
}

// ModeContainsFold applies the ContainsFold predicate on the "mode" field.
func ModeContainsFold(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldContainsFold(FieldMode, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldContainsFold(FieldType, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldContainsFold(FieldName, v))
}

// DeployerTypeEQ applies the EQ predicate on the "deployer_type" field.
func DeployerTypeEQ(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldEQ(FieldDeployerType, v))
}

// DeployerTypeNEQ applies the NEQ predicate on the "deployer_type" field.
func DeployerTypeNEQ(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldNEQ(FieldDeployerType, v))
}

// DeployerTypeIn applies the In predicate on the "deployer_type" field.
func DeployerTypeIn(vs ...string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldIn(FieldDeployerType, vs...))
}

// DeployerTypeNotIn applies the NotIn predicate on the "deployer_type" field.
func DeployerTypeNotIn(vs ...string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldNotIn(FieldDeployerType, vs...))
}

// DeployerTypeGT applies the GT predicate on the "deployer_type" field.
func DeployerTypeGT(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldGT(FieldDeployerType, v))
}

// DeployerTypeGTE applies the GTE predicate on the "deployer_type" field.
func DeployerTypeGTE(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldGTE(FieldDeployerType, v))
}

// DeployerTypeLT applies the LT predicate on the "deployer_type" field.
func DeployerTypeLT(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldLT(FieldDeployerType, v))
}

// DeployerTypeLTE applies the LTE predicate on the "deployer_type" field.
func DeployerTypeLTE(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldLTE(FieldDeployerType, v))
}

// DeployerTypeContains applies the Contains predicate on the "deployer_type" field.
func DeployerTypeContains(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldContains(FieldDeployerType, v))
}

// DeployerTypeHasPrefix applies the HasPrefix predicate on the "deployer_type" field.
func DeployerTypeHasPrefix(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldHasPrefix(FieldDeployerType, v))
}

// DeployerTypeHasSuffix applies the HasSuffix predicate on the "deployer_type" field.
func DeployerTypeHasSuffix(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldHasSuffix(FieldDeployerType, v))
}

// DeployerTypeEqualFold applies the EqualFold predicate on the "deployer_type" field.
func DeployerTypeEqualFold(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldEqualFold(FieldDeployerType, v))
}

// DeployerTypeContainsFold applies the ContainsFold predicate on the "deployer_type" field.
func DeployerTypeContainsFold(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldContainsFold(FieldDeployerType, v))
}

// ShapeEQ applies the EQ predicate on the "shape" field.
func ShapeEQ(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldEQ(FieldShape, v))
}

// ShapeNEQ applies the NEQ predicate on the "shape" field.
func ShapeNEQ(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldNEQ(FieldShape, v))
}

// ShapeIn applies the In predicate on the "shape" field.
func ShapeIn(vs ...string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldIn(FieldShape, vs...))
}

// ShapeNotIn applies the NotIn predicate on the "shape" field.
func ShapeNotIn(vs ...string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldNotIn(FieldShape, vs...))
}

// ShapeGT applies the GT predicate on the "shape" field.
func ShapeGT(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldGT(FieldShape, v))
}

// ShapeGTE applies the GTE predicate on the "shape" field.
func ShapeGTE(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldGTE(FieldShape, v))
}

// ShapeLT applies the LT predicate on the "shape" field.
func ShapeLT(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldLT(FieldShape, v))
}

// ShapeLTE applies the LTE predicate on the "shape" field.
func ShapeLTE(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldLTE(FieldShape, v))
}

// ShapeContains applies the Contains predicate on the "shape" field.
func ShapeContains(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldContains(FieldShape, v))
}

// ShapeHasPrefix applies the HasPrefix predicate on the "shape" field.
func ShapeHasPrefix(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldHasPrefix(FieldShape, v))
}

// ShapeHasSuffix applies the HasSuffix predicate on the "shape" field.
func ShapeHasSuffix(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldHasSuffix(FieldShape, v))
}

// ShapeEqualFold applies the EqualFold predicate on the "shape" field.
func ShapeEqualFold(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldEqualFold(FieldShape, v))
}

// ShapeContainsFold applies the ContainsFold predicate on the "shape" field.
func ShapeContainsFold(v string) predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldContainsFold(FieldShape, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.ServiceResource {
	return predicate.ServiceResource(sql.FieldNotNull(FieldStatus))
}

// HasProject applies the HasEdge predicate on the "project" edge.
func HasProject() predicate.ServiceResource {
	return predicate.ServiceResource(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Project
		step.Edge.Schema = schemaConfig.ServiceResource
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectWith applies the HasEdge predicate on the "project" edge with a given conditions (other predicates).
func HasProjectWith(preds ...predicate.Project) predicate.ServiceResource {
	return predicate.ServiceResource(func(s *sql.Selector) {
		step := newProjectStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Project
		step.Edge.Schema = schemaConfig.ServiceResource
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEnvironment applies the HasEdge predicate on the "environment" edge.
func HasEnvironment() predicate.ServiceResource {
	return predicate.ServiceResource(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EnvironmentTable, EnvironmentColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Environment
		step.Edge.Schema = schemaConfig.ServiceResource
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnvironmentWith applies the HasEdge predicate on the "environment" edge with a given conditions (other predicates).
func HasEnvironmentWith(preds ...predicate.Environment) predicate.ServiceResource {
	return predicate.ServiceResource(func(s *sql.Selector) {
		step := newEnvironmentStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Environment
		step.Edge.Schema = schemaConfig.ServiceResource
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasService applies the HasEdge predicate on the "service" edge.
func HasService() predicate.ServiceResource {
	return predicate.ServiceResource(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ServiceTable, ServiceColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Service
		step.Edge.Schema = schemaConfig.ServiceResource
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServiceWith applies the HasEdge predicate on the "service" edge with a given conditions (other predicates).
func HasServiceWith(preds ...predicate.Service) predicate.ServiceResource {
	return predicate.ServiceResource(func(s *sql.Selector) {
		step := newServiceStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Service
		step.Edge.Schema = schemaConfig.ServiceResource
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasConnector applies the HasEdge predicate on the "connector" edge.
func HasConnector() predicate.ServiceResource {
	return predicate.ServiceResource(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ConnectorTable, ConnectorColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Connector
		step.Edge.Schema = schemaConfig.ServiceResource
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConnectorWith applies the HasEdge predicate on the "connector" edge with a given conditions (other predicates).
func HasConnectorWith(preds ...predicate.Connector) predicate.ServiceResource {
	return predicate.ServiceResource(func(s *sql.Selector) {
		step := newConnectorStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Connector
		step.Edge.Schema = schemaConfig.ServiceResource
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasComposition applies the HasEdge predicate on the "composition" edge.
func HasComposition() predicate.ServiceResource {
	return predicate.ServiceResource(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CompositionTable, CompositionColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ServiceResource
		step.Edge.Schema = schemaConfig.ServiceResource
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompositionWith applies the HasEdge predicate on the "composition" edge with a given conditions (other predicates).
func HasCompositionWith(preds ...predicate.ServiceResource) predicate.ServiceResource {
	return predicate.ServiceResource(func(s *sql.Selector) {
		step := newCompositionStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ServiceResource
		step.Edge.Schema = schemaConfig.ServiceResource
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasComponents applies the HasEdge predicate on the "components" edge.
func HasComponents() predicate.ServiceResource {
	return predicate.ServiceResource(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ComponentsTable, ComponentsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ServiceResource
		step.Edge.Schema = schemaConfig.ServiceResource
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasComponentsWith applies the HasEdge predicate on the "components" edge with a given conditions (other predicates).
func HasComponentsWith(preds ...predicate.ServiceResource) predicate.ServiceResource {
	return predicate.ServiceResource(func(s *sql.Selector) {
		step := newComponentsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ServiceResource
		step.Edge.Schema = schemaConfig.ServiceResource
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasClass applies the HasEdge predicate on the "class" edge.
func HasClass() predicate.ServiceResource {
	return predicate.ServiceResource(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClassTable, ClassColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ServiceResource
		step.Edge.Schema = schemaConfig.ServiceResource
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClassWith applies the HasEdge predicate on the "class" edge with a given conditions (other predicates).
func HasClassWith(preds ...predicate.ServiceResource) predicate.ServiceResource {
	return predicate.ServiceResource(func(s *sql.Selector) {
		step := newClassStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ServiceResource
		step.Edge.Schema = schemaConfig.ServiceResource
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInstances applies the HasEdge predicate on the "instances" edge.
func HasInstances() predicate.ServiceResource {
	return predicate.ServiceResource(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InstancesTable, InstancesColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ServiceResource
		step.Edge.Schema = schemaConfig.ServiceResource
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInstancesWith applies the HasEdge predicate on the "instances" edge with a given conditions (other predicates).
func HasInstancesWith(preds ...predicate.ServiceResource) predicate.ServiceResource {
	return predicate.ServiceResource(func(s *sql.Selector) {
		step := newInstancesStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ServiceResource
		step.Edge.Schema = schemaConfig.ServiceResource
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDependencies applies the HasEdge predicate on the "dependencies" edge.
func HasDependencies() predicate.ServiceResource {
	return predicate.ServiceResource(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, DependenciesTable, DependenciesColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ServiceResourceRelationship
		step.Edge.Schema = schemaConfig.ServiceResourceRelationship
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDependenciesWith applies the HasEdge predicate on the "dependencies" edge with a given conditions (other predicates).
func HasDependenciesWith(preds ...predicate.ServiceResourceRelationship) predicate.ServiceResource {
	return predicate.ServiceResource(func(s *sql.Selector) {
		step := newDependenciesStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ServiceResourceRelationship
		step.Edge.Schema = schemaConfig.ServiceResourceRelationship
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ServiceResource) predicate.ServiceResource {
	return predicate.ServiceResource(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ServiceResource) predicate.ServiceResource {
	return predicate.ServiceResource(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ServiceResource) predicate.ServiceResource {
	return predicate.ServiceResource(func(s *sql.Selector) {
		p(s.Not())
	})
}
