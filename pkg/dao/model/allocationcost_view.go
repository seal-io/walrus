// SPDX-FileCopyrightText: 2023 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "seal". DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"time"

	"github.com/seal-io/seal/pkg/dao/model/allocationcost"
	"github.com/seal-io/seal/pkg/dao/types"
	"github.com/seal-io/seal/pkg/dao/types/object"
)

// AllocationCostCreateInput holds the creation input of the AllocationCost entity.
type AllocationCostCreateInput struct {
	inputConfig `uri:"-" query:"-" json:"-"`

	Fingerprint         string                  `uri:"-" query:"-" json:"fingerprint"`
	Name                string                  `uri:"-" query:"-" json:"name"`
	Minutes             float64                 `uri:"-" query:"-" json:"minutes"`
	EndTime             time.Time               `uri:"-" query:"-" json:"endTime"`
	StartTime           time.Time               `uri:"-" query:"-" json:"startTime"`
	ClusterName         string                  `uri:"-" query:"-" json:"clusterName,omitempty"`
	Namespace           string                  `uri:"-" query:"-" json:"namespace,omitempty"`
	Node                string                  `uri:"-" query:"-" json:"node,omitempty"`
	Controller          string                  `uri:"-" query:"-" json:"controller,omitempty"`
	ControllerKind      string                  `uri:"-" query:"-" json:"controllerKind,omitempty"`
	Pod                 string                  `uri:"-" query:"-" json:"pod,omitempty"`
	Container           string                  `uri:"-" query:"-" json:"container,omitempty"`
	Pvs                 map[string]types.PVCost `uri:"-" query:"-" json:"pvs,omitempty"`
	Labels              map[string]string       `uri:"-" query:"-" json:"labels,omitempty"`
	TotalCost           float64                 `uri:"-" query:"-" json:"totalCost,omitempty"`
	Currency            int                     `uri:"-" query:"-" json:"currency,omitempty"`
	CPUCost             float64                 `uri:"-" query:"-" json:"cpuCost,omitempty"`
	CPUCoreRequest      float64                 `uri:"-" query:"-" json:"cpuCoreRequest,omitempty"`
	GpuCost             float64                 `uri:"-" query:"-" json:"gpuCost,omitempty"`
	GpuCount            float64                 `uri:"-" query:"-" json:"gpuCount,omitempty"`
	RAMCost             float64                 `uri:"-" query:"-" json:"ramCost,omitempty"`
	RAMByteRequest      float64                 `uri:"-" query:"-" json:"rambyteRequest,omitempty"`
	PvCost              float64                 `uri:"-" query:"-" json:"pvCost,omitempty"`
	PvBytes             float64                 `uri:"-" query:"-" json:"pvBytes,omitempty"`
	LoadBalancerCost    float64                 `uri:"-" query:"-" json:"loadBalancerCost,omitempty"`
	CPUCoreUsageAverage float64                 `uri:"-" query:"-" json:"cpuCoreUsageAverage,omitempty"`
	CPUCoreUsageMax     float64                 `uri:"-" query:"-" json:"cpuCoreUsageMax,omitempty"`
	RAMByteUsageAverage float64                 `uri:"-" query:"-" json:"rambyteUsageAverage,omitempty"`
	RAMByteUsageMax     float64                 `uri:"-" query:"-" json:"rambyteUsageMax,omitempty"`
}

// Model returns the AllocationCost entity for creating,
// after validating.
func (acci *AllocationCostCreateInput) Model() *AllocationCost {
	if acci == nil {
		return nil
	}

	ac := &AllocationCost{
		Fingerprint:         acci.Fingerprint,
		Name:                acci.Name,
		Minutes:             acci.Minutes,
		EndTime:             acci.EndTime,
		StartTime:           acci.StartTime,
		ClusterName:         acci.ClusterName,
		Namespace:           acci.Namespace,
		Node:                acci.Node,
		Controller:          acci.Controller,
		ControllerKind:      acci.ControllerKind,
		Pod:                 acci.Pod,
		Container:           acci.Container,
		Pvs:                 acci.Pvs,
		Labels:              acci.Labels,
		TotalCost:           acci.TotalCost,
		Currency:            acci.Currency,
		CPUCost:             acci.CPUCost,
		CPUCoreRequest:      acci.CPUCoreRequest,
		GpuCost:             acci.GpuCost,
		GpuCount:            acci.GpuCount,
		RAMCost:             acci.RAMCost,
		RAMByteRequest:      acci.RAMByteRequest,
		PvCost:              acci.PvCost,
		PvBytes:             acci.PvBytes,
		LoadBalancerCost:    acci.LoadBalancerCost,
		CPUCoreUsageAverage: acci.CPUCoreUsageAverage,
		CPUCoreUsageMax:     acci.CPUCoreUsageMax,
		RAMByteUsageAverage: acci.RAMByteUsageAverage,
		RAMByteUsageMax:     acci.RAMByteUsageMax,
	}

	return ac
}

// Load checks the input.
// TODO(thxCode): rename to Validate after supporting hierarchical routes.
func (acci *AllocationCostCreateInput) Load() error {
	if acci == nil {
		return errors.New("nil receiver")
	}

	return acci.LoadWith(acci.inputConfig.Context, acci.inputConfig.ClientSet)
}

// LoadWith checks the input with the given context and client set.
// TODO(thxCode): rename to ValidateWith after supporting hierarchical routes.
func (acci *AllocationCostCreateInput) LoadWith(ctx context.Context, cs ClientSet) (err error) {
	if acci == nil {
		return errors.New("nil receiver")
	}

	return nil
}

// AllocationCostCreateInputs holds the creation input item of the AllocationCost entities.
type AllocationCostCreateInputsItem struct {
	Fingerprint         string                  `uri:"-" query:"-" json:"fingerprint"`
	Name                string                  `uri:"-" query:"-" json:"name"`
	Minutes             float64                 `uri:"-" query:"-" json:"minutes"`
	EndTime             time.Time               `uri:"-" query:"-" json:"endTime"`
	StartTime           time.Time               `uri:"-" query:"-" json:"startTime"`
	ClusterName         string                  `uri:"-" query:"-" json:"clusterName,omitempty"`
	Namespace           string                  `uri:"-" query:"-" json:"namespace,omitempty"`
	Node                string                  `uri:"-" query:"-" json:"node,omitempty"`
	Controller          string                  `uri:"-" query:"-" json:"controller,omitempty"`
	ControllerKind      string                  `uri:"-" query:"-" json:"controllerKind,omitempty"`
	Pod                 string                  `uri:"-" query:"-" json:"pod,omitempty"`
	Container           string                  `uri:"-" query:"-" json:"container,omitempty"`
	Pvs                 map[string]types.PVCost `uri:"-" query:"-" json:"pvs,omitempty"`
	Labels              map[string]string       `uri:"-" query:"-" json:"labels,omitempty"`
	TotalCost           float64                 `uri:"-" query:"-" json:"totalCost,omitempty"`
	Currency            int                     `uri:"-" query:"-" json:"currency,omitempty"`
	CPUCost             float64                 `uri:"-" query:"-" json:"cpuCost,omitempty"`
	CPUCoreRequest      float64                 `uri:"-" query:"-" json:"cpuCoreRequest,omitempty"`
	GpuCost             float64                 `uri:"-" query:"-" json:"gpuCost,omitempty"`
	GpuCount            float64                 `uri:"-" query:"-" json:"gpuCount,omitempty"`
	RAMCost             float64                 `uri:"-" query:"-" json:"ramCost,omitempty"`
	RAMByteRequest      float64                 `uri:"-" query:"-" json:"rambyteRequest,omitempty"`
	PvCost              float64                 `uri:"-" query:"-" json:"pvCost,omitempty"`
	PvBytes             float64                 `uri:"-" query:"-" json:"pvBytes,omitempty"`
	LoadBalancerCost    float64                 `uri:"-" query:"-" json:"loadBalancerCost,omitempty"`
	CPUCoreUsageAverage float64                 `uri:"-" query:"-" json:"cpuCoreUsageAverage,omitempty"`
	CPUCoreUsageMax     float64                 `uri:"-" query:"-" json:"cpuCoreUsageMax,omitempty"`
	RAMByteUsageAverage float64                 `uri:"-" query:"-" json:"rambyteUsageAverage,omitempty"`
	RAMByteUsageMax     float64                 `uri:"-" query:"-" json:"rambyteUsageMax,omitempty"`
}

// AllocationCostCreateInputs holds the creation input of the AllocationCost entities.
type AllocationCostCreateInputs struct {
	inputConfig `uri:"-" query:"-" json:"-"`

	Items []*AllocationCostCreateInputsItem `uri:"-" query:"-" json:"items"`
}

// Model returns the AllocationCost entities for creating,
// after validating.
func (acci *AllocationCostCreateInputs) Model() []*AllocationCost {
	if acci == nil || len(acci.Items) == 0 {
		return nil
	}

	acs := make([]*AllocationCost, len(acci.Items))

	for i := range acci.Items {
		ac := &AllocationCost{
			Fingerprint:         acci.Items[i].Fingerprint,
			Name:                acci.Items[i].Name,
			Minutes:             acci.Items[i].Minutes,
			EndTime:             acci.Items[i].EndTime,
			StartTime:           acci.Items[i].StartTime,
			ClusterName:         acci.Items[i].ClusterName,
			Namespace:           acci.Items[i].Namespace,
			Node:                acci.Items[i].Node,
			Controller:          acci.Items[i].Controller,
			ControllerKind:      acci.Items[i].ControllerKind,
			Pod:                 acci.Items[i].Pod,
			Container:           acci.Items[i].Container,
			Pvs:                 acci.Items[i].Pvs,
			Labels:              acci.Items[i].Labels,
			TotalCost:           acci.Items[i].TotalCost,
			Currency:            acci.Items[i].Currency,
			CPUCost:             acci.Items[i].CPUCost,
			CPUCoreRequest:      acci.Items[i].CPUCoreRequest,
			GpuCost:             acci.Items[i].GpuCost,
			GpuCount:            acci.Items[i].GpuCount,
			RAMCost:             acci.Items[i].RAMCost,
			RAMByteRequest:      acci.Items[i].RAMByteRequest,
			PvCost:              acci.Items[i].PvCost,
			PvBytes:             acci.Items[i].PvBytes,
			LoadBalancerCost:    acci.Items[i].LoadBalancerCost,
			CPUCoreUsageAverage: acci.Items[i].CPUCoreUsageAverage,
			CPUCoreUsageMax:     acci.Items[i].CPUCoreUsageMax,
			RAMByteUsageAverage: acci.Items[i].RAMByteUsageAverage,
			RAMByteUsageMax:     acci.Items[i].RAMByteUsageMax,
		}

		acs[i] = ac
	}

	return acs
}

// Load checks the input.
// TODO(thxCode): rename to Validate after supporting hierarchical routes.
func (acci *AllocationCostCreateInputs) Load() error {
	if acci == nil {
		return errors.New("nil receiver")
	}

	return acci.LoadWith(acci.inputConfig.Context, acci.inputConfig.ClientSet)
}

// LoadWith checks the input with the given context and client set.
// TODO(thxCode): rename to ValidateWith after supporting hierarchical routes.
func (acci *AllocationCostCreateInputs) LoadWith(ctx context.Context, cs ClientSet) (err error) {
	if acci == nil {
		return errors.New("nil receiver")
	}

	if len(acci.Items) == 0 {
		return errors.New("empty items")
	}

	return nil
}

// AllocationCostDeleteInput holds the deletion input of the AllocationCost entity.
type AllocationCostDeleteInput = AllocationCostQueryInput

// AllocationCostDeleteInputs holds the deletion input item of the AllocationCost entities.
type AllocationCostDeleteInputsItem struct {
	ID int `uri:"-" query:"-" json:"id"`
}

// AllocationCostDeleteInputs holds the deletion input of the AllocationCost entities.
type AllocationCostDeleteInputs struct {
	inputConfig `uri:"-" query:"-" json:"-"`

	Items []*AllocationCostDeleteInputsItem `uri:"-" query:"-" json:"items"`
}

// Model returns the AllocationCost entities for deleting,
// after validating.
func (acdi *AllocationCostDeleteInputs) Model() []*AllocationCost {
	if acdi == nil || len(acdi.Items) == 0 {
		return nil
	}

	acs := make([]*AllocationCost, len(acdi.Items))
	for i := range acdi.Items {
		acs[i] = &AllocationCost{
			ID: acdi.Items[i].ID,
		}
	}
	return acs
}

// Load checks the input.
// TODO(thxCode): rename to Validate after supporting hierarchical routes.
func (acdi *AllocationCostDeleteInputs) Load() error {
	if acdi == nil {
		return errors.New("nil receiver")
	}

	return acdi.LoadWith(acdi.inputConfig.Context, acdi.inputConfig.ClientSet)
}

// LoadWith checks the input with the given context and client set.
// TODO(thxCode): rename to ValidateWith after supporting hierarchical routes.
func (acdi *AllocationCostDeleteInputs) LoadWith(ctx context.Context, cs ClientSet) (err error) {
	if acdi == nil {
		return errors.New("nil receiver")
	}

	if len(acdi.Items) == 0 {
		return errors.New("empty items")
	}

	q := cs.AllocationCosts().Query()

	ids := make([]int, 0, len(acdi.Items))

	for i := range acdi.Items {
		if acdi.Items[i] == nil {
			return errors.New("nil item")
		}

		if acdi.Items[i].ID != 0 {
			ids = append(ids, acdi.Items[i].ID)
		} else {
			return errors.New("found item hasn't identify")
		}
	}

	idsLen := len(ids)

	idsCnt, err := q.Where(allocationcost.IDIn(ids...)).
		Count(ctx)
	if err != nil {
		return err
	}

	if idsCnt != idsLen {
		return errors.New("found unrecognized item")
	}

	return nil
}

// AllocationCostQueryInput holds the query input of the AllocationCost entity.
type AllocationCostQueryInput struct {
	inputConfig `uri:"-" query:"-" json:"-"`

	Refer *object.Refer `uri:"allocationcost,default=\"\"" query:"-" json:"-"`
	ID    int           `uri:"id" query:"-" json:"id"` // TODO(thxCode): remove the uri:"id" after supporting hierarchical routes.
}

// Model returns the AllocationCost entity for querying,
// after validating.
func (acqi *AllocationCostQueryInput) Model() *AllocationCost {
	if acqi == nil {
		return nil
	}

	return &AllocationCost{
		ID: acqi.ID,
	}
}

// Load checks the input.
// TODO(thxCode): rename to Validate after supporting hierarchical routes.
func (acqi *AllocationCostQueryInput) Load() error {
	if acqi == nil {
		return errors.New("nil receiver")
	}

	return acqi.LoadWith(acqi.inputConfig.Context, acqi.inputConfig.ClientSet)
}

// LoadWith checks the input with the given context and client set.
// TODO(thxCode): rename to ValidateWith after supporting hierarchical routes.
func (acqi *AllocationCostQueryInput) LoadWith(ctx context.Context, cs ClientSet) (err error) {
	if acqi == nil {
		return errors.New("nil receiver")
	}

	if acqi.Refer != nil && *acqi.Refer == "" {
		return nil
	}

	q := cs.AllocationCosts().Query()

	if acqi.Refer != nil {
		if acqi.Refer.IsNumeric() {
			q.Where(
				allocationcost.ID(acqi.Refer.Int()))
		} else {
			return errors.New("invalid identify refer of allocationcost")
		}
	} else if acqi.ID != 0 {
		q.Where(
			allocationcost.ID(acqi.ID))
	} else {
		return errors.New("invalid identify of allocationcost")
	}

	acqi.ID, err = q.OnlyID(ctx)
	return err
}

// AllocationCostQueryInputs holds the query input of the AllocationCost entities.
type AllocationCostQueryInputs struct {
	inputConfig `uri:"-" query:"-" json:"-"`
}

// Load checks the input.
// TODO(thxCode): rename to Validate after supporting hierarchical routes.
func (acqi *AllocationCostQueryInputs) Load() error {
	if acqi == nil {
		return errors.New("nil receiver")
	}

	return acqi.LoadWith(acqi.inputConfig.Context, acqi.inputConfig.ClientSet)
}

// LoadWith checks the input with the given context and client set.
// TODO(thxCode): rename to ValidateWith after supporting hierarchical routes.
func (acqi *AllocationCostQueryInputs) LoadWith(ctx context.Context, cs ClientSet) (err error) {
	if acqi == nil {
		return errors.New("nil receiver")
	}

	return err
}

// AllocationCostUpdateInput holds the modification input of the AllocationCost entity.
type AllocationCostUpdateInput struct {
	AllocationCostQueryInput `uri:",inline" query:"-" json:",inline"`

	TotalCost           float64 `uri:"-" query:"-" json:"totalCost,omitempty"`
	Currency            int     `uri:"-" query:"-" json:"currency,omitempty"`
	CPUCost             float64 `uri:"-" query:"-" json:"cpuCost,omitempty"`
	GpuCost             float64 `uri:"-" query:"-" json:"gpuCost,omitempty"`
	RAMCost             float64 `uri:"-" query:"-" json:"ramCost,omitempty"`
	PvCost              float64 `uri:"-" query:"-" json:"pvCost,omitempty"`
	PvBytes             float64 `uri:"-" query:"-" json:"pvBytes,omitempty"`
	LoadBalancerCost    float64 `uri:"-" query:"-" json:"loadBalancerCost,omitempty"`
	CPUCoreUsageAverage float64 `uri:"-" query:"-" json:"cpuCoreUsageAverage,omitempty"`
	CPUCoreUsageMax     float64 `uri:"-" query:"-" json:"cpuCoreUsageMax,omitempty"`
	RAMByteUsageAverage float64 `uri:"-" query:"-" json:"rambyteUsageAverage,omitempty"`
	RAMByteUsageMax     float64 `uri:"-" query:"-" json:"rambyteUsageMax,omitempty"`
}

// Model returns the AllocationCost entity for modifying,
// after validating.
func (acui *AllocationCostUpdateInput) Model() *AllocationCost {
	if acui == nil {
		return nil
	}

	ac := &AllocationCost{
		ID:                  acui.ID,
		TotalCost:           acui.TotalCost,
		Currency:            acui.Currency,
		CPUCost:             acui.CPUCost,
		GpuCost:             acui.GpuCost,
		RAMCost:             acui.RAMCost,
		PvCost:              acui.PvCost,
		PvBytes:             acui.PvBytes,
		LoadBalancerCost:    acui.LoadBalancerCost,
		CPUCoreUsageAverage: acui.CPUCoreUsageAverage,
		CPUCoreUsageMax:     acui.CPUCoreUsageMax,
		RAMByteUsageAverage: acui.RAMByteUsageAverage,
		RAMByteUsageMax:     acui.RAMByteUsageMax,
	}

	return ac
}

// AllocationCostUpdateInputs holds the modification input item of the AllocationCost entities.
type AllocationCostUpdateInputsItem struct {
	ID int `uri:"-" query:"-" json:"id"`

	TotalCost           float64 `uri:"-" query:"-" json:"totalCost,omitempty"`
	Currency            int     `uri:"-" query:"-" json:"currency,omitempty"`
	CPUCost             float64 `uri:"-" query:"-" json:"cpuCost,omitempty"`
	GpuCost             float64 `uri:"-" query:"-" json:"gpuCost,omitempty"`
	RAMCost             float64 `uri:"-" query:"-" json:"ramCost,omitempty"`
	PvCost              float64 `uri:"-" query:"-" json:"pvCost,omitempty"`
	PvBytes             float64 `uri:"-" query:"-" json:"pvBytes,omitempty"`
	LoadBalancerCost    float64 `uri:"-" query:"-" json:"loadBalancerCost,omitempty"`
	CPUCoreUsageAverage float64 `uri:"-" query:"-" json:"cpuCoreUsageAverage,omitempty"`
	CPUCoreUsageMax     float64 `uri:"-" query:"-" json:"cpuCoreUsageMax,omitempty"`
	RAMByteUsageAverage float64 `uri:"-" query:"-" json:"rambyteUsageAverage,omitempty"`
	RAMByteUsageMax     float64 `uri:"-" query:"-" json:"rambyteUsageMax,omitempty"`
}

// AllocationCostUpdateInputs holds the modification input of the AllocationCost entities.
type AllocationCostUpdateInputs struct {
	inputConfig `uri:"-" query:"-" json:"-"`

	Items []*AllocationCostUpdateInputsItem `uri:"-" query:"-" json:"items"`
}

// Model returns the AllocationCost entities for modifying,
// after validating.
func (acui *AllocationCostUpdateInputs) Model() []*AllocationCost {
	if acui == nil || len(acui.Items) == 0 {
		return nil
	}

	acs := make([]*AllocationCost, len(acui.Items))

	for i := range acui.Items {
		ac := &AllocationCost{
			ID:                  acui.Items[i].ID,
			TotalCost:           acui.Items[i].TotalCost,
			Currency:            acui.Items[i].Currency,
			CPUCost:             acui.Items[i].CPUCost,
			GpuCost:             acui.Items[i].GpuCost,
			RAMCost:             acui.Items[i].RAMCost,
			PvCost:              acui.Items[i].PvCost,
			PvBytes:             acui.Items[i].PvBytes,
			LoadBalancerCost:    acui.Items[i].LoadBalancerCost,
			CPUCoreUsageAverage: acui.Items[i].CPUCoreUsageAverage,
			CPUCoreUsageMax:     acui.Items[i].CPUCoreUsageMax,
			RAMByteUsageAverage: acui.Items[i].RAMByteUsageAverage,
			RAMByteUsageMax:     acui.Items[i].RAMByteUsageMax,
		}

		acs[i] = ac
	}

	return acs
}

// Load checks the input.
// TODO(thxCode): rename to Validate after supporting hierarchical routes.
func (acui *AllocationCostUpdateInputs) Load() error {
	if acui == nil {
		return errors.New("nil receiver")
	}

	return acui.LoadWith(acui.inputConfig.Context, acui.inputConfig.ClientSet)
}

// LoadWith checks the input with the given context and client set.
// TODO(thxCode): rename to ValidateWith after supporting hierarchical routes.
func (acui *AllocationCostUpdateInputs) LoadWith(ctx context.Context, cs ClientSet) (err error) {
	if acui == nil {
		return errors.New("nil receiver")
	}

	if len(acui.Items) == 0 {
		return errors.New("empty items")
	}

	q := cs.AllocationCosts().Query()

	ids := make([]int, 0, len(acui.Items))

	for i := range acui.Items {
		if acui.Items[i] == nil {
			return errors.New("nil item")
		}

		if acui.Items[i].ID != 0 {
			ids = append(ids, acui.Items[i].ID)
		} else {
			return errors.New("found item hasn't identify")
		}
	}

	idsLen := len(ids)

	idsCnt, err := q.Where(allocationcost.IDIn(ids...)).
		Count(ctx)
	if err != nil {
		return err
	}

	if idsCnt != idsLen {
		return errors.New("found unrecognized item")
	}

	return nil
}

// AllocationCostOutput holds the output of the AllocationCost entity.
type AllocationCostOutput struct {
	ID                  int                     `json:"id,omitempty"`
	StartTime           time.Time               `json:"startTime,omitempty"`
	EndTime             time.Time               `json:"endTime,omitempty"`
	Minutes             float64                 `json:"minutes,omitempty"`
	Name                string                  `json:"name,omitempty"`
	Fingerprint         string                  `json:"fingerprint,omitempty"`
	ClusterName         string                  `json:"clusterName,omitempty"`
	Namespace           string                  `json:"namespace,omitempty"`
	Node                string                  `json:"node,omitempty"`
	Controller          string                  `json:"controller,omitempty"`
	ControllerKind      string                  `json:"controllerKind,omitempty"`
	Pod                 string                  `json:"pod,omitempty"`
	Container           string                  `json:"container,omitempty"`
	Pvs                 map[string]types.PVCost `json:"pvs,omitempty"`
	Labels              map[string]string       `json:"labels,omitempty"`
	TotalCost           float64                 `json:"totalCost,omitempty"`
	Currency            int                     `json:"currency,omitempty"`
	CPUCost             float64                 `json:"cpuCost,omitempty"`
	CPUCoreRequest      float64                 `json:"cpuCoreRequest,omitempty"`
	GpuCost             float64                 `json:"gpuCost,omitempty"`
	GpuCount            float64                 `json:"gpuCount,omitempty"`
	RAMCost             float64                 `json:"ramCost,omitempty"`
	RAMByteRequest      float64                 `json:"rambyteRequest,omitempty"`
	PvCost              float64                 `json:"pvCost,omitempty"`
	PvBytes             float64                 `json:"pvBytes,omitempty"`
	LoadBalancerCost    float64                 `json:"loadBalancerCost,omitempty"`
	CPUCoreUsageAverage float64                 `json:"cpuCoreUsageAverage,omitempty"`
	CPUCoreUsageMax     float64                 `json:"cpuCoreUsageMax,omitempty"`
	RAMByteUsageAverage float64                 `json:"rambyteUsageAverage,omitempty"`
	RAMByteUsageMax     float64                 `json:"rambyteUsageMax,omitempty"`
}

// View returns the output of AllocationCost.
func (ac *AllocationCost) View() *AllocationCostOutput {
	return ExposeAllocationCost(ac)
}

// View returns the output of AllocationCosts.
func (acs AllocationCosts) View() []*AllocationCostOutput {
	return ExposeAllocationCosts(acs)
}

// ExposeAllocationCost converts the AllocationCost to AllocationCostOutput.
func ExposeAllocationCost(ac *AllocationCost) *AllocationCostOutput {
	if ac == nil {
		return nil
	}

	aco := &AllocationCostOutput{
		ID:                  ac.ID,
		StartTime:           ac.StartTime,
		EndTime:             ac.EndTime,
		Minutes:             ac.Minutes,
		Name:                ac.Name,
		Fingerprint:         ac.Fingerprint,
		ClusterName:         ac.ClusterName,
		Namespace:           ac.Namespace,
		Node:                ac.Node,
		Controller:          ac.Controller,
		ControllerKind:      ac.ControllerKind,
		Pod:                 ac.Pod,
		Container:           ac.Container,
		Pvs:                 ac.Pvs,
		Labels:              ac.Labels,
		TotalCost:           ac.TotalCost,
		Currency:            ac.Currency,
		CPUCost:             ac.CPUCost,
		CPUCoreRequest:      ac.CPUCoreRequest,
		GpuCost:             ac.GpuCost,
		GpuCount:            ac.GpuCount,
		RAMCost:             ac.RAMCost,
		RAMByteRequest:      ac.RAMByteRequest,
		PvCost:              ac.PvCost,
		PvBytes:             ac.PvBytes,
		LoadBalancerCost:    ac.LoadBalancerCost,
		CPUCoreUsageAverage: ac.CPUCoreUsageAverage,
		CPUCoreUsageMax:     ac.CPUCoreUsageMax,
		RAMByteUsageAverage: ac.RAMByteUsageAverage,
		RAMByteUsageMax:     ac.RAMByteUsageMax,
	}

	return aco
}

// ExposeAllocationCosts converts the AllocationCost slice to AllocationCostOutput pointer slice.
func ExposeAllocationCosts(acs []*AllocationCost) []*AllocationCostOutput {
	if len(acs) == 0 {
		return nil
	}

	acos := make([]*AllocationCostOutput, len(acs))
	for i := range acs {
		acos[i] = ExposeAllocationCost(acs[i])
	}
	return acos
}
