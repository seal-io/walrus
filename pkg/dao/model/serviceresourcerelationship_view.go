// SPDX-FileCopyrightText: 2023 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "seal". DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"time"

	"github.com/seal-io/seal/pkg/dao/model/predicate"
	"github.com/seal-io/seal/pkg/dao/model/serviceresourcerelationship"
	"github.com/seal-io/seal/pkg/dao/types/object"
)

// ServiceResourceRelationshipCreateInput holds the creation input of the ServiceResourceRelationship entity.
type ServiceResourceRelationshipCreateInput struct {
	inputConfig `uri:"-" query:"-" json:"-"`

	Type string `uri:"-" query:"-" json:"type"`

	Dependency *ServiceResourceQueryInput `uri:"-" query:"-" json:"dependency,omitempty"`
}

// Model returns the ServiceResourceRelationship entity for creating,
// after validating.
func (srrci *ServiceResourceRelationshipCreateInput) Model() *ServiceResourceRelationship {
	if srrci == nil {
		return nil
	}

	srr := &ServiceResourceRelationship{
		Type: srrci.Type,
	}

	if srrci.Dependency != nil {
		srr.DependencyID = srrci.Dependency.ID
	}
	return srr
}

// Load checks the input.
// TODO(thxCode): rename to Validate after supporting hierarchical routes.
func (srrci *ServiceResourceRelationshipCreateInput) Load() error {
	if srrci == nil {
		return errors.New("nil receiver")
	}

	return srrci.LoadWith(srrci.inputConfig.Context, srrci.inputConfig.ClientSet)
}

// LoadWith checks the input with the given context and client set.
// TODO(thxCode): rename to ValidateWith after supporting hierarchical routes.
func (srrci *ServiceResourceRelationshipCreateInput) LoadWith(ctx context.Context, cs ClientSet) (err error) {
	if srrci == nil {
		return errors.New("nil receiver")
	}

	if srrci.Dependency != nil {
		err = srrci.Dependency.LoadWith(ctx, cs)
		if err != nil {
			return err
		}
	}
	return nil
}

// ServiceResourceRelationshipCreateInputs holds the creation input item of the ServiceResourceRelationship entities.
type ServiceResourceRelationshipCreateInputsItem struct {
	Type string `uri:"-" query:"-" json:"type"`

	Dependency *ServiceResourceQueryInput `uri:"-" query:"-" json:"dependency,omitempty"`
}

// ServiceResourceRelationshipCreateInputs holds the creation input of the ServiceResourceRelationship entities.
type ServiceResourceRelationshipCreateInputs struct {
	inputConfig `uri:"-" query:"-" json:"-"`

	Items []*ServiceResourceRelationshipCreateInputsItem `uri:"-" query:"-" json:"items"`
}

// Model returns the ServiceResourceRelationship entities for creating,
// after validating.
func (srrci *ServiceResourceRelationshipCreateInputs) Model() []*ServiceResourceRelationship {
	if srrci == nil || len(srrci.Items) == 0 {
		return nil
	}

	srrs := make([]*ServiceResourceRelationship, len(srrci.Items))

	for i := range srrci.Items {
		srr := &ServiceResourceRelationship{
			Type: srrci.Items[i].Type,
		}

		if srrci.Items[i].Dependency != nil {
			srr.DependencyID = srrci.Items[i].Dependency.ID
		}

		srrs[i] = srr
	}

	return srrs
}

// Load checks the input.
// TODO(thxCode): rename to Validate after supporting hierarchical routes.
func (srrci *ServiceResourceRelationshipCreateInputs) Load() error {
	if srrci == nil {
		return errors.New("nil receiver")
	}

	return srrci.LoadWith(srrci.inputConfig.Context, srrci.inputConfig.ClientSet)
}

// LoadWith checks the input with the given context and client set.
// TODO(thxCode): rename to ValidateWith after supporting hierarchical routes.
func (srrci *ServiceResourceRelationshipCreateInputs) LoadWith(ctx context.Context, cs ClientSet) (err error) {
	if srrci == nil {
		return errors.New("nil receiver")
	}

	if len(srrci.Items) == 0 {
		return errors.New("empty items")
	}

	return nil
}

// ServiceResourceRelationshipDeleteInput holds the deletion input of the ServiceResourceRelationship entity.
type ServiceResourceRelationshipDeleteInput = ServiceResourceRelationshipQueryInput

// ServiceResourceRelationshipDeleteInputs holds the deletion input item of the ServiceResourceRelationship entities.
type ServiceResourceRelationshipDeleteInputsItem struct {
	ID   object.ID `uri:"-" query:"-" json:"id,omitempty"`
	Type string    `uri:"-" query:"-" json:"type,omitempty"`
}

// ServiceResourceRelationshipDeleteInputs holds the deletion input of the ServiceResourceRelationship entities.
type ServiceResourceRelationshipDeleteInputs struct {
	inputConfig `uri:"-" query:"-" json:"-"`

	Items []*ServiceResourceRelationshipDeleteInputsItem `uri:"-" query:"-" json:"items"`
}

// Model returns the ServiceResourceRelationship entities for deleting,
// after validating.
func (srrdi *ServiceResourceRelationshipDeleteInputs) Model() []*ServiceResourceRelationship {
	if srrdi == nil || len(srrdi.Items) == 0 {
		return nil
	}

	srrs := make([]*ServiceResourceRelationship, len(srrdi.Items))
	for i := range srrdi.Items {
		srrs[i] = &ServiceResourceRelationship{
			ID: srrdi.Items[i].ID,
		}
	}
	return srrs
}

// Load checks the input.
// TODO(thxCode): rename to Validate after supporting hierarchical routes.
func (srrdi *ServiceResourceRelationshipDeleteInputs) Load() error {
	if srrdi == nil {
		return errors.New("nil receiver")
	}

	return srrdi.LoadWith(srrdi.inputConfig.Context, srrdi.inputConfig.ClientSet)
}

// LoadWith checks the input with the given context and client set.
// TODO(thxCode): rename to ValidateWith after supporting hierarchical routes.
func (srrdi *ServiceResourceRelationshipDeleteInputs) LoadWith(ctx context.Context, cs ClientSet) (err error) {
	if srrdi == nil {
		return errors.New("nil receiver")
	}

	if len(srrdi.Items) == 0 {
		return errors.New("empty items")
	}

	q := cs.ServiceResourceRelationships().Query()

	ids := make([]object.ID, 0, len(srrdi.Items))
	ors := make([]predicate.ServiceResourceRelationship, 0, len(srrdi.Items))

	for i := range srrdi.Items {
		if srrdi.Items[i] == nil {
			return errors.New("nil item")
		}

		if srrdi.Items[i].ID != "" {
			ids = append(ids, srrdi.Items[i].ID)
			ors = append(ors, serviceresourcerelationship.ID(srrdi.Items[i].ID))
		} else if srrdi.Items[i].Type != "" {
			ors = append(ors, serviceresourcerelationship.And(
				serviceresourcerelationship.Type(srrdi.Items[i].Type)))
		} else {
			return errors.New("found item hasn't identify")
		}
	}

	idsLen := len(ids)
	if idsLen != cap(ids) {
		ids, err = q.Where(serviceresourcerelationship.Or(ors...)).
			IDs(ctx)
		if err != nil {
			return err
		}

		if len(ids) != idsLen {
			return errors.New("found unrecognized item")
		}

		for i := range ids {
			srrdi.Items[i].ID = ids[i]
		}

		return nil
	}

	idsCnt, err := q.Where(serviceresourcerelationship.IDIn(ids...)).
		Count(ctx)
	if err != nil {
		return err
	}

	if idsCnt != idsLen {
		return errors.New("found unrecognized item")
	}

	return nil
}

// ServiceResourceRelationshipQueryInput holds the query input of the ServiceResourceRelationship entity.
type ServiceResourceRelationshipQueryInput struct {
	inputConfig `uri:"-" query:"-" json:"-"`

	Refer *object.Refer `uri:"serviceresourcerelationship,default=\"\"" query:"-" json:"-"`
	ID    object.ID     `uri:"id" query:"-" json:"id,omitempty"` // TODO(thxCode): remove the uri:"id" after supporting hierarchical routes.
	Type  string        `uri:"-" query:"-" json:"type,omitempty"`
}

// Model returns the ServiceResourceRelationship entity for querying,
// after validating.
func (srrqi *ServiceResourceRelationshipQueryInput) Model() *ServiceResourceRelationship {
	if srrqi == nil {
		return nil
	}

	return &ServiceResourceRelationship{
		ID: srrqi.ID,
	}
}

// Load checks the input.
// TODO(thxCode): rename to Validate after supporting hierarchical routes.
func (srrqi *ServiceResourceRelationshipQueryInput) Load() error {
	if srrqi == nil {
		return errors.New("nil receiver")
	}

	return srrqi.LoadWith(srrqi.inputConfig.Context, srrqi.inputConfig.ClientSet)
}

// LoadWith checks the input with the given context and client set.
// TODO(thxCode): rename to ValidateWith after supporting hierarchical routes.
func (srrqi *ServiceResourceRelationshipQueryInput) LoadWith(ctx context.Context, cs ClientSet) (err error) {
	if srrqi == nil {
		return errors.New("nil receiver")
	}

	if srrqi.Refer != nil && *srrqi.Refer == "" {
		return nil
	}

	q := cs.ServiceResourceRelationships().Query()

	if srrqi.Refer != nil {
		if srrqi.Refer.IsID() {
			q.Where(
				serviceresourcerelationship.ID(srrqi.Refer.ID()))
		} else if refers := srrqi.Refer.Split(1); len(refers) == 1 {
			q.Where(
				serviceresourcerelationship.Type(refers[0].String()))
		} else {
			return errors.New("invalid identify refer of serviceresourcerelationship")
		}
	} else if srrqi.ID != "" {
		q.Where(
			serviceresourcerelationship.ID(srrqi.ID))
	} else if srrqi.Type != "" {
		q.Where(
			serviceresourcerelationship.Type(srrqi.Type))
	} else {
		return errors.New("invalid identify of serviceresourcerelationship")
	}

	srrqi.ID, err = q.OnlyID(ctx)
	return err
}

// ServiceResourceRelationshipQueryInputs holds the query input of the ServiceResourceRelationship entities.
type ServiceResourceRelationshipQueryInputs struct {
	inputConfig `uri:"-" query:"-" json:"-"`
}

// Load checks the input.
// TODO(thxCode): rename to Validate after supporting hierarchical routes.
func (srrqi *ServiceResourceRelationshipQueryInputs) Load() error {
	if srrqi == nil {
		return errors.New("nil receiver")
	}

	return srrqi.LoadWith(srrqi.inputConfig.Context, srrqi.inputConfig.ClientSet)
}

// LoadWith checks the input with the given context and client set.
// TODO(thxCode): rename to ValidateWith after supporting hierarchical routes.
func (srrqi *ServiceResourceRelationshipQueryInputs) LoadWith(ctx context.Context, cs ClientSet) (err error) {
	if srrqi == nil {
		return errors.New("nil receiver")
	}

	return err
}

// ServiceResourceRelationshipUpdateInput holds the modification input of the ServiceResourceRelationship entity.
type ServiceResourceRelationshipUpdateInput struct {
	ServiceResourceRelationshipQueryInput `uri:",inline" query:"-" json:",inline"`

	Dependency *ServiceResourceQueryInput `uri:"-" query:"-" json:"dependency,omitempty"`
}

// Model returns the ServiceResourceRelationship entity for modifying,
// after validating.
func (srrui *ServiceResourceRelationshipUpdateInput) Model() *ServiceResourceRelationship {
	if srrui == nil {
		return nil
	}

	srr := &ServiceResourceRelationship{
		ID: srrui.ID,
	}

	if srrui.Dependency != nil {
		srr.DependencyID = srrui.Dependency.ID
	}
	return srr
}

// ServiceResourceRelationshipUpdateInputs holds the modification input item of the ServiceResourceRelationship entities.
type ServiceResourceRelationshipUpdateInputsItem struct {
	ID   object.ID `uri:"-" query:"-" json:"id,omitempty"`
	Type string    `uri:"-" query:"-" json:"type,omitempty"`

	Dependency *ServiceResourceQueryInput `uri:"-" query:"-" json:"dependency,omitempty"`
}

// ServiceResourceRelationshipUpdateInputs holds the modification input of the ServiceResourceRelationship entities.
type ServiceResourceRelationshipUpdateInputs struct {
	inputConfig `uri:"-" query:"-" json:"-"`

	Items []*ServiceResourceRelationshipUpdateInputsItem `uri:"-" query:"-" json:"items"`
}

// Model returns the ServiceResourceRelationship entities for modifying,
// after validating.
func (srrui *ServiceResourceRelationshipUpdateInputs) Model() []*ServiceResourceRelationship {
	if srrui == nil || len(srrui.Items) == 0 {
		return nil
	}

	srrs := make([]*ServiceResourceRelationship, len(srrui.Items))

	for i := range srrui.Items {
		srr := &ServiceResourceRelationship{
			ID: srrui.Items[i].ID,
		}

		if srrui.Items[i].Dependency != nil {
			srr.DependencyID = srrui.Items[i].Dependency.ID
		}

		srrs[i] = srr
	}

	return srrs
}

// Load checks the input.
// TODO(thxCode): rename to Validate after supporting hierarchical routes.
func (srrui *ServiceResourceRelationshipUpdateInputs) Load() error {
	if srrui == nil {
		return errors.New("nil receiver")
	}

	return srrui.LoadWith(srrui.inputConfig.Context, srrui.inputConfig.ClientSet)
}

// LoadWith checks the input with the given context and client set.
// TODO(thxCode): rename to ValidateWith after supporting hierarchical routes.
func (srrui *ServiceResourceRelationshipUpdateInputs) LoadWith(ctx context.Context, cs ClientSet) (err error) {
	if srrui == nil {
		return errors.New("nil receiver")
	}

	if len(srrui.Items) == 0 {
		return errors.New("empty items")
	}

	q := cs.ServiceResourceRelationships().Query()

	ids := make([]object.ID, 0, len(srrui.Items))
	ors := make([]predicate.ServiceResourceRelationship, 0, len(srrui.Items))

	for i := range srrui.Items {
		if srrui.Items[i] == nil {
			return errors.New("nil item")
		}

		if srrui.Items[i].ID != "" {
			ids = append(ids, srrui.Items[i].ID)
			ors = append(ors, serviceresourcerelationship.ID(srrui.Items[i].ID))
		} else if srrui.Items[i].Type != "" {
			ors = append(ors, serviceresourcerelationship.And(
				serviceresourcerelationship.Type(srrui.Items[i].Type)))
		} else {
			return errors.New("found item hasn't identify")
		}
	}

	idsLen := len(ids)
	if idsLen != cap(ids) {
		ids, err = q.Where(serviceresourcerelationship.Or(ors...)).
			IDs(ctx)
		if err != nil {
			return err
		}

		if len(ids) != idsLen {
			return errors.New("found unrecognized item")
		}

		for i := range ids {
			srrui.Items[i].ID = ids[i]
		}

		return nil
	}

	idsCnt, err := q.Where(serviceresourcerelationship.IDIn(ids...)).
		Count(ctx)
	if err != nil {
		return err
	}

	if idsCnt != idsLen {
		return errors.New("found unrecognized item")
	}

	return nil
}

// ServiceResourceRelationshipOutput holds the output of the ServiceResourceRelationship entity.
type ServiceResourceRelationshipOutput struct {
	ID         object.ID  `json:"id,omitempty"`
	CreateTime *time.Time `json:"createTime,omitempty"`
	Type       string     `json:"type,omitempty"`

	Dependency *ServiceResourceOutput `json:"dependency,omitempty"`
}

// View returns the output of ServiceResourceRelationship.
func (srr *ServiceResourceRelationship) View() *ServiceResourceRelationshipOutput {
	return ExposeServiceResourceRelationship(srr)
}

// View returns the output of ServiceResourceRelationships.
func (srrs ServiceResourceRelationships) View() []*ServiceResourceRelationshipOutput {
	return ExposeServiceResourceRelationships(srrs)
}

// ExposeServiceResourceRelationship converts the ServiceResourceRelationship to ServiceResourceRelationshipOutput.
func ExposeServiceResourceRelationship(srr *ServiceResourceRelationship) *ServiceResourceRelationshipOutput {
	if srr == nil {
		return nil
	}

	srro := &ServiceResourceRelationshipOutput{
		ID:         srr.ID,
		CreateTime: srr.CreateTime,
		Type:       srr.Type,
	}

	if srr.Edges.Dependency != nil {
		srro.Dependency = ExposeServiceResource(srr.Edges.Dependency)
	} else if srr.DependencyID != "" {
		srro.Dependency = &ServiceResourceOutput{
			ID: srr.DependencyID,
		}
	}
	return srro
}

// ExposeServiceResourceRelationships converts the ServiceResourceRelationship slice to ServiceResourceRelationshipOutput pointer slice.
func ExposeServiceResourceRelationships(srrs []*ServiceResourceRelationship) []*ServiceResourceRelationshipOutput {
	if len(srrs) == 0 {
		return nil
	}

	srros := make([]*ServiceResourceRelationshipOutput, len(srrs))
	for i := range srrs {
		srros[i] = ExposeServiceResourceRelationship(srrs[i])
	}
	return srros
}
