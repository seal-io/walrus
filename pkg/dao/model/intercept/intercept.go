// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus". DO NOT EDIT.

package intercept

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"

	"github.com/seal-io/walrus/pkg/dao/model"
	"github.com/seal-io/walrus/pkg/dao/model/catalog"
	"github.com/seal-io/walrus/pkg/dao/model/connector"
	"github.com/seal-io/walrus/pkg/dao/model/costreport"
	"github.com/seal-io/walrus/pkg/dao/model/distributelock"
	"github.com/seal-io/walrus/pkg/dao/model/environment"
	"github.com/seal-io/walrus/pkg/dao/model/environmentconnectorrelationship"
	"github.com/seal-io/walrus/pkg/dao/model/perspective"
	"github.com/seal-io/walrus/pkg/dao/model/predicate"
	"github.com/seal-io/walrus/pkg/dao/model/project"
	"github.com/seal-io/walrus/pkg/dao/model/resource"
	"github.com/seal-io/walrus/pkg/dao/model/resourcecomponent"
	"github.com/seal-io/walrus/pkg/dao/model/resourcecomponentrelationship"
	"github.com/seal-io/walrus/pkg/dao/model/resourcedefinition"
	"github.com/seal-io/walrus/pkg/dao/model/resourcedefinitionmatchingrule"
	"github.com/seal-io/walrus/pkg/dao/model/resourcerelationship"
	"github.com/seal-io/walrus/pkg/dao/model/resourcerevision"
	"github.com/seal-io/walrus/pkg/dao/model/role"
	"github.com/seal-io/walrus/pkg/dao/model/setting"
	"github.com/seal-io/walrus/pkg/dao/model/subject"
	"github.com/seal-io/walrus/pkg/dao/model/subjectrolerelationship"
	"github.com/seal-io/walrus/pkg/dao/model/template"
	"github.com/seal-io/walrus/pkg/dao/model/templateversion"
	"github.com/seal-io/walrus/pkg/dao/model/token"
	"github.com/seal-io/walrus/pkg/dao/model/variable"
	"github.com/seal-io/walrus/pkg/dao/model/workflow"
	"github.com/seal-io/walrus/pkg/dao/model/workflowexecution"
	"github.com/seal-io/walrus/pkg/dao/model/workflowstage"
	"github.com/seal-io/walrus/pkg/dao/model/workflowstageexecution"
	"github.com/seal-io/walrus/pkg/dao/model/workflowstep"
	"github.com/seal-io/walrus/pkg/dao/model/workflowstepexecution"
)

// The Query interface represents an operation that queries a graph.
// By using this interface, users can write generic code that manipulates
// query builders of different types.
type Query interface {
	// Type returns the string representation of the query type.
	Type() string
	// Limit the number of records to be returned by this query.
	Limit(int)
	// Offset to start from.
	Offset(int)
	// Unique configures the query builder to filter duplicate records.
	Unique(bool)
	// Order specifies how the records should be ordered.
	Order(...func(*sql.Selector))
	// WhereP appends storage-level predicates to the query builder. Using this method, users
	// can use type-assertion to append predicates that do not depend on any generated package.
	WhereP(...func(*sql.Selector))
}

// The Func type is an adapter that allows ordinary functions to be used as interceptors.
// Unlike traversal functions, interceptors are skipped during graph traversals. Note that the
// implementation of Func is different from the one defined in entgo.io/ent.InterceptFunc.
type Func func(context.Context, Query) error

// Intercept calls f(ctx, q) and then applied the next Querier.
func (f Func) Intercept(next model.Querier) model.Querier {
	return model.QuerierFunc(func(ctx context.Context, q model.Query) (model.Value, error) {
		query, err := NewQuery(q)
		if err != nil {
			return nil, err
		}
		if err := f(ctx, query); err != nil {
			return nil, err
		}
		return next.Query(ctx, q)
	})
}

// The TraverseFunc type is an adapter to allow the use of ordinary function as Traverser.
// If f is a function with the appropriate signature, TraverseFunc(f) is a Traverser that calls f.
type TraverseFunc func(context.Context, Query) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFunc) Intercept(next model.Querier) model.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFunc) Traverse(ctx context.Context, q model.Query) error {
	query, err := NewQuery(q)
	if err != nil {
		return err
	}
	return f(ctx, query)
}

// The CatalogFunc type is an adapter to allow the use of ordinary function as a Querier.
type CatalogFunc func(context.Context, *model.CatalogQuery) (model.Value, error)

// Query calls f(ctx, q).
func (f CatalogFunc) Query(ctx context.Context, q model.Query) (model.Value, error) {
	if q, ok := q.(*model.CatalogQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *model.CatalogQuery", q)
}

// The TraverseCatalog type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCatalog func(context.Context, *model.CatalogQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCatalog) Intercept(next model.Querier) model.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCatalog) Traverse(ctx context.Context, q model.Query) error {
	if q, ok := q.(*model.CatalogQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *model.CatalogQuery", q)
}

// The ConnectorFunc type is an adapter to allow the use of ordinary function as a Querier.
type ConnectorFunc func(context.Context, *model.ConnectorQuery) (model.Value, error)

// Query calls f(ctx, q).
func (f ConnectorFunc) Query(ctx context.Context, q model.Query) (model.Value, error) {
	if q, ok := q.(*model.ConnectorQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *model.ConnectorQuery", q)
}

// The TraverseConnector type is an adapter to allow the use of ordinary function as Traverser.
type TraverseConnector func(context.Context, *model.ConnectorQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseConnector) Intercept(next model.Querier) model.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseConnector) Traverse(ctx context.Context, q model.Query) error {
	if q, ok := q.(*model.ConnectorQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *model.ConnectorQuery", q)
}

// The CostReportFunc type is an adapter to allow the use of ordinary function as a Querier.
type CostReportFunc func(context.Context, *model.CostReportQuery) (model.Value, error)

// Query calls f(ctx, q).
func (f CostReportFunc) Query(ctx context.Context, q model.Query) (model.Value, error) {
	if q, ok := q.(*model.CostReportQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *model.CostReportQuery", q)
}

// The TraverseCostReport type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCostReport func(context.Context, *model.CostReportQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCostReport) Intercept(next model.Querier) model.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCostReport) Traverse(ctx context.Context, q model.Query) error {
	if q, ok := q.(*model.CostReportQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *model.CostReportQuery", q)
}

// The DistributeLockFunc type is an adapter to allow the use of ordinary function as a Querier.
type DistributeLockFunc func(context.Context, *model.DistributeLockQuery) (model.Value, error)

// Query calls f(ctx, q).
func (f DistributeLockFunc) Query(ctx context.Context, q model.Query) (model.Value, error) {
	if q, ok := q.(*model.DistributeLockQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *model.DistributeLockQuery", q)
}

// The TraverseDistributeLock type is an adapter to allow the use of ordinary function as Traverser.
type TraverseDistributeLock func(context.Context, *model.DistributeLockQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseDistributeLock) Intercept(next model.Querier) model.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseDistributeLock) Traverse(ctx context.Context, q model.Query) error {
	if q, ok := q.(*model.DistributeLockQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *model.DistributeLockQuery", q)
}

// The EnvironmentFunc type is an adapter to allow the use of ordinary function as a Querier.
type EnvironmentFunc func(context.Context, *model.EnvironmentQuery) (model.Value, error)

// Query calls f(ctx, q).
func (f EnvironmentFunc) Query(ctx context.Context, q model.Query) (model.Value, error) {
	if q, ok := q.(*model.EnvironmentQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *model.EnvironmentQuery", q)
}

// The TraverseEnvironment type is an adapter to allow the use of ordinary function as Traverser.
type TraverseEnvironment func(context.Context, *model.EnvironmentQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseEnvironment) Intercept(next model.Querier) model.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseEnvironment) Traverse(ctx context.Context, q model.Query) error {
	if q, ok := q.(*model.EnvironmentQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *model.EnvironmentQuery", q)
}

// The EnvironmentConnectorRelationshipFunc type is an adapter to allow the use of ordinary function as a Querier.
type EnvironmentConnectorRelationshipFunc func(context.Context, *model.EnvironmentConnectorRelationshipQuery) (model.Value, error)

// Query calls f(ctx, q).
func (f EnvironmentConnectorRelationshipFunc) Query(ctx context.Context, q model.Query) (model.Value, error) {
	if q, ok := q.(*model.EnvironmentConnectorRelationshipQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *model.EnvironmentConnectorRelationshipQuery", q)
}

// The TraverseEnvironmentConnectorRelationship type is an adapter to allow the use of ordinary function as Traverser.
type TraverseEnvironmentConnectorRelationship func(context.Context, *model.EnvironmentConnectorRelationshipQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseEnvironmentConnectorRelationship) Intercept(next model.Querier) model.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseEnvironmentConnectorRelationship) Traverse(ctx context.Context, q model.Query) error {
	if q, ok := q.(*model.EnvironmentConnectorRelationshipQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *model.EnvironmentConnectorRelationshipQuery", q)
}

// The PerspectiveFunc type is an adapter to allow the use of ordinary function as a Querier.
type PerspectiveFunc func(context.Context, *model.PerspectiveQuery) (model.Value, error)

// Query calls f(ctx, q).
func (f PerspectiveFunc) Query(ctx context.Context, q model.Query) (model.Value, error) {
	if q, ok := q.(*model.PerspectiveQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *model.PerspectiveQuery", q)
}

// The TraversePerspective type is an adapter to allow the use of ordinary function as Traverser.
type TraversePerspective func(context.Context, *model.PerspectiveQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePerspective) Intercept(next model.Querier) model.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePerspective) Traverse(ctx context.Context, q model.Query) error {
	if q, ok := q.(*model.PerspectiveQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *model.PerspectiveQuery", q)
}

// The ProjectFunc type is an adapter to allow the use of ordinary function as a Querier.
type ProjectFunc func(context.Context, *model.ProjectQuery) (model.Value, error)

// Query calls f(ctx, q).
func (f ProjectFunc) Query(ctx context.Context, q model.Query) (model.Value, error) {
	if q, ok := q.(*model.ProjectQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *model.ProjectQuery", q)
}

// The TraverseProject type is an adapter to allow the use of ordinary function as Traverser.
type TraverseProject func(context.Context, *model.ProjectQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseProject) Intercept(next model.Querier) model.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseProject) Traverse(ctx context.Context, q model.Query) error {
	if q, ok := q.(*model.ProjectQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *model.ProjectQuery", q)
}

// The ResourceFunc type is an adapter to allow the use of ordinary function as a Querier.
type ResourceFunc func(context.Context, *model.ResourceQuery) (model.Value, error)

// Query calls f(ctx, q).
func (f ResourceFunc) Query(ctx context.Context, q model.Query) (model.Value, error) {
	if q, ok := q.(*model.ResourceQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *model.ResourceQuery", q)
}

// The TraverseResource type is an adapter to allow the use of ordinary function as Traverser.
type TraverseResource func(context.Context, *model.ResourceQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseResource) Intercept(next model.Querier) model.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseResource) Traverse(ctx context.Context, q model.Query) error {
	if q, ok := q.(*model.ResourceQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *model.ResourceQuery", q)
}

// The ResourceComponentFunc type is an adapter to allow the use of ordinary function as a Querier.
type ResourceComponentFunc func(context.Context, *model.ResourceComponentQuery) (model.Value, error)

// Query calls f(ctx, q).
func (f ResourceComponentFunc) Query(ctx context.Context, q model.Query) (model.Value, error) {
	if q, ok := q.(*model.ResourceComponentQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *model.ResourceComponentQuery", q)
}

// The TraverseResourceComponent type is an adapter to allow the use of ordinary function as Traverser.
type TraverseResourceComponent func(context.Context, *model.ResourceComponentQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseResourceComponent) Intercept(next model.Querier) model.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseResourceComponent) Traverse(ctx context.Context, q model.Query) error {
	if q, ok := q.(*model.ResourceComponentQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *model.ResourceComponentQuery", q)
}

// The ResourceComponentRelationshipFunc type is an adapter to allow the use of ordinary function as a Querier.
type ResourceComponentRelationshipFunc func(context.Context, *model.ResourceComponentRelationshipQuery) (model.Value, error)

// Query calls f(ctx, q).
func (f ResourceComponentRelationshipFunc) Query(ctx context.Context, q model.Query) (model.Value, error) {
	if q, ok := q.(*model.ResourceComponentRelationshipQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *model.ResourceComponentRelationshipQuery", q)
}

// The TraverseResourceComponentRelationship type is an adapter to allow the use of ordinary function as Traverser.
type TraverseResourceComponentRelationship func(context.Context, *model.ResourceComponentRelationshipQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseResourceComponentRelationship) Intercept(next model.Querier) model.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseResourceComponentRelationship) Traverse(ctx context.Context, q model.Query) error {
	if q, ok := q.(*model.ResourceComponentRelationshipQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *model.ResourceComponentRelationshipQuery", q)
}

// The ResourceDefinitionFunc type is an adapter to allow the use of ordinary function as a Querier.
type ResourceDefinitionFunc func(context.Context, *model.ResourceDefinitionQuery) (model.Value, error)

// Query calls f(ctx, q).
func (f ResourceDefinitionFunc) Query(ctx context.Context, q model.Query) (model.Value, error) {
	if q, ok := q.(*model.ResourceDefinitionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *model.ResourceDefinitionQuery", q)
}

// The TraverseResourceDefinition type is an adapter to allow the use of ordinary function as Traverser.
type TraverseResourceDefinition func(context.Context, *model.ResourceDefinitionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseResourceDefinition) Intercept(next model.Querier) model.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseResourceDefinition) Traverse(ctx context.Context, q model.Query) error {
	if q, ok := q.(*model.ResourceDefinitionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *model.ResourceDefinitionQuery", q)
}

// The ResourceDefinitionMatchingRuleFunc type is an adapter to allow the use of ordinary function as a Querier.
type ResourceDefinitionMatchingRuleFunc func(context.Context, *model.ResourceDefinitionMatchingRuleQuery) (model.Value, error)

// Query calls f(ctx, q).
func (f ResourceDefinitionMatchingRuleFunc) Query(ctx context.Context, q model.Query) (model.Value, error) {
	if q, ok := q.(*model.ResourceDefinitionMatchingRuleQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *model.ResourceDefinitionMatchingRuleQuery", q)
}

// The TraverseResourceDefinitionMatchingRule type is an adapter to allow the use of ordinary function as Traverser.
type TraverseResourceDefinitionMatchingRule func(context.Context, *model.ResourceDefinitionMatchingRuleQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseResourceDefinitionMatchingRule) Intercept(next model.Querier) model.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseResourceDefinitionMatchingRule) Traverse(ctx context.Context, q model.Query) error {
	if q, ok := q.(*model.ResourceDefinitionMatchingRuleQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *model.ResourceDefinitionMatchingRuleQuery", q)
}

// The ResourceRelationshipFunc type is an adapter to allow the use of ordinary function as a Querier.
type ResourceRelationshipFunc func(context.Context, *model.ResourceRelationshipQuery) (model.Value, error)

// Query calls f(ctx, q).
func (f ResourceRelationshipFunc) Query(ctx context.Context, q model.Query) (model.Value, error) {
	if q, ok := q.(*model.ResourceRelationshipQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *model.ResourceRelationshipQuery", q)
}

// The TraverseResourceRelationship type is an adapter to allow the use of ordinary function as Traverser.
type TraverseResourceRelationship func(context.Context, *model.ResourceRelationshipQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseResourceRelationship) Intercept(next model.Querier) model.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseResourceRelationship) Traverse(ctx context.Context, q model.Query) error {
	if q, ok := q.(*model.ResourceRelationshipQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *model.ResourceRelationshipQuery", q)
}

// The ResourceRevisionFunc type is an adapter to allow the use of ordinary function as a Querier.
type ResourceRevisionFunc func(context.Context, *model.ResourceRevisionQuery) (model.Value, error)

// Query calls f(ctx, q).
func (f ResourceRevisionFunc) Query(ctx context.Context, q model.Query) (model.Value, error) {
	if q, ok := q.(*model.ResourceRevisionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *model.ResourceRevisionQuery", q)
}

// The TraverseResourceRevision type is an adapter to allow the use of ordinary function as Traverser.
type TraverseResourceRevision func(context.Context, *model.ResourceRevisionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseResourceRevision) Intercept(next model.Querier) model.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseResourceRevision) Traverse(ctx context.Context, q model.Query) error {
	if q, ok := q.(*model.ResourceRevisionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *model.ResourceRevisionQuery", q)
}

// The RoleFunc type is an adapter to allow the use of ordinary function as a Querier.
type RoleFunc func(context.Context, *model.RoleQuery) (model.Value, error)

// Query calls f(ctx, q).
func (f RoleFunc) Query(ctx context.Context, q model.Query) (model.Value, error) {
	if q, ok := q.(*model.RoleQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *model.RoleQuery", q)
}

// The TraverseRole type is an adapter to allow the use of ordinary function as Traverser.
type TraverseRole func(context.Context, *model.RoleQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseRole) Intercept(next model.Querier) model.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseRole) Traverse(ctx context.Context, q model.Query) error {
	if q, ok := q.(*model.RoleQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *model.RoleQuery", q)
}

// The SettingFunc type is an adapter to allow the use of ordinary function as a Querier.
type SettingFunc func(context.Context, *model.SettingQuery) (model.Value, error)

// Query calls f(ctx, q).
func (f SettingFunc) Query(ctx context.Context, q model.Query) (model.Value, error) {
	if q, ok := q.(*model.SettingQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *model.SettingQuery", q)
}

// The TraverseSetting type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSetting func(context.Context, *model.SettingQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSetting) Intercept(next model.Querier) model.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSetting) Traverse(ctx context.Context, q model.Query) error {
	if q, ok := q.(*model.SettingQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *model.SettingQuery", q)
}

// The SubjectFunc type is an adapter to allow the use of ordinary function as a Querier.
type SubjectFunc func(context.Context, *model.SubjectQuery) (model.Value, error)

// Query calls f(ctx, q).
func (f SubjectFunc) Query(ctx context.Context, q model.Query) (model.Value, error) {
	if q, ok := q.(*model.SubjectQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *model.SubjectQuery", q)
}

// The TraverseSubject type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSubject func(context.Context, *model.SubjectQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSubject) Intercept(next model.Querier) model.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSubject) Traverse(ctx context.Context, q model.Query) error {
	if q, ok := q.(*model.SubjectQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *model.SubjectQuery", q)
}

// The SubjectRoleRelationshipFunc type is an adapter to allow the use of ordinary function as a Querier.
type SubjectRoleRelationshipFunc func(context.Context, *model.SubjectRoleRelationshipQuery) (model.Value, error)

// Query calls f(ctx, q).
func (f SubjectRoleRelationshipFunc) Query(ctx context.Context, q model.Query) (model.Value, error) {
	if q, ok := q.(*model.SubjectRoleRelationshipQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *model.SubjectRoleRelationshipQuery", q)
}

// The TraverseSubjectRoleRelationship type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSubjectRoleRelationship func(context.Context, *model.SubjectRoleRelationshipQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSubjectRoleRelationship) Intercept(next model.Querier) model.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSubjectRoleRelationship) Traverse(ctx context.Context, q model.Query) error {
	if q, ok := q.(*model.SubjectRoleRelationshipQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *model.SubjectRoleRelationshipQuery", q)
}

// The TemplateFunc type is an adapter to allow the use of ordinary function as a Querier.
type TemplateFunc func(context.Context, *model.TemplateQuery) (model.Value, error)

// Query calls f(ctx, q).
func (f TemplateFunc) Query(ctx context.Context, q model.Query) (model.Value, error) {
	if q, ok := q.(*model.TemplateQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *model.TemplateQuery", q)
}

// The TraverseTemplate type is an adapter to allow the use of ordinary function as Traverser.
type TraverseTemplate func(context.Context, *model.TemplateQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseTemplate) Intercept(next model.Querier) model.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseTemplate) Traverse(ctx context.Context, q model.Query) error {
	if q, ok := q.(*model.TemplateQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *model.TemplateQuery", q)
}

// The TemplateVersionFunc type is an adapter to allow the use of ordinary function as a Querier.
type TemplateVersionFunc func(context.Context, *model.TemplateVersionQuery) (model.Value, error)

// Query calls f(ctx, q).
func (f TemplateVersionFunc) Query(ctx context.Context, q model.Query) (model.Value, error) {
	if q, ok := q.(*model.TemplateVersionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *model.TemplateVersionQuery", q)
}

// The TraverseTemplateVersion type is an adapter to allow the use of ordinary function as Traverser.
type TraverseTemplateVersion func(context.Context, *model.TemplateVersionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseTemplateVersion) Intercept(next model.Querier) model.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseTemplateVersion) Traverse(ctx context.Context, q model.Query) error {
	if q, ok := q.(*model.TemplateVersionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *model.TemplateVersionQuery", q)
}

// The TokenFunc type is an adapter to allow the use of ordinary function as a Querier.
type TokenFunc func(context.Context, *model.TokenQuery) (model.Value, error)

// Query calls f(ctx, q).
func (f TokenFunc) Query(ctx context.Context, q model.Query) (model.Value, error) {
	if q, ok := q.(*model.TokenQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *model.TokenQuery", q)
}

// The TraverseToken type is an adapter to allow the use of ordinary function as Traverser.
type TraverseToken func(context.Context, *model.TokenQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseToken) Intercept(next model.Querier) model.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseToken) Traverse(ctx context.Context, q model.Query) error {
	if q, ok := q.(*model.TokenQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *model.TokenQuery", q)
}

// The VariableFunc type is an adapter to allow the use of ordinary function as a Querier.
type VariableFunc func(context.Context, *model.VariableQuery) (model.Value, error)

// Query calls f(ctx, q).
func (f VariableFunc) Query(ctx context.Context, q model.Query) (model.Value, error) {
	if q, ok := q.(*model.VariableQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *model.VariableQuery", q)
}

// The TraverseVariable type is an adapter to allow the use of ordinary function as Traverser.
type TraverseVariable func(context.Context, *model.VariableQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseVariable) Intercept(next model.Querier) model.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseVariable) Traverse(ctx context.Context, q model.Query) error {
	if q, ok := q.(*model.VariableQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *model.VariableQuery", q)
}

// The WorkflowFunc type is an adapter to allow the use of ordinary function as a Querier.
type WorkflowFunc func(context.Context, *model.WorkflowQuery) (model.Value, error)

// Query calls f(ctx, q).
func (f WorkflowFunc) Query(ctx context.Context, q model.Query) (model.Value, error) {
	if q, ok := q.(*model.WorkflowQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *model.WorkflowQuery", q)
}

// The TraverseWorkflow type is an adapter to allow the use of ordinary function as Traverser.
type TraverseWorkflow func(context.Context, *model.WorkflowQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseWorkflow) Intercept(next model.Querier) model.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseWorkflow) Traverse(ctx context.Context, q model.Query) error {
	if q, ok := q.(*model.WorkflowQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *model.WorkflowQuery", q)
}

// The WorkflowExecutionFunc type is an adapter to allow the use of ordinary function as a Querier.
type WorkflowExecutionFunc func(context.Context, *model.WorkflowExecutionQuery) (model.Value, error)

// Query calls f(ctx, q).
func (f WorkflowExecutionFunc) Query(ctx context.Context, q model.Query) (model.Value, error) {
	if q, ok := q.(*model.WorkflowExecutionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *model.WorkflowExecutionQuery", q)
}

// The TraverseWorkflowExecution type is an adapter to allow the use of ordinary function as Traverser.
type TraverseWorkflowExecution func(context.Context, *model.WorkflowExecutionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseWorkflowExecution) Intercept(next model.Querier) model.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseWorkflowExecution) Traverse(ctx context.Context, q model.Query) error {
	if q, ok := q.(*model.WorkflowExecutionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *model.WorkflowExecutionQuery", q)
}

// The WorkflowStageFunc type is an adapter to allow the use of ordinary function as a Querier.
type WorkflowStageFunc func(context.Context, *model.WorkflowStageQuery) (model.Value, error)

// Query calls f(ctx, q).
func (f WorkflowStageFunc) Query(ctx context.Context, q model.Query) (model.Value, error) {
	if q, ok := q.(*model.WorkflowStageQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *model.WorkflowStageQuery", q)
}

// The TraverseWorkflowStage type is an adapter to allow the use of ordinary function as Traverser.
type TraverseWorkflowStage func(context.Context, *model.WorkflowStageQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseWorkflowStage) Intercept(next model.Querier) model.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseWorkflowStage) Traverse(ctx context.Context, q model.Query) error {
	if q, ok := q.(*model.WorkflowStageQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *model.WorkflowStageQuery", q)
}

// The WorkflowStageExecutionFunc type is an adapter to allow the use of ordinary function as a Querier.
type WorkflowStageExecutionFunc func(context.Context, *model.WorkflowStageExecutionQuery) (model.Value, error)

// Query calls f(ctx, q).
func (f WorkflowStageExecutionFunc) Query(ctx context.Context, q model.Query) (model.Value, error) {
	if q, ok := q.(*model.WorkflowStageExecutionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *model.WorkflowStageExecutionQuery", q)
}

// The TraverseWorkflowStageExecution type is an adapter to allow the use of ordinary function as Traverser.
type TraverseWorkflowStageExecution func(context.Context, *model.WorkflowStageExecutionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseWorkflowStageExecution) Intercept(next model.Querier) model.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseWorkflowStageExecution) Traverse(ctx context.Context, q model.Query) error {
	if q, ok := q.(*model.WorkflowStageExecutionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *model.WorkflowStageExecutionQuery", q)
}

// The WorkflowStepFunc type is an adapter to allow the use of ordinary function as a Querier.
type WorkflowStepFunc func(context.Context, *model.WorkflowStepQuery) (model.Value, error)

// Query calls f(ctx, q).
func (f WorkflowStepFunc) Query(ctx context.Context, q model.Query) (model.Value, error) {
	if q, ok := q.(*model.WorkflowStepQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *model.WorkflowStepQuery", q)
}

// The TraverseWorkflowStep type is an adapter to allow the use of ordinary function as Traverser.
type TraverseWorkflowStep func(context.Context, *model.WorkflowStepQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseWorkflowStep) Intercept(next model.Querier) model.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseWorkflowStep) Traverse(ctx context.Context, q model.Query) error {
	if q, ok := q.(*model.WorkflowStepQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *model.WorkflowStepQuery", q)
}

// The WorkflowStepExecutionFunc type is an adapter to allow the use of ordinary function as a Querier.
type WorkflowStepExecutionFunc func(context.Context, *model.WorkflowStepExecutionQuery) (model.Value, error)

// Query calls f(ctx, q).
func (f WorkflowStepExecutionFunc) Query(ctx context.Context, q model.Query) (model.Value, error) {
	if q, ok := q.(*model.WorkflowStepExecutionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *model.WorkflowStepExecutionQuery", q)
}

// The TraverseWorkflowStepExecution type is an adapter to allow the use of ordinary function as Traverser.
type TraverseWorkflowStepExecution func(context.Context, *model.WorkflowStepExecutionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseWorkflowStepExecution) Intercept(next model.Querier) model.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseWorkflowStepExecution) Traverse(ctx context.Context, q model.Query) error {
	if q, ok := q.(*model.WorkflowStepExecutionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *model.WorkflowStepExecutionQuery", q)
}

// NewQuery returns the generic Query interface for the given typed query.
func NewQuery(q model.Query) (Query, error) {
	switch q := q.(type) {
	case *model.CatalogQuery:
		return &query[*model.CatalogQuery, predicate.Catalog, catalog.OrderOption]{typ: model.TypeCatalog, tq: q}, nil
	case *model.ConnectorQuery:
		return &query[*model.ConnectorQuery, predicate.Connector, connector.OrderOption]{typ: model.TypeConnector, tq: q}, nil
	case *model.CostReportQuery:
		return &query[*model.CostReportQuery, predicate.CostReport, costreport.OrderOption]{typ: model.TypeCostReport, tq: q}, nil
	case *model.DistributeLockQuery:
		return &query[*model.DistributeLockQuery, predicate.DistributeLock, distributelock.OrderOption]{typ: model.TypeDistributeLock, tq: q}, nil
	case *model.EnvironmentQuery:
		return &query[*model.EnvironmentQuery, predicate.Environment, environment.OrderOption]{typ: model.TypeEnvironment, tq: q}, nil
	case *model.EnvironmentConnectorRelationshipQuery:
		return &query[*model.EnvironmentConnectorRelationshipQuery, predicate.EnvironmentConnectorRelationship, environmentconnectorrelationship.OrderOption]{typ: model.TypeEnvironmentConnectorRelationship, tq: q}, nil
	case *model.PerspectiveQuery:
		return &query[*model.PerspectiveQuery, predicate.Perspective, perspective.OrderOption]{typ: model.TypePerspective, tq: q}, nil
	case *model.ProjectQuery:
		return &query[*model.ProjectQuery, predicate.Project, project.OrderOption]{typ: model.TypeProject, tq: q}, nil
	case *model.ResourceQuery:
		return &query[*model.ResourceQuery, predicate.Resource, resource.OrderOption]{typ: model.TypeResource, tq: q}, nil
	case *model.ResourceComponentQuery:
		return &query[*model.ResourceComponentQuery, predicate.ResourceComponent, resourcecomponent.OrderOption]{typ: model.TypeResourceComponent, tq: q}, nil
	case *model.ResourceComponentRelationshipQuery:
		return &query[*model.ResourceComponentRelationshipQuery, predicate.ResourceComponentRelationship, resourcecomponentrelationship.OrderOption]{typ: model.TypeResourceComponentRelationship, tq: q}, nil
	case *model.ResourceDefinitionQuery:
		return &query[*model.ResourceDefinitionQuery, predicate.ResourceDefinition, resourcedefinition.OrderOption]{typ: model.TypeResourceDefinition, tq: q}, nil
	case *model.ResourceDefinitionMatchingRuleQuery:
		return &query[*model.ResourceDefinitionMatchingRuleQuery, predicate.ResourceDefinitionMatchingRule, resourcedefinitionmatchingrule.OrderOption]{typ: model.TypeResourceDefinitionMatchingRule, tq: q}, nil
	case *model.ResourceRelationshipQuery:
		return &query[*model.ResourceRelationshipQuery, predicate.ResourceRelationship, resourcerelationship.OrderOption]{typ: model.TypeResourceRelationship, tq: q}, nil
	case *model.ResourceRevisionQuery:
		return &query[*model.ResourceRevisionQuery, predicate.ResourceRevision, resourcerevision.OrderOption]{typ: model.TypeResourceRevision, tq: q}, nil
	case *model.RoleQuery:
		return &query[*model.RoleQuery, predicate.Role, role.OrderOption]{typ: model.TypeRole, tq: q}, nil
	case *model.SettingQuery:
		return &query[*model.SettingQuery, predicate.Setting, setting.OrderOption]{typ: model.TypeSetting, tq: q}, nil
	case *model.SubjectQuery:
		return &query[*model.SubjectQuery, predicate.Subject, subject.OrderOption]{typ: model.TypeSubject, tq: q}, nil
	case *model.SubjectRoleRelationshipQuery:
		return &query[*model.SubjectRoleRelationshipQuery, predicate.SubjectRoleRelationship, subjectrolerelationship.OrderOption]{typ: model.TypeSubjectRoleRelationship, tq: q}, nil
	case *model.TemplateQuery:
		return &query[*model.TemplateQuery, predicate.Template, template.OrderOption]{typ: model.TypeTemplate, tq: q}, nil
	case *model.TemplateVersionQuery:
		return &query[*model.TemplateVersionQuery, predicate.TemplateVersion, templateversion.OrderOption]{typ: model.TypeTemplateVersion, tq: q}, nil
	case *model.TokenQuery:
		return &query[*model.TokenQuery, predicate.Token, token.OrderOption]{typ: model.TypeToken, tq: q}, nil
	case *model.VariableQuery:
		return &query[*model.VariableQuery, predicate.Variable, variable.OrderOption]{typ: model.TypeVariable, tq: q}, nil
	case *model.WorkflowQuery:
		return &query[*model.WorkflowQuery, predicate.Workflow, workflow.OrderOption]{typ: model.TypeWorkflow, tq: q}, nil
	case *model.WorkflowExecutionQuery:
		return &query[*model.WorkflowExecutionQuery, predicate.WorkflowExecution, workflowexecution.OrderOption]{typ: model.TypeWorkflowExecution, tq: q}, nil
	case *model.WorkflowStageQuery:
		return &query[*model.WorkflowStageQuery, predicate.WorkflowStage, workflowstage.OrderOption]{typ: model.TypeWorkflowStage, tq: q}, nil
	case *model.WorkflowStageExecutionQuery:
		return &query[*model.WorkflowStageExecutionQuery, predicate.WorkflowStageExecution, workflowstageexecution.OrderOption]{typ: model.TypeWorkflowStageExecution, tq: q}, nil
	case *model.WorkflowStepQuery:
		return &query[*model.WorkflowStepQuery, predicate.WorkflowStep, workflowstep.OrderOption]{typ: model.TypeWorkflowStep, tq: q}, nil
	case *model.WorkflowStepExecutionQuery:
		return &query[*model.WorkflowStepExecutionQuery, predicate.WorkflowStepExecution, workflowstepexecution.OrderOption]{typ: model.TypeWorkflowStepExecution, tq: q}, nil
	default:
		return nil, fmt.Errorf("unknown query type %T", q)
	}
}

type query[T any, P ~func(*sql.Selector), R ~func(*sql.Selector)] struct {
	typ string
	tq  interface {
		Limit(int) T
		Offset(int) T
		Unique(bool) T
		Order(...R) T
		Where(...P) T
	}
}

func (q query[T, P, R]) Type() string {
	return q.typ
}

func (q query[T, P, R]) Limit(limit int) {
	q.tq.Limit(limit)
}

func (q query[T, P, R]) Offset(offset int) {
	q.tq.Offset(offset)
}

func (q query[T, P, R]) Unique(unique bool) {
	q.tq.Unique(unique)
}

func (q query[T, P, R]) Order(orders ...func(*sql.Selector)) {
	rs := make([]R, len(orders))
	for i := range orders {
		rs[i] = orders[i]
	}
	q.tq.Order(rs...)
}

func (q query[T, P, R]) WhereP(ps ...func(*sql.Selector)) {
	p := make([]P, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	q.tq.Where(p...)
}
