// SPDX-FileCopyrightText: 2023 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "seal". DO NOT EDIT.

package model

import (
	"context"
	stdsql "database/sql"
	"errors"
	"fmt"
	"reflect"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/seal-io/seal/pkg/dao/model/internal"
	"github.com/seal-io/seal/pkg/dao/model/predicate"
	"github.com/seal-io/seal/pkg/dao/model/serviceresource"
	"github.com/seal-io/seal/pkg/dao/model/serviceresourcerelationship"
	"github.com/seal-io/seal/pkg/dao/types"
	"github.com/seal-io/seal/pkg/dao/types/object"
)

// ServiceResourceUpdate is the builder for updating ServiceResource entities.
type ServiceResourceUpdate struct {
	config
	hooks     []Hook
	mutation  *ServiceResourceMutation
	modifiers []func(*sql.UpdateBuilder)
	object    *ServiceResource
}

// Where appends a list predicates to the ServiceResourceUpdate builder.
func (sru *ServiceResourceUpdate) Where(ps ...predicate.ServiceResource) *ServiceResourceUpdate {
	sru.mutation.Where(ps...)
	return sru
}

// SetUpdateTime sets the "update_time" field.
func (sru *ServiceResourceUpdate) SetUpdateTime(t time.Time) *ServiceResourceUpdate {
	sru.mutation.SetUpdateTime(t)
	return sru
}

// SetStatus sets the "status" field.
func (sru *ServiceResourceUpdate) SetStatus(trs types.ServiceResourceStatus) *ServiceResourceUpdate {
	sru.mutation.SetStatus(trs)
	return sru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sru *ServiceResourceUpdate) SetNillableStatus(trs *types.ServiceResourceStatus) *ServiceResourceUpdate {
	if trs != nil {
		sru.SetStatus(*trs)
	}
	return sru
}

// ClearStatus clears the value of the "status" field.
func (sru *ServiceResourceUpdate) ClearStatus() *ServiceResourceUpdate {
	sru.mutation.ClearStatus()
	return sru
}

// AddComponentIDs adds the "components" edge to the ServiceResource entity by IDs.
func (sru *ServiceResourceUpdate) AddComponentIDs(ids ...object.ID) *ServiceResourceUpdate {
	sru.mutation.AddComponentIDs(ids...)
	return sru
}

// AddComponents adds the "components" edges to the ServiceResource entity.
func (sru *ServiceResourceUpdate) AddComponents(s ...*ServiceResource) *ServiceResourceUpdate {
	ids := make([]object.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sru.AddComponentIDs(ids...)
}

// AddInstanceIDs adds the "instances" edge to the ServiceResource entity by IDs.
func (sru *ServiceResourceUpdate) AddInstanceIDs(ids ...object.ID) *ServiceResourceUpdate {
	sru.mutation.AddInstanceIDs(ids...)
	return sru
}

// AddInstances adds the "instances" edges to the ServiceResource entity.
func (sru *ServiceResourceUpdate) AddInstances(s ...*ServiceResource) *ServiceResourceUpdate {
	ids := make([]object.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sru.AddInstanceIDs(ids...)
}

// AddDependencyIDs adds the "dependencies" edge to the ServiceResourceRelationship entity by IDs.
func (sru *ServiceResourceUpdate) AddDependencyIDs(ids ...object.ID) *ServiceResourceUpdate {
	sru.mutation.AddDependencyIDs(ids...)
	return sru
}

// AddDependencies adds the "dependencies" edges to the ServiceResourceRelationship entity.
func (sru *ServiceResourceUpdate) AddDependencies(s ...*ServiceResourceRelationship) *ServiceResourceUpdate {
	ids := make([]object.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sru.AddDependencyIDs(ids...)
}

// Mutation returns the ServiceResourceMutation object of the builder.
func (sru *ServiceResourceUpdate) Mutation() *ServiceResourceMutation {
	return sru.mutation
}

// ClearComponents clears all "components" edges to the ServiceResource entity.
func (sru *ServiceResourceUpdate) ClearComponents() *ServiceResourceUpdate {
	sru.mutation.ClearComponents()
	return sru
}

// RemoveComponentIDs removes the "components" edge to ServiceResource entities by IDs.
func (sru *ServiceResourceUpdate) RemoveComponentIDs(ids ...object.ID) *ServiceResourceUpdate {
	sru.mutation.RemoveComponentIDs(ids...)
	return sru
}

// RemoveComponents removes "components" edges to ServiceResource entities.
func (sru *ServiceResourceUpdate) RemoveComponents(s ...*ServiceResource) *ServiceResourceUpdate {
	ids := make([]object.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sru.RemoveComponentIDs(ids...)
}

// ClearInstances clears all "instances" edges to the ServiceResource entity.
func (sru *ServiceResourceUpdate) ClearInstances() *ServiceResourceUpdate {
	sru.mutation.ClearInstances()
	return sru
}

// RemoveInstanceIDs removes the "instances" edge to ServiceResource entities by IDs.
func (sru *ServiceResourceUpdate) RemoveInstanceIDs(ids ...object.ID) *ServiceResourceUpdate {
	sru.mutation.RemoveInstanceIDs(ids...)
	return sru
}

// RemoveInstances removes "instances" edges to ServiceResource entities.
func (sru *ServiceResourceUpdate) RemoveInstances(s ...*ServiceResource) *ServiceResourceUpdate {
	ids := make([]object.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sru.RemoveInstanceIDs(ids...)
}

// ClearDependencies clears all "dependencies" edges to the ServiceResourceRelationship entity.
func (sru *ServiceResourceUpdate) ClearDependencies() *ServiceResourceUpdate {
	sru.mutation.ClearDependencies()
	return sru
}

// RemoveDependencyIDs removes the "dependencies" edge to ServiceResourceRelationship entities by IDs.
func (sru *ServiceResourceUpdate) RemoveDependencyIDs(ids ...object.ID) *ServiceResourceUpdate {
	sru.mutation.RemoveDependencyIDs(ids...)
	return sru
}

// RemoveDependencies removes "dependencies" edges to ServiceResourceRelationship entities.
func (sru *ServiceResourceUpdate) RemoveDependencies(s ...*ServiceResourceRelationship) *ServiceResourceUpdate {
	ids := make([]object.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sru.RemoveDependencyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sru *ServiceResourceUpdate) Save(ctx context.Context) (int, error) {
	if err := sru.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, sru.sqlSave, sru.mutation, sru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sru *ServiceResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := sru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sru *ServiceResourceUpdate) Exec(ctx context.Context) error {
	_, err := sru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sru *ServiceResourceUpdate) ExecX(ctx context.Context) {
	if err := sru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sru *ServiceResourceUpdate) defaults() error {
	if _, ok := sru.mutation.UpdateTime(); !ok {
		if serviceresource.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("model: uninitialized serviceresource.UpdateDefaultUpdateTime (forgotten import model/runtime?)")
		}
		v := serviceresource.UpdateDefaultUpdateTime()
		sru.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sru *ServiceResourceUpdate) check() error {
	if _, ok := sru.mutation.ProjectID(); sru.mutation.ProjectCleared() && !ok {
		return errors.New(`model: clearing a required unique edge "ServiceResource.project"`)
	}
	if _, ok := sru.mutation.ServiceID(); sru.mutation.ServiceCleared() && !ok {
		return errors.New(`model: clearing a required unique edge "ServiceResource.service"`)
	}
	if _, ok := sru.mutation.ConnectorID(); sru.mutation.ConnectorCleared() && !ok {
		return errors.New(`model: clearing a required unique edge "ServiceResource.connector"`)
	}
	return nil
}

// Set is different from other Set* methods,
// it sets the value by judging the definition of each field within the entire object.
//
// For default fields, Set calls if the value is not zero.
//
// For no default but required fields, Set calls directly.
//
// For no default but optional fields, Set calls if the value is not zero,
// or clears if the value is zero.
//
// For example:
//
//	## Without Default
//
//	### Required
//
//	db.SetX(obj.X)
//
//	### Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	} else {
//	   db.ClearX()
//	}
//
//	## With Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (sru *ServiceResourceUpdate) Set(obj *ServiceResource) *ServiceResourceUpdate {
	// Without Default.
	if !reflect.ValueOf(obj.Status).IsZero() {
		sru.SetStatus(obj.Status)
	} else {
		sru.ClearStatus()
	}

	// With Default.
	if obj.UpdateTime != nil {
		sru.SetUpdateTime(*obj.UpdateTime)
	}

	// Record the given object.
	sru.object = obj

	return sru
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sru *ServiceResourceUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ServiceResourceUpdate {
	sru.modifiers = append(sru.modifiers, modifiers...)
	return sru
}

func (sru *ServiceResourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(serviceresource.Table, serviceresource.Columns, sqlgraph.NewFieldSpec(serviceresource.FieldID, field.TypeString))
	if ps := sru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sru.mutation.UpdateTime(); ok {
		_spec.SetField(serviceresource.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := sru.mutation.Status(); ok {
		_spec.SetField(serviceresource.FieldStatus, field.TypeJSON, value)
	}
	if sru.mutation.StatusCleared() {
		_spec.ClearField(serviceresource.FieldStatus, field.TypeJSON)
	}
	if sru.mutation.ComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceresource.ComponentsTable,
			Columns: []string{serviceresource.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceresource.FieldID, field.TypeString),
			},
		}
		edge.Schema = sru.schemaConfig.ServiceResource
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.RemovedComponentsIDs(); len(nodes) > 0 && !sru.mutation.ComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceresource.ComponentsTable,
			Columns: []string{serviceresource.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceresource.FieldID, field.TypeString),
			},
		}
		edge.Schema = sru.schemaConfig.ServiceResource
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.ComponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceresource.ComponentsTable,
			Columns: []string{serviceresource.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceresource.FieldID, field.TypeString),
			},
		}
		edge.Schema = sru.schemaConfig.ServiceResource
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sru.mutation.InstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceresource.InstancesTable,
			Columns: []string{serviceresource.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceresource.FieldID, field.TypeString),
			},
		}
		edge.Schema = sru.schemaConfig.ServiceResource
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.RemovedInstancesIDs(); len(nodes) > 0 && !sru.mutation.InstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceresource.InstancesTable,
			Columns: []string{serviceresource.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceresource.FieldID, field.TypeString),
			},
		}
		edge.Schema = sru.schemaConfig.ServiceResource
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.InstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceresource.InstancesTable,
			Columns: []string{serviceresource.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceresource.FieldID, field.TypeString),
			},
		}
		edge.Schema = sru.schemaConfig.ServiceResource
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sru.mutation.DependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   serviceresource.DependenciesTable,
			Columns: []string{serviceresource.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceresourcerelationship.FieldID, field.TypeString),
			},
		}
		edge.Schema = sru.schemaConfig.ServiceResourceRelationship
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.RemovedDependenciesIDs(); len(nodes) > 0 && !sru.mutation.DependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   serviceresource.DependenciesTable,
			Columns: []string{serviceresource.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceresourcerelationship.FieldID, field.TypeString),
			},
		}
		edge.Schema = sru.schemaConfig.ServiceResourceRelationship
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.DependenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   serviceresource.DependenciesTable,
			Columns: []string{serviceresource.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceresourcerelationship.FieldID, field.TypeString),
			},
		}
		edge.Schema = sru.schemaConfig.ServiceResourceRelationship
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = sru.schemaConfig.ServiceResource
	ctx = internal.NewSchemaConfigContext(ctx, sru.schemaConfig)
	_spec.AddModifiers(sru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, sru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{serviceresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sru.mutation.done = true
	return n, nil
}

// ServiceResourceUpdateOne is the builder for updating a single ServiceResource entity.
type ServiceResourceUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ServiceResourceMutation
	modifiers []func(*sql.UpdateBuilder)
	object    *ServiceResource
}

// SetUpdateTime sets the "update_time" field.
func (sruo *ServiceResourceUpdateOne) SetUpdateTime(t time.Time) *ServiceResourceUpdateOne {
	sruo.mutation.SetUpdateTime(t)
	return sruo
}

// SetStatus sets the "status" field.
func (sruo *ServiceResourceUpdateOne) SetStatus(trs types.ServiceResourceStatus) *ServiceResourceUpdateOne {
	sruo.mutation.SetStatus(trs)
	return sruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sruo *ServiceResourceUpdateOne) SetNillableStatus(trs *types.ServiceResourceStatus) *ServiceResourceUpdateOne {
	if trs != nil {
		sruo.SetStatus(*trs)
	}
	return sruo
}

// ClearStatus clears the value of the "status" field.
func (sruo *ServiceResourceUpdateOne) ClearStatus() *ServiceResourceUpdateOne {
	sruo.mutation.ClearStatus()
	return sruo
}

// AddComponentIDs adds the "components" edge to the ServiceResource entity by IDs.
func (sruo *ServiceResourceUpdateOne) AddComponentIDs(ids ...object.ID) *ServiceResourceUpdateOne {
	sruo.mutation.AddComponentIDs(ids...)
	return sruo
}

// AddComponents adds the "components" edges to the ServiceResource entity.
func (sruo *ServiceResourceUpdateOne) AddComponents(s ...*ServiceResource) *ServiceResourceUpdateOne {
	ids := make([]object.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sruo.AddComponentIDs(ids...)
}

// AddInstanceIDs adds the "instances" edge to the ServiceResource entity by IDs.
func (sruo *ServiceResourceUpdateOne) AddInstanceIDs(ids ...object.ID) *ServiceResourceUpdateOne {
	sruo.mutation.AddInstanceIDs(ids...)
	return sruo
}

// AddInstances adds the "instances" edges to the ServiceResource entity.
func (sruo *ServiceResourceUpdateOne) AddInstances(s ...*ServiceResource) *ServiceResourceUpdateOne {
	ids := make([]object.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sruo.AddInstanceIDs(ids...)
}

// AddDependencyIDs adds the "dependencies" edge to the ServiceResourceRelationship entity by IDs.
func (sruo *ServiceResourceUpdateOne) AddDependencyIDs(ids ...object.ID) *ServiceResourceUpdateOne {
	sruo.mutation.AddDependencyIDs(ids...)
	return sruo
}

// AddDependencies adds the "dependencies" edges to the ServiceResourceRelationship entity.
func (sruo *ServiceResourceUpdateOne) AddDependencies(s ...*ServiceResourceRelationship) *ServiceResourceUpdateOne {
	ids := make([]object.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sruo.AddDependencyIDs(ids...)
}

// Mutation returns the ServiceResourceMutation object of the builder.
func (sruo *ServiceResourceUpdateOne) Mutation() *ServiceResourceMutation {
	return sruo.mutation
}

// ClearComponents clears all "components" edges to the ServiceResource entity.
func (sruo *ServiceResourceUpdateOne) ClearComponents() *ServiceResourceUpdateOne {
	sruo.mutation.ClearComponents()
	return sruo
}

// RemoveComponentIDs removes the "components" edge to ServiceResource entities by IDs.
func (sruo *ServiceResourceUpdateOne) RemoveComponentIDs(ids ...object.ID) *ServiceResourceUpdateOne {
	sruo.mutation.RemoveComponentIDs(ids...)
	return sruo
}

// RemoveComponents removes "components" edges to ServiceResource entities.
func (sruo *ServiceResourceUpdateOne) RemoveComponents(s ...*ServiceResource) *ServiceResourceUpdateOne {
	ids := make([]object.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sruo.RemoveComponentIDs(ids...)
}

// ClearInstances clears all "instances" edges to the ServiceResource entity.
func (sruo *ServiceResourceUpdateOne) ClearInstances() *ServiceResourceUpdateOne {
	sruo.mutation.ClearInstances()
	return sruo
}

// RemoveInstanceIDs removes the "instances" edge to ServiceResource entities by IDs.
func (sruo *ServiceResourceUpdateOne) RemoveInstanceIDs(ids ...object.ID) *ServiceResourceUpdateOne {
	sruo.mutation.RemoveInstanceIDs(ids...)
	return sruo
}

// RemoveInstances removes "instances" edges to ServiceResource entities.
func (sruo *ServiceResourceUpdateOne) RemoveInstances(s ...*ServiceResource) *ServiceResourceUpdateOne {
	ids := make([]object.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sruo.RemoveInstanceIDs(ids...)
}

// ClearDependencies clears all "dependencies" edges to the ServiceResourceRelationship entity.
func (sruo *ServiceResourceUpdateOne) ClearDependencies() *ServiceResourceUpdateOne {
	sruo.mutation.ClearDependencies()
	return sruo
}

// RemoveDependencyIDs removes the "dependencies" edge to ServiceResourceRelationship entities by IDs.
func (sruo *ServiceResourceUpdateOne) RemoveDependencyIDs(ids ...object.ID) *ServiceResourceUpdateOne {
	sruo.mutation.RemoveDependencyIDs(ids...)
	return sruo
}

// RemoveDependencies removes "dependencies" edges to ServiceResourceRelationship entities.
func (sruo *ServiceResourceUpdateOne) RemoveDependencies(s ...*ServiceResourceRelationship) *ServiceResourceUpdateOne {
	ids := make([]object.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sruo.RemoveDependencyIDs(ids...)
}

// Where appends a list predicates to the ServiceResourceUpdate builder.
func (sruo *ServiceResourceUpdateOne) Where(ps ...predicate.ServiceResource) *ServiceResourceUpdateOne {
	sruo.mutation.Where(ps...)
	return sruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sruo *ServiceResourceUpdateOne) Select(field string, fields ...string) *ServiceResourceUpdateOne {
	sruo.fields = append([]string{field}, fields...)
	return sruo
}

// Save executes the query and returns the updated ServiceResource entity.
func (sruo *ServiceResourceUpdateOne) Save(ctx context.Context) (*ServiceResource, error) {
	if err := sruo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, sruo.sqlSave, sruo.mutation, sruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sruo *ServiceResourceUpdateOne) SaveX(ctx context.Context) *ServiceResource {
	node, err := sruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sruo *ServiceResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := sruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sruo *ServiceResourceUpdateOne) ExecX(ctx context.Context) {
	if err := sruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sruo *ServiceResourceUpdateOne) defaults() error {
	if _, ok := sruo.mutation.UpdateTime(); !ok {
		if serviceresource.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("model: uninitialized serviceresource.UpdateDefaultUpdateTime (forgotten import model/runtime?)")
		}
		v := serviceresource.UpdateDefaultUpdateTime()
		sruo.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sruo *ServiceResourceUpdateOne) check() error {
	if _, ok := sruo.mutation.ProjectID(); sruo.mutation.ProjectCleared() && !ok {
		return errors.New(`model: clearing a required unique edge "ServiceResource.project"`)
	}
	if _, ok := sruo.mutation.ServiceID(); sruo.mutation.ServiceCleared() && !ok {
		return errors.New(`model: clearing a required unique edge "ServiceResource.service"`)
	}
	if _, ok := sruo.mutation.ConnectorID(); sruo.mutation.ConnectorCleared() && !ok {
		return errors.New(`model: clearing a required unique edge "ServiceResource.connector"`)
	}
	return nil
}

// Set is different from other Set* methods,
// it sets the value by judging the definition of each field within the entire object.
//
// For default fields, Set calls if the value changes from the original.
//
// For no default but required fields, Set calls if the value changes from the original.
//
// For no default but optional fields, Set calls if the value changes from the original,
// or clears if changes to zero.
//
// For example:
//
//	## Without Default
//
//	### Required
//
//	db.SetX(obj.X)
//
//	### Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   if _is_not_equal_(db.X, obj.X) {
//	      db.SetX(obj.X)
//	   }
//	} else {
//	   db.ClearX()
//	}
//
//	## With Default
//
//	if _is_zero_value_(obj.X) && _is_not_equal_(db.X, obj.X) {
//	   db.SetX(obj.X)
//	}
func (sruo *ServiceResourceUpdateOne) Set(obj *ServiceResource) *ServiceResourceUpdateOne {
	h := func(n ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			mt := m.(*ServiceResourceMutation)
			db, err := mt.Client().ServiceResource.Get(ctx, *mt.id)
			if err != nil {
				return nil, fmt.Errorf("failed getting ServiceResource with id: %v", *mt.id)
			}

			// Without Default.
			if !reflect.ValueOf(obj.Status).IsZero() {
				if !db.Status.Equal(obj.Status) {
					sruo.SetStatus(obj.Status)
				}
			} else {
				sruo.ClearStatus()
			}

			// With Default.
			if (obj.UpdateTime != nil) && (!reflect.DeepEqual(db.UpdateTime, obj.UpdateTime)) {
				sruo.SetUpdateTime(*obj.UpdateTime)
			}

			// Record the given object.
			sruo.object = obj

			return n.Mutate(ctx, m)
		})
	}

	sruo.hooks = append(sruo.hooks, h)

	return sruo
}

// getClientSet returns the ClientSet for the given builder.
func (sruo *ServiceResourceUpdateOne) getClientSet() (mc ClientSet) {
	if _, ok := sruo.config.driver.(*txDriver); ok {
		tx := &Tx{config: sruo.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: sruo.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after updated the ServiceResource entity,
// which is always good for cascading update operations.
func (sruo *ServiceResourceUpdateOne) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *ServiceResource) error) (*ServiceResource, error) {
	obj, err := sruo.Save(ctx)
	if err != nil &&
		(sruo.object == nil || !errors.Is(err, stdsql.ErrNoRows)) {
		return nil, err
	}

	if len(cbs) == 0 {
		return obj, err
	}

	mc := sruo.getClientSet()

	if obj == nil {
		obj = sruo.object
	} else if x := sruo.object; x != nil {
		if _, set := sruo.mutation.Field(serviceresource.FieldStatus); set {
			obj.Status = x.Status
		}
		obj.Edges = x.Edges
	}

	for i := range cbs {
		if err = cbs[i](ctx, mc, obj); err != nil {
			return nil, err
		}
	}

	return obj, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (sruo *ServiceResourceUpdateOne) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *ServiceResource) error) *ServiceResource {
	obj, err := sruo.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return obj
}

// ExecE calls the given function after executed the query,
// which is always good for cascading update operations.
func (sruo *ServiceResourceUpdateOne) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *ServiceResource) error) error {
	_, err := sruo.SaveE(ctx, cbs...)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sruo *ServiceResourceUpdateOne) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *ServiceResource) error) {
	if err := sruo.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sruo *ServiceResourceUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ServiceResourceUpdateOne {
	sruo.modifiers = append(sruo.modifiers, modifiers...)
	return sruo
}

func (sruo *ServiceResourceUpdateOne) sqlSave(ctx context.Context) (_node *ServiceResource, err error) {
	if err := sruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(serviceresource.Table, serviceresource.Columns, sqlgraph.NewFieldSpec(serviceresource.FieldID, field.TypeString))
	id, ok := sruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`model: missing "ServiceResource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, serviceresource.FieldID)
		for _, f := range fields {
			if !serviceresource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
			}
			if f != serviceresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sruo.mutation.UpdateTime(); ok {
		_spec.SetField(serviceresource.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := sruo.mutation.Status(); ok {
		_spec.SetField(serviceresource.FieldStatus, field.TypeJSON, value)
	}
	if sruo.mutation.StatusCleared() {
		_spec.ClearField(serviceresource.FieldStatus, field.TypeJSON)
	}
	if sruo.mutation.ComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceresource.ComponentsTable,
			Columns: []string{serviceresource.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceresource.FieldID, field.TypeString),
			},
		}
		edge.Schema = sruo.schemaConfig.ServiceResource
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.RemovedComponentsIDs(); len(nodes) > 0 && !sruo.mutation.ComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceresource.ComponentsTable,
			Columns: []string{serviceresource.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceresource.FieldID, field.TypeString),
			},
		}
		edge.Schema = sruo.schemaConfig.ServiceResource
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.ComponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceresource.ComponentsTable,
			Columns: []string{serviceresource.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceresource.FieldID, field.TypeString),
			},
		}
		edge.Schema = sruo.schemaConfig.ServiceResource
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sruo.mutation.InstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceresource.InstancesTable,
			Columns: []string{serviceresource.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceresource.FieldID, field.TypeString),
			},
		}
		edge.Schema = sruo.schemaConfig.ServiceResource
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.RemovedInstancesIDs(); len(nodes) > 0 && !sruo.mutation.InstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceresource.InstancesTable,
			Columns: []string{serviceresource.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceresource.FieldID, field.TypeString),
			},
		}
		edge.Schema = sruo.schemaConfig.ServiceResource
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.InstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceresource.InstancesTable,
			Columns: []string{serviceresource.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceresource.FieldID, field.TypeString),
			},
		}
		edge.Schema = sruo.schemaConfig.ServiceResource
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sruo.mutation.DependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   serviceresource.DependenciesTable,
			Columns: []string{serviceresource.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceresourcerelationship.FieldID, field.TypeString),
			},
		}
		edge.Schema = sruo.schemaConfig.ServiceResourceRelationship
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.RemovedDependenciesIDs(); len(nodes) > 0 && !sruo.mutation.DependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   serviceresource.DependenciesTable,
			Columns: []string{serviceresource.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceresourcerelationship.FieldID, field.TypeString),
			},
		}
		edge.Schema = sruo.schemaConfig.ServiceResourceRelationship
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.DependenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   serviceresource.DependenciesTable,
			Columns: []string{serviceresource.DependenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceresourcerelationship.FieldID, field.TypeString),
			},
		}
		edge.Schema = sruo.schemaConfig.ServiceResourceRelationship
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = sruo.schemaConfig.ServiceResource
	ctx = internal.NewSchemaConfigContext(ctx, sruo.schemaConfig)
	_spec.AddModifiers(sruo.modifiers...)
	_node = &ServiceResource{config: sruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{serviceresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sruo.mutation.done = true
	return _node, nil
}
