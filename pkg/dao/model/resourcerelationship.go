// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus". DO NOT EDIT.

package model

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"

	"github.com/seal-io/walrus/pkg/dao/model/resource"
	"github.com/seal-io/walrus/pkg/dao/model/resourcerelationship"
	"github.com/seal-io/walrus/pkg/dao/types/object"
	"github.com/seal-io/walrus/utils/json"
)

// ResourceRelationship is the model entity for the ResourceRelationship schema.
type ResourceRelationship struct {
	config `json:"-"`
	// ID of the ent.
	ID object.ID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime *time.Time `json:"create_time,omitempty"`
	// ID of the resource that deploys after the dependency finished.
	ResourceID object.ID `json:"resource_id,omitempty"`
	// ID of the resource that deploys before the resource begins.
	DependencyID object.ID `json:"dependency_id,omitempty"`
	// ID list of the resource includes all dependencies and the resource itself.
	Path []object.ID `json:"path,omitempty"`
	// Type of the relationship.
	Type string `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResourceRelationshipQuery when eager-loading is set.
	Edges        ResourceRelationshipEdges `json:"edges,omitempty"`
	selectValues sql.SelectValues
}

// ResourceRelationshipEdges holds the relations/edges for other nodes in the graph.
type ResourceRelationshipEdges struct {
	// Resource to which it currently belongs.
	Resource *Resource `json:"resource,omitempty"`
	// Resource to which the dependency belongs.
	Dependency *Resource `json:"dependency,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ResourceOrErr returns the Resource value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResourceRelationshipEdges) ResourceOrErr() (*Resource, error) {
	if e.loadedTypes[0] {
		if e.Resource == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: resource.Label}
		}
		return e.Resource, nil
	}
	return nil, &NotLoadedError{edge: "resource"}
}

// DependencyOrErr returns the Dependency value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResourceRelationshipEdges) DependencyOrErr() (*Resource, error) {
	if e.loadedTypes[1] {
		if e.Dependency == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: resource.Label}
		}
		return e.Dependency, nil
	}
	return nil, &NotLoadedError{edge: "dependency"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ResourceRelationship) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case resourcerelationship.FieldPath:
			values[i] = new([]byte)
		case resourcerelationship.FieldID, resourcerelationship.FieldResourceID, resourcerelationship.FieldDependencyID:
			values[i] = new(object.ID)
		case resourcerelationship.FieldType:
			values[i] = new(sql.NullString)
		case resourcerelationship.FieldCreateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ResourceRelationship fields.
func (rr *ResourceRelationship) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case resourcerelationship.FieldID:
			if value, ok := values[i].(*object.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				rr.ID = *value
			}
		case resourcerelationship.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				rr.CreateTime = new(time.Time)
				*rr.CreateTime = value.Time
			}
		case resourcerelationship.FieldResourceID:
			if value, ok := values[i].(*object.ID); !ok {
				return fmt.Errorf("unexpected type %T for field resource_id", values[i])
			} else if value != nil {
				rr.ResourceID = *value
			}
		case resourcerelationship.FieldDependencyID:
			if value, ok := values[i].(*object.ID); !ok {
				return fmt.Errorf("unexpected type %T for field dependency_id", values[i])
			} else if value != nil {
				rr.DependencyID = *value
			}
		case resourcerelationship.FieldPath:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &rr.Path); err != nil {
					return fmt.Errorf("unmarshal field path: %w", err)
				}
			}
		case resourcerelationship.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				rr.Type = value.String
			}
		default:
			rr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ResourceRelationship.
// This includes values selected through modifiers, order, etc.
func (rr *ResourceRelationship) Value(name string) (ent.Value, error) {
	return rr.selectValues.Get(name)
}

// QueryResource queries the "resource" edge of the ResourceRelationship entity.
func (rr *ResourceRelationship) QueryResource() *ResourceQuery {
	return NewResourceRelationshipClient(rr.config).QueryResource(rr)
}

// QueryDependency queries the "dependency" edge of the ResourceRelationship entity.
func (rr *ResourceRelationship) QueryDependency() *ResourceQuery {
	return NewResourceRelationshipClient(rr.config).QueryDependency(rr)
}

// Update returns a builder for updating this ResourceRelationship.
// Note that you need to call ResourceRelationship.Unwrap() before calling this method if this ResourceRelationship
// was returned from a transaction, and the transaction was committed or rolled back.
func (rr *ResourceRelationship) Update() *ResourceRelationshipUpdateOne {
	return NewResourceRelationshipClient(rr.config).UpdateOne(rr)
}

// Unwrap unwraps the ResourceRelationship entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rr *ResourceRelationship) Unwrap() *ResourceRelationship {
	_tx, ok := rr.config.driver.(*txDriver)
	if !ok {
		panic("model: ResourceRelationship is not a transactional entity")
	}
	rr.config.driver = _tx.drv
	return rr
}

// String implements the fmt.Stringer.
func (rr *ResourceRelationship) String() string {
	var builder strings.Builder
	builder.WriteString("ResourceRelationship(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rr.ID))
	if v := rr.CreateTime; v != nil {
		builder.WriteString("create_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("resource_id=")
	builder.WriteString(fmt.Sprintf("%v", rr.ResourceID))
	builder.WriteString(", ")
	builder.WriteString("dependency_id=")
	builder.WriteString(fmt.Sprintf("%v", rr.DependencyID))
	builder.WriteString(", ")
	builder.WriteString("path=")
	builder.WriteString(fmt.Sprintf("%v", rr.Path))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(rr.Type)
	builder.WriteByte(')')
	return builder.String()
}

// ResourceRelationships is a parsable slice of ResourceRelationship.
type ResourceRelationships []*ResourceRelationship
