// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus". DO NOT EDIT.

package model

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/seal-io/walrus/pkg/dao/model/internal"
	"github.com/seal-io/walrus/pkg/dao/model/predicate"
	"github.com/seal-io/walrus/pkg/dao/model/project"
	"github.com/seal-io/walrus/pkg/dao/model/workflow"
	"github.com/seal-io/walrus/pkg/dao/model/workflowexecution"
	"github.com/seal-io/walrus/pkg/dao/model/workflowstageexecution"
	"github.com/seal-io/walrus/pkg/dao/types/object"
)

// WorkflowExecutionQuery is the builder for querying WorkflowExecution entities.
type WorkflowExecutionQuery struct {
	config
	ctx          *QueryContext
	order        []workflowexecution.OrderOption
	inters       []Interceptor
	predicates   []predicate.WorkflowExecution
	withProject  *ProjectQuery
	withStages   *WorkflowStageExecutionQuery
	withWorkflow *WorkflowQuery
	modifiers    []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the WorkflowExecutionQuery builder.
func (weq *WorkflowExecutionQuery) Where(ps ...predicate.WorkflowExecution) *WorkflowExecutionQuery {
	weq.predicates = append(weq.predicates, ps...)
	return weq
}

// Limit the number of records to be returned by this query.
func (weq *WorkflowExecutionQuery) Limit(limit int) *WorkflowExecutionQuery {
	weq.ctx.Limit = &limit
	return weq
}

// Offset to start from.
func (weq *WorkflowExecutionQuery) Offset(offset int) *WorkflowExecutionQuery {
	weq.ctx.Offset = &offset
	return weq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (weq *WorkflowExecutionQuery) Unique(unique bool) *WorkflowExecutionQuery {
	weq.ctx.Unique = &unique
	return weq
}

// Order specifies how the records should be ordered.
func (weq *WorkflowExecutionQuery) Order(o ...workflowexecution.OrderOption) *WorkflowExecutionQuery {
	weq.order = append(weq.order, o...)
	return weq
}

// QueryProject chains the current query on the "project" edge.
func (weq *WorkflowExecutionQuery) QueryProject() *ProjectQuery {
	query := (&ProjectClient{config: weq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := weq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := weq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workflowexecution.Table, workflowexecution.FieldID, selector),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workflowexecution.ProjectTable, workflowexecution.ProjectColumn),
		)
		schemaConfig := weq.schemaConfig
		step.To.Schema = schemaConfig.Project
		step.Edge.Schema = schemaConfig.WorkflowExecution
		fromU = sqlgraph.SetNeighbors(weq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStages chains the current query on the "stages" edge.
func (weq *WorkflowExecutionQuery) QueryStages() *WorkflowStageExecutionQuery {
	query := (&WorkflowStageExecutionClient{config: weq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := weq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := weq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workflowexecution.Table, workflowexecution.FieldID, selector),
			sqlgraph.To(workflowstageexecution.Table, workflowstageexecution.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workflowexecution.StagesTable, workflowexecution.StagesColumn),
		)
		schemaConfig := weq.schemaConfig
		step.To.Schema = schemaConfig.WorkflowStageExecution
		step.Edge.Schema = schemaConfig.WorkflowStageExecution
		fromU = sqlgraph.SetNeighbors(weq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWorkflow chains the current query on the "workflow" edge.
func (weq *WorkflowExecutionQuery) QueryWorkflow() *WorkflowQuery {
	query := (&WorkflowClient{config: weq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := weq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := weq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workflowexecution.Table, workflowexecution.FieldID, selector),
			sqlgraph.To(workflow.Table, workflow.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workflowexecution.WorkflowTable, workflowexecution.WorkflowColumn),
		)
		schemaConfig := weq.schemaConfig
		step.To.Schema = schemaConfig.Workflow
		step.Edge.Schema = schemaConfig.WorkflowExecution
		fromU = sqlgraph.SetNeighbors(weq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first WorkflowExecution entity from the query.
// Returns a *NotFoundError when no WorkflowExecution was found.
func (weq *WorkflowExecutionQuery) First(ctx context.Context) (*WorkflowExecution, error) {
	nodes, err := weq.Limit(1).All(setContextOp(ctx, weq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{workflowexecution.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (weq *WorkflowExecutionQuery) FirstX(ctx context.Context) *WorkflowExecution {
	node, err := weq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first WorkflowExecution ID from the query.
// Returns a *NotFoundError when no WorkflowExecution ID was found.
func (weq *WorkflowExecutionQuery) FirstID(ctx context.Context) (id object.ID, err error) {
	var ids []object.ID
	if ids, err = weq.Limit(1).IDs(setContextOp(ctx, weq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{workflowexecution.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (weq *WorkflowExecutionQuery) FirstIDX(ctx context.Context) object.ID {
	id, err := weq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single WorkflowExecution entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one WorkflowExecution entity is found.
// Returns a *NotFoundError when no WorkflowExecution entities are found.
func (weq *WorkflowExecutionQuery) Only(ctx context.Context) (*WorkflowExecution, error) {
	nodes, err := weq.Limit(2).All(setContextOp(ctx, weq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{workflowexecution.Label}
	default:
		return nil, &NotSingularError{workflowexecution.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (weq *WorkflowExecutionQuery) OnlyX(ctx context.Context) *WorkflowExecution {
	node, err := weq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only WorkflowExecution ID in the query.
// Returns a *NotSingularError when more than one WorkflowExecution ID is found.
// Returns a *NotFoundError when no entities are found.
func (weq *WorkflowExecutionQuery) OnlyID(ctx context.Context) (id object.ID, err error) {
	var ids []object.ID
	if ids, err = weq.Limit(2).IDs(setContextOp(ctx, weq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{workflowexecution.Label}
	default:
		err = &NotSingularError{workflowexecution.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (weq *WorkflowExecutionQuery) OnlyIDX(ctx context.Context) object.ID {
	id, err := weq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of WorkflowExecutions.
func (weq *WorkflowExecutionQuery) All(ctx context.Context) ([]*WorkflowExecution, error) {
	ctx = setContextOp(ctx, weq.ctx, "All")
	if err := weq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*WorkflowExecution, *WorkflowExecutionQuery]()
	return withInterceptors[[]*WorkflowExecution](ctx, weq, qr, weq.inters)
}

// AllX is like All, but panics if an error occurs.
func (weq *WorkflowExecutionQuery) AllX(ctx context.Context) []*WorkflowExecution {
	nodes, err := weq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of WorkflowExecution IDs.
func (weq *WorkflowExecutionQuery) IDs(ctx context.Context) (ids []object.ID, err error) {
	if weq.ctx.Unique == nil && weq.path != nil {
		weq.Unique(true)
	}
	ctx = setContextOp(ctx, weq.ctx, "IDs")
	if err = weq.Select(workflowexecution.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (weq *WorkflowExecutionQuery) IDsX(ctx context.Context) []object.ID {
	ids, err := weq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (weq *WorkflowExecutionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, weq.ctx, "Count")
	if err := weq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, weq, querierCount[*WorkflowExecutionQuery](), weq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (weq *WorkflowExecutionQuery) CountX(ctx context.Context) int {
	count, err := weq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (weq *WorkflowExecutionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, weq.ctx, "Exist")
	switch _, err := weq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("model: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (weq *WorkflowExecutionQuery) ExistX(ctx context.Context) bool {
	exist, err := weq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the WorkflowExecutionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (weq *WorkflowExecutionQuery) Clone() *WorkflowExecutionQuery {
	if weq == nil {
		return nil
	}
	return &WorkflowExecutionQuery{
		config:       weq.config,
		ctx:          weq.ctx.Clone(),
		order:        append([]workflowexecution.OrderOption{}, weq.order...),
		inters:       append([]Interceptor{}, weq.inters...),
		predicates:   append([]predicate.WorkflowExecution{}, weq.predicates...),
		withProject:  weq.withProject.Clone(),
		withStages:   weq.withStages.Clone(),
		withWorkflow: weq.withWorkflow.Clone(),
		// clone intermediate query.
		sql:  weq.sql.Clone(),
		path: weq.path,
	}
}

// WithProject tells the query-builder to eager-load the nodes that are connected to
// the "project" edge. The optional arguments are used to configure the query builder of the edge.
func (weq *WorkflowExecutionQuery) WithProject(opts ...func(*ProjectQuery)) *WorkflowExecutionQuery {
	query := (&ProjectClient{config: weq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	weq.withProject = query
	return weq
}

// WithStages tells the query-builder to eager-load the nodes that are connected to
// the "stages" edge. The optional arguments are used to configure the query builder of the edge.
func (weq *WorkflowExecutionQuery) WithStages(opts ...func(*WorkflowStageExecutionQuery)) *WorkflowExecutionQuery {
	query := (&WorkflowStageExecutionClient{config: weq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	weq.withStages = query
	return weq
}

// WithWorkflow tells the query-builder to eager-load the nodes that are connected to
// the "workflow" edge. The optional arguments are used to configure the query builder of the edge.
func (weq *WorkflowExecutionQuery) WithWorkflow(opts ...func(*WorkflowQuery)) *WorkflowExecutionQuery {
	query := (&WorkflowClient{config: weq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	weq.withWorkflow = query
	return weq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.WorkflowExecution.Query().
//		GroupBy(workflowexecution.FieldName).
//		Aggregate(model.Count()).
//		Scan(ctx, &v)
func (weq *WorkflowExecutionQuery) GroupBy(field string, fields ...string) *WorkflowExecutionGroupBy {
	weq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &WorkflowExecutionGroupBy{build: weq}
	grbuild.flds = &weq.ctx.Fields
	grbuild.label = workflowexecution.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.WorkflowExecution.Query().
//		Select(workflowexecution.FieldName).
//		Scan(ctx, &v)
func (weq *WorkflowExecutionQuery) Select(fields ...string) *WorkflowExecutionSelect {
	weq.ctx.Fields = append(weq.ctx.Fields, fields...)
	sbuild := &WorkflowExecutionSelect{WorkflowExecutionQuery: weq}
	sbuild.label = workflowexecution.Label
	sbuild.flds, sbuild.scan = &weq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a WorkflowExecutionSelect configured with the given aggregations.
func (weq *WorkflowExecutionQuery) Aggregate(fns ...AggregateFunc) *WorkflowExecutionSelect {
	return weq.Select().Aggregate(fns...)
}

func (weq *WorkflowExecutionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range weq.inters {
		if inter == nil {
			return fmt.Errorf("model: uninitialized interceptor (forgotten import model/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, weq); err != nil {
				return err
			}
		}
	}
	for _, f := range weq.ctx.Fields {
		if !workflowexecution.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
		}
	}
	if weq.path != nil {
		prev, err := weq.path(ctx)
		if err != nil {
			return err
		}
		weq.sql = prev
	}
	return nil
}

func (weq *WorkflowExecutionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*WorkflowExecution, error) {
	var (
		nodes       = []*WorkflowExecution{}
		_spec       = weq.querySpec()
		loadedTypes = [3]bool{
			weq.withProject != nil,
			weq.withStages != nil,
			weq.withWorkflow != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*WorkflowExecution).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &WorkflowExecution{config: weq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = weq.schemaConfig.WorkflowExecution
	ctx = internal.NewSchemaConfigContext(ctx, weq.schemaConfig)
	if len(weq.modifiers) > 0 {
		_spec.Modifiers = weq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, weq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := weq.withProject; query != nil {
		if err := weq.loadProject(ctx, query, nodes, nil,
			func(n *WorkflowExecution, e *Project) { n.Edges.Project = e }); err != nil {
			return nil, err
		}
	}
	if query := weq.withStages; query != nil {
		if err := weq.loadStages(ctx, query, nodes,
			func(n *WorkflowExecution) { n.Edges.Stages = []*WorkflowStageExecution{} },
			func(n *WorkflowExecution, e *WorkflowStageExecution) { n.Edges.Stages = append(n.Edges.Stages, e) }); err != nil {
			return nil, err
		}
	}
	if query := weq.withWorkflow; query != nil {
		if err := weq.loadWorkflow(ctx, query, nodes, nil,
			func(n *WorkflowExecution, e *Workflow) { n.Edges.Workflow = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (weq *WorkflowExecutionQuery) loadProject(ctx context.Context, query *ProjectQuery, nodes []*WorkflowExecution, init func(*WorkflowExecution), assign func(*WorkflowExecution, *Project)) error {
	ids := make([]object.ID, 0, len(nodes))
	nodeids := make(map[object.ID][]*WorkflowExecution)
	for i := range nodes {
		fk := nodes[i].ProjectID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(project.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "project_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (weq *WorkflowExecutionQuery) loadStages(ctx context.Context, query *WorkflowStageExecutionQuery, nodes []*WorkflowExecution, init func(*WorkflowExecution), assign func(*WorkflowExecution, *WorkflowStageExecution)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[object.ID]*WorkflowExecution)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(workflowstageexecution.FieldWorkflowExecutionID)
	}
	query.Where(predicate.WorkflowStageExecution(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(workflowexecution.StagesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.WorkflowExecutionID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "workflow_execution_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (weq *WorkflowExecutionQuery) loadWorkflow(ctx context.Context, query *WorkflowQuery, nodes []*WorkflowExecution, init func(*WorkflowExecution), assign func(*WorkflowExecution, *Workflow)) error {
	ids := make([]object.ID, 0, len(nodes))
	nodeids := make(map[object.ID][]*WorkflowExecution)
	for i := range nodes {
		fk := nodes[i].WorkflowID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(workflow.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "workflow_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (weq *WorkflowExecutionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := weq.querySpec()
	_spec.Node.Schema = weq.schemaConfig.WorkflowExecution
	ctx = internal.NewSchemaConfigContext(ctx, weq.schemaConfig)
	if len(weq.modifiers) > 0 {
		_spec.Modifiers = weq.modifiers
	}
	_spec.Node.Columns = weq.ctx.Fields
	if len(weq.ctx.Fields) > 0 {
		_spec.Unique = weq.ctx.Unique != nil && *weq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, weq.driver, _spec)
}

func (weq *WorkflowExecutionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(workflowexecution.Table, workflowexecution.Columns, sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeString))
	_spec.From = weq.sql
	if unique := weq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if weq.path != nil {
		_spec.Unique = true
	}
	if fields := weq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workflowexecution.FieldID)
		for i := range fields {
			if fields[i] != workflowexecution.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if weq.withProject != nil {
			_spec.Node.AddColumnOnce(workflowexecution.FieldProjectID)
		}
		if weq.withWorkflow != nil {
			_spec.Node.AddColumnOnce(workflowexecution.FieldWorkflowID)
		}
	}
	if ps := weq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := weq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := weq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := weq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (weq *WorkflowExecutionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(weq.driver.Dialect())
	t1 := builder.Table(workflowexecution.Table)
	columns := weq.ctx.Fields
	if len(columns) == 0 {
		columns = workflowexecution.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if weq.sql != nil {
		selector = weq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if weq.ctx.Unique != nil && *weq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(weq.schemaConfig.WorkflowExecution)
	ctx = internal.NewSchemaConfigContext(ctx, weq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range weq.modifiers {
		m(selector)
	}
	for _, p := range weq.predicates {
		p(selector)
	}
	for _, p := range weq.order {
		p(selector)
	}
	if offset := weq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := weq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (weq *WorkflowExecutionQuery) ForUpdate(opts ...sql.LockOption) *WorkflowExecutionQuery {
	if weq.driver.Dialect() == dialect.Postgres {
		weq.Unique(false)
	}
	weq.modifiers = append(weq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return weq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (weq *WorkflowExecutionQuery) ForShare(opts ...sql.LockOption) *WorkflowExecutionQuery {
	if weq.driver.Dialect() == dialect.Postgres {
		weq.Unique(false)
	}
	weq.modifiers = append(weq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return weq
}

// Modify adds a query modifier for attaching custom logic to queries.
func (weq *WorkflowExecutionQuery) Modify(modifiers ...func(s *sql.Selector)) *WorkflowExecutionSelect {
	weq.modifiers = append(weq.modifiers, modifiers...)
	return weq.Select()
}

// WhereP appends storage-level predicates to the WorkflowExecutionQuery builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (weq *WorkflowExecutionQuery) WhereP(ps ...func(*sql.Selector)) {
	var wps = make([]predicate.WorkflowExecution, 0, len(ps))
	for i := 0; i < len(ps); i++ {
		wps = append(wps, predicate.WorkflowExecution(ps[i]))
	}
	weq.predicates = append(weq.predicates, wps...)
}

// WorkflowExecutionGroupBy is the group-by builder for WorkflowExecution entities.
type WorkflowExecutionGroupBy struct {
	selector
	build *WorkflowExecutionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (wegb *WorkflowExecutionGroupBy) Aggregate(fns ...AggregateFunc) *WorkflowExecutionGroupBy {
	wegb.fns = append(wegb.fns, fns...)
	return wegb
}

// Scan applies the selector query and scans the result into the given value.
func (wegb *WorkflowExecutionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, wegb.build.ctx, "GroupBy")
	if err := wegb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WorkflowExecutionQuery, *WorkflowExecutionGroupBy](ctx, wegb.build, wegb, wegb.build.inters, v)
}

func (wegb *WorkflowExecutionGroupBy) sqlScan(ctx context.Context, root *WorkflowExecutionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(wegb.fns))
	for _, fn := range wegb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*wegb.flds)+len(wegb.fns))
		for _, f := range *wegb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*wegb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wegb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// WorkflowExecutionSelect is the builder for selecting fields of WorkflowExecution entities.
type WorkflowExecutionSelect struct {
	*WorkflowExecutionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (wes *WorkflowExecutionSelect) Aggregate(fns ...AggregateFunc) *WorkflowExecutionSelect {
	wes.fns = append(wes.fns, fns...)
	return wes
}

// Scan applies the selector query and scans the result into the given value.
func (wes *WorkflowExecutionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, wes.ctx, "Select")
	if err := wes.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WorkflowExecutionQuery, *WorkflowExecutionSelect](ctx, wes.WorkflowExecutionQuery, wes, wes.inters, v)
}

func (wes *WorkflowExecutionSelect) sqlScan(ctx context.Context, root *WorkflowExecutionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(wes.fns))
	for _, fn := range wes.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*wes.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wes.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (wes *WorkflowExecutionSelect) Modify(modifiers ...func(s *sql.Selector)) *WorkflowExecutionSelect {
	wes.modifiers = append(wes.modifiers, modifiers...)
	return wes
}
