// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus". DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/seal-io/walrus/pkg/dao/model/resource"
	"github.com/seal-io/walrus/pkg/dao/model/resourcedefinition"
	"github.com/seal-io/walrus/pkg/dao/model/resourcedefinitionmatchingrule"
	"github.com/seal-io/walrus/pkg/dao/model/templateversion"
	"github.com/seal-io/walrus/pkg/dao/types"
	"github.com/seal-io/walrus/pkg/dao/types/object"
	"github.com/seal-io/walrus/pkg/dao/types/property"
)

// ResourceDefinitionMatchingRuleCreate is the builder for creating a ResourceDefinitionMatchingRule entity.
type ResourceDefinitionMatchingRuleCreate struct {
	config
	mutation   *ResourceDefinitionMatchingRuleMutation
	hooks      []Hook
	conflict   []sql.ConflictOption
	object     *ResourceDefinitionMatchingRule
	fromUpsert bool
}

// SetCreateTime sets the "create_time" field.
func (rdmrc *ResourceDefinitionMatchingRuleCreate) SetCreateTime(t time.Time) *ResourceDefinitionMatchingRuleCreate {
	rdmrc.mutation.SetCreateTime(t)
	return rdmrc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (rdmrc *ResourceDefinitionMatchingRuleCreate) SetNillableCreateTime(t *time.Time) *ResourceDefinitionMatchingRuleCreate {
	if t != nil {
		rdmrc.SetCreateTime(*t)
	}
	return rdmrc
}

// SetResourceDefinitionID sets the "resource_definition_id" field.
func (rdmrc *ResourceDefinitionMatchingRuleCreate) SetResourceDefinitionID(o object.ID) *ResourceDefinitionMatchingRuleCreate {
	rdmrc.mutation.SetResourceDefinitionID(o)
	return rdmrc
}

// SetTemplateID sets the "template_id" field.
func (rdmrc *ResourceDefinitionMatchingRuleCreate) SetTemplateID(o object.ID) *ResourceDefinitionMatchingRuleCreate {
	rdmrc.mutation.SetTemplateID(o)
	return rdmrc
}

// SetName sets the "name" field.
func (rdmrc *ResourceDefinitionMatchingRuleCreate) SetName(s string) *ResourceDefinitionMatchingRuleCreate {
	rdmrc.mutation.SetName(s)
	return rdmrc
}

// SetSelector sets the "selector" field.
func (rdmrc *ResourceDefinitionMatchingRuleCreate) SetSelector(t types.Selector) *ResourceDefinitionMatchingRuleCreate {
	rdmrc.mutation.SetSelector(t)
	return rdmrc
}

// SetAttributes sets the "attributes" field.
func (rdmrc *ResourceDefinitionMatchingRuleCreate) SetAttributes(pr property.Values) *ResourceDefinitionMatchingRuleCreate {
	rdmrc.mutation.SetAttributes(pr)
	return rdmrc
}

// SetOrder sets the "order" field.
func (rdmrc *ResourceDefinitionMatchingRuleCreate) SetOrder(i int) *ResourceDefinitionMatchingRuleCreate {
	rdmrc.mutation.SetOrder(i)
	return rdmrc
}

// SetSchemaDefaultValue sets the "schema_default_value" field.
func (rdmrc *ResourceDefinitionMatchingRuleCreate) SetSchemaDefaultValue(b []byte) *ResourceDefinitionMatchingRuleCreate {
	rdmrc.mutation.SetSchemaDefaultValue(b)
	return rdmrc
}

// SetID sets the "id" field.
func (rdmrc *ResourceDefinitionMatchingRuleCreate) SetID(o object.ID) *ResourceDefinitionMatchingRuleCreate {
	rdmrc.mutation.SetID(o)
	return rdmrc
}

// SetResourceDefinition sets the "resource_definition" edge to the ResourceDefinition entity.
func (rdmrc *ResourceDefinitionMatchingRuleCreate) SetResourceDefinition(r *ResourceDefinition) *ResourceDefinitionMatchingRuleCreate {
	return rdmrc.SetResourceDefinitionID(r.ID)
}

// SetTemplate sets the "template" edge to the TemplateVersion entity.
func (rdmrc *ResourceDefinitionMatchingRuleCreate) SetTemplate(t *TemplateVersion) *ResourceDefinitionMatchingRuleCreate {
	return rdmrc.SetTemplateID(t.ID)
}

// AddResourceIDs adds the "resources" edge to the Resource entity by IDs.
func (rdmrc *ResourceDefinitionMatchingRuleCreate) AddResourceIDs(ids ...object.ID) *ResourceDefinitionMatchingRuleCreate {
	rdmrc.mutation.AddResourceIDs(ids...)
	return rdmrc
}

// AddResources adds the "resources" edges to the Resource entity.
func (rdmrc *ResourceDefinitionMatchingRuleCreate) AddResources(r ...*Resource) *ResourceDefinitionMatchingRuleCreate {
	ids := make([]object.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdmrc.AddResourceIDs(ids...)
}

// Mutation returns the ResourceDefinitionMatchingRuleMutation object of the builder.
func (rdmrc *ResourceDefinitionMatchingRuleCreate) Mutation() *ResourceDefinitionMatchingRuleMutation {
	return rdmrc.mutation
}

// Save creates the ResourceDefinitionMatchingRule in the database.
func (rdmrc *ResourceDefinitionMatchingRuleCreate) Save(ctx context.Context) (*ResourceDefinitionMatchingRule, error) {
	if err := rdmrc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rdmrc.sqlSave, rdmrc.mutation, rdmrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rdmrc *ResourceDefinitionMatchingRuleCreate) SaveX(ctx context.Context) *ResourceDefinitionMatchingRule {
	v, err := rdmrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rdmrc *ResourceDefinitionMatchingRuleCreate) Exec(ctx context.Context) error {
	_, err := rdmrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rdmrc *ResourceDefinitionMatchingRuleCreate) ExecX(ctx context.Context) {
	if err := rdmrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rdmrc *ResourceDefinitionMatchingRuleCreate) defaults() error {
	if _, ok := rdmrc.mutation.CreateTime(); !ok {
		if resourcedefinitionmatchingrule.DefaultCreateTime == nil {
			return fmt.Errorf("model: uninitialized resourcedefinitionmatchingrule.DefaultCreateTime (forgotten import model/runtime?)")
		}
		v := resourcedefinitionmatchingrule.DefaultCreateTime()
		rdmrc.mutation.SetCreateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rdmrc *ResourceDefinitionMatchingRuleCreate) check() error {
	if _, ok := rdmrc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`model: missing required field "ResourceDefinitionMatchingRule.create_time"`)}
	}
	if _, ok := rdmrc.mutation.ResourceDefinitionID(); !ok {
		return &ValidationError{Name: "resource_definition_id", err: errors.New(`model: missing required field "ResourceDefinitionMatchingRule.resource_definition_id"`)}
	}
	if v, ok := rdmrc.mutation.ResourceDefinitionID(); ok {
		if err := resourcedefinitionmatchingrule.ResourceDefinitionIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "resource_definition_id", err: fmt.Errorf(`model: validator failed for field "ResourceDefinitionMatchingRule.resource_definition_id": %w`, err)}
		}
	}
	if _, ok := rdmrc.mutation.TemplateID(); !ok {
		return &ValidationError{Name: "template_id", err: errors.New(`model: missing required field "ResourceDefinitionMatchingRule.template_id"`)}
	}
	if v, ok := rdmrc.mutation.TemplateID(); ok {
		if err := resourcedefinitionmatchingrule.TemplateIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "template_id", err: fmt.Errorf(`model: validator failed for field "ResourceDefinitionMatchingRule.template_id": %w`, err)}
		}
	}
	if _, ok := rdmrc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`model: missing required field "ResourceDefinitionMatchingRule.name"`)}
	}
	if v, ok := rdmrc.mutation.Name(); ok {
		if err := resourcedefinitionmatchingrule.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`model: validator failed for field "ResourceDefinitionMatchingRule.name": %w`, err)}
		}
	}
	if _, ok := rdmrc.mutation.Selector(); !ok {
		return &ValidationError{Name: "selector", err: errors.New(`model: missing required field "ResourceDefinitionMatchingRule.selector"`)}
	}
	if _, ok := rdmrc.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`model: missing required field "ResourceDefinitionMatchingRule.order"`)}
	}
	if _, ok := rdmrc.mutation.ResourceDefinitionID(); !ok {
		return &ValidationError{Name: "resource_definition", err: errors.New(`model: missing required edge "ResourceDefinitionMatchingRule.resource_definition"`)}
	}
	if _, ok := rdmrc.mutation.TemplateID(); !ok {
		return &ValidationError{Name: "template", err: errors.New(`model: missing required edge "ResourceDefinitionMatchingRule.template"`)}
	}
	return nil
}

func (rdmrc *ResourceDefinitionMatchingRuleCreate) sqlSave(ctx context.Context) (*ResourceDefinitionMatchingRule, error) {
	if err := rdmrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rdmrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rdmrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*object.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rdmrc.mutation.id = &_node.ID
	rdmrc.mutation.done = true
	return _node, nil
}

func (rdmrc *ResourceDefinitionMatchingRuleCreate) createSpec() (*ResourceDefinitionMatchingRule, *sqlgraph.CreateSpec) {
	var (
		_node = &ResourceDefinitionMatchingRule{config: rdmrc.config}
		_spec = sqlgraph.NewCreateSpec(resourcedefinitionmatchingrule.Table, sqlgraph.NewFieldSpec(resourcedefinitionmatchingrule.FieldID, field.TypeString))
	)
	_spec.Schema = rdmrc.schemaConfig.ResourceDefinitionMatchingRule
	_spec.OnConflict = rdmrc.conflict
	if id, ok := rdmrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rdmrc.mutation.CreateTime(); ok {
		_spec.SetField(resourcedefinitionmatchingrule.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = &value
	}
	if value, ok := rdmrc.mutation.Name(); ok {
		_spec.SetField(resourcedefinitionmatchingrule.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rdmrc.mutation.Selector(); ok {
		_spec.SetField(resourcedefinitionmatchingrule.FieldSelector, field.TypeJSON, value)
		_node.Selector = value
	}
	if value, ok := rdmrc.mutation.Attributes(); ok {
		_spec.SetField(resourcedefinitionmatchingrule.FieldAttributes, field.TypeOther, value)
		_node.Attributes = value
	}
	if value, ok := rdmrc.mutation.Order(); ok {
		_spec.SetField(resourcedefinitionmatchingrule.FieldOrder, field.TypeInt, value)
		_node.Order = value
	}
	if value, ok := rdmrc.mutation.SchemaDefaultValue(); ok {
		_spec.SetField(resourcedefinitionmatchingrule.FieldSchemaDefaultValue, field.TypeBytes, value)
		_node.SchemaDefaultValue = value
	}
	if nodes := rdmrc.mutation.ResourceDefinitionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   resourcedefinitionmatchingrule.ResourceDefinitionTable,
			Columns: []string{resourcedefinitionmatchingrule.ResourceDefinitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resourcedefinition.FieldID, field.TypeString),
			},
		}
		edge.Schema = rdmrc.schemaConfig.ResourceDefinitionMatchingRule
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ResourceDefinitionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rdmrc.mutation.TemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   resourcedefinitionmatchingrule.TemplateTable,
			Columns: []string{resourcedefinitionmatchingrule.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(templateversion.FieldID, field.TypeString),
			},
		}
		edge.Schema = rdmrc.schemaConfig.ResourceDefinitionMatchingRule
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TemplateID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rdmrc.mutation.ResourcesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resourcedefinitionmatchingrule.ResourcesTable,
			Columns: []string{resourcedefinitionmatchingrule.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeString),
			},
		}
		edge.Schema = rdmrc.schemaConfig.Resource
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// Set is different from other Set* methods,
// it sets the value by judging the definition of each field within the entire object.
//
// For required fields, Set calls directly.
//
// For optional fields, Set calls if the value is not zero.
//
// For example:
//
//	## Required
//
//	db.SetX(obj.X)
//
//	## Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (rdmrc *ResourceDefinitionMatchingRuleCreate) Set(obj *ResourceDefinitionMatchingRule) *ResourceDefinitionMatchingRuleCreate {
	// Required.
	rdmrc.SetResourceDefinitionID(obj.ResourceDefinitionID)
	rdmrc.SetTemplateID(obj.TemplateID)
	rdmrc.SetName(obj.Name)
	rdmrc.SetSelector(obj.Selector)
	rdmrc.SetOrder(obj.Order)

	// Optional.
	if obj.CreateTime != nil {
		rdmrc.SetCreateTime(*obj.CreateTime)
	}
	if !reflect.ValueOf(obj.Attributes).IsZero() {
		rdmrc.SetAttributes(obj.Attributes)
	}
	if !reflect.ValueOf(obj.SchemaDefaultValue).IsZero() {
		rdmrc.SetSchemaDefaultValue(obj.SchemaDefaultValue)
	}

	// Record the given object.
	rdmrc.object = obj

	return rdmrc
}

// getClientSet returns the ClientSet for the given builder.
func (rdmrc *ResourceDefinitionMatchingRuleCreate) getClientSet() (mc ClientSet) {
	if _, ok := rdmrc.config.driver.(*txDriver); ok {
		tx := &Tx{config: rdmrc.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: rdmrc.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after created the ResourceDefinitionMatchingRule entity,
// which is always good for cascading create operations.
func (rdmrc *ResourceDefinitionMatchingRuleCreate) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ResourceDefinitionMatchingRule) error) (*ResourceDefinitionMatchingRule, error) {
	obj, err := rdmrc.Save(ctx)
	if err != nil {
		return nil, err
	}

	if len(cbs) == 0 {
		return obj, err
	}

	mc := rdmrc.getClientSet()

	if x := rdmrc.object; x != nil {
		if _, set := rdmrc.mutation.Field(resourcedefinitionmatchingrule.FieldResourceDefinitionID); set {
			obj.ResourceDefinitionID = x.ResourceDefinitionID
		}
		if _, set := rdmrc.mutation.Field(resourcedefinitionmatchingrule.FieldTemplateID); set {
			obj.TemplateID = x.TemplateID
		}
		if _, set := rdmrc.mutation.Field(resourcedefinitionmatchingrule.FieldName); set {
			obj.Name = x.Name
		}
		if _, set := rdmrc.mutation.Field(resourcedefinitionmatchingrule.FieldSelector); set {
			obj.Selector = x.Selector
		}
		if _, set := rdmrc.mutation.Field(resourcedefinitionmatchingrule.FieldAttributes); set {
			obj.Attributes = x.Attributes
		}
		if _, set := rdmrc.mutation.Field(resourcedefinitionmatchingrule.FieldOrder); set {
			obj.Order = x.Order
		}
		if _, set := rdmrc.mutation.Field(resourcedefinitionmatchingrule.FieldSchemaDefaultValue); set {
			obj.SchemaDefaultValue = x.SchemaDefaultValue
		}
		obj.Edges = x.Edges
	}

	for i := range cbs {
		if err = cbs[i](ctx, mc, obj); err != nil {
			return nil, err
		}
	}

	return obj, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (rdmrc *ResourceDefinitionMatchingRuleCreate) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ResourceDefinitionMatchingRule) error) *ResourceDefinitionMatchingRule {
	obj, err := rdmrc.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return obj
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (rdmrc *ResourceDefinitionMatchingRuleCreate) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ResourceDefinitionMatchingRule) error) error {
	_, err := rdmrc.SaveE(ctx, cbs...)
	return err
}

// ExecEX is like ExecE, but panics if an error occurs.
func (rdmrc *ResourceDefinitionMatchingRuleCreate) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ResourceDefinitionMatchingRule) error) {
	if err := rdmrc.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// Set leverages the ResourceDefinitionMatchingRuleCreate Set method,
// it sets the value by judging the definition of each field within the entire item of the given list.
//
// For required fields, Set calls directly.
//
// For optional fields, Set calls if the value is not zero.
//
// For example:
//
//	## Required
//
//	db.SetX(obj.X)
//
//	## Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (rdmrcb *ResourceDefinitionMatchingRuleCreateBulk) Set(objs ...*ResourceDefinitionMatchingRule) *ResourceDefinitionMatchingRuleCreateBulk {
	if len(objs) != 0 {
		client := NewResourceDefinitionMatchingRuleClient(rdmrcb.config)

		rdmrcb.builders = make([]*ResourceDefinitionMatchingRuleCreate, len(objs))
		for i := range objs {
			rdmrcb.builders[i] = client.Create().Set(objs[i])
		}

		// Record the given objects.
		rdmrcb.objects = objs
	}

	return rdmrcb
}

// getClientSet returns the ClientSet for the given builder.
func (rdmrcb *ResourceDefinitionMatchingRuleCreateBulk) getClientSet() (mc ClientSet) {
	if _, ok := rdmrcb.config.driver.(*txDriver); ok {
		tx := &Tx{config: rdmrcb.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: rdmrcb.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after created the ResourceDefinitionMatchingRule entities,
// which is always good for cascading create operations.
func (rdmrcb *ResourceDefinitionMatchingRuleCreateBulk) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ResourceDefinitionMatchingRule) error) ([]*ResourceDefinitionMatchingRule, error) {
	objs, err := rdmrcb.Save(ctx)
	if err != nil {
		return nil, err
	}

	if len(cbs) == 0 {
		return objs, err
	}

	mc := rdmrcb.getClientSet()

	if x := rdmrcb.objects; x != nil {
		for i := range x {
			if _, set := rdmrcb.builders[i].mutation.Field(resourcedefinitionmatchingrule.FieldResourceDefinitionID); set {
				objs[i].ResourceDefinitionID = x[i].ResourceDefinitionID
			}
			if _, set := rdmrcb.builders[i].mutation.Field(resourcedefinitionmatchingrule.FieldTemplateID); set {
				objs[i].TemplateID = x[i].TemplateID
			}
			if _, set := rdmrcb.builders[i].mutation.Field(resourcedefinitionmatchingrule.FieldName); set {
				objs[i].Name = x[i].Name
			}
			if _, set := rdmrcb.builders[i].mutation.Field(resourcedefinitionmatchingrule.FieldSelector); set {
				objs[i].Selector = x[i].Selector
			}
			if _, set := rdmrcb.builders[i].mutation.Field(resourcedefinitionmatchingrule.FieldAttributes); set {
				objs[i].Attributes = x[i].Attributes
			}
			if _, set := rdmrcb.builders[i].mutation.Field(resourcedefinitionmatchingrule.FieldOrder); set {
				objs[i].Order = x[i].Order
			}
			if _, set := rdmrcb.builders[i].mutation.Field(resourcedefinitionmatchingrule.FieldSchemaDefaultValue); set {
				objs[i].SchemaDefaultValue = x[i].SchemaDefaultValue
			}
			objs[i].Edges = x[i].Edges
		}
	}

	for i := range objs {
		for j := range cbs {
			if err = cbs[j](ctx, mc, objs[i]); err != nil {
				return nil, err
			}
		}
	}

	return objs, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (rdmrcb *ResourceDefinitionMatchingRuleCreateBulk) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ResourceDefinitionMatchingRule) error) []*ResourceDefinitionMatchingRule {
	objs, err := rdmrcb.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return objs
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (rdmrcb *ResourceDefinitionMatchingRuleCreateBulk) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ResourceDefinitionMatchingRule) error) error {
	_, err := rdmrcb.SaveE(ctx, cbs...)
	return err
}

// ExecEX is like ExecE, but panics if an error occurs.
func (rdmrcb *ResourceDefinitionMatchingRuleCreateBulk) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *ResourceDefinitionMatchingRule) error) {
	if err := rdmrcb.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (u *ResourceDefinitionMatchingRuleUpsertOne) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *ResourceDefinitionMatchingRule) error) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for ResourceDefinitionMatchingRuleUpsertOne.OnConflict")
	}
	u.create.fromUpsert = true
	return u.create.ExecE(ctx, cbs...)
}

// ExecEX is like ExecE, but panics if an error occurs.
func (u *ResourceDefinitionMatchingRuleUpsertOne) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *ResourceDefinitionMatchingRule) error) {
	if err := u.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (u *ResourceDefinitionMatchingRuleUpsertBulk) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *ResourceDefinitionMatchingRule) error) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model: OnConflict was set for builder %d. Set it on the ResourceDefinitionMatchingRuleUpsertBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for ResourceDefinitionMatchingRuleUpsertBulk.OnConflict")
	}
	u.create.fromUpsert = true
	return u.create.ExecE(ctx, cbs...)
}

// ExecEX is like ExecE, but panics if an error occurs.
func (u *ResourceDefinitionMatchingRuleUpsertBulk) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *ResourceDefinitionMatchingRule) error) {
	if err := u.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ResourceDefinitionMatchingRule.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ResourceDefinitionMatchingRuleUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (rdmrc *ResourceDefinitionMatchingRuleCreate) OnConflict(opts ...sql.ConflictOption) *ResourceDefinitionMatchingRuleUpsertOne {
	rdmrc.conflict = opts
	return &ResourceDefinitionMatchingRuleUpsertOne{
		create: rdmrc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ResourceDefinitionMatchingRule.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rdmrc *ResourceDefinitionMatchingRuleCreate) OnConflictColumns(columns ...string) *ResourceDefinitionMatchingRuleUpsertOne {
	rdmrc.conflict = append(rdmrc.conflict, sql.ConflictColumns(columns...))
	return &ResourceDefinitionMatchingRuleUpsertOne{
		create: rdmrc,
	}
}

type (
	// ResourceDefinitionMatchingRuleUpsertOne is the builder for "upsert"-ing
	//  one ResourceDefinitionMatchingRule node.
	ResourceDefinitionMatchingRuleUpsertOne struct {
		create *ResourceDefinitionMatchingRuleCreate
	}

	// ResourceDefinitionMatchingRuleUpsert is the "OnConflict" setter.
	ResourceDefinitionMatchingRuleUpsert struct {
		*sql.UpdateSet
	}
)

// SetTemplateID sets the "template_id" field.
func (u *ResourceDefinitionMatchingRuleUpsert) SetTemplateID(v object.ID) *ResourceDefinitionMatchingRuleUpsert {
	u.Set(resourcedefinitionmatchingrule.FieldTemplateID, v)
	return u
}

// UpdateTemplateID sets the "template_id" field to the value that was provided on create.
func (u *ResourceDefinitionMatchingRuleUpsert) UpdateTemplateID() *ResourceDefinitionMatchingRuleUpsert {
	u.SetExcluded(resourcedefinitionmatchingrule.FieldTemplateID)
	return u
}

// SetSelector sets the "selector" field.
func (u *ResourceDefinitionMatchingRuleUpsert) SetSelector(v types.Selector) *ResourceDefinitionMatchingRuleUpsert {
	u.Set(resourcedefinitionmatchingrule.FieldSelector, v)
	return u
}

// UpdateSelector sets the "selector" field to the value that was provided on create.
func (u *ResourceDefinitionMatchingRuleUpsert) UpdateSelector() *ResourceDefinitionMatchingRuleUpsert {
	u.SetExcluded(resourcedefinitionmatchingrule.FieldSelector)
	return u
}

// SetAttributes sets the "attributes" field.
func (u *ResourceDefinitionMatchingRuleUpsert) SetAttributes(v property.Values) *ResourceDefinitionMatchingRuleUpsert {
	u.Set(resourcedefinitionmatchingrule.FieldAttributes, v)
	return u
}

// UpdateAttributes sets the "attributes" field to the value that was provided on create.
func (u *ResourceDefinitionMatchingRuleUpsert) UpdateAttributes() *ResourceDefinitionMatchingRuleUpsert {
	u.SetExcluded(resourcedefinitionmatchingrule.FieldAttributes)
	return u
}

// ClearAttributes clears the value of the "attributes" field.
func (u *ResourceDefinitionMatchingRuleUpsert) ClearAttributes() *ResourceDefinitionMatchingRuleUpsert {
	u.SetNull(resourcedefinitionmatchingrule.FieldAttributes)
	return u
}

// SetOrder sets the "order" field.
func (u *ResourceDefinitionMatchingRuleUpsert) SetOrder(v int) *ResourceDefinitionMatchingRuleUpsert {
	u.Set(resourcedefinitionmatchingrule.FieldOrder, v)
	return u
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *ResourceDefinitionMatchingRuleUpsert) UpdateOrder() *ResourceDefinitionMatchingRuleUpsert {
	u.SetExcluded(resourcedefinitionmatchingrule.FieldOrder)
	return u
}

// AddOrder adds v to the "order" field.
func (u *ResourceDefinitionMatchingRuleUpsert) AddOrder(v int) *ResourceDefinitionMatchingRuleUpsert {
	u.Add(resourcedefinitionmatchingrule.FieldOrder, v)
	return u
}

// SetSchemaDefaultValue sets the "schema_default_value" field.
func (u *ResourceDefinitionMatchingRuleUpsert) SetSchemaDefaultValue(v []byte) *ResourceDefinitionMatchingRuleUpsert {
	u.Set(resourcedefinitionmatchingrule.FieldSchemaDefaultValue, v)
	return u
}

// UpdateSchemaDefaultValue sets the "schema_default_value" field to the value that was provided on create.
func (u *ResourceDefinitionMatchingRuleUpsert) UpdateSchemaDefaultValue() *ResourceDefinitionMatchingRuleUpsert {
	u.SetExcluded(resourcedefinitionmatchingrule.FieldSchemaDefaultValue)
	return u
}

// ClearSchemaDefaultValue clears the value of the "schema_default_value" field.
func (u *ResourceDefinitionMatchingRuleUpsert) ClearSchemaDefaultValue() *ResourceDefinitionMatchingRuleUpsert {
	u.SetNull(resourcedefinitionmatchingrule.FieldSchemaDefaultValue)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ResourceDefinitionMatchingRule.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(resourcedefinitionmatchingrule.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ResourceDefinitionMatchingRuleUpsertOne) UpdateNewValues() *ResourceDefinitionMatchingRuleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(resourcedefinitionmatchingrule.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(resourcedefinitionmatchingrule.FieldCreateTime)
		}
		if _, exists := u.create.mutation.ResourceDefinitionID(); exists {
			s.SetIgnore(resourcedefinitionmatchingrule.FieldResourceDefinitionID)
		}
		if _, exists := u.create.mutation.Name(); exists {
			s.SetIgnore(resourcedefinitionmatchingrule.FieldName)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ResourceDefinitionMatchingRule.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ResourceDefinitionMatchingRuleUpsertOne) Ignore() *ResourceDefinitionMatchingRuleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ResourceDefinitionMatchingRuleUpsertOne) DoNothing() *ResourceDefinitionMatchingRuleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ResourceDefinitionMatchingRuleCreate.OnConflict
// documentation for more info.
func (u *ResourceDefinitionMatchingRuleUpsertOne) Update(set func(*ResourceDefinitionMatchingRuleUpsert)) *ResourceDefinitionMatchingRuleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ResourceDefinitionMatchingRuleUpsert{UpdateSet: update})
	}))
	return u
}

// SetTemplateID sets the "template_id" field.
func (u *ResourceDefinitionMatchingRuleUpsertOne) SetTemplateID(v object.ID) *ResourceDefinitionMatchingRuleUpsertOne {
	return u.Update(func(s *ResourceDefinitionMatchingRuleUpsert) {
		s.SetTemplateID(v)
	})
}

// UpdateTemplateID sets the "template_id" field to the value that was provided on create.
func (u *ResourceDefinitionMatchingRuleUpsertOne) UpdateTemplateID() *ResourceDefinitionMatchingRuleUpsertOne {
	return u.Update(func(s *ResourceDefinitionMatchingRuleUpsert) {
		s.UpdateTemplateID()
	})
}

// SetSelector sets the "selector" field.
func (u *ResourceDefinitionMatchingRuleUpsertOne) SetSelector(v types.Selector) *ResourceDefinitionMatchingRuleUpsertOne {
	return u.Update(func(s *ResourceDefinitionMatchingRuleUpsert) {
		s.SetSelector(v)
	})
}

// UpdateSelector sets the "selector" field to the value that was provided on create.
func (u *ResourceDefinitionMatchingRuleUpsertOne) UpdateSelector() *ResourceDefinitionMatchingRuleUpsertOne {
	return u.Update(func(s *ResourceDefinitionMatchingRuleUpsert) {
		s.UpdateSelector()
	})
}

// SetAttributes sets the "attributes" field.
func (u *ResourceDefinitionMatchingRuleUpsertOne) SetAttributes(v property.Values) *ResourceDefinitionMatchingRuleUpsertOne {
	return u.Update(func(s *ResourceDefinitionMatchingRuleUpsert) {
		s.SetAttributes(v)
	})
}

// UpdateAttributes sets the "attributes" field to the value that was provided on create.
func (u *ResourceDefinitionMatchingRuleUpsertOne) UpdateAttributes() *ResourceDefinitionMatchingRuleUpsertOne {
	return u.Update(func(s *ResourceDefinitionMatchingRuleUpsert) {
		s.UpdateAttributes()
	})
}

// ClearAttributes clears the value of the "attributes" field.
func (u *ResourceDefinitionMatchingRuleUpsertOne) ClearAttributes() *ResourceDefinitionMatchingRuleUpsertOne {
	return u.Update(func(s *ResourceDefinitionMatchingRuleUpsert) {
		s.ClearAttributes()
	})
}

// SetOrder sets the "order" field.
func (u *ResourceDefinitionMatchingRuleUpsertOne) SetOrder(v int) *ResourceDefinitionMatchingRuleUpsertOne {
	return u.Update(func(s *ResourceDefinitionMatchingRuleUpsert) {
		s.SetOrder(v)
	})
}

// AddOrder adds v to the "order" field.
func (u *ResourceDefinitionMatchingRuleUpsertOne) AddOrder(v int) *ResourceDefinitionMatchingRuleUpsertOne {
	return u.Update(func(s *ResourceDefinitionMatchingRuleUpsert) {
		s.AddOrder(v)
	})
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *ResourceDefinitionMatchingRuleUpsertOne) UpdateOrder() *ResourceDefinitionMatchingRuleUpsertOne {
	return u.Update(func(s *ResourceDefinitionMatchingRuleUpsert) {
		s.UpdateOrder()
	})
}

// SetSchemaDefaultValue sets the "schema_default_value" field.
func (u *ResourceDefinitionMatchingRuleUpsertOne) SetSchemaDefaultValue(v []byte) *ResourceDefinitionMatchingRuleUpsertOne {
	return u.Update(func(s *ResourceDefinitionMatchingRuleUpsert) {
		s.SetSchemaDefaultValue(v)
	})
}

// UpdateSchemaDefaultValue sets the "schema_default_value" field to the value that was provided on create.
func (u *ResourceDefinitionMatchingRuleUpsertOne) UpdateSchemaDefaultValue() *ResourceDefinitionMatchingRuleUpsertOne {
	return u.Update(func(s *ResourceDefinitionMatchingRuleUpsert) {
		s.UpdateSchemaDefaultValue()
	})
}

// ClearSchemaDefaultValue clears the value of the "schema_default_value" field.
func (u *ResourceDefinitionMatchingRuleUpsertOne) ClearSchemaDefaultValue() *ResourceDefinitionMatchingRuleUpsertOne {
	return u.Update(func(s *ResourceDefinitionMatchingRuleUpsert) {
		s.ClearSchemaDefaultValue()
	})
}

// Exec executes the query.
func (u *ResourceDefinitionMatchingRuleUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for ResourceDefinitionMatchingRuleCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ResourceDefinitionMatchingRuleUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ResourceDefinitionMatchingRuleUpsertOne) ID(ctx context.Context) (id object.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("model: ResourceDefinitionMatchingRuleUpsertOne.ID is not supported by MySQL driver. Use ResourceDefinitionMatchingRuleUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ResourceDefinitionMatchingRuleUpsertOne) IDX(ctx context.Context) object.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ResourceDefinitionMatchingRuleCreateBulk is the builder for creating many ResourceDefinitionMatchingRule entities in bulk.
type ResourceDefinitionMatchingRuleCreateBulk struct {
	config
	err        error
	builders   []*ResourceDefinitionMatchingRuleCreate
	conflict   []sql.ConflictOption
	objects    []*ResourceDefinitionMatchingRule
	fromUpsert bool
}

// Save creates the ResourceDefinitionMatchingRule entities in the database.
func (rdmrcb *ResourceDefinitionMatchingRuleCreateBulk) Save(ctx context.Context) ([]*ResourceDefinitionMatchingRule, error) {
	if rdmrcb.err != nil {
		return nil, rdmrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rdmrcb.builders))
	nodes := make([]*ResourceDefinitionMatchingRule, len(rdmrcb.builders))
	mutators := make([]Mutator, len(rdmrcb.builders))
	for i := range rdmrcb.builders {
		func(i int, root context.Context) {
			builder := rdmrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ResourceDefinitionMatchingRuleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rdmrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rdmrcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rdmrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rdmrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rdmrcb *ResourceDefinitionMatchingRuleCreateBulk) SaveX(ctx context.Context) []*ResourceDefinitionMatchingRule {
	v, err := rdmrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rdmrcb *ResourceDefinitionMatchingRuleCreateBulk) Exec(ctx context.Context) error {
	_, err := rdmrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rdmrcb *ResourceDefinitionMatchingRuleCreateBulk) ExecX(ctx context.Context) {
	if err := rdmrcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ResourceDefinitionMatchingRule.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ResourceDefinitionMatchingRuleUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (rdmrcb *ResourceDefinitionMatchingRuleCreateBulk) OnConflict(opts ...sql.ConflictOption) *ResourceDefinitionMatchingRuleUpsertBulk {
	rdmrcb.conflict = opts
	return &ResourceDefinitionMatchingRuleUpsertBulk{
		create: rdmrcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ResourceDefinitionMatchingRule.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rdmrcb *ResourceDefinitionMatchingRuleCreateBulk) OnConflictColumns(columns ...string) *ResourceDefinitionMatchingRuleUpsertBulk {
	rdmrcb.conflict = append(rdmrcb.conflict, sql.ConflictColumns(columns...))
	return &ResourceDefinitionMatchingRuleUpsertBulk{
		create: rdmrcb,
	}
}

// ResourceDefinitionMatchingRuleUpsertBulk is the builder for "upsert"-ing
// a bulk of ResourceDefinitionMatchingRule nodes.
type ResourceDefinitionMatchingRuleUpsertBulk struct {
	create *ResourceDefinitionMatchingRuleCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ResourceDefinitionMatchingRule.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(resourcedefinitionmatchingrule.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ResourceDefinitionMatchingRuleUpsertBulk) UpdateNewValues() *ResourceDefinitionMatchingRuleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(resourcedefinitionmatchingrule.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(resourcedefinitionmatchingrule.FieldCreateTime)
			}
			if _, exists := b.mutation.ResourceDefinitionID(); exists {
				s.SetIgnore(resourcedefinitionmatchingrule.FieldResourceDefinitionID)
			}
			if _, exists := b.mutation.Name(); exists {
				s.SetIgnore(resourcedefinitionmatchingrule.FieldName)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ResourceDefinitionMatchingRule.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ResourceDefinitionMatchingRuleUpsertBulk) Ignore() *ResourceDefinitionMatchingRuleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ResourceDefinitionMatchingRuleUpsertBulk) DoNothing() *ResourceDefinitionMatchingRuleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ResourceDefinitionMatchingRuleCreateBulk.OnConflict
// documentation for more info.
func (u *ResourceDefinitionMatchingRuleUpsertBulk) Update(set func(*ResourceDefinitionMatchingRuleUpsert)) *ResourceDefinitionMatchingRuleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ResourceDefinitionMatchingRuleUpsert{UpdateSet: update})
	}))
	return u
}

// SetTemplateID sets the "template_id" field.
func (u *ResourceDefinitionMatchingRuleUpsertBulk) SetTemplateID(v object.ID) *ResourceDefinitionMatchingRuleUpsertBulk {
	return u.Update(func(s *ResourceDefinitionMatchingRuleUpsert) {
		s.SetTemplateID(v)
	})
}

// UpdateTemplateID sets the "template_id" field to the value that was provided on create.
func (u *ResourceDefinitionMatchingRuleUpsertBulk) UpdateTemplateID() *ResourceDefinitionMatchingRuleUpsertBulk {
	return u.Update(func(s *ResourceDefinitionMatchingRuleUpsert) {
		s.UpdateTemplateID()
	})
}

// SetSelector sets the "selector" field.
func (u *ResourceDefinitionMatchingRuleUpsertBulk) SetSelector(v types.Selector) *ResourceDefinitionMatchingRuleUpsertBulk {
	return u.Update(func(s *ResourceDefinitionMatchingRuleUpsert) {
		s.SetSelector(v)
	})
}

// UpdateSelector sets the "selector" field to the value that was provided on create.
func (u *ResourceDefinitionMatchingRuleUpsertBulk) UpdateSelector() *ResourceDefinitionMatchingRuleUpsertBulk {
	return u.Update(func(s *ResourceDefinitionMatchingRuleUpsert) {
		s.UpdateSelector()
	})
}

// SetAttributes sets the "attributes" field.
func (u *ResourceDefinitionMatchingRuleUpsertBulk) SetAttributes(v property.Values) *ResourceDefinitionMatchingRuleUpsertBulk {
	return u.Update(func(s *ResourceDefinitionMatchingRuleUpsert) {
		s.SetAttributes(v)
	})
}

// UpdateAttributes sets the "attributes" field to the value that was provided on create.
func (u *ResourceDefinitionMatchingRuleUpsertBulk) UpdateAttributes() *ResourceDefinitionMatchingRuleUpsertBulk {
	return u.Update(func(s *ResourceDefinitionMatchingRuleUpsert) {
		s.UpdateAttributes()
	})
}

// ClearAttributes clears the value of the "attributes" field.
func (u *ResourceDefinitionMatchingRuleUpsertBulk) ClearAttributes() *ResourceDefinitionMatchingRuleUpsertBulk {
	return u.Update(func(s *ResourceDefinitionMatchingRuleUpsert) {
		s.ClearAttributes()
	})
}

// SetOrder sets the "order" field.
func (u *ResourceDefinitionMatchingRuleUpsertBulk) SetOrder(v int) *ResourceDefinitionMatchingRuleUpsertBulk {
	return u.Update(func(s *ResourceDefinitionMatchingRuleUpsert) {
		s.SetOrder(v)
	})
}

// AddOrder adds v to the "order" field.
func (u *ResourceDefinitionMatchingRuleUpsertBulk) AddOrder(v int) *ResourceDefinitionMatchingRuleUpsertBulk {
	return u.Update(func(s *ResourceDefinitionMatchingRuleUpsert) {
		s.AddOrder(v)
	})
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *ResourceDefinitionMatchingRuleUpsertBulk) UpdateOrder() *ResourceDefinitionMatchingRuleUpsertBulk {
	return u.Update(func(s *ResourceDefinitionMatchingRuleUpsert) {
		s.UpdateOrder()
	})
}

// SetSchemaDefaultValue sets the "schema_default_value" field.
func (u *ResourceDefinitionMatchingRuleUpsertBulk) SetSchemaDefaultValue(v []byte) *ResourceDefinitionMatchingRuleUpsertBulk {
	return u.Update(func(s *ResourceDefinitionMatchingRuleUpsert) {
		s.SetSchemaDefaultValue(v)
	})
}

// UpdateSchemaDefaultValue sets the "schema_default_value" field to the value that was provided on create.
func (u *ResourceDefinitionMatchingRuleUpsertBulk) UpdateSchemaDefaultValue() *ResourceDefinitionMatchingRuleUpsertBulk {
	return u.Update(func(s *ResourceDefinitionMatchingRuleUpsert) {
		s.UpdateSchemaDefaultValue()
	})
}

// ClearSchemaDefaultValue clears the value of the "schema_default_value" field.
func (u *ResourceDefinitionMatchingRuleUpsertBulk) ClearSchemaDefaultValue() *ResourceDefinitionMatchingRuleUpsertBulk {
	return u.Update(func(s *ResourceDefinitionMatchingRuleUpsert) {
		s.ClearSchemaDefaultValue()
	})
}

// Exec executes the query.
func (u *ResourceDefinitionMatchingRuleUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model: OnConflict was set for builder %d. Set it on the ResourceDefinitionMatchingRuleCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for ResourceDefinitionMatchingRuleCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ResourceDefinitionMatchingRuleUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
