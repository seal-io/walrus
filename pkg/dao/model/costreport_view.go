// SPDX-FileCopyrightText: 2023 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "seal". DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"time"

	"github.com/seal-io/seal/pkg/dao/model/costreport"
	"github.com/seal-io/seal/pkg/dao/types"
	"github.com/seal-io/seal/pkg/dao/types/object"
)

// CostReportCreateInput holds the creation input of the CostReport entity.
type CostReportCreateInput struct {
	inputConfig `uri:"-" query:"-" json:"-"`

	Fingerprint         string                  `uri:"-" query:"-" json:"fingerprint"`
	Name                string                  `uri:"-" query:"-" json:"name"`
	Minutes             float64                 `uri:"-" query:"-" json:"minutes"`
	EndTime             time.Time               `uri:"-" query:"-" json:"endTime"`
	StartTime           time.Time               `uri:"-" query:"-" json:"startTime"`
	ClusterName         string                  `uri:"-" query:"-" json:"clusterName,omitempty"`
	Namespace           string                  `uri:"-" query:"-" json:"namespace,omitempty"`
	Node                string                  `uri:"-" query:"-" json:"node,omitempty"`
	Controller          string                  `uri:"-" query:"-" json:"controller,omitempty"`
	ControllerKind      string                  `uri:"-" query:"-" json:"controllerKind,omitempty"`
	Pod                 string                  `uri:"-" query:"-" json:"pod,omitempty"`
	Container           string                  `uri:"-" query:"-" json:"container,omitempty"`
	Pvs                 map[string]types.PVCost `uri:"-" query:"-" json:"pvs,omitempty"`
	Labels              map[string]string       `uri:"-" query:"-" json:"labels,omitempty"`
	TotalCost           float64                 `uri:"-" query:"-" json:"totalCost,omitempty"`
	Currency            int                     `uri:"-" query:"-" json:"currency,omitempty"`
	CPUCost             float64                 `uri:"-" query:"-" json:"cpuCost,omitempty"`
	CPUCoreRequest      float64                 `uri:"-" query:"-" json:"cpuCoreRequest,omitempty"`
	GpuCost             float64                 `uri:"-" query:"-" json:"gpuCost,omitempty"`
	GpuCount            float64                 `uri:"-" query:"-" json:"gpuCount,omitempty"`
	RAMCost             float64                 `uri:"-" query:"-" json:"ramCost,omitempty"`
	RAMByteRequest      float64                 `uri:"-" query:"-" json:"rambyteRequest,omitempty"`
	PvCost              float64                 `uri:"-" query:"-" json:"pvCost,omitempty"`
	PvBytes             float64                 `uri:"-" query:"-" json:"pvBytes,omitempty"`
	LoadBalancerCost    float64                 `uri:"-" query:"-" json:"loadBalancerCost,omitempty"`
	CPUCoreUsageAverage float64                 `uri:"-" query:"-" json:"cpuCoreUsageAverage,omitempty"`
	CPUCoreUsageMax     float64                 `uri:"-" query:"-" json:"cpuCoreUsageMax,omitempty"`
	RAMByteUsageAverage float64                 `uri:"-" query:"-" json:"rambyteUsageAverage,omitempty"`
	RAMByteUsageMax     float64                 `uri:"-" query:"-" json:"rambyteUsageMax,omitempty"`
}

// Model returns the CostReport entity for creating,
// after validating.
func (crci *CostReportCreateInput) Model() *CostReport {
	if crci == nil {
		return nil
	}

	cr := &CostReport{
		Fingerprint:         crci.Fingerprint,
		Name:                crci.Name,
		Minutes:             crci.Minutes,
		EndTime:             crci.EndTime,
		StartTime:           crci.StartTime,
		ClusterName:         crci.ClusterName,
		Namespace:           crci.Namespace,
		Node:                crci.Node,
		Controller:          crci.Controller,
		ControllerKind:      crci.ControllerKind,
		Pod:                 crci.Pod,
		Container:           crci.Container,
		Pvs:                 crci.Pvs,
		Labels:              crci.Labels,
		TotalCost:           crci.TotalCost,
		Currency:            crci.Currency,
		CPUCost:             crci.CPUCost,
		CPUCoreRequest:      crci.CPUCoreRequest,
		GpuCost:             crci.GpuCost,
		GpuCount:            crci.GpuCount,
		RAMCost:             crci.RAMCost,
		RAMByteRequest:      crci.RAMByteRequest,
		PvCost:              crci.PvCost,
		PvBytes:             crci.PvBytes,
		LoadBalancerCost:    crci.LoadBalancerCost,
		CPUCoreUsageAverage: crci.CPUCoreUsageAverage,
		CPUCoreUsageMax:     crci.CPUCoreUsageMax,
		RAMByteUsageAverage: crci.RAMByteUsageAverage,
		RAMByteUsageMax:     crci.RAMByteUsageMax,
	}

	return cr
}

// Load checks the input.
// TODO(thxCode): rename to Validate after supporting hierarchical routes.
func (crci *CostReportCreateInput) Load() error {
	if crci == nil {
		return errors.New("nil receiver")
	}

	return crci.LoadWith(crci.inputConfig.Context, crci.inputConfig.ClientSet)
}

// LoadWith checks the input with the given context and client set.
// TODO(thxCode): rename to ValidateWith after supporting hierarchical routes.
func (crci *CostReportCreateInput) LoadWith(ctx context.Context, cs ClientSet) (err error) {
	if crci == nil {
		return errors.New("nil receiver")
	}

	return nil
}

// CostReportCreateInputs holds the creation input item of the CostReport entities.
type CostReportCreateInputsItem struct {
	Fingerprint         string                  `uri:"-" query:"-" json:"fingerprint"`
	Name                string                  `uri:"-" query:"-" json:"name"`
	Minutes             float64                 `uri:"-" query:"-" json:"minutes"`
	EndTime             time.Time               `uri:"-" query:"-" json:"endTime"`
	StartTime           time.Time               `uri:"-" query:"-" json:"startTime"`
	ClusterName         string                  `uri:"-" query:"-" json:"clusterName,omitempty"`
	Namespace           string                  `uri:"-" query:"-" json:"namespace,omitempty"`
	Node                string                  `uri:"-" query:"-" json:"node,omitempty"`
	Controller          string                  `uri:"-" query:"-" json:"controller,omitempty"`
	ControllerKind      string                  `uri:"-" query:"-" json:"controllerKind,omitempty"`
	Pod                 string                  `uri:"-" query:"-" json:"pod,omitempty"`
	Container           string                  `uri:"-" query:"-" json:"container,omitempty"`
	Pvs                 map[string]types.PVCost `uri:"-" query:"-" json:"pvs,omitempty"`
	Labels              map[string]string       `uri:"-" query:"-" json:"labels,omitempty"`
	TotalCost           float64                 `uri:"-" query:"-" json:"totalCost,omitempty"`
	Currency            int                     `uri:"-" query:"-" json:"currency,omitempty"`
	CPUCost             float64                 `uri:"-" query:"-" json:"cpuCost,omitempty"`
	CPUCoreRequest      float64                 `uri:"-" query:"-" json:"cpuCoreRequest,omitempty"`
	GpuCost             float64                 `uri:"-" query:"-" json:"gpuCost,omitempty"`
	GpuCount            float64                 `uri:"-" query:"-" json:"gpuCount,omitempty"`
	RAMCost             float64                 `uri:"-" query:"-" json:"ramCost,omitempty"`
	RAMByteRequest      float64                 `uri:"-" query:"-" json:"rambyteRequest,omitempty"`
	PvCost              float64                 `uri:"-" query:"-" json:"pvCost,omitempty"`
	PvBytes             float64                 `uri:"-" query:"-" json:"pvBytes,omitempty"`
	LoadBalancerCost    float64                 `uri:"-" query:"-" json:"loadBalancerCost,omitempty"`
	CPUCoreUsageAverage float64                 `uri:"-" query:"-" json:"cpuCoreUsageAverage,omitempty"`
	CPUCoreUsageMax     float64                 `uri:"-" query:"-" json:"cpuCoreUsageMax,omitempty"`
	RAMByteUsageAverage float64                 `uri:"-" query:"-" json:"rambyteUsageAverage,omitempty"`
	RAMByteUsageMax     float64                 `uri:"-" query:"-" json:"rambyteUsageMax,omitempty"`
}

// CostReportCreateInputs holds the creation input of the CostReport entities.
type CostReportCreateInputs struct {
	inputConfig `uri:"-" query:"-" json:"-"`

	Items []*CostReportCreateInputsItem `uri:"-" query:"-" json:"items"`
}

// Model returns the CostReport entities for creating,
// after validating.
func (crci *CostReportCreateInputs) Model() []*CostReport {
	if crci == nil || len(crci.Items) == 0 {
		return nil
	}

	crs := make([]*CostReport, len(crci.Items))

	for i := range crci.Items {
		cr := &CostReport{
			Fingerprint:         crci.Items[i].Fingerprint,
			Name:                crci.Items[i].Name,
			Minutes:             crci.Items[i].Minutes,
			EndTime:             crci.Items[i].EndTime,
			StartTime:           crci.Items[i].StartTime,
			ClusterName:         crci.Items[i].ClusterName,
			Namespace:           crci.Items[i].Namespace,
			Node:                crci.Items[i].Node,
			Controller:          crci.Items[i].Controller,
			ControllerKind:      crci.Items[i].ControllerKind,
			Pod:                 crci.Items[i].Pod,
			Container:           crci.Items[i].Container,
			Pvs:                 crci.Items[i].Pvs,
			Labels:              crci.Items[i].Labels,
			TotalCost:           crci.Items[i].TotalCost,
			Currency:            crci.Items[i].Currency,
			CPUCost:             crci.Items[i].CPUCost,
			CPUCoreRequest:      crci.Items[i].CPUCoreRequest,
			GpuCost:             crci.Items[i].GpuCost,
			GpuCount:            crci.Items[i].GpuCount,
			RAMCost:             crci.Items[i].RAMCost,
			RAMByteRequest:      crci.Items[i].RAMByteRequest,
			PvCost:              crci.Items[i].PvCost,
			PvBytes:             crci.Items[i].PvBytes,
			LoadBalancerCost:    crci.Items[i].LoadBalancerCost,
			CPUCoreUsageAverage: crci.Items[i].CPUCoreUsageAverage,
			CPUCoreUsageMax:     crci.Items[i].CPUCoreUsageMax,
			RAMByteUsageAverage: crci.Items[i].RAMByteUsageAverage,
			RAMByteUsageMax:     crci.Items[i].RAMByteUsageMax,
		}

		crs[i] = cr
	}

	return crs
}

// Load checks the input.
// TODO(thxCode): rename to Validate after supporting hierarchical routes.
func (crci *CostReportCreateInputs) Load() error {
	if crci == nil {
		return errors.New("nil receiver")
	}

	return crci.LoadWith(crci.inputConfig.Context, crci.inputConfig.ClientSet)
}

// LoadWith checks the input with the given context and client set.
// TODO(thxCode): rename to ValidateWith after supporting hierarchical routes.
func (crci *CostReportCreateInputs) LoadWith(ctx context.Context, cs ClientSet) (err error) {
	if crci == nil {
		return errors.New("nil receiver")
	}

	if len(crci.Items) == 0 {
		return errors.New("empty items")
	}

	return nil
}

// CostReportDeleteInput holds the deletion input of the CostReport entity.
type CostReportDeleteInput = CostReportQueryInput

// CostReportDeleteInputs holds the deletion input item of the CostReport entities.
type CostReportDeleteInputsItem struct {
	ID int `uri:"-" query:"-" json:"id"`
}

// CostReportDeleteInputs holds the deletion input of the CostReport entities.
type CostReportDeleteInputs struct {
	inputConfig `uri:"-" query:"-" json:"-"`

	Items []*CostReportDeleteInputsItem `uri:"-" query:"-" json:"items"`
}

// Model returns the CostReport entities for deleting,
// after validating.
func (crdi *CostReportDeleteInputs) Model() []*CostReport {
	if crdi == nil || len(crdi.Items) == 0 {
		return nil
	}

	crs := make([]*CostReport, len(crdi.Items))
	for i := range crdi.Items {
		crs[i] = &CostReport{
			ID: crdi.Items[i].ID,
		}
	}
	return crs
}

// Load checks the input.
// TODO(thxCode): rename to Validate after supporting hierarchical routes.
func (crdi *CostReportDeleteInputs) Load() error {
	if crdi == nil {
		return errors.New("nil receiver")
	}

	return crdi.LoadWith(crdi.inputConfig.Context, crdi.inputConfig.ClientSet)
}

// LoadWith checks the input with the given context and client set.
// TODO(thxCode): rename to ValidateWith after supporting hierarchical routes.
func (crdi *CostReportDeleteInputs) LoadWith(ctx context.Context, cs ClientSet) (err error) {
	if crdi == nil {
		return errors.New("nil receiver")
	}

	if len(crdi.Items) == 0 {
		return errors.New("empty items")
	}

	q := cs.CostReports().Query()

	ids := make([]int, 0, len(crdi.Items))

	for i := range crdi.Items {
		if crdi.Items[i] == nil {
			return errors.New("nil item")
		}

		if crdi.Items[i].ID != 0 {
			ids = append(ids, crdi.Items[i].ID)
		} else {
			return errors.New("found item hasn't identify")
		}
	}

	idsLen := len(ids)

	idsCnt, err := q.Where(costreport.IDIn(ids...)).
		Count(ctx)
	if err != nil {
		return err
	}

	if idsCnt != idsLen {
		return errors.New("found unrecognized item")
	}

	return nil
}

// CostReportQueryInput holds the query input of the CostReport entity.
type CostReportQueryInput struct {
	inputConfig `uri:"-" query:"-" json:"-"`

	Refer *object.Refer `uri:"costreport,default=\"\"" query:"-" json:"-"`
	ID    int           `uri:"id" query:"-" json:"id"` // TODO(thxCode): remove the uri:"id" after supporting hierarchical routes.
}

// Model returns the CostReport entity for querying,
// after validating.
func (crqi *CostReportQueryInput) Model() *CostReport {
	if crqi == nil {
		return nil
	}

	return &CostReport{
		ID: crqi.ID,
	}
}

// Load checks the input.
// TODO(thxCode): rename to Validate after supporting hierarchical routes.
func (crqi *CostReportQueryInput) Load() error {
	if crqi == nil {
		return errors.New("nil receiver")
	}

	return crqi.LoadWith(crqi.inputConfig.Context, crqi.inputConfig.ClientSet)
}

// LoadWith checks the input with the given context and client set.
// TODO(thxCode): rename to ValidateWith after supporting hierarchical routes.
func (crqi *CostReportQueryInput) LoadWith(ctx context.Context, cs ClientSet) (err error) {
	if crqi == nil {
		return errors.New("nil receiver")
	}

	if crqi.Refer != nil && *crqi.Refer == "" {
		return nil
	}

	q := cs.CostReports().Query()

	if crqi.Refer != nil {
		if crqi.Refer.IsNumeric() {
			q.Where(
				costreport.ID(crqi.Refer.Int()))
		} else {
			return errors.New("invalid identify refer of costreport")
		}
	} else if crqi.ID != 0 {
		q.Where(
			costreport.ID(crqi.ID))
	} else {
		return errors.New("invalid identify of costreport")
	}

	crqi.ID, err = q.OnlyID(ctx)
	return err
}

// CostReportQueryInputs holds the query input of the CostReport entities.
type CostReportQueryInputs struct {
	inputConfig `uri:"-" query:"-" json:"-"`
}

// Load checks the input.
// TODO(thxCode): rename to Validate after supporting hierarchical routes.
func (crqi *CostReportQueryInputs) Load() error {
	if crqi == nil {
		return errors.New("nil receiver")
	}

	return crqi.LoadWith(crqi.inputConfig.Context, crqi.inputConfig.ClientSet)
}

// LoadWith checks the input with the given context and client set.
// TODO(thxCode): rename to ValidateWith after supporting hierarchical routes.
func (crqi *CostReportQueryInputs) LoadWith(ctx context.Context, cs ClientSet) (err error) {
	if crqi == nil {
		return errors.New("nil receiver")
	}

	return err
}

// CostReportUpdateInput holds the modification input of the CostReport entity.
type CostReportUpdateInput struct {
	CostReportQueryInput `uri:",inline" query:"-" json:",inline"`

	TotalCost           float64 `uri:"-" query:"-" json:"totalCost,omitempty"`
	Currency            int     `uri:"-" query:"-" json:"currency,omitempty"`
	CPUCost             float64 `uri:"-" query:"-" json:"cpuCost,omitempty"`
	GpuCost             float64 `uri:"-" query:"-" json:"gpuCost,omitempty"`
	RAMCost             float64 `uri:"-" query:"-" json:"ramCost,omitempty"`
	PvCost              float64 `uri:"-" query:"-" json:"pvCost,omitempty"`
	PvBytes             float64 `uri:"-" query:"-" json:"pvBytes,omitempty"`
	LoadBalancerCost    float64 `uri:"-" query:"-" json:"loadBalancerCost,omitempty"`
	CPUCoreUsageAverage float64 `uri:"-" query:"-" json:"cpuCoreUsageAverage,omitempty"`
	CPUCoreUsageMax     float64 `uri:"-" query:"-" json:"cpuCoreUsageMax,omitempty"`
	RAMByteUsageAverage float64 `uri:"-" query:"-" json:"rambyteUsageAverage,omitempty"`
	RAMByteUsageMax     float64 `uri:"-" query:"-" json:"rambyteUsageMax,omitempty"`
}

// Model returns the CostReport entity for modifying,
// after validating.
func (crui *CostReportUpdateInput) Model() *CostReport {
	if crui == nil {
		return nil
	}

	cr := &CostReport{
		ID:                  crui.ID,
		TotalCost:           crui.TotalCost,
		Currency:            crui.Currency,
		CPUCost:             crui.CPUCost,
		GpuCost:             crui.GpuCost,
		RAMCost:             crui.RAMCost,
		PvCost:              crui.PvCost,
		PvBytes:             crui.PvBytes,
		LoadBalancerCost:    crui.LoadBalancerCost,
		CPUCoreUsageAverage: crui.CPUCoreUsageAverage,
		CPUCoreUsageMax:     crui.CPUCoreUsageMax,
		RAMByteUsageAverage: crui.RAMByteUsageAverage,
		RAMByteUsageMax:     crui.RAMByteUsageMax,
	}

	return cr
}

// CostReportUpdateInputs holds the modification input item of the CostReport entities.
type CostReportUpdateInputsItem struct {
	ID int `uri:"-" query:"-" json:"id"`

	TotalCost           float64 `uri:"-" query:"-" json:"totalCost,omitempty"`
	Currency            int     `uri:"-" query:"-" json:"currency,omitempty"`
	CPUCost             float64 `uri:"-" query:"-" json:"cpuCost,omitempty"`
	GpuCost             float64 `uri:"-" query:"-" json:"gpuCost,omitempty"`
	RAMCost             float64 `uri:"-" query:"-" json:"ramCost,omitempty"`
	PvCost              float64 `uri:"-" query:"-" json:"pvCost,omitempty"`
	PvBytes             float64 `uri:"-" query:"-" json:"pvBytes,omitempty"`
	LoadBalancerCost    float64 `uri:"-" query:"-" json:"loadBalancerCost,omitempty"`
	CPUCoreUsageAverage float64 `uri:"-" query:"-" json:"cpuCoreUsageAverage,omitempty"`
	CPUCoreUsageMax     float64 `uri:"-" query:"-" json:"cpuCoreUsageMax,omitempty"`
	RAMByteUsageAverage float64 `uri:"-" query:"-" json:"rambyteUsageAverage,omitempty"`
	RAMByteUsageMax     float64 `uri:"-" query:"-" json:"rambyteUsageMax,omitempty"`
}

// CostReportUpdateInputs holds the modification input of the CostReport entities.
type CostReportUpdateInputs struct {
	inputConfig `uri:"-" query:"-" json:"-"`

	Items []*CostReportUpdateInputsItem `uri:"-" query:"-" json:"items"`
}

// Model returns the CostReport entities for modifying,
// after validating.
func (crui *CostReportUpdateInputs) Model() []*CostReport {
	if crui == nil || len(crui.Items) == 0 {
		return nil
	}

	crs := make([]*CostReport, len(crui.Items))

	for i := range crui.Items {
		cr := &CostReport{
			ID:                  crui.Items[i].ID,
			TotalCost:           crui.Items[i].TotalCost,
			Currency:            crui.Items[i].Currency,
			CPUCost:             crui.Items[i].CPUCost,
			GpuCost:             crui.Items[i].GpuCost,
			RAMCost:             crui.Items[i].RAMCost,
			PvCost:              crui.Items[i].PvCost,
			PvBytes:             crui.Items[i].PvBytes,
			LoadBalancerCost:    crui.Items[i].LoadBalancerCost,
			CPUCoreUsageAverage: crui.Items[i].CPUCoreUsageAverage,
			CPUCoreUsageMax:     crui.Items[i].CPUCoreUsageMax,
			RAMByteUsageAverage: crui.Items[i].RAMByteUsageAverage,
			RAMByteUsageMax:     crui.Items[i].RAMByteUsageMax,
		}

		crs[i] = cr
	}

	return crs
}

// Load checks the input.
// TODO(thxCode): rename to Validate after supporting hierarchical routes.
func (crui *CostReportUpdateInputs) Load() error {
	if crui == nil {
		return errors.New("nil receiver")
	}

	return crui.LoadWith(crui.inputConfig.Context, crui.inputConfig.ClientSet)
}

// LoadWith checks the input with the given context and client set.
// TODO(thxCode): rename to ValidateWith after supporting hierarchical routes.
func (crui *CostReportUpdateInputs) LoadWith(ctx context.Context, cs ClientSet) (err error) {
	if crui == nil {
		return errors.New("nil receiver")
	}

	if len(crui.Items) == 0 {
		return errors.New("empty items")
	}

	q := cs.CostReports().Query()

	ids := make([]int, 0, len(crui.Items))

	for i := range crui.Items {
		if crui.Items[i] == nil {
			return errors.New("nil item")
		}

		if crui.Items[i].ID != 0 {
			ids = append(ids, crui.Items[i].ID)
		} else {
			return errors.New("found item hasn't identify")
		}
	}

	idsLen := len(ids)

	idsCnt, err := q.Where(costreport.IDIn(ids...)).
		Count(ctx)
	if err != nil {
		return err
	}

	if idsCnt != idsLen {
		return errors.New("found unrecognized item")
	}

	return nil
}

// CostReportOutput holds the output of the CostReport entity.
type CostReportOutput struct {
	ID                  int                     `json:"id,omitempty"`
	StartTime           time.Time               `json:"startTime,omitempty"`
	EndTime             time.Time               `json:"endTime,omitempty"`
	Minutes             float64                 `json:"minutes,omitempty"`
	Name                string                  `json:"name,omitempty"`
	Fingerprint         string                  `json:"fingerprint,omitempty"`
	ClusterName         string                  `json:"clusterName,omitempty"`
	Namespace           string                  `json:"namespace,omitempty"`
	Node                string                  `json:"node,omitempty"`
	Controller          string                  `json:"controller,omitempty"`
	ControllerKind      string                  `json:"controllerKind,omitempty"`
	Pod                 string                  `json:"pod,omitempty"`
	Container           string                  `json:"container,omitempty"`
	Pvs                 map[string]types.PVCost `json:"pvs,omitempty"`
	Labels              map[string]string       `json:"labels,omitempty"`
	TotalCost           float64                 `json:"totalCost,omitempty"`
	Currency            int                     `json:"currency,omitempty"`
	CPUCost             float64                 `json:"cpuCost,omitempty"`
	CPUCoreRequest      float64                 `json:"cpuCoreRequest,omitempty"`
	GpuCost             float64                 `json:"gpuCost,omitempty"`
	GpuCount            float64                 `json:"gpuCount,omitempty"`
	RAMCost             float64                 `json:"ramCost,omitempty"`
	RAMByteRequest      float64                 `json:"rambyteRequest,omitempty"`
	PvCost              float64                 `json:"pvCost,omitempty"`
	PvBytes             float64                 `json:"pvBytes,omitempty"`
	LoadBalancerCost    float64                 `json:"loadBalancerCost,omitempty"`
	CPUCoreUsageAverage float64                 `json:"cpuCoreUsageAverage,omitempty"`
	CPUCoreUsageMax     float64                 `json:"cpuCoreUsageMax,omitempty"`
	RAMByteUsageAverage float64                 `json:"rambyteUsageAverage,omitempty"`
	RAMByteUsageMax     float64                 `json:"rambyteUsageMax,omitempty"`
}

// View returns the output of CostReport.
func (cr *CostReport) View() *CostReportOutput {
	return ExposeCostReport(cr)
}

// View returns the output of CostReports.
func (crs CostReports) View() []*CostReportOutput {
	return ExposeCostReports(crs)
}

// ExposeCostReport converts the CostReport to CostReportOutput.
func ExposeCostReport(cr *CostReport) *CostReportOutput {
	if cr == nil {
		return nil
	}

	cro := &CostReportOutput{
		ID:                  cr.ID,
		StartTime:           cr.StartTime,
		EndTime:             cr.EndTime,
		Minutes:             cr.Minutes,
		Name:                cr.Name,
		Fingerprint:         cr.Fingerprint,
		ClusterName:         cr.ClusterName,
		Namespace:           cr.Namespace,
		Node:                cr.Node,
		Controller:          cr.Controller,
		ControllerKind:      cr.ControllerKind,
		Pod:                 cr.Pod,
		Container:           cr.Container,
		Pvs:                 cr.Pvs,
		Labels:              cr.Labels,
		TotalCost:           cr.TotalCost,
		Currency:            cr.Currency,
		CPUCost:             cr.CPUCost,
		CPUCoreRequest:      cr.CPUCoreRequest,
		GpuCost:             cr.GpuCost,
		GpuCount:            cr.GpuCount,
		RAMCost:             cr.RAMCost,
		RAMByteRequest:      cr.RAMByteRequest,
		PvCost:              cr.PvCost,
		PvBytes:             cr.PvBytes,
		LoadBalancerCost:    cr.LoadBalancerCost,
		CPUCoreUsageAverage: cr.CPUCoreUsageAverage,
		CPUCoreUsageMax:     cr.CPUCoreUsageMax,
		RAMByteUsageAverage: cr.RAMByteUsageAverage,
		RAMByteUsageMax:     cr.RAMByteUsageMax,
	}

	return cro
}

// ExposeCostReports converts the CostReport slice to CostReportOutput pointer slice.
func ExposeCostReports(crs []*CostReport) []*CostReportOutput {
	if len(crs) == 0 {
		return nil
	}

	cros := make([]*CostReportOutput, len(crs))
	for i := range crs {
		cros[i] = ExposeCostReport(crs[i])
	}
	return cros
}
