// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus". DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"time"

	"github.com/seal-io/walrus/pkg/dao/model/resourcerun"
	"github.com/seal-io/walrus/pkg/dao/schema/intercept"
	"github.com/seal-io/walrus/pkg/dao/types"
	"github.com/seal-io/walrus/pkg/dao/types/crypto"
	"github.com/seal-io/walrus/pkg/dao/types/object"
	"github.com/seal-io/walrus/pkg/dao/types/property"
	"github.com/seal-io/walrus/pkg/dao/types/status"
	"github.com/seal-io/walrus/utils/json"
)

// ResourceRunCreateInput holds the creation input of the ResourceRun entity,
// please tags with `path:",inline" json:",inline"` if embedding.
type ResourceRunCreateInput struct {
	inputConfig `path:"-" query:"-" json:"-"`

	// Project indicates to create ResourceRun entity MUST under the Project route.
	Project *ProjectQueryInput `path:",inline" query:"-" json:"-"`
	// Environment indicates to create ResourceRun entity MUST under the Environment route.
	Environment *EnvironmentQueryInput `path:",inline" query:"-" json:"-"`
	// Resource indicates to create ResourceRun entity MUST under the Resource route.
	Resource *ResourceQueryInput `path:",inline" query:"-" json:"-"`

	// Input configs of the run.
	InputConfigs map[string][]uint8 `path:"-" query:"-" json:"inputConfigs"`
	// ID of the template.
	TemplateID object.ID `path:"-" query:"-" json:"templateID"`
	// Version of the template.
	TemplateVersion string `path:"-" query:"-" json:"templateVersion"`
	// Name of the template.
	TemplateName string `path:"-" query:"-" json:"templateName"`
	// Attributes to configure the template.
	Attributes property.Values `path:"-" query:"-" json:"attributes,omitempty"`
	// Computed attributes generated from attributes and schemas.
	ComputedAttributes property.Values `path:"-" query:"-" json:"computedAttributes,omitempty"`
	// Variables of the run.
	Variables crypto.Map[string, string] `path:"-" query:"-" json:"variables,omitempty"`
	// Type of deployer.
	DeployerType string `path:"-" query:"-" json:"deployerType,omitempty"`
	// Duration in seconds of the run deploying.
	Duration int `path:"-" query:"-" json:"duration,omitempty"`
	// Previous provider requirement of the run.
	PreviousRequiredProviders []types.ProviderRequirement `path:"-" query:"-" json:"previousRequiredProviders,omitempty"`
	// Record of the run plan.
	PlanRecord string `path:"-" query:"-" json:"planRecord,omitempty"`
	// Record of the run.
	Record string `path:"-" query:"-" json:"record,omitempty"`
	// Change comment of the run.
	ChangeComment string `path:"-" query:"-" json:"changeComment,omitempty"`
	// If the run is preview.
	Preview bool `path:"-" query:"-" json:"preview,omitempty"`
	// Labels holds the value of the "labels" field.
	Labels map[string]string `path:"-" query:"-" json:"labels,omitempty"`
	// Changes of the resource components.
	ComponentChanges []*types.ResourceComponentChange `path:"-" query:"-" json:"componentChanges,omitempty"`
	// Change summary of the resource.
	ComponentChangeSummary types.ResourceComponentChangeSummary `path:"-" query:"-" json:"componentChangeSummary,omitempty"`
}

// Model returns the ResourceRun entity for creating,
// after validating.
func (rrci *ResourceRunCreateInput) Model() *ResourceRun {
	if rrci == nil {
		return nil
	}

	_rr := &ResourceRun{
		InputConfigs:              rrci.InputConfigs,
		TemplateID:                rrci.TemplateID,
		TemplateVersion:           rrci.TemplateVersion,
		TemplateName:              rrci.TemplateName,
		Attributes:                rrci.Attributes,
		ComputedAttributes:        rrci.ComputedAttributes,
		Variables:                 rrci.Variables,
		DeployerType:              rrci.DeployerType,
		Duration:                  rrci.Duration,
		PreviousRequiredProviders: rrci.PreviousRequiredProviders,
		PlanRecord:                rrci.PlanRecord,
		Record:                    rrci.Record,
		ChangeComment:             rrci.ChangeComment,
		Preview:                   rrci.Preview,
		Labels:                    rrci.Labels,
		ComponentChanges:          rrci.ComponentChanges,
		ComponentChangeSummary:    rrci.ComponentChangeSummary,
	}

	if rrci.Project != nil {
		_rr.ProjectID = rrci.Project.ID
	}
	if rrci.Environment != nil {
		_rr.EnvironmentID = rrci.Environment.ID
	}
	if rrci.Resource != nil {
		_rr.ResourceID = rrci.Resource.ID
	}

	return _rr
}

// Validate checks the ResourceRunCreateInput entity.
func (rrci *ResourceRunCreateInput) Validate() error {
	if rrci == nil {
		return errors.New("nil receiver")
	}

	return rrci.ValidateWith(rrci.inputConfig.Context, rrci.inputConfig.Client, nil)
}

// ValidateWith checks the ResourceRunCreateInput entity with the given context and client set.
func (rrci *ResourceRunCreateInput) ValidateWith(ctx context.Context, cs ClientSet, cache map[string]any) error {
	if rrci == nil {
		return errors.New("nil receiver")
	}

	if cache == nil {
		cache = map[string]any{}
	}

	// Validate when creating under the Project route.
	if rrci.Project != nil {
		if err := rrci.Project.ValidateWith(ctx, cs, cache); err != nil {
			return err
		}
	}
	// Validate when creating under the Environment route.
	if rrci.Environment != nil {
		if err := rrci.Environment.ValidateWith(ctx, cs, cache); err != nil {
			return err
		}
	}
	// Validate when creating under the Resource route.
	if rrci.Resource != nil {
		if err := rrci.Resource.ValidateWith(ctx, cs, cache); err != nil {
			return err
		}
	}

	return nil
}

// ResourceRunCreateInputs holds the creation input item of the ResourceRun entities.
type ResourceRunCreateInputsItem struct {
	// Input configs of the run.
	InputConfigs map[string][]uint8 `path:"-" query:"-" json:"inputConfigs"`
	// ID of the template.
	TemplateID object.ID `path:"-" query:"-" json:"templateID"`
	// Version of the template.
	TemplateVersion string `path:"-" query:"-" json:"templateVersion"`
	// Name of the template.
	TemplateName string `path:"-" query:"-" json:"templateName"`
	// Attributes to configure the template.
	Attributes property.Values `path:"-" query:"-" json:"attributes,omitempty"`
	// Computed attributes generated from attributes and schemas.
	ComputedAttributes property.Values `path:"-" query:"-" json:"computedAttributes,omitempty"`
	// Variables of the run.
	Variables crypto.Map[string, string] `path:"-" query:"-" json:"variables,omitempty"`
	// Type of deployer.
	DeployerType string `path:"-" query:"-" json:"deployerType,omitempty"`
	// Duration in seconds of the run deploying.
	Duration int `path:"-" query:"-" json:"duration,omitempty"`
	// Previous provider requirement of the run.
	PreviousRequiredProviders []types.ProviderRequirement `path:"-" query:"-" json:"previousRequiredProviders,omitempty"`
	// Record of the run plan.
	PlanRecord string `path:"-" query:"-" json:"planRecord,omitempty"`
	// Record of the run.
	Record string `path:"-" query:"-" json:"record,omitempty"`
	// Change comment of the run.
	ChangeComment string `path:"-" query:"-" json:"changeComment,omitempty"`
	// If the run is preview.
	Preview bool `path:"-" query:"-" json:"preview,omitempty"`
	// Labels holds the value of the "labels" field.
	Labels map[string]string `path:"-" query:"-" json:"labels,omitempty"`
	// Changes of the resource components.
	ComponentChanges []*types.ResourceComponentChange `path:"-" query:"-" json:"componentChanges,omitempty"`
	// Change summary of the resource.
	ComponentChangeSummary types.ResourceComponentChangeSummary `path:"-" query:"-" json:"componentChangeSummary,omitempty"`
}

// ValidateWith checks the ResourceRunCreateInputsItem entity with the given context and client set.
func (rrci *ResourceRunCreateInputsItem) ValidateWith(ctx context.Context, cs ClientSet, cache map[string]any) error {
	if rrci == nil {
		return errors.New("nil receiver")
	}

	if cache == nil {
		cache = map[string]any{}
	}

	return nil
}

// ResourceRunCreateInputs holds the creation input of the ResourceRun entities,
// please tags with `path:",inline" json:",inline"` if embedding.
type ResourceRunCreateInputs struct {
	inputConfig `path:"-" query:"-" json:"-"`

	// Project indicates to create ResourceRun entity MUST under the Project route.
	Project *ProjectQueryInput `path:",inline" query:"-" json:"-"`
	// Environment indicates to create ResourceRun entity MUST under the Environment route.
	Environment *EnvironmentQueryInput `path:",inline" query:"-" json:"-"`
	// Resource indicates to create ResourceRun entity MUST under the Resource route.
	Resource *ResourceQueryInput `path:",inline" query:"-" json:"-"`

	// Items holds the entities to create, which MUST not be empty.
	Items []*ResourceRunCreateInputsItem `path:"-" query:"-" json:"items"`
}

// Model returns the ResourceRun entities for creating,
// after validating.
func (rrci *ResourceRunCreateInputs) Model() []*ResourceRun {
	if rrci == nil || len(rrci.Items) == 0 {
		return nil
	}

	_rrs := make([]*ResourceRun, len(rrci.Items))

	for i := range rrci.Items {
		_rr := &ResourceRun{
			InputConfigs:              rrci.Items[i].InputConfigs,
			TemplateID:                rrci.Items[i].TemplateID,
			TemplateVersion:           rrci.Items[i].TemplateVersion,
			TemplateName:              rrci.Items[i].TemplateName,
			Attributes:                rrci.Items[i].Attributes,
			ComputedAttributes:        rrci.Items[i].ComputedAttributes,
			Variables:                 rrci.Items[i].Variables,
			DeployerType:              rrci.Items[i].DeployerType,
			Duration:                  rrci.Items[i].Duration,
			PreviousRequiredProviders: rrci.Items[i].PreviousRequiredProviders,
			PlanRecord:                rrci.Items[i].PlanRecord,
			Record:                    rrci.Items[i].Record,
			ChangeComment:             rrci.Items[i].ChangeComment,
			Preview:                   rrci.Items[i].Preview,
			Labels:                    rrci.Items[i].Labels,
			ComponentChanges:          rrci.Items[i].ComponentChanges,
			ComponentChangeSummary:    rrci.Items[i].ComponentChangeSummary,
		}

		if rrci.Project != nil {
			_rr.ProjectID = rrci.Project.ID
		}
		if rrci.Environment != nil {
			_rr.EnvironmentID = rrci.Environment.ID
		}
		if rrci.Resource != nil {
			_rr.ResourceID = rrci.Resource.ID
		}

		_rrs[i] = _rr
	}

	return _rrs
}

// Validate checks the ResourceRunCreateInputs entity .
func (rrci *ResourceRunCreateInputs) Validate() error {
	if rrci == nil {
		return errors.New("nil receiver")
	}

	return rrci.ValidateWith(rrci.inputConfig.Context, rrci.inputConfig.Client, nil)
}

// ValidateWith checks the ResourceRunCreateInputs entity with the given context and client set.
func (rrci *ResourceRunCreateInputs) ValidateWith(ctx context.Context, cs ClientSet, cache map[string]any) error {
	if rrci == nil {
		return errors.New("nil receiver")
	}

	if len(rrci.Items) == 0 {
		return errors.New("empty items")
	}

	if cache == nil {
		cache = map[string]any{}
	}

	// Validate when creating under the Project route.
	if rrci.Project != nil {
		if err := rrci.Project.ValidateWith(ctx, cs, cache); err != nil {
			if !IsBlankResourceReferError(err) {
				return err
			} else {
				rrci.Project = nil
			}
		}
	}
	// Validate when creating under the Environment route.
	if rrci.Environment != nil {
		if err := rrci.Environment.ValidateWith(ctx, cs, cache); err != nil {
			if !IsBlankResourceReferError(err) {
				return err
			} else {
				rrci.Environment = nil
			}
		}
	}
	// Validate when creating under the Resource route.
	if rrci.Resource != nil {
		if err := rrci.Resource.ValidateWith(ctx, cs, cache); err != nil {
			if !IsBlankResourceReferError(err) {
				return err
			} else {
				rrci.Resource = nil
			}
		}
	}

	for i := range rrci.Items {
		if rrci.Items[i] == nil {
			continue
		}

		if err := rrci.Items[i].ValidateWith(ctx, cs, cache); err != nil {
			return err
		}
	}

	return nil
}

// ResourceRunDeleteInput holds the deletion input of the ResourceRun entity,
// please tags with `path:",inline"` if embedding.
type ResourceRunDeleteInput struct {
	ResourceRunQueryInput `path:",inline"`
}

// ResourceRunDeleteInputs holds the deletion input item of the ResourceRun entities.
type ResourceRunDeleteInputsItem struct {
	// ID of the ResourceRun entity.
	ID object.ID `path:"-" query:"-" json:"id"`
}

// ResourceRunDeleteInputs holds the deletion input of the ResourceRun entities,
// please tags with `path:",inline" json:",inline"` if embedding.
type ResourceRunDeleteInputs struct {
	inputConfig `path:"-" query:"-" json:"-"`

	// Project indicates to delete ResourceRun entity MUST under the Project route.
	Project *ProjectQueryInput `path:",inline" query:"-" json:"-"`
	// Environment indicates to delete ResourceRun entity MUST under the Environment route.
	Environment *EnvironmentQueryInput `path:",inline" query:"-" json:"-"`
	// Resource indicates to delete ResourceRun entity MUST under the Resource route.
	Resource *ResourceQueryInput `path:",inline" query:"-" json:"-"`

	// Items holds the entities to create, which MUST not be empty.
	Items []*ResourceRunDeleteInputsItem `path:"-" query:"-" json:"items"`
}

// Model returns the ResourceRun entities for deleting,
// after validating.
func (rrdi *ResourceRunDeleteInputs) Model() []*ResourceRun {
	if rrdi == nil || len(rrdi.Items) == 0 {
		return nil
	}

	_rrs := make([]*ResourceRun, len(rrdi.Items))
	for i := range rrdi.Items {
		_rrs[i] = &ResourceRun{
			ID: rrdi.Items[i].ID,
		}
	}
	return _rrs
}

// IDs returns the ID list of the ResourceRun entities for deleting,
// after validating.
func (rrdi *ResourceRunDeleteInputs) IDs() []object.ID {
	if rrdi == nil || len(rrdi.Items) == 0 {
		return nil
	}

	ids := make([]object.ID, len(rrdi.Items))
	for i := range rrdi.Items {
		ids[i] = rrdi.Items[i].ID
	}
	return ids
}

// Validate checks the ResourceRunDeleteInputs entity.
func (rrdi *ResourceRunDeleteInputs) Validate() error {
	if rrdi == nil {
		return errors.New("nil receiver")
	}

	return rrdi.ValidateWith(rrdi.inputConfig.Context, rrdi.inputConfig.Client, nil)
}

// ValidateWith checks the ResourceRunDeleteInputs entity with the given context and client set.
func (rrdi *ResourceRunDeleteInputs) ValidateWith(ctx context.Context, cs ClientSet, cache map[string]any) error {
	if rrdi == nil {
		return errors.New("nil receiver")
	}

	if len(rrdi.Items) == 0 {
		return errors.New("empty items")
	}

	if cache == nil {
		cache = map[string]any{}
	}

	q := cs.ResourceRuns().Query()

	// Validate when deleting under the Project route.
	if rrdi.Project != nil {
		if err := rrdi.Project.ValidateWith(ctx, cs, cache); err != nil {
			return err
		} else {
			ctx = valueContext(ctx, intercept.WithProjectInterceptor)
			q.Where(
				resourcerun.ProjectID(rrdi.Project.ID))
		}
	}

	// Validate when deleting under the Environment route.
	if rrdi.Environment != nil {
		if err := rrdi.Environment.ValidateWith(ctx, cs, cache); err != nil {
			return err
		} else {
			q.Where(
				resourcerun.EnvironmentID(rrdi.Environment.ID))
		}
	}

	// Validate when deleting under the Resource route.
	if rrdi.Resource != nil {
		if err := rrdi.Resource.ValidateWith(ctx, cs, cache); err != nil {
			return err
		} else {
			q.Where(
				resourcerun.ResourceID(rrdi.Resource.ID))
		}
	}

	ids := make([]object.ID, 0, len(rrdi.Items))

	for i := range rrdi.Items {
		if rrdi.Items[i] == nil {
			return errors.New("nil item")
		}

		if rrdi.Items[i].ID != "" {
			ids = append(ids, rrdi.Items[i].ID)
		} else {
			return errors.New("found item hasn't identify")
		}
	}

	if len(ids) != cap(ids) {
		return errors.New("found unrecognized item")
	}

	idsCnt, err := q.Where(resourcerun.IDIn(ids...)).
		Count(ctx)
	if err != nil {
		return err
	}

	if idsCnt != cap(ids) {
		return errors.New("found unrecognized item")
	}

	return nil
}

// ResourceRunPatchInput holds the patch input of the ResourceRun entity,
// please tags with `path:",inline" json:",inline"` if embedding.
type ResourceRunPatchInput struct {
	ResourceRunQueryInput `path:",inline" query:"-" json:"-"`

	// CreateTime holds the value of the "create_time" field.
	CreateTime *time.Time `path:"-" query:"-" json:"createTime,omitempty"`
	// Status holds the value of the "status" field.
	Status status.Status `path:"-" query:"-" json:"status,omitempty"`
	// Name of the template.
	TemplateName string `path:"-" query:"-" json:"templateName,omitempty"`
	// Version of the template.
	TemplateVersion string `path:"-" query:"-" json:"templateVersion,omitempty"`
	// ID of the template.
	TemplateID object.ID `path:"-" query:"-" json:"templateID,omitempty"`
	// Attributes to configure the template.
	Attributes property.Values `path:"-" query:"-" json:"attributes,omitempty"`
	// Computed attributes generated from attributes and schemas.
	ComputedAttributes property.Values `path:"-" query:"-" json:"computedAttributes,omitempty"`
	// Variables of the run.
	Variables crypto.Map[string, string] `path:"-" query:"-" json:"variables,omitempty"`
	// Input configs of the run.
	InputConfigs map[string][]uint8 `path:"-" query:"-" json:"inputConfigs,omitempty"`
	// Type of deployer.
	DeployerType string `path:"-" query:"-" json:"deployerType,omitempty"`
	// Duration in seconds of the run deploying.
	Duration int `path:"-" query:"-" json:"duration,omitempty"`
	// Previous provider requirement of the run.
	PreviousRequiredProviders []types.ProviderRequirement `path:"-" query:"-" json:"previousRequiredProviders,omitempty"`
	// Record of the run plan.
	PlanRecord string `path:"-" query:"-" json:"planRecord,omitempty"`
	// Record of the run.
	Record string `path:"-" query:"-" json:"record,omitempty"`
	// Change comment of the run.
	ChangeComment string `path:"-" query:"-" json:"changeComment,omitempty"`
	// User who created the run.
	CreatedBy string `path:"-" query:"-" json:"createdBy,omitempty"`
	// Type of the run.
	Type string `path:"-" query:"-" json:"type,omitempty"`
	// If the run is preview.
	Preview bool `path:"-" query:"-" json:"preview,omitempty"`
	// Annotations holds the value of the "annotations" field.
	Annotations map[string]string `path:"-" query:"-" json:"annotations,omitempty"`
	// Labels holds the value of the "labels" field.
	Labels map[string]string `path:"-" query:"-" json:"labels,omitempty"`
	// Changes of the resource components.
	ComponentChanges []*types.ResourceComponentChange `path:"-" query:"-" json:"componentChanges,omitempty"`
	// Change summary of the resource.
	ComponentChangeSummary types.ResourceComponentChangeSummary `path:"-" query:"-" json:"componentChangeSummary,omitempty"`

	patchedEntity *ResourceRun `path:"-" query:"-" json:"-"`
}

// PatchModel returns the ResourceRun partition entity for patching.
func (rrpi *ResourceRunPatchInput) PatchModel() *ResourceRun {
	if rrpi == nil {
		return nil
	}

	_rr := &ResourceRun{
		CreateTime:                rrpi.CreateTime,
		Status:                    rrpi.Status,
		TemplateName:              rrpi.TemplateName,
		TemplateVersion:           rrpi.TemplateVersion,
		TemplateID:                rrpi.TemplateID,
		Attributes:                rrpi.Attributes,
		ComputedAttributes:        rrpi.ComputedAttributes,
		Variables:                 rrpi.Variables,
		InputConfigs:              rrpi.InputConfigs,
		DeployerType:              rrpi.DeployerType,
		Duration:                  rrpi.Duration,
		PreviousRequiredProviders: rrpi.PreviousRequiredProviders,
		PlanRecord:                rrpi.PlanRecord,
		Record:                    rrpi.Record,
		ChangeComment:             rrpi.ChangeComment,
		CreatedBy:                 rrpi.CreatedBy,
		Type:                      rrpi.Type,
		Preview:                   rrpi.Preview,
		Annotations:               rrpi.Annotations,
		Labels:                    rrpi.Labels,
		ComponentChanges:          rrpi.ComponentChanges,
		ComponentChangeSummary:    rrpi.ComponentChangeSummary,
	}

	if rrpi.Project != nil {
		_rr.ProjectID = rrpi.Project.ID
	}
	if rrpi.Environment != nil {
		_rr.EnvironmentID = rrpi.Environment.ID
	}
	if rrpi.Resource != nil {
		_rr.ResourceID = rrpi.Resource.ID
	}

	return _rr
}

// Model returns the ResourceRun patched entity,
// after validating.
func (rrpi *ResourceRunPatchInput) Model() *ResourceRun {
	if rrpi == nil {
		return nil
	}

	return rrpi.patchedEntity
}

// Validate checks the ResourceRunPatchInput entity.
func (rrpi *ResourceRunPatchInput) Validate() error {
	if rrpi == nil {
		return errors.New("nil receiver")
	}

	return rrpi.ValidateWith(rrpi.inputConfig.Context, rrpi.inputConfig.Client, nil)
}

// ValidateWith checks the ResourceRunPatchInput entity with the given context and client set.
func (rrpi *ResourceRunPatchInput) ValidateWith(ctx context.Context, cs ClientSet, cache map[string]any) error {
	if cache == nil {
		cache = map[string]any{}
	}

	if err := rrpi.ResourceRunQueryInput.ValidateWith(ctx, cs, cache); err != nil {
		return err
	}

	q := cs.ResourceRuns().Query()

	// Validate when querying under the Project route.
	if rrpi.Project != nil {
		if err := rrpi.Project.ValidateWith(ctx, cs, cache); err != nil {
			return err
		} else {
			ctx = valueContext(ctx, intercept.WithProjectInterceptor)
			q.Where(
				resourcerun.ProjectID(rrpi.Project.ID))
		}
	}

	// Validate when querying under the Environment route.
	if rrpi.Environment != nil {
		if err := rrpi.Environment.ValidateWith(ctx, cs, cache); err != nil {
			return err
		} else {
			q.Where(
				resourcerun.EnvironmentID(rrpi.Environment.ID))
		}
	}

	// Validate when querying under the Resource route.
	if rrpi.Resource != nil {
		if err := rrpi.Resource.ValidateWith(ctx, cs, cache); err != nil {
			return err
		} else {
			q.Where(
				resourcerun.ResourceID(rrpi.Resource.ID))
		}
	}

	if rrpi.Refer != nil {
		if rrpi.Refer.IsID() {
			q.Where(
				resourcerun.ID(rrpi.Refer.ID()))
		} else {
			return errors.New("invalid identify refer of resourcerun")
		}
	} else if rrpi.ID != "" {
		q.Where(
			resourcerun.ID(rrpi.ID))
	} else {
		return errors.New("invalid identify of resourcerun")
	}

	q.Select(
		resourcerun.WithoutFields(
			resourcerun.FieldCreateTime,
			resourcerun.FieldStatus,
			resourcerun.FieldCreatedBy,
			resourcerun.FieldType,
			resourcerun.FieldAnnotations,
		)...,
	)

	var e *ResourceRun
	{
		// Get cache from previous validation.
		queryStmt, queryArgs := q.sqlQuery(setContextOp(ctx, q.ctx, "cache")).Query()
		ck := fmt.Sprintf("stmt=%v, args=%v", queryStmt, queryArgs)
		if cv, existed := cache[ck]; !existed {
			var err error
			e, err = q.Only(ctx)
			if err != nil {
				return err
			}

			// Set cache for other validation.
			cache[ck] = e
		} else {
			e = cv.(*ResourceRun)
		}
	}

	_pm := rrpi.PatchModel()

	_po, err := json.PatchObject(*e, *_pm)
	if err != nil {
		return err
	}

	_obj := _po.(*ResourceRun)

	if !reflect.DeepEqual(e.CreateTime, _obj.CreateTime) {
		return errors.New("field createTime is immutable")
	}
	if e.TemplateName != _obj.TemplateName {
		return errors.New("field templateName is immutable")
	}
	if e.TemplateID != _obj.TemplateID {
		return errors.New("field templateID is immutable")
	}

	rrpi.patchedEntity = _obj
	return nil
}

// ResourceRunQueryInput holds the query input of the ResourceRun entity,
// please tags with `path:",inline"` if embedding.
type ResourceRunQueryInput struct {
	inputConfig `path:"-" query:"-" json:"-"`

	// Project indicates to query ResourceRun entity MUST under the Project route.
	Project *ProjectQueryInput `path:",inline" query:"-" json:"project"`
	// Environment indicates to query ResourceRun entity MUST under the Environment route.
	Environment *EnvironmentQueryInput `path:",inline" query:"-" json:"environment"`
	// Resource indicates to query ResourceRun entity MUST under the Resource route.
	Resource *ResourceQueryInput `path:",inline" query:"-" json:"resource"`

	// Refer holds the route path reference of the ResourceRun entity.
	Refer *object.Refer `path:"resourcerun,default=" query:"-" json:"-"`
	// ID of the ResourceRun entity.
	ID object.ID `path:"-" query:"-" json:"id"`
}

// Model returns the ResourceRun entity for querying,
// after validating.
func (rrqi *ResourceRunQueryInput) Model() *ResourceRun {
	if rrqi == nil {
		return nil
	}

	return &ResourceRun{
		ID: rrqi.ID,
	}
}

// Validate checks the ResourceRunQueryInput entity.
func (rrqi *ResourceRunQueryInput) Validate() error {
	if rrqi == nil {
		return errors.New("nil receiver")
	}

	return rrqi.ValidateWith(rrqi.inputConfig.Context, rrqi.inputConfig.Client, nil)
}

// ValidateWith checks the ResourceRunQueryInput entity with the given context and client set.
func (rrqi *ResourceRunQueryInput) ValidateWith(ctx context.Context, cs ClientSet, cache map[string]any) error {
	if rrqi == nil {
		return errors.New("nil receiver")
	}

	if rrqi.Refer != nil && *rrqi.Refer == "" {
		return fmt.Errorf("model: %s : %w", resourcerun.Label, ErrBlankResourceRefer)
	}

	if cache == nil {
		cache = map[string]any{}
	}

	q := cs.ResourceRuns().Query()

	// Validate when querying under the Project route.
	if rrqi.Project != nil {
		if err := rrqi.Project.ValidateWith(ctx, cs, cache); err != nil {
			return err
		} else {
			ctx = valueContext(ctx, intercept.WithProjectInterceptor)
			q.Where(
				resourcerun.ProjectID(rrqi.Project.ID))
		}
	}

	// Validate when querying under the Environment route.
	if rrqi.Environment != nil {
		if err := rrqi.Environment.ValidateWith(ctx, cs, cache); err != nil {
			return err
		} else {
			q.Where(
				resourcerun.EnvironmentID(rrqi.Environment.ID))
		}
	}

	// Validate when querying under the Resource route.
	if rrqi.Resource != nil {
		if err := rrqi.Resource.ValidateWith(ctx, cs, cache); err != nil {
			return err
		} else {
			q.Where(
				resourcerun.ResourceID(rrqi.Resource.ID))
		}
	}

	if rrqi.Refer != nil {
		if rrqi.Refer.IsID() {
			q.Where(
				resourcerun.ID(rrqi.Refer.ID()))
		} else {
			return errors.New("invalid identify refer of resourcerun")
		}
	} else if rrqi.ID != "" {
		q.Where(
			resourcerun.ID(rrqi.ID))
	} else {
		return errors.New("invalid identify of resourcerun")
	}

	q.Select(
		resourcerun.FieldID,
	)

	var e *ResourceRun
	{
		// Get cache from previous validation.
		queryStmt, queryArgs := q.sqlQuery(setContextOp(ctx, q.ctx, "cache")).Query()
		ck := fmt.Sprintf("stmt=%v, args=%v", queryStmt, queryArgs)
		if cv, existed := cache[ck]; !existed {
			var err error
			e, err = q.Only(ctx)
			if err != nil {
				return err
			}

			// Set cache for other validation.
			cache[ck] = e
		} else {
			e = cv.(*ResourceRun)
		}
	}

	rrqi.ID = e.ID
	return nil
}

// ResourceRunQueryInputs holds the query input of the ResourceRun entities,
// please tags with `path:",inline" query:",inline"` if embedding.
type ResourceRunQueryInputs struct {
	inputConfig `path:"-" query:"-" json:"-"`

	// Project indicates to query ResourceRun entity MUST under the Project route.
	Project *ProjectQueryInput `path:",inline" query:"-" json:"-"`
	// Environment indicates to query ResourceRun entity MUST under the Environment route.
	Environment *EnvironmentQueryInput `path:",inline" query:"-" json:"-"`
	// Resource indicates to query ResourceRun entity MUST under the Resource route.
	Resource *ResourceQueryInput `path:",inline" query:"-" json:"-"`
}

// Validate checks the ResourceRunQueryInputs entity.
func (rrqi *ResourceRunQueryInputs) Validate() error {
	if rrqi == nil {
		return errors.New("nil receiver")
	}

	return rrqi.ValidateWith(rrqi.inputConfig.Context, rrqi.inputConfig.Client, nil)
}

// ValidateWith checks the ResourceRunQueryInputs entity with the given context and client set.
func (rrqi *ResourceRunQueryInputs) ValidateWith(ctx context.Context, cs ClientSet, cache map[string]any) error {
	if rrqi == nil {
		return errors.New("nil receiver")
	}

	if cache == nil {
		cache = map[string]any{}
	}

	// Validate when querying under the Project route.
	if rrqi.Project != nil {
		if err := rrqi.Project.ValidateWith(ctx, cs, cache); err != nil {
			return err
		}
	}

	// Validate when querying under the Environment route.
	if rrqi.Environment != nil {
		if err := rrqi.Environment.ValidateWith(ctx, cs, cache); err != nil {
			return err
		}
	}

	// Validate when querying under the Resource route.
	if rrqi.Resource != nil {
		if err := rrqi.Resource.ValidateWith(ctx, cs, cache); err != nil {
			return err
		}
	}

	return nil
}

// ResourceRunUpdateInput holds the modification input of the ResourceRun entity,
// please tags with `path:",inline" json:",inline"` if embedding.
type ResourceRunUpdateInput struct {
	ResourceRunQueryInput `path:",inline" query:"-" json:"-"`

	// Version of the template.
	TemplateVersion string `path:"-" query:"-" json:"templateVersion,omitempty"`
	// Attributes to configure the template.
	Attributes property.Values `path:"-" query:"-" json:"attributes,omitempty"`
	// Computed attributes generated from attributes and schemas.
	ComputedAttributes property.Values `path:"-" query:"-" json:"computedAttributes,omitempty"`
	// Variables of the run.
	Variables crypto.Map[string, string] `path:"-" query:"-" json:"variables,omitempty"`
	// Input configs of the run.
	InputConfigs map[string][]uint8 `path:"-" query:"-" json:"inputConfigs,omitempty"`
	// Type of deployer.
	DeployerType string `path:"-" query:"-" json:"deployerType,omitempty"`
	// Duration in seconds of the run deploying.
	Duration int `path:"-" query:"-" json:"duration,omitempty"`
	// Previous provider requirement of the run.
	PreviousRequiredProviders []types.ProviderRequirement `path:"-" query:"-" json:"previousRequiredProviders,omitempty"`
	// Record of the run plan.
	PlanRecord string `path:"-" query:"-" json:"planRecord,omitempty"`
	// Record of the run.
	Record string `path:"-" query:"-" json:"record,omitempty"`
	// Change comment of the run.
	ChangeComment string `path:"-" query:"-" json:"changeComment,omitempty"`
	// If the run is preview.
	Preview bool `path:"-" query:"-" json:"preview,omitempty"`
	// Labels holds the value of the "labels" field.
	Labels map[string]string `path:"-" query:"-" json:"labels,omitempty"`
	// Changes of the resource components.
	ComponentChanges []*types.ResourceComponentChange `path:"-" query:"-" json:"componentChanges,omitempty"`
	// Change summary of the resource.
	ComponentChangeSummary types.ResourceComponentChangeSummary `path:"-" query:"-" json:"componentChangeSummary,omitempty"`
}

// Model returns the ResourceRun entity for modifying,
// after validating.
func (rrui *ResourceRunUpdateInput) Model() *ResourceRun {
	if rrui == nil {
		return nil
	}

	_rr := &ResourceRun{
		ID:                        rrui.ID,
		TemplateVersion:           rrui.TemplateVersion,
		Attributes:                rrui.Attributes,
		ComputedAttributes:        rrui.ComputedAttributes,
		Variables:                 rrui.Variables,
		InputConfigs:              rrui.InputConfigs,
		DeployerType:              rrui.DeployerType,
		Duration:                  rrui.Duration,
		PreviousRequiredProviders: rrui.PreviousRequiredProviders,
		PlanRecord:                rrui.PlanRecord,
		Record:                    rrui.Record,
		ChangeComment:             rrui.ChangeComment,
		Preview:                   rrui.Preview,
		Labels:                    rrui.Labels,
		ComponentChanges:          rrui.ComponentChanges,
		ComponentChangeSummary:    rrui.ComponentChangeSummary,
	}

	return _rr
}

// Validate checks the ResourceRunUpdateInput entity.
func (rrui *ResourceRunUpdateInput) Validate() error {
	if rrui == nil {
		return errors.New("nil receiver")
	}

	return rrui.ValidateWith(rrui.inputConfig.Context, rrui.inputConfig.Client, nil)
}

// ValidateWith checks the ResourceRunUpdateInput entity with the given context and client set.
func (rrui *ResourceRunUpdateInput) ValidateWith(ctx context.Context, cs ClientSet, cache map[string]any) error {
	if cache == nil {
		cache = map[string]any{}
	}

	if err := rrui.ResourceRunQueryInput.ValidateWith(ctx, cs, cache); err != nil {
		return err
	}

	return nil
}

// ResourceRunUpdateInputs holds the modification input item of the ResourceRun entities.
type ResourceRunUpdateInputsItem struct {
	// ID of the ResourceRun entity.
	ID object.ID `path:"-" query:"-" json:"id"`

	// Version of the template.
	TemplateVersion string `path:"-" query:"-" json:"templateVersion"`
	// Attributes to configure the template.
	Attributes property.Values `path:"-" query:"-" json:"attributes,omitempty"`
	// Computed attributes generated from attributes and schemas.
	ComputedAttributes property.Values `path:"-" query:"-" json:"computedAttributes,omitempty"`
	// Variables of the run.
	Variables crypto.Map[string, string] `path:"-" query:"-" json:"variables"`
	// Input configs of the run.
	InputConfigs map[string][]uint8 `path:"-" query:"-" json:"inputConfigs"`
	// Type of deployer.
	DeployerType string `path:"-" query:"-" json:"deployerType"`
	// Duration in seconds of the run deploying.
	Duration int `path:"-" query:"-" json:"duration"`
	// Previous provider requirement of the run.
	PreviousRequiredProviders []types.ProviderRequirement `path:"-" query:"-" json:"previousRequiredProviders"`
	// Record of the run plan.
	PlanRecord string `path:"-" query:"-" json:"planRecord,omitempty"`
	// Record of the run.
	Record string `path:"-" query:"-" json:"record,omitempty"`
	// Change comment of the run.
	ChangeComment string `path:"-" query:"-" json:"changeComment,omitempty"`
	// If the run is preview.
	Preview bool `path:"-" query:"-" json:"preview"`
	// Labels holds the value of the "labels" field.
	Labels map[string]string `path:"-" query:"-" json:"labels,omitempty"`
	// Changes of the resource components.
	ComponentChanges []*types.ResourceComponentChange `path:"-" query:"-" json:"componentChanges,omitempty"`
	// Change summary of the resource.
	ComponentChangeSummary types.ResourceComponentChangeSummary `path:"-" query:"-" json:"componentChangeSummary,omitempty"`
}

// ValidateWith checks the ResourceRunUpdateInputsItem entity with the given context and client set.
func (rrui *ResourceRunUpdateInputsItem) ValidateWith(ctx context.Context, cs ClientSet, cache map[string]any) error {
	if rrui == nil {
		return errors.New("nil receiver")
	}

	if cache == nil {
		cache = map[string]any{}
	}

	return nil
}

// ResourceRunUpdateInputs holds the modification input of the ResourceRun entities,
// please tags with `path:",inline" json:",inline"` if embedding.
type ResourceRunUpdateInputs struct {
	inputConfig `path:"-" query:"-" json:"-"`

	// Project indicates to update ResourceRun entity MUST under the Project route.
	Project *ProjectQueryInput `path:",inline" query:"-" json:"-"`
	// Environment indicates to update ResourceRun entity MUST under the Environment route.
	Environment *EnvironmentQueryInput `path:",inline" query:"-" json:"-"`
	// Resource indicates to update ResourceRun entity MUST under the Resource route.
	Resource *ResourceQueryInput `path:",inline" query:"-" json:"-"`

	// Items holds the entities to create, which MUST not be empty.
	Items []*ResourceRunUpdateInputsItem `path:"-" query:"-" json:"items"`
}

// Model returns the ResourceRun entities for modifying,
// after validating.
func (rrui *ResourceRunUpdateInputs) Model() []*ResourceRun {
	if rrui == nil || len(rrui.Items) == 0 {
		return nil
	}

	_rrs := make([]*ResourceRun, len(rrui.Items))

	for i := range rrui.Items {
		_rr := &ResourceRun{
			ID:                        rrui.Items[i].ID,
			TemplateVersion:           rrui.Items[i].TemplateVersion,
			Attributes:                rrui.Items[i].Attributes,
			ComputedAttributes:        rrui.Items[i].ComputedAttributes,
			Variables:                 rrui.Items[i].Variables,
			InputConfigs:              rrui.Items[i].InputConfigs,
			DeployerType:              rrui.Items[i].DeployerType,
			Duration:                  rrui.Items[i].Duration,
			PreviousRequiredProviders: rrui.Items[i].PreviousRequiredProviders,
			PlanRecord:                rrui.Items[i].PlanRecord,
			Record:                    rrui.Items[i].Record,
			ChangeComment:             rrui.Items[i].ChangeComment,
			Preview:                   rrui.Items[i].Preview,
			Labels:                    rrui.Items[i].Labels,
			ComponentChanges:          rrui.Items[i].ComponentChanges,
			ComponentChangeSummary:    rrui.Items[i].ComponentChangeSummary,
		}

		_rrs[i] = _rr
	}

	return _rrs
}

// IDs returns the ID list of the ResourceRun entities for modifying,
// after validating.
func (rrui *ResourceRunUpdateInputs) IDs() []object.ID {
	if rrui == nil || len(rrui.Items) == 0 {
		return nil
	}

	ids := make([]object.ID, len(rrui.Items))
	for i := range rrui.Items {
		ids[i] = rrui.Items[i].ID
	}
	return ids
}

// Validate checks the ResourceRunUpdateInputs entity.
func (rrui *ResourceRunUpdateInputs) Validate() error {
	if rrui == nil {
		return errors.New("nil receiver")
	}

	return rrui.ValidateWith(rrui.inputConfig.Context, rrui.inputConfig.Client, nil)
}

// ValidateWith checks the ResourceRunUpdateInputs entity with the given context and client set.
func (rrui *ResourceRunUpdateInputs) ValidateWith(ctx context.Context, cs ClientSet, cache map[string]any) error {
	if rrui == nil {
		return errors.New("nil receiver")
	}

	if len(rrui.Items) == 0 {
		return errors.New("empty items")
	}

	if cache == nil {
		cache = map[string]any{}
	}

	q := cs.ResourceRuns().Query()

	// Validate when updating under the Project route.
	if rrui.Project != nil {
		if err := rrui.Project.ValidateWith(ctx, cs, cache); err != nil {
			return err
		} else {
			ctx = valueContext(ctx, intercept.WithProjectInterceptor)
			q.Where(
				resourcerun.ProjectID(rrui.Project.ID))
		}
	}

	// Validate when updating under the Environment route.
	if rrui.Environment != nil {
		if err := rrui.Environment.ValidateWith(ctx, cs, cache); err != nil {
			return err
		} else {
			q.Where(
				resourcerun.EnvironmentID(rrui.Environment.ID))
		}
	}

	// Validate when updating under the Resource route.
	if rrui.Resource != nil {
		if err := rrui.Resource.ValidateWith(ctx, cs, cache); err != nil {
			return err
		} else {
			q.Where(
				resourcerun.ResourceID(rrui.Resource.ID))
		}
	}

	ids := make([]object.ID, 0, len(rrui.Items))

	for i := range rrui.Items {
		if rrui.Items[i] == nil {
			return errors.New("nil item")
		}

		if rrui.Items[i].ID != "" {
			ids = append(ids, rrui.Items[i].ID)
		} else {
			return errors.New("found item hasn't identify")
		}
	}

	if len(ids) != cap(ids) {
		return errors.New("found unrecognized item")
	}

	idsCnt, err := q.Where(resourcerun.IDIn(ids...)).
		Count(ctx)
	if err != nil {
		return err
	}

	if idsCnt != cap(ids) {
		return errors.New("found unrecognized item")
	}

	for i := range rrui.Items {
		if err := rrui.Items[i].ValidateWith(ctx, cs, cache); err != nil {
			return err
		}
	}

	return nil
}

// ResourceRunOutput holds the output of the ResourceRun entity.
type ResourceRunOutput struct {
	ID                        object.ID                            `json:"id,omitempty"`
	CreateTime                *time.Time                           `json:"createTime,omitempty"`
	Status                    status.Status                        `json:"status,omitempty"`
	TemplateName              string                               `json:"templateName,omitempty"`
	TemplateVersion           string                               `json:"templateVersion,omitempty"`
	TemplateID                object.ID                            `json:"templateID,omitempty"`
	Attributes                property.Values                      `json:"attributes,omitempty"`
	ComputedAttributes        property.Values                      `json:"computedAttributes,omitempty"`
	Variables                 crypto.Map[string, string]           `json:"variables,omitempty"`
	DeployerType              string                               `json:"deployerType,omitempty"`
	Duration                  int                                  `json:"duration,omitempty"`
	PreviousRequiredProviders []types.ProviderRequirement          `json:"previousRequiredProviders,omitempty"`
	PlanRecord                string                               `json:"planRecord,omitempty"`
	Record                    string                               `json:"record,omitempty"`
	ChangeComment             string                               `json:"changeComment,omitempty"`
	CreatedBy                 string                               `json:"createdBy,omitempty"`
	Type                      string                               `json:"type,omitempty"`
	Preview                   bool                                 `json:"preview,omitempty"`
	Labels                    map[string]string                    `json:"labels,omitempty"`
	ComponentChanges          []*types.ResourceComponentChange     `json:"componentChanges,omitempty"`
	ComponentChangeSummary    types.ResourceComponentChangeSummary `json:"componentChangeSummary,omitempty"`

	Project     *ProjectOutput     `json:"project,omitempty"`
	Environment *EnvironmentOutput `json:"environment,omitempty"`
	Resource    *ResourceOutput    `json:"resource,omitempty"`
}

// View returns the output of ResourceRun entity.
func (_rr *ResourceRun) View() *ResourceRunOutput {
	return ExposeResourceRun(_rr)
}

// View returns the output of ResourceRun entities.
func (_rrs ResourceRuns) View() []*ResourceRunOutput {
	return ExposeResourceRuns(_rrs)
}

// ExposeResourceRun converts the ResourceRun to ResourceRunOutput.
func ExposeResourceRun(_rr *ResourceRun) *ResourceRunOutput {
	if _rr == nil {
		return nil
	}

	rro := &ResourceRunOutput{
		ID:                        _rr.ID,
		CreateTime:                _rr.CreateTime,
		Status:                    _rr.Status,
		TemplateName:              _rr.TemplateName,
		TemplateVersion:           _rr.TemplateVersion,
		TemplateID:                _rr.TemplateID,
		Attributes:                _rr.Attributes,
		ComputedAttributes:        _rr.ComputedAttributes,
		Variables:                 _rr.Variables,
		DeployerType:              _rr.DeployerType,
		Duration:                  _rr.Duration,
		PreviousRequiredProviders: _rr.PreviousRequiredProviders,
		PlanRecord:                _rr.PlanRecord,
		Record:                    _rr.Record,
		ChangeComment:             _rr.ChangeComment,
		CreatedBy:                 _rr.CreatedBy,
		Type:                      _rr.Type,
		Preview:                   _rr.Preview,
		Labels:                    _rr.Labels,
		ComponentChanges:          _rr.ComponentChanges,
		ComponentChangeSummary:    _rr.ComponentChangeSummary,
	}

	if _rr.Edges.Project != nil {
		rro.Project = ExposeProject(_rr.Edges.Project)
	} else if _rr.ProjectID != "" {
		rro.Project = &ProjectOutput{
			ID: _rr.ProjectID,
		}
	}
	if _rr.Edges.Environment != nil {
		rro.Environment = ExposeEnvironment(_rr.Edges.Environment)
	} else if _rr.EnvironmentID != "" {
		rro.Environment = &EnvironmentOutput{
			ID: _rr.EnvironmentID,
		}
	}
	if _rr.Edges.Resource != nil {
		rro.Resource = ExposeResource(_rr.Edges.Resource)
	} else if _rr.ResourceID != "" {
		rro.Resource = &ResourceOutput{
			ID: _rr.ResourceID,
		}
	}
	return rro
}

// ExposeResourceRuns converts the ResourceRun slice to ResourceRunOutput pointer slice.
func ExposeResourceRuns(_rrs []*ResourceRun) []*ResourceRunOutput {
	if len(_rrs) == 0 {
		return nil
	}

	rros := make([]*ResourceRunOutput, len(_rrs))
	for i := range _rrs {
		rros[i] = ExposeResourceRun(_rrs[i])
	}
	return rros
}
