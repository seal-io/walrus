// SPDX-FileCopyrightText: 2023 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "seal". DO NOT EDIT.

package model

import (
	"context"
	stdsql "database/sql"
	"errors"
	"fmt"
	"reflect"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/seal-io/seal/pkg/dao/model/connector"
	"github.com/seal-io/seal/pkg/dao/model/environment"
	"github.com/seal-io/seal/pkg/dao/model/internal"
	"github.com/seal-io/seal/pkg/dao/model/predicate"
	"github.com/seal-io/seal/pkg/dao/model/project"
	"github.com/seal-io/seal/pkg/dao/model/service"
	"github.com/seal-io/seal/pkg/dao/model/serviceresource"
	"github.com/seal-io/seal/pkg/dao/model/servicerevision"
	"github.com/seal-io/seal/pkg/dao/model/subjectrolerelationship"
	"github.com/seal-io/seal/pkg/dao/model/variable"
	"github.com/seal-io/seal/pkg/dao/types/object"
)

// ProjectUpdate is the builder for updating Project entities.
type ProjectUpdate struct {
	config
	hooks     []Hook
	mutation  *ProjectMutation
	modifiers []func(*sql.UpdateBuilder)
	object    *Project
}

// Where appends a list predicates to the ProjectUpdate builder.
func (pu *ProjectUpdate) Where(ps ...predicate.Project) *ProjectUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetDescription sets the "description" field.
func (pu *ProjectUpdate) SetDescription(s string) *ProjectUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableDescription(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// ClearDescription clears the value of the "description" field.
func (pu *ProjectUpdate) ClearDescription() *ProjectUpdate {
	pu.mutation.ClearDescription()
	return pu
}

// SetLabels sets the "labels" field.
func (pu *ProjectUpdate) SetLabels(m map[string]string) *ProjectUpdate {
	pu.mutation.SetLabels(m)
	return pu
}

// ClearLabels clears the value of the "labels" field.
func (pu *ProjectUpdate) ClearLabels() *ProjectUpdate {
	pu.mutation.ClearLabels()
	return pu
}

// SetAnnotations sets the "annotations" field.
func (pu *ProjectUpdate) SetAnnotations(m map[string]string) *ProjectUpdate {
	pu.mutation.SetAnnotations(m)
	return pu
}

// ClearAnnotations clears the value of the "annotations" field.
func (pu *ProjectUpdate) ClearAnnotations() *ProjectUpdate {
	pu.mutation.ClearAnnotations()
	return pu
}

// SetUpdateTime sets the "update_time" field.
func (pu *ProjectUpdate) SetUpdateTime(t time.Time) *ProjectUpdate {
	pu.mutation.SetUpdateTime(t)
	return pu
}

// AddEnvironmentIDs adds the "environments" edge to the Environment entity by IDs.
func (pu *ProjectUpdate) AddEnvironmentIDs(ids ...object.ID) *ProjectUpdate {
	pu.mutation.AddEnvironmentIDs(ids...)
	return pu
}

// AddEnvironments adds the "environments" edges to the Environment entity.
func (pu *ProjectUpdate) AddEnvironments(e ...*Environment) *ProjectUpdate {
	ids := make([]object.ID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pu.AddEnvironmentIDs(ids...)
}

// AddConnectorIDs adds the "connectors" edge to the Connector entity by IDs.
func (pu *ProjectUpdate) AddConnectorIDs(ids ...object.ID) *ProjectUpdate {
	pu.mutation.AddConnectorIDs(ids...)
	return pu
}

// AddConnectors adds the "connectors" edges to the Connector entity.
func (pu *ProjectUpdate) AddConnectors(c ...*Connector) *ProjectUpdate {
	ids := make([]object.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddConnectorIDs(ids...)
}

// AddSubjectRoleIDs adds the "subject_roles" edge to the SubjectRoleRelationship entity by IDs.
func (pu *ProjectUpdate) AddSubjectRoleIDs(ids ...object.ID) *ProjectUpdate {
	pu.mutation.AddSubjectRoleIDs(ids...)
	return pu
}

// AddSubjectRoles adds the "subject_roles" edges to the SubjectRoleRelationship entity.
func (pu *ProjectUpdate) AddSubjectRoles(s ...*SubjectRoleRelationship) *ProjectUpdate {
	ids := make([]object.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.AddSubjectRoleIDs(ids...)
}

// AddServiceIDs adds the "services" edge to the Service entity by IDs.
func (pu *ProjectUpdate) AddServiceIDs(ids ...object.ID) *ProjectUpdate {
	pu.mutation.AddServiceIDs(ids...)
	return pu
}

// AddServices adds the "services" edges to the Service entity.
func (pu *ProjectUpdate) AddServices(s ...*Service) *ProjectUpdate {
	ids := make([]object.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.AddServiceIDs(ids...)
}

// AddServiceResourceIDs adds the "service_resources" edge to the ServiceResource entity by IDs.
func (pu *ProjectUpdate) AddServiceResourceIDs(ids ...object.ID) *ProjectUpdate {
	pu.mutation.AddServiceResourceIDs(ids...)
	return pu
}

// AddServiceResources adds the "service_resources" edges to the ServiceResource entity.
func (pu *ProjectUpdate) AddServiceResources(s ...*ServiceResource) *ProjectUpdate {
	ids := make([]object.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.AddServiceResourceIDs(ids...)
}

// AddServiceRevisionIDs adds the "service_revisions" edge to the ServiceRevision entity by IDs.
func (pu *ProjectUpdate) AddServiceRevisionIDs(ids ...object.ID) *ProjectUpdate {
	pu.mutation.AddServiceRevisionIDs(ids...)
	return pu
}

// AddServiceRevisions adds the "service_revisions" edges to the ServiceRevision entity.
func (pu *ProjectUpdate) AddServiceRevisions(s ...*ServiceRevision) *ProjectUpdate {
	ids := make([]object.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.AddServiceRevisionIDs(ids...)
}

// AddVariableIDs adds the "variables" edge to the Variable entity by IDs.
func (pu *ProjectUpdate) AddVariableIDs(ids ...object.ID) *ProjectUpdate {
	pu.mutation.AddVariableIDs(ids...)
	return pu
}

// AddVariables adds the "variables" edges to the Variable entity.
func (pu *ProjectUpdate) AddVariables(v ...*Variable) *ProjectUpdate {
	ids := make([]object.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pu.AddVariableIDs(ids...)
}

// Mutation returns the ProjectMutation object of the builder.
func (pu *ProjectUpdate) Mutation() *ProjectMutation {
	return pu.mutation
}

// ClearEnvironments clears all "environments" edges to the Environment entity.
func (pu *ProjectUpdate) ClearEnvironments() *ProjectUpdate {
	pu.mutation.ClearEnvironments()
	return pu
}

// RemoveEnvironmentIDs removes the "environments" edge to Environment entities by IDs.
func (pu *ProjectUpdate) RemoveEnvironmentIDs(ids ...object.ID) *ProjectUpdate {
	pu.mutation.RemoveEnvironmentIDs(ids...)
	return pu
}

// RemoveEnvironments removes "environments" edges to Environment entities.
func (pu *ProjectUpdate) RemoveEnvironments(e ...*Environment) *ProjectUpdate {
	ids := make([]object.ID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pu.RemoveEnvironmentIDs(ids...)
}

// ClearConnectors clears all "connectors" edges to the Connector entity.
func (pu *ProjectUpdate) ClearConnectors() *ProjectUpdate {
	pu.mutation.ClearConnectors()
	return pu
}

// RemoveConnectorIDs removes the "connectors" edge to Connector entities by IDs.
func (pu *ProjectUpdate) RemoveConnectorIDs(ids ...object.ID) *ProjectUpdate {
	pu.mutation.RemoveConnectorIDs(ids...)
	return pu
}

// RemoveConnectors removes "connectors" edges to Connector entities.
func (pu *ProjectUpdate) RemoveConnectors(c ...*Connector) *ProjectUpdate {
	ids := make([]object.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveConnectorIDs(ids...)
}

// ClearSubjectRoles clears all "subject_roles" edges to the SubjectRoleRelationship entity.
func (pu *ProjectUpdate) ClearSubjectRoles() *ProjectUpdate {
	pu.mutation.ClearSubjectRoles()
	return pu
}

// RemoveSubjectRoleIDs removes the "subject_roles" edge to SubjectRoleRelationship entities by IDs.
func (pu *ProjectUpdate) RemoveSubjectRoleIDs(ids ...object.ID) *ProjectUpdate {
	pu.mutation.RemoveSubjectRoleIDs(ids...)
	return pu
}

// RemoveSubjectRoles removes "subject_roles" edges to SubjectRoleRelationship entities.
func (pu *ProjectUpdate) RemoveSubjectRoles(s ...*SubjectRoleRelationship) *ProjectUpdate {
	ids := make([]object.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.RemoveSubjectRoleIDs(ids...)
}

// ClearServices clears all "services" edges to the Service entity.
func (pu *ProjectUpdate) ClearServices() *ProjectUpdate {
	pu.mutation.ClearServices()
	return pu
}

// RemoveServiceIDs removes the "services" edge to Service entities by IDs.
func (pu *ProjectUpdate) RemoveServiceIDs(ids ...object.ID) *ProjectUpdate {
	pu.mutation.RemoveServiceIDs(ids...)
	return pu
}

// RemoveServices removes "services" edges to Service entities.
func (pu *ProjectUpdate) RemoveServices(s ...*Service) *ProjectUpdate {
	ids := make([]object.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.RemoveServiceIDs(ids...)
}

// ClearServiceResources clears all "service_resources" edges to the ServiceResource entity.
func (pu *ProjectUpdate) ClearServiceResources() *ProjectUpdate {
	pu.mutation.ClearServiceResources()
	return pu
}

// RemoveServiceResourceIDs removes the "service_resources" edge to ServiceResource entities by IDs.
func (pu *ProjectUpdate) RemoveServiceResourceIDs(ids ...object.ID) *ProjectUpdate {
	pu.mutation.RemoveServiceResourceIDs(ids...)
	return pu
}

// RemoveServiceResources removes "service_resources" edges to ServiceResource entities.
func (pu *ProjectUpdate) RemoveServiceResources(s ...*ServiceResource) *ProjectUpdate {
	ids := make([]object.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.RemoveServiceResourceIDs(ids...)
}

// ClearServiceRevisions clears all "service_revisions" edges to the ServiceRevision entity.
func (pu *ProjectUpdate) ClearServiceRevisions() *ProjectUpdate {
	pu.mutation.ClearServiceRevisions()
	return pu
}

// RemoveServiceRevisionIDs removes the "service_revisions" edge to ServiceRevision entities by IDs.
func (pu *ProjectUpdate) RemoveServiceRevisionIDs(ids ...object.ID) *ProjectUpdate {
	pu.mutation.RemoveServiceRevisionIDs(ids...)
	return pu
}

// RemoveServiceRevisions removes "service_revisions" edges to ServiceRevision entities.
func (pu *ProjectUpdate) RemoveServiceRevisions(s ...*ServiceRevision) *ProjectUpdate {
	ids := make([]object.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.RemoveServiceRevisionIDs(ids...)
}

// ClearVariables clears all "variables" edges to the Variable entity.
func (pu *ProjectUpdate) ClearVariables() *ProjectUpdate {
	pu.mutation.ClearVariables()
	return pu
}

// RemoveVariableIDs removes the "variables" edge to Variable entities by IDs.
func (pu *ProjectUpdate) RemoveVariableIDs(ids ...object.ID) *ProjectUpdate {
	pu.mutation.RemoveVariableIDs(ids...)
	return pu
}

// RemoveVariables removes "variables" edges to Variable entities.
func (pu *ProjectUpdate) RemoveVariables(v ...*Variable) *ProjectUpdate {
	ids := make([]object.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pu.RemoveVariableIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProjectUpdate) Save(ctx context.Context) (int, error) {
	if err := pu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProjectUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProjectUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProjectUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProjectUpdate) defaults() error {
	if _, ok := pu.mutation.UpdateTime(); !ok {
		if project.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("model: uninitialized project.UpdateDefaultUpdateTime (forgotten import model/runtime?)")
		}
		v := project.UpdateDefaultUpdateTime()
		pu.mutation.SetUpdateTime(v)
	}
	return nil
}

// Set is different from other Set* methods,
// it sets the value by judging the definition of each field within the entire object.
//
// For default fields, Set calls if the value is not zero.
//
// For no default but required fields, Set calls directly.
//
// For no default but optional fields, Set calls if the value is not zero,
// or clears if the value is zero.
//
// For example:
//
//	## Without Default
//
//	### Required
//
//	db.SetX(obj.X)
//
//	### Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	} else {
//	   db.ClearX()
//	}
//
//	## With Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (pu *ProjectUpdate) Set(obj *Project) *ProjectUpdate {
	// Without Default.
	if obj.Description != "" {
		pu.SetDescription(obj.Description)
	} else {
		pu.ClearDescription()
	}
	if !reflect.ValueOf(obj.Labels).IsZero() {
		pu.SetLabels(obj.Labels)
	} else {
		pu.ClearLabels()
	}
	if !reflect.ValueOf(obj.Annotations).IsZero() {
		pu.SetAnnotations(obj.Annotations)
	}

	// With Default.
	if obj.UpdateTime != nil {
		pu.SetUpdateTime(*obj.UpdateTime)
	}

	// Record the given object.
	pu.object = obj

	return pu
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pu *ProjectUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProjectUpdate {
	pu.modifiers = append(pu.modifiers, modifiers...)
	return pu
}

func (pu *ProjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(project.Table, project.Columns, sqlgraph.NewFieldSpec(project.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(project.FieldDescription, field.TypeString, value)
	}
	if pu.mutation.DescriptionCleared() {
		_spec.ClearField(project.FieldDescription, field.TypeString)
	}
	if value, ok := pu.mutation.Labels(); ok {
		_spec.SetField(project.FieldLabels, field.TypeJSON, value)
	}
	if pu.mutation.LabelsCleared() {
		_spec.ClearField(project.FieldLabels, field.TypeJSON)
	}
	if value, ok := pu.mutation.Annotations(); ok {
		_spec.SetField(project.FieldAnnotations, field.TypeJSON, value)
	}
	if pu.mutation.AnnotationsCleared() {
		_spec.ClearField(project.FieldAnnotations, field.TypeJSON)
	}
	if value, ok := pu.mutation.UpdateTime(); ok {
		_spec.SetField(project.FieldUpdateTime, field.TypeTime, value)
	}
	if pu.mutation.EnvironmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.EnvironmentsTable,
			Columns: []string{project.EnvironmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.Environment
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedEnvironmentsIDs(); len(nodes) > 0 && !pu.mutation.EnvironmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.EnvironmentsTable,
			Columns: []string{project.EnvironmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.Environment
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.EnvironmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.EnvironmentsTable,
			Columns: []string{project.EnvironmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.Environment
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ConnectorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ConnectorsTable,
			Columns: []string{project.ConnectorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connector.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.Connector
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedConnectorsIDs(); len(nodes) > 0 && !pu.mutation.ConnectorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ConnectorsTable,
			Columns: []string{project.ConnectorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connector.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.Connector
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ConnectorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ConnectorsTable,
			Columns: []string{project.ConnectorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connector.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.Connector
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.SubjectRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.SubjectRolesTable,
			Columns: []string{project.SubjectRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subjectrolerelationship.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.SubjectRoleRelationship
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedSubjectRolesIDs(); len(nodes) > 0 && !pu.mutation.SubjectRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.SubjectRolesTable,
			Columns: []string{project.SubjectRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subjectrolerelationship.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.SubjectRoleRelationship
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.SubjectRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.SubjectRolesTable,
			Columns: []string{project.SubjectRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subjectrolerelationship.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.SubjectRoleRelationship
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ServicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ServicesTable,
			Columns: []string{project.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.Service
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedServicesIDs(); len(nodes) > 0 && !pu.mutation.ServicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ServicesTable,
			Columns: []string{project.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.Service
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ServicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ServicesTable,
			Columns: []string{project.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.Service
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ServiceResourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ServiceResourcesTable,
			Columns: []string{project.ServiceResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceresource.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ServiceResource
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedServiceResourcesIDs(); len(nodes) > 0 && !pu.mutation.ServiceResourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ServiceResourcesTable,
			Columns: []string{project.ServiceResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceresource.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ServiceResource
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ServiceResourcesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ServiceResourcesTable,
			Columns: []string{project.ServiceResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceresource.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ServiceResource
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ServiceRevisionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ServiceRevisionsTable,
			Columns: []string{project.ServiceRevisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicerevision.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ServiceRevision
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedServiceRevisionsIDs(); len(nodes) > 0 && !pu.mutation.ServiceRevisionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ServiceRevisionsTable,
			Columns: []string{project.ServiceRevisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicerevision.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ServiceRevision
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ServiceRevisionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ServiceRevisionsTable,
			Columns: []string{project.ServiceRevisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicerevision.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ServiceRevision
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.VariablesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.VariablesTable,
			Columns: []string{project.VariablesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(variable.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.Variable
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedVariablesIDs(); len(nodes) > 0 && !pu.mutation.VariablesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.VariablesTable,
			Columns: []string{project.VariablesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(variable.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.Variable
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.VariablesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.VariablesTable,
			Columns: []string{project.VariablesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(variable.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.Variable
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = pu.schemaConfig.Project
	ctx = internal.NewSchemaConfigContext(ctx, pu.schemaConfig)
	_spec.AddModifiers(pu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProjectUpdateOne is the builder for updating a single Project entity.
type ProjectUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ProjectMutation
	modifiers []func(*sql.UpdateBuilder)
	object    *Project
}

// SetDescription sets the "description" field.
func (puo *ProjectUpdateOne) SetDescription(s string) *ProjectUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableDescription(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// ClearDescription clears the value of the "description" field.
func (puo *ProjectUpdateOne) ClearDescription() *ProjectUpdateOne {
	puo.mutation.ClearDescription()
	return puo
}

// SetLabels sets the "labels" field.
func (puo *ProjectUpdateOne) SetLabels(m map[string]string) *ProjectUpdateOne {
	puo.mutation.SetLabels(m)
	return puo
}

// ClearLabels clears the value of the "labels" field.
func (puo *ProjectUpdateOne) ClearLabels() *ProjectUpdateOne {
	puo.mutation.ClearLabels()
	return puo
}

// SetAnnotations sets the "annotations" field.
func (puo *ProjectUpdateOne) SetAnnotations(m map[string]string) *ProjectUpdateOne {
	puo.mutation.SetAnnotations(m)
	return puo
}

// ClearAnnotations clears the value of the "annotations" field.
func (puo *ProjectUpdateOne) ClearAnnotations() *ProjectUpdateOne {
	puo.mutation.ClearAnnotations()
	return puo
}

// SetUpdateTime sets the "update_time" field.
func (puo *ProjectUpdateOne) SetUpdateTime(t time.Time) *ProjectUpdateOne {
	puo.mutation.SetUpdateTime(t)
	return puo
}

// AddEnvironmentIDs adds the "environments" edge to the Environment entity by IDs.
func (puo *ProjectUpdateOne) AddEnvironmentIDs(ids ...object.ID) *ProjectUpdateOne {
	puo.mutation.AddEnvironmentIDs(ids...)
	return puo
}

// AddEnvironments adds the "environments" edges to the Environment entity.
func (puo *ProjectUpdateOne) AddEnvironments(e ...*Environment) *ProjectUpdateOne {
	ids := make([]object.ID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return puo.AddEnvironmentIDs(ids...)
}

// AddConnectorIDs adds the "connectors" edge to the Connector entity by IDs.
func (puo *ProjectUpdateOne) AddConnectorIDs(ids ...object.ID) *ProjectUpdateOne {
	puo.mutation.AddConnectorIDs(ids...)
	return puo
}

// AddConnectors adds the "connectors" edges to the Connector entity.
func (puo *ProjectUpdateOne) AddConnectors(c ...*Connector) *ProjectUpdateOne {
	ids := make([]object.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddConnectorIDs(ids...)
}

// AddSubjectRoleIDs adds the "subject_roles" edge to the SubjectRoleRelationship entity by IDs.
func (puo *ProjectUpdateOne) AddSubjectRoleIDs(ids ...object.ID) *ProjectUpdateOne {
	puo.mutation.AddSubjectRoleIDs(ids...)
	return puo
}

// AddSubjectRoles adds the "subject_roles" edges to the SubjectRoleRelationship entity.
func (puo *ProjectUpdateOne) AddSubjectRoles(s ...*SubjectRoleRelationship) *ProjectUpdateOne {
	ids := make([]object.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.AddSubjectRoleIDs(ids...)
}

// AddServiceIDs adds the "services" edge to the Service entity by IDs.
func (puo *ProjectUpdateOne) AddServiceIDs(ids ...object.ID) *ProjectUpdateOne {
	puo.mutation.AddServiceIDs(ids...)
	return puo
}

// AddServices adds the "services" edges to the Service entity.
func (puo *ProjectUpdateOne) AddServices(s ...*Service) *ProjectUpdateOne {
	ids := make([]object.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.AddServiceIDs(ids...)
}

// AddServiceResourceIDs adds the "service_resources" edge to the ServiceResource entity by IDs.
func (puo *ProjectUpdateOne) AddServiceResourceIDs(ids ...object.ID) *ProjectUpdateOne {
	puo.mutation.AddServiceResourceIDs(ids...)
	return puo
}

// AddServiceResources adds the "service_resources" edges to the ServiceResource entity.
func (puo *ProjectUpdateOne) AddServiceResources(s ...*ServiceResource) *ProjectUpdateOne {
	ids := make([]object.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.AddServiceResourceIDs(ids...)
}

// AddServiceRevisionIDs adds the "service_revisions" edge to the ServiceRevision entity by IDs.
func (puo *ProjectUpdateOne) AddServiceRevisionIDs(ids ...object.ID) *ProjectUpdateOne {
	puo.mutation.AddServiceRevisionIDs(ids...)
	return puo
}

// AddServiceRevisions adds the "service_revisions" edges to the ServiceRevision entity.
func (puo *ProjectUpdateOne) AddServiceRevisions(s ...*ServiceRevision) *ProjectUpdateOne {
	ids := make([]object.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.AddServiceRevisionIDs(ids...)
}

// AddVariableIDs adds the "variables" edge to the Variable entity by IDs.
func (puo *ProjectUpdateOne) AddVariableIDs(ids ...object.ID) *ProjectUpdateOne {
	puo.mutation.AddVariableIDs(ids...)
	return puo
}

// AddVariables adds the "variables" edges to the Variable entity.
func (puo *ProjectUpdateOne) AddVariables(v ...*Variable) *ProjectUpdateOne {
	ids := make([]object.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return puo.AddVariableIDs(ids...)
}

// Mutation returns the ProjectMutation object of the builder.
func (puo *ProjectUpdateOne) Mutation() *ProjectMutation {
	return puo.mutation
}

// ClearEnvironments clears all "environments" edges to the Environment entity.
func (puo *ProjectUpdateOne) ClearEnvironments() *ProjectUpdateOne {
	puo.mutation.ClearEnvironments()
	return puo
}

// RemoveEnvironmentIDs removes the "environments" edge to Environment entities by IDs.
func (puo *ProjectUpdateOne) RemoveEnvironmentIDs(ids ...object.ID) *ProjectUpdateOne {
	puo.mutation.RemoveEnvironmentIDs(ids...)
	return puo
}

// RemoveEnvironments removes "environments" edges to Environment entities.
func (puo *ProjectUpdateOne) RemoveEnvironments(e ...*Environment) *ProjectUpdateOne {
	ids := make([]object.ID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return puo.RemoveEnvironmentIDs(ids...)
}

// ClearConnectors clears all "connectors" edges to the Connector entity.
func (puo *ProjectUpdateOne) ClearConnectors() *ProjectUpdateOne {
	puo.mutation.ClearConnectors()
	return puo
}

// RemoveConnectorIDs removes the "connectors" edge to Connector entities by IDs.
func (puo *ProjectUpdateOne) RemoveConnectorIDs(ids ...object.ID) *ProjectUpdateOne {
	puo.mutation.RemoveConnectorIDs(ids...)
	return puo
}

// RemoveConnectors removes "connectors" edges to Connector entities.
func (puo *ProjectUpdateOne) RemoveConnectors(c ...*Connector) *ProjectUpdateOne {
	ids := make([]object.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveConnectorIDs(ids...)
}

// ClearSubjectRoles clears all "subject_roles" edges to the SubjectRoleRelationship entity.
func (puo *ProjectUpdateOne) ClearSubjectRoles() *ProjectUpdateOne {
	puo.mutation.ClearSubjectRoles()
	return puo
}

// RemoveSubjectRoleIDs removes the "subject_roles" edge to SubjectRoleRelationship entities by IDs.
func (puo *ProjectUpdateOne) RemoveSubjectRoleIDs(ids ...object.ID) *ProjectUpdateOne {
	puo.mutation.RemoveSubjectRoleIDs(ids...)
	return puo
}

// RemoveSubjectRoles removes "subject_roles" edges to SubjectRoleRelationship entities.
func (puo *ProjectUpdateOne) RemoveSubjectRoles(s ...*SubjectRoleRelationship) *ProjectUpdateOne {
	ids := make([]object.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.RemoveSubjectRoleIDs(ids...)
}

// ClearServices clears all "services" edges to the Service entity.
func (puo *ProjectUpdateOne) ClearServices() *ProjectUpdateOne {
	puo.mutation.ClearServices()
	return puo
}

// RemoveServiceIDs removes the "services" edge to Service entities by IDs.
func (puo *ProjectUpdateOne) RemoveServiceIDs(ids ...object.ID) *ProjectUpdateOne {
	puo.mutation.RemoveServiceIDs(ids...)
	return puo
}

// RemoveServices removes "services" edges to Service entities.
func (puo *ProjectUpdateOne) RemoveServices(s ...*Service) *ProjectUpdateOne {
	ids := make([]object.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.RemoveServiceIDs(ids...)
}

// ClearServiceResources clears all "service_resources" edges to the ServiceResource entity.
func (puo *ProjectUpdateOne) ClearServiceResources() *ProjectUpdateOne {
	puo.mutation.ClearServiceResources()
	return puo
}

// RemoveServiceResourceIDs removes the "service_resources" edge to ServiceResource entities by IDs.
func (puo *ProjectUpdateOne) RemoveServiceResourceIDs(ids ...object.ID) *ProjectUpdateOne {
	puo.mutation.RemoveServiceResourceIDs(ids...)
	return puo
}

// RemoveServiceResources removes "service_resources" edges to ServiceResource entities.
func (puo *ProjectUpdateOne) RemoveServiceResources(s ...*ServiceResource) *ProjectUpdateOne {
	ids := make([]object.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.RemoveServiceResourceIDs(ids...)
}

// ClearServiceRevisions clears all "service_revisions" edges to the ServiceRevision entity.
func (puo *ProjectUpdateOne) ClearServiceRevisions() *ProjectUpdateOne {
	puo.mutation.ClearServiceRevisions()
	return puo
}

// RemoveServiceRevisionIDs removes the "service_revisions" edge to ServiceRevision entities by IDs.
func (puo *ProjectUpdateOne) RemoveServiceRevisionIDs(ids ...object.ID) *ProjectUpdateOne {
	puo.mutation.RemoveServiceRevisionIDs(ids...)
	return puo
}

// RemoveServiceRevisions removes "service_revisions" edges to ServiceRevision entities.
func (puo *ProjectUpdateOne) RemoveServiceRevisions(s ...*ServiceRevision) *ProjectUpdateOne {
	ids := make([]object.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.RemoveServiceRevisionIDs(ids...)
}

// ClearVariables clears all "variables" edges to the Variable entity.
func (puo *ProjectUpdateOne) ClearVariables() *ProjectUpdateOne {
	puo.mutation.ClearVariables()
	return puo
}

// RemoveVariableIDs removes the "variables" edge to Variable entities by IDs.
func (puo *ProjectUpdateOne) RemoveVariableIDs(ids ...object.ID) *ProjectUpdateOne {
	puo.mutation.RemoveVariableIDs(ids...)
	return puo
}

// RemoveVariables removes "variables" edges to Variable entities.
func (puo *ProjectUpdateOne) RemoveVariables(v ...*Variable) *ProjectUpdateOne {
	ids := make([]object.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return puo.RemoveVariableIDs(ids...)
}

// Where appends a list predicates to the ProjectUpdate builder.
func (puo *ProjectUpdateOne) Where(ps ...predicate.Project) *ProjectUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProjectUpdateOne) Select(field string, fields ...string) *ProjectUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Project entity.
func (puo *ProjectUpdateOne) Save(ctx context.Context) (*Project, error) {
	if err := puo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProjectUpdateOne) SaveX(ctx context.Context) *Project {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProjectUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProjectUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProjectUpdateOne) defaults() error {
	if _, ok := puo.mutation.UpdateTime(); !ok {
		if project.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("model: uninitialized project.UpdateDefaultUpdateTime (forgotten import model/runtime?)")
		}
		v := project.UpdateDefaultUpdateTime()
		puo.mutation.SetUpdateTime(v)
	}
	return nil
}

// Set is different from other Set* methods,
// it sets the value by judging the definition of each field within the entire object.
//
// For default fields, Set calls if the value changes from the original.
//
// For no default but required fields, Set calls if the value changes from the original.
//
// For no default but optional fields, Set calls if the value changes from the original,
// or clears if changes to zero.
//
// For example:
//
//	## Without Default
//
//	### Required
//
//	db.SetX(obj.X)
//
//	### Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   if _is_not_equal_(db.X, obj.X) {
//	      db.SetX(obj.X)
//	   }
//	} else {
//	   db.ClearX()
//	}
//
//	## With Default
//
//	if _is_zero_value_(obj.X) && _is_not_equal_(db.X, obj.X) {
//	   db.SetX(obj.X)
//	}
func (puo *ProjectUpdateOne) Set(obj *Project) *ProjectUpdateOne {
	h := func(n ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			mt := m.(*ProjectMutation)
			db, err := mt.Client().Project.Get(ctx, *mt.id)
			if err != nil {
				return nil, fmt.Errorf("failed getting Project with id: %v", *mt.id)
			}

			// Without Default.
			if obj.Description != "" {
				if db.Description != obj.Description {
					puo.SetDescription(obj.Description)
				}
			} else {
				puo.ClearDescription()
			}
			if !reflect.ValueOf(obj.Labels).IsZero() {
				if !reflect.DeepEqual(db.Labels, obj.Labels) {
					puo.SetLabels(obj.Labels)
				}
			} else {
				puo.ClearLabels()
			}
			if !reflect.ValueOf(obj.Annotations).IsZero() {
				if !reflect.DeepEqual(db.Annotations, obj.Annotations) {
					puo.SetAnnotations(obj.Annotations)
				}
			}

			// With Default.
			if (obj.UpdateTime != nil) && (!reflect.DeepEqual(db.UpdateTime, obj.UpdateTime)) {
				puo.SetUpdateTime(*obj.UpdateTime)
			}

			// Record the given object.
			puo.object = obj

			return n.Mutate(ctx, m)
		})
	}

	puo.hooks = append(puo.hooks, h)

	return puo
}

// getClientSet returns the ClientSet for the given builder.
func (puo *ProjectUpdateOne) getClientSet() (mc ClientSet) {
	if _, ok := puo.config.driver.(*txDriver); ok {
		tx := &Tx{config: puo.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: puo.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after updated the Project entity,
// which is always good for cascading update operations.
func (puo *ProjectUpdateOne) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *Project) error) (*Project, error) {
	obj, err := puo.Save(ctx)
	if err != nil &&
		(puo.object == nil || !errors.Is(err, stdsql.ErrNoRows)) {
		return nil, err
	}

	if len(cbs) == 0 {
		return obj, err
	}

	mc := puo.getClientSet()

	if obj == nil {
		obj = puo.object
	} else if x := puo.object; x != nil {
		if _, set := puo.mutation.Field(project.FieldDescription); set {
			obj.Description = x.Description
		}
		if _, set := puo.mutation.Field(project.FieldLabels); set {
			obj.Labels = x.Labels
		}
		if _, set := puo.mutation.Field(project.FieldAnnotations); set {
			obj.Annotations = x.Annotations
		}
		obj.Edges = x.Edges
	}

	for i := range cbs {
		if err = cbs[i](ctx, mc, obj); err != nil {
			return nil, err
		}
	}

	return obj, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (puo *ProjectUpdateOne) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *Project) error) *Project {
	obj, err := puo.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return obj
}

// ExecE calls the given function after executed the query,
// which is always good for cascading update operations.
func (puo *ProjectUpdateOne) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *Project) error) error {
	_, err := puo.SaveE(ctx, cbs...)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProjectUpdateOne) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *Project) error) {
	if err := puo.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (puo *ProjectUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProjectUpdateOne {
	puo.modifiers = append(puo.modifiers, modifiers...)
	return puo
}

func (puo *ProjectUpdateOne) sqlSave(ctx context.Context) (_node *Project, err error) {
	_spec := sqlgraph.NewUpdateSpec(project.Table, project.Columns, sqlgraph.NewFieldSpec(project.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`model: missing "Project.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, project.FieldID)
		for _, f := range fields {
			if !project.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
			}
			if f != project.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(project.FieldDescription, field.TypeString, value)
	}
	if puo.mutation.DescriptionCleared() {
		_spec.ClearField(project.FieldDescription, field.TypeString)
	}
	if value, ok := puo.mutation.Labels(); ok {
		_spec.SetField(project.FieldLabels, field.TypeJSON, value)
	}
	if puo.mutation.LabelsCleared() {
		_spec.ClearField(project.FieldLabels, field.TypeJSON)
	}
	if value, ok := puo.mutation.Annotations(); ok {
		_spec.SetField(project.FieldAnnotations, field.TypeJSON, value)
	}
	if puo.mutation.AnnotationsCleared() {
		_spec.ClearField(project.FieldAnnotations, field.TypeJSON)
	}
	if value, ok := puo.mutation.UpdateTime(); ok {
		_spec.SetField(project.FieldUpdateTime, field.TypeTime, value)
	}
	if puo.mutation.EnvironmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.EnvironmentsTable,
			Columns: []string{project.EnvironmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.Environment
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedEnvironmentsIDs(); len(nodes) > 0 && !puo.mutation.EnvironmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.EnvironmentsTable,
			Columns: []string{project.EnvironmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.Environment
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.EnvironmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.EnvironmentsTable,
			Columns: []string{project.EnvironmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(environment.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.Environment
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ConnectorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ConnectorsTable,
			Columns: []string{project.ConnectorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connector.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.Connector
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedConnectorsIDs(); len(nodes) > 0 && !puo.mutation.ConnectorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ConnectorsTable,
			Columns: []string{project.ConnectorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connector.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.Connector
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ConnectorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ConnectorsTable,
			Columns: []string{project.ConnectorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connector.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.Connector
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.SubjectRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.SubjectRolesTable,
			Columns: []string{project.SubjectRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subjectrolerelationship.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.SubjectRoleRelationship
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedSubjectRolesIDs(); len(nodes) > 0 && !puo.mutation.SubjectRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.SubjectRolesTable,
			Columns: []string{project.SubjectRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subjectrolerelationship.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.SubjectRoleRelationship
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.SubjectRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.SubjectRolesTable,
			Columns: []string{project.SubjectRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subjectrolerelationship.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.SubjectRoleRelationship
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ServicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ServicesTable,
			Columns: []string{project.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.Service
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedServicesIDs(); len(nodes) > 0 && !puo.mutation.ServicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ServicesTable,
			Columns: []string{project.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.Service
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ServicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ServicesTable,
			Columns: []string{project.ServicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.Service
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ServiceResourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ServiceResourcesTable,
			Columns: []string{project.ServiceResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceresource.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ServiceResource
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedServiceResourcesIDs(); len(nodes) > 0 && !puo.mutation.ServiceResourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ServiceResourcesTable,
			Columns: []string{project.ServiceResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceresource.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ServiceResource
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ServiceResourcesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ServiceResourcesTable,
			Columns: []string{project.ServiceResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceresource.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ServiceResource
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ServiceRevisionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ServiceRevisionsTable,
			Columns: []string{project.ServiceRevisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicerevision.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ServiceRevision
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedServiceRevisionsIDs(); len(nodes) > 0 && !puo.mutation.ServiceRevisionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ServiceRevisionsTable,
			Columns: []string{project.ServiceRevisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicerevision.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ServiceRevision
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ServiceRevisionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ServiceRevisionsTable,
			Columns: []string{project.ServiceRevisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicerevision.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ServiceRevision
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.VariablesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.VariablesTable,
			Columns: []string{project.VariablesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(variable.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.Variable
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedVariablesIDs(); len(nodes) > 0 && !puo.mutation.VariablesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.VariablesTable,
			Columns: []string{project.VariablesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(variable.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.Variable
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.VariablesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.VariablesTable,
			Columns: []string{project.VariablesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(variable.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.Variable
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = puo.schemaConfig.Project
	ctx = internal.NewSchemaConfigContext(ctx, puo.schemaConfig)
	_spec.AddModifiers(puo.modifiers...)
	_node = &Project{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
