// SPDX-FileCopyrightText: 2023 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "seal". DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"time"

	"github.com/seal-io/seal/pkg/dao/model/environmentconnectorrelationship"
	"github.com/seal-io/seal/pkg/dao/types/object"
)

// EnvironmentConnectorRelationshipCreateInput holds the creation input of the EnvironmentConnectorRelationship entity.
type EnvironmentConnectorRelationshipCreateInput struct {
	inputConfig `uri:"-" query:"-" json:"-"`

	Connector *ConnectorQueryInput `uri:"-" query:"-" json:"connector,omitempty"`
}

// Model returns the EnvironmentConnectorRelationship entity for creating,
// after validating.
func (ecrci *EnvironmentConnectorRelationshipCreateInput) Model() *EnvironmentConnectorRelationship {
	if ecrci == nil {
		return nil
	}

	ecr := &EnvironmentConnectorRelationship{}

	if ecrci.Connector != nil {
		ecr.ConnectorID = ecrci.Connector.ID
	}
	return ecr
}

// Load checks the input.
// TODO(thxCode): rename to Validate after supporting hierarchical routes.
func (ecrci *EnvironmentConnectorRelationshipCreateInput) Load() error {
	if ecrci == nil {
		return errors.New("nil receiver")
	}

	return ecrci.LoadWith(ecrci.inputConfig.Context, ecrci.inputConfig.ClientSet)
}

// LoadWith checks the input with the given context and client set.
// TODO(thxCode): rename to ValidateWith after supporting hierarchical routes.
func (ecrci *EnvironmentConnectorRelationshipCreateInput) LoadWith(ctx context.Context, cs ClientSet) (err error) {
	if ecrci == nil {
		return errors.New("nil receiver")
	}

	if ecrci.Connector != nil {
		err = ecrci.Connector.LoadWith(ctx, cs)
		if err != nil {
			return err
		}
	}
	return nil
}

// EnvironmentConnectorRelationshipCreateInputs holds the creation input item of the EnvironmentConnectorRelationship entities.
type EnvironmentConnectorRelationshipCreateInputsItem struct {
	Connector *ConnectorQueryInput `uri:"-" query:"-" json:"connector,omitempty"`
}

// EnvironmentConnectorRelationshipCreateInputs holds the creation input of the EnvironmentConnectorRelationship entities.
type EnvironmentConnectorRelationshipCreateInputs struct {
	inputConfig `uri:"-" query:"-" json:"-"`

	Items []*EnvironmentConnectorRelationshipCreateInputsItem `uri:"-" query:"-" json:"items"`
}

// Model returns the EnvironmentConnectorRelationship entities for creating,
// after validating.
func (ecrci *EnvironmentConnectorRelationshipCreateInputs) Model() []*EnvironmentConnectorRelationship {
	if ecrci == nil || len(ecrci.Items) == 0 {
		return nil
	}

	ecrs := make([]*EnvironmentConnectorRelationship, len(ecrci.Items))

	for i := range ecrci.Items {
		ecr := &EnvironmentConnectorRelationship{}

		if ecrci.Items[i].Connector != nil {
			ecr.ConnectorID = ecrci.Items[i].Connector.ID
		}

		ecrs[i] = ecr
	}

	return ecrs
}

// Load checks the input.
// TODO(thxCode): rename to Validate after supporting hierarchical routes.
func (ecrci *EnvironmentConnectorRelationshipCreateInputs) Load() error {
	if ecrci == nil {
		return errors.New("nil receiver")
	}

	return ecrci.LoadWith(ecrci.inputConfig.Context, ecrci.inputConfig.ClientSet)
}

// LoadWith checks the input with the given context and client set.
// TODO(thxCode): rename to ValidateWith after supporting hierarchical routes.
func (ecrci *EnvironmentConnectorRelationshipCreateInputs) LoadWith(ctx context.Context, cs ClientSet) (err error) {
	if ecrci == nil {
		return errors.New("nil receiver")
	}

	if len(ecrci.Items) == 0 {
		return errors.New("empty items")
	}

	return nil
}

// EnvironmentConnectorRelationshipDeleteInput holds the deletion input of the EnvironmentConnectorRelationship entity.
type EnvironmentConnectorRelationshipDeleteInput = EnvironmentConnectorRelationshipQueryInput

// EnvironmentConnectorRelationshipDeleteInputs holds the deletion input item of the EnvironmentConnectorRelationship entities.
type EnvironmentConnectorRelationshipDeleteInputsItem struct {
	ID object.ID `uri:"-" query:"-" json:"id"`
}

// EnvironmentConnectorRelationshipDeleteInputs holds the deletion input of the EnvironmentConnectorRelationship entities.
type EnvironmentConnectorRelationshipDeleteInputs struct {
	inputConfig `uri:"-" query:"-" json:"-"`

	Items []*EnvironmentConnectorRelationshipDeleteInputsItem `uri:"-" query:"-" json:"items"`
}

// Model returns the EnvironmentConnectorRelationship entities for deleting,
// after validating.
func (ecrdi *EnvironmentConnectorRelationshipDeleteInputs) Model() []*EnvironmentConnectorRelationship {
	if ecrdi == nil || len(ecrdi.Items) == 0 {
		return nil
	}

	ecrs := make([]*EnvironmentConnectorRelationship, len(ecrdi.Items))
	for i := range ecrdi.Items {
		ecrs[i] = &EnvironmentConnectorRelationship{
			ID: ecrdi.Items[i].ID,
		}
	}
	return ecrs
}

// Load checks the input.
// TODO(thxCode): rename to Validate after supporting hierarchical routes.
func (ecrdi *EnvironmentConnectorRelationshipDeleteInputs) Load() error {
	if ecrdi == nil {
		return errors.New("nil receiver")
	}

	return ecrdi.LoadWith(ecrdi.inputConfig.Context, ecrdi.inputConfig.ClientSet)
}

// LoadWith checks the input with the given context and client set.
// TODO(thxCode): rename to ValidateWith after supporting hierarchical routes.
func (ecrdi *EnvironmentConnectorRelationshipDeleteInputs) LoadWith(ctx context.Context, cs ClientSet) (err error) {
	if ecrdi == nil {
		return errors.New("nil receiver")
	}

	if len(ecrdi.Items) == 0 {
		return errors.New("empty items")
	}

	q := cs.EnvironmentConnectorRelationships().Query()

	ids := make([]object.ID, 0, len(ecrdi.Items))

	for i := range ecrdi.Items {
		if ecrdi.Items[i] == nil {
			return errors.New("nil item")
		}

		if ecrdi.Items[i].ID != "" {
			ids = append(ids, ecrdi.Items[i].ID)
		} else {
			return errors.New("found item hasn't identify")
		}
	}

	idsLen := len(ids)

	idsCnt, err := q.Where(environmentconnectorrelationship.IDIn(ids...)).
		Count(ctx)
	if err != nil {
		return err
	}

	if idsCnt != idsLen {
		return errors.New("found unrecognized item")
	}

	return nil
}

// EnvironmentConnectorRelationshipQueryInput holds the query input of the EnvironmentConnectorRelationship entity.
type EnvironmentConnectorRelationshipQueryInput struct {
	inputConfig `uri:"-" query:"-" json:"-"`

	Refer *object.Refer `uri:"environmentconnectorrelationship,default=\"\"" query:"-" json:"-"`
	ID    object.ID     `uri:"id" query:"-" json:"id"` // TODO(thxCode): remove the uri:"id" after supporting hierarchical routes.
}

// Model returns the EnvironmentConnectorRelationship entity for querying,
// after validating.
func (ecrqi *EnvironmentConnectorRelationshipQueryInput) Model() *EnvironmentConnectorRelationship {
	if ecrqi == nil {
		return nil
	}

	return &EnvironmentConnectorRelationship{
		ID: ecrqi.ID,
	}
}

// Load checks the input.
// TODO(thxCode): rename to Validate after supporting hierarchical routes.
func (ecrqi *EnvironmentConnectorRelationshipQueryInput) Load() error {
	if ecrqi == nil {
		return errors.New("nil receiver")
	}

	return ecrqi.LoadWith(ecrqi.inputConfig.Context, ecrqi.inputConfig.ClientSet)
}

// LoadWith checks the input with the given context and client set.
// TODO(thxCode): rename to ValidateWith after supporting hierarchical routes.
func (ecrqi *EnvironmentConnectorRelationshipQueryInput) LoadWith(ctx context.Context, cs ClientSet) (err error) {
	if ecrqi == nil {
		return errors.New("nil receiver")
	}

	if ecrqi.Refer != nil && *ecrqi.Refer == "" {
		return nil
	}

	q := cs.EnvironmentConnectorRelationships().Query()

	if ecrqi.Refer != nil {
		if ecrqi.Refer.IsID() {
			q.Where(
				environmentconnectorrelationship.ID(ecrqi.Refer.ID()))
		} else {
			return errors.New("invalid identify refer of environmentconnectorrelationship")
		}
	} else if ecrqi.ID != "" {
		q.Where(
			environmentconnectorrelationship.ID(ecrqi.ID))
	} else {
		return errors.New("invalid identify of environmentconnectorrelationship")
	}

	ecrqi.ID, err = q.OnlyID(ctx)
	return err
}

// EnvironmentConnectorRelationshipQueryInputs holds the query input of the EnvironmentConnectorRelationship entities.
type EnvironmentConnectorRelationshipQueryInputs struct {
	inputConfig `uri:"-" query:"-" json:"-"`
}

// Load checks the input.
// TODO(thxCode): rename to Validate after supporting hierarchical routes.
func (ecrqi *EnvironmentConnectorRelationshipQueryInputs) Load() error {
	if ecrqi == nil {
		return errors.New("nil receiver")
	}

	return ecrqi.LoadWith(ecrqi.inputConfig.Context, ecrqi.inputConfig.ClientSet)
}

// LoadWith checks the input with the given context and client set.
// TODO(thxCode): rename to ValidateWith after supporting hierarchical routes.
func (ecrqi *EnvironmentConnectorRelationshipQueryInputs) LoadWith(ctx context.Context, cs ClientSet) (err error) {
	if ecrqi == nil {
		return errors.New("nil receiver")
	}

	return err
}

// EnvironmentConnectorRelationshipUpdateInput holds the modification input of the EnvironmentConnectorRelationship entity.
type EnvironmentConnectorRelationshipUpdateInput struct {
	EnvironmentConnectorRelationshipQueryInput `uri:",inline" query:"-" json:",inline"`

	Connector *ConnectorQueryInput `uri:"-" query:"-" json:"connector,omitempty"`
}

// Model returns the EnvironmentConnectorRelationship entity for modifying,
// after validating.
func (ecrui *EnvironmentConnectorRelationshipUpdateInput) Model() *EnvironmentConnectorRelationship {
	if ecrui == nil {
		return nil
	}

	ecr := &EnvironmentConnectorRelationship{
		ID: ecrui.ID,
	}

	if ecrui.Connector != nil {
		ecr.ConnectorID = ecrui.Connector.ID
	}
	return ecr
}

// EnvironmentConnectorRelationshipUpdateInputs holds the modification input item of the EnvironmentConnectorRelationship entities.
type EnvironmentConnectorRelationshipUpdateInputsItem struct {
	ID object.ID `uri:"-" query:"-" json:"id"`

	Connector *ConnectorQueryInput `uri:"-" query:"-" json:"connector,omitempty"`
}

// EnvironmentConnectorRelationshipUpdateInputs holds the modification input of the EnvironmentConnectorRelationship entities.
type EnvironmentConnectorRelationshipUpdateInputs struct {
	inputConfig `uri:"-" query:"-" json:"-"`

	Items []*EnvironmentConnectorRelationshipUpdateInputsItem `uri:"-" query:"-" json:"items"`
}

// Model returns the EnvironmentConnectorRelationship entities for modifying,
// after validating.
func (ecrui *EnvironmentConnectorRelationshipUpdateInputs) Model() []*EnvironmentConnectorRelationship {
	if ecrui == nil || len(ecrui.Items) == 0 {
		return nil
	}

	ecrs := make([]*EnvironmentConnectorRelationship, len(ecrui.Items))

	for i := range ecrui.Items {
		ecr := &EnvironmentConnectorRelationship{
			ID: ecrui.Items[i].ID,
		}

		if ecrui.Items[i].Connector != nil {
			ecr.ConnectorID = ecrui.Items[i].Connector.ID
		}

		ecrs[i] = ecr
	}

	return ecrs
}

// Load checks the input.
// TODO(thxCode): rename to Validate after supporting hierarchical routes.
func (ecrui *EnvironmentConnectorRelationshipUpdateInputs) Load() error {
	if ecrui == nil {
		return errors.New("nil receiver")
	}

	return ecrui.LoadWith(ecrui.inputConfig.Context, ecrui.inputConfig.ClientSet)
}

// LoadWith checks the input with the given context and client set.
// TODO(thxCode): rename to ValidateWith after supporting hierarchical routes.
func (ecrui *EnvironmentConnectorRelationshipUpdateInputs) LoadWith(ctx context.Context, cs ClientSet) (err error) {
	if ecrui == nil {
		return errors.New("nil receiver")
	}

	if len(ecrui.Items) == 0 {
		return errors.New("empty items")
	}

	q := cs.EnvironmentConnectorRelationships().Query()

	ids := make([]object.ID, 0, len(ecrui.Items))

	for i := range ecrui.Items {
		if ecrui.Items[i] == nil {
			return errors.New("nil item")
		}

		if ecrui.Items[i].ID != "" {
			ids = append(ids, ecrui.Items[i].ID)
		} else {
			return errors.New("found item hasn't identify")
		}
	}

	idsLen := len(ids)

	idsCnt, err := q.Where(environmentconnectorrelationship.IDIn(ids...)).
		Count(ctx)
	if err != nil {
		return err
	}

	if idsCnt != idsLen {
		return errors.New("found unrecognized item")
	}

	return nil
}

// EnvironmentConnectorRelationshipOutput holds the output of the EnvironmentConnectorRelationship entity.
type EnvironmentConnectorRelationshipOutput struct {
	ID         object.ID  `json:"id,omitempty"`
	CreateTime *time.Time `json:"createTime,omitempty"`

	Connector *ConnectorOutput `json:"connector,omitempty"`
}

// View returns the output of EnvironmentConnectorRelationship.
func (ecr *EnvironmentConnectorRelationship) View() *EnvironmentConnectorRelationshipOutput {
	return ExposeEnvironmentConnectorRelationship(ecr)
}

// View returns the output of EnvironmentConnectorRelationships.
func (ecrs EnvironmentConnectorRelationships) View() []*EnvironmentConnectorRelationshipOutput {
	return ExposeEnvironmentConnectorRelationships(ecrs)
}

// ExposeEnvironmentConnectorRelationship converts the EnvironmentConnectorRelationship to EnvironmentConnectorRelationshipOutput.
func ExposeEnvironmentConnectorRelationship(ecr *EnvironmentConnectorRelationship) *EnvironmentConnectorRelationshipOutput {
	if ecr == nil {
		return nil
	}

	ecro := &EnvironmentConnectorRelationshipOutput{
		ID:         ecr.ID,
		CreateTime: ecr.CreateTime,
	}

	if ecr.Edges.Connector != nil {
		ecro.Connector = ExposeConnector(ecr.Edges.Connector)
	} else if ecr.ConnectorID != "" {
		ecro.Connector = &ConnectorOutput{
			ID: ecr.ConnectorID,
		}
	}
	return ecro
}

// ExposeEnvironmentConnectorRelationships converts the EnvironmentConnectorRelationship slice to EnvironmentConnectorRelationshipOutput pointer slice.
func ExposeEnvironmentConnectorRelationships(ecrs []*EnvironmentConnectorRelationship) []*EnvironmentConnectorRelationshipOutput {
	if len(ecrs) == 0 {
		return nil
	}

	ecros := make([]*EnvironmentConnectorRelationshipOutput, len(ecrs))
	for i := range ecrs {
		ecros[i] = ExposeEnvironmentConnectorRelationship(ecrs[i])
	}
	return ecros
}
