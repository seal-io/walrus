// SPDX-FileCopyrightText: 2023 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus". DO NOT EDIT.

package model

import (
	"context"
	stdsql "database/sql"
	"errors"
	"fmt"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/seal-io/walrus/pkg/dao/model/costreport"
	"github.com/seal-io/walrus/pkg/dao/model/internal"
	"github.com/seal-io/walrus/pkg/dao/model/predicate"
)

// CostReportUpdate is the builder for updating CostReport entities.
type CostReportUpdate struct {
	config
	hooks     []Hook
	mutation  *CostReportMutation
	modifiers []func(*sql.UpdateBuilder)
	object    *CostReport
}

// Where appends a list predicates to the CostReportUpdate builder.
func (cru *CostReportUpdate) Where(ps ...predicate.CostReport) *CostReportUpdate {
	cru.mutation.Where(ps...)
	return cru
}

// SetTotalCost sets the "totalCost" field.
func (cru *CostReportUpdate) SetTotalCost(f float64) *CostReportUpdate {
	cru.mutation.ResetTotalCost()
	cru.mutation.SetTotalCost(f)
	return cru
}

// SetNillableTotalCost sets the "totalCost" field if the given value is not nil.
func (cru *CostReportUpdate) SetNillableTotalCost(f *float64) *CostReportUpdate {
	if f != nil {
		cru.SetTotalCost(*f)
	}
	return cru
}

// AddTotalCost adds f to the "totalCost" field.
func (cru *CostReportUpdate) AddTotalCost(f float64) *CostReportUpdate {
	cru.mutation.AddTotalCost(f)
	return cru
}

// SetCurrency sets the "currency" field.
func (cru *CostReportUpdate) SetCurrency(i int) *CostReportUpdate {
	cru.mutation.ResetCurrency()
	cru.mutation.SetCurrency(i)
	return cru
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (cru *CostReportUpdate) SetNillableCurrency(i *int) *CostReportUpdate {
	if i != nil {
		cru.SetCurrency(*i)
	}
	return cru
}

// AddCurrency adds i to the "currency" field.
func (cru *CostReportUpdate) AddCurrency(i int) *CostReportUpdate {
	cru.mutation.AddCurrency(i)
	return cru
}

// ClearCurrency clears the value of the "currency" field.
func (cru *CostReportUpdate) ClearCurrency() *CostReportUpdate {
	cru.mutation.ClearCurrency()
	return cru
}

// SetCPUCost sets the "cpu_cost" field.
func (cru *CostReportUpdate) SetCPUCost(f float64) *CostReportUpdate {
	cru.mutation.ResetCPUCost()
	cru.mutation.SetCPUCost(f)
	return cru
}

// SetNillableCPUCost sets the "cpu_cost" field if the given value is not nil.
func (cru *CostReportUpdate) SetNillableCPUCost(f *float64) *CostReportUpdate {
	if f != nil {
		cru.SetCPUCost(*f)
	}
	return cru
}

// AddCPUCost adds f to the "cpu_cost" field.
func (cru *CostReportUpdate) AddCPUCost(f float64) *CostReportUpdate {
	cru.mutation.AddCPUCost(f)
	return cru
}

// SetGPUCost sets the "gpu_cost" field.
func (cru *CostReportUpdate) SetGPUCost(f float64) *CostReportUpdate {
	cru.mutation.ResetGPUCost()
	cru.mutation.SetGPUCost(f)
	return cru
}

// SetNillableGPUCost sets the "gpu_cost" field if the given value is not nil.
func (cru *CostReportUpdate) SetNillableGPUCost(f *float64) *CostReportUpdate {
	if f != nil {
		cru.SetGPUCost(*f)
	}
	return cru
}

// AddGPUCost adds f to the "gpu_cost" field.
func (cru *CostReportUpdate) AddGPUCost(f float64) *CostReportUpdate {
	cru.mutation.AddGPUCost(f)
	return cru
}

// SetRAMCost sets the "ram_cost" field.
func (cru *CostReportUpdate) SetRAMCost(f float64) *CostReportUpdate {
	cru.mutation.ResetRAMCost()
	cru.mutation.SetRAMCost(f)
	return cru
}

// SetNillableRAMCost sets the "ram_cost" field if the given value is not nil.
func (cru *CostReportUpdate) SetNillableRAMCost(f *float64) *CostReportUpdate {
	if f != nil {
		cru.SetRAMCost(*f)
	}
	return cru
}

// AddRAMCost adds f to the "ram_cost" field.
func (cru *CostReportUpdate) AddRAMCost(f float64) *CostReportUpdate {
	cru.mutation.AddRAMCost(f)
	return cru
}

// SetPVCost sets the "pv_cost" field.
func (cru *CostReportUpdate) SetPVCost(f float64) *CostReportUpdate {
	cru.mutation.ResetPVCost()
	cru.mutation.SetPVCost(f)
	return cru
}

// SetNillablePVCost sets the "pv_cost" field if the given value is not nil.
func (cru *CostReportUpdate) SetNillablePVCost(f *float64) *CostReportUpdate {
	if f != nil {
		cru.SetPVCost(*f)
	}
	return cru
}

// AddPVCost adds f to the "pv_cost" field.
func (cru *CostReportUpdate) AddPVCost(f float64) *CostReportUpdate {
	cru.mutation.AddPVCost(f)
	return cru
}

// SetPVBytes sets the "pv_bytes" field.
func (cru *CostReportUpdate) SetPVBytes(f float64) *CostReportUpdate {
	cru.mutation.ResetPVBytes()
	cru.mutation.SetPVBytes(f)
	return cru
}

// SetNillablePVBytes sets the "pv_bytes" field if the given value is not nil.
func (cru *CostReportUpdate) SetNillablePVBytes(f *float64) *CostReportUpdate {
	if f != nil {
		cru.SetPVBytes(*f)
	}
	return cru
}

// AddPVBytes adds f to the "pv_bytes" field.
func (cru *CostReportUpdate) AddPVBytes(f float64) *CostReportUpdate {
	cru.mutation.AddPVBytes(f)
	return cru
}

// SetLoadBalancerCost sets the "load_balancer_cost" field.
func (cru *CostReportUpdate) SetLoadBalancerCost(f float64) *CostReportUpdate {
	cru.mutation.ResetLoadBalancerCost()
	cru.mutation.SetLoadBalancerCost(f)
	return cru
}

// SetNillableLoadBalancerCost sets the "load_balancer_cost" field if the given value is not nil.
func (cru *CostReportUpdate) SetNillableLoadBalancerCost(f *float64) *CostReportUpdate {
	if f != nil {
		cru.SetLoadBalancerCost(*f)
	}
	return cru
}

// AddLoadBalancerCost adds f to the "load_balancer_cost" field.
func (cru *CostReportUpdate) AddLoadBalancerCost(f float64) *CostReportUpdate {
	cru.mutation.AddLoadBalancerCost(f)
	return cru
}

// SetCPUCoreUsageAverage sets the "cpu_core_usage_average" field.
func (cru *CostReportUpdate) SetCPUCoreUsageAverage(f float64) *CostReportUpdate {
	cru.mutation.ResetCPUCoreUsageAverage()
	cru.mutation.SetCPUCoreUsageAverage(f)
	return cru
}

// SetNillableCPUCoreUsageAverage sets the "cpu_core_usage_average" field if the given value is not nil.
func (cru *CostReportUpdate) SetNillableCPUCoreUsageAverage(f *float64) *CostReportUpdate {
	if f != nil {
		cru.SetCPUCoreUsageAverage(*f)
	}
	return cru
}

// AddCPUCoreUsageAverage adds f to the "cpu_core_usage_average" field.
func (cru *CostReportUpdate) AddCPUCoreUsageAverage(f float64) *CostReportUpdate {
	cru.mutation.AddCPUCoreUsageAverage(f)
	return cru
}

// SetCPUCoreUsageMax sets the "cpu_core_usage_max" field.
func (cru *CostReportUpdate) SetCPUCoreUsageMax(f float64) *CostReportUpdate {
	cru.mutation.ResetCPUCoreUsageMax()
	cru.mutation.SetCPUCoreUsageMax(f)
	return cru
}

// SetNillableCPUCoreUsageMax sets the "cpu_core_usage_max" field if the given value is not nil.
func (cru *CostReportUpdate) SetNillableCPUCoreUsageMax(f *float64) *CostReportUpdate {
	if f != nil {
		cru.SetCPUCoreUsageMax(*f)
	}
	return cru
}

// AddCPUCoreUsageMax adds f to the "cpu_core_usage_max" field.
func (cru *CostReportUpdate) AddCPUCoreUsageMax(f float64) *CostReportUpdate {
	cru.mutation.AddCPUCoreUsageMax(f)
	return cru
}

// SetRAMByteUsageAverage sets the "ram_byte_usage_average" field.
func (cru *CostReportUpdate) SetRAMByteUsageAverage(f float64) *CostReportUpdate {
	cru.mutation.ResetRAMByteUsageAverage()
	cru.mutation.SetRAMByteUsageAverage(f)
	return cru
}

// SetNillableRAMByteUsageAverage sets the "ram_byte_usage_average" field if the given value is not nil.
func (cru *CostReportUpdate) SetNillableRAMByteUsageAverage(f *float64) *CostReportUpdate {
	if f != nil {
		cru.SetRAMByteUsageAverage(*f)
	}
	return cru
}

// AddRAMByteUsageAverage adds f to the "ram_byte_usage_average" field.
func (cru *CostReportUpdate) AddRAMByteUsageAverage(f float64) *CostReportUpdate {
	cru.mutation.AddRAMByteUsageAverage(f)
	return cru
}

// SetRAMByteUsageMax sets the "ram_byte_usage_max" field.
func (cru *CostReportUpdate) SetRAMByteUsageMax(f float64) *CostReportUpdate {
	cru.mutation.ResetRAMByteUsageMax()
	cru.mutation.SetRAMByteUsageMax(f)
	return cru
}

// SetNillableRAMByteUsageMax sets the "ram_byte_usage_max" field if the given value is not nil.
func (cru *CostReportUpdate) SetNillableRAMByteUsageMax(f *float64) *CostReportUpdate {
	if f != nil {
		cru.SetRAMByteUsageMax(*f)
	}
	return cru
}

// AddRAMByteUsageMax adds f to the "ram_byte_usage_max" field.
func (cru *CostReportUpdate) AddRAMByteUsageMax(f float64) *CostReportUpdate {
	cru.mutation.AddRAMByteUsageMax(f)
	return cru
}

// Mutation returns the CostReportMutation object of the builder.
func (cru *CostReportUpdate) Mutation() *CostReportMutation {
	return cru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cru *CostReportUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cru.sqlSave, cru.mutation, cru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cru *CostReportUpdate) SaveX(ctx context.Context) int {
	affected, err := cru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cru *CostReportUpdate) Exec(ctx context.Context) error {
	_, err := cru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cru *CostReportUpdate) ExecX(ctx context.Context) {
	if err := cru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cru *CostReportUpdate) check() error {
	if _, ok := cru.mutation.ConnectorID(); cru.mutation.ConnectorCleared() && !ok {
		return errors.New(`model: clearing a required unique edge "CostReport.connector"`)
	}
	return nil
}

// Set is different from other Set* methods,
// it sets the value by judging the definition of each field within the entire object.
//
// For default fields, Set calls if the value is not zero.
//
// For no default but required fields, Set calls directly.
//
// For no default but optional fields, Set calls if the value is not zero,
// or clears if the value is zero.
//
// For example:
//
//	## Without Default
//
//	### Required
//
//	db.SetX(obj.X)
//
//	### Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	} else {
//	   db.ClearX()
//	}
//
//	## With Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (cru *CostReportUpdate) Set(obj *CostReport) *CostReportUpdate {
	// Without Default.
	cru.SetTotalCost(obj.TotalCost)
	if obj.Currency != 0 {
		cru.SetCurrency(obj.Currency)
	}
	cru.SetCPUCost(obj.CPUCost)
	cru.SetGPUCost(obj.GPUCost)
	cru.SetRAMCost(obj.RAMCost)
	cru.SetPVCost(obj.PVCost)
	cru.SetPVBytes(obj.PVBytes)
	cru.SetLoadBalancerCost(obj.LoadBalancerCost)
	cru.SetCPUCoreUsageAverage(obj.CPUCoreUsageAverage)
	cru.SetCPUCoreUsageMax(obj.CPUCoreUsageMax)
	cru.SetRAMByteUsageAverage(obj.RAMByteUsageAverage)
	cru.SetRAMByteUsageMax(obj.RAMByteUsageMax)

	// With Default.

	// Record the given object.
	cru.object = obj

	return cru
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cru *CostReportUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CostReportUpdate {
	cru.modifiers = append(cru.modifiers, modifiers...)
	return cru
}

func (cru *CostReportUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(costreport.Table, costreport.Columns, sqlgraph.NewFieldSpec(costreport.FieldID, field.TypeInt))
	if ps := cru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cru.mutation.ClusterNameCleared() {
		_spec.ClearField(costreport.FieldClusterName, field.TypeString)
	}
	if cru.mutation.NamespaceCleared() {
		_spec.ClearField(costreport.FieldNamespace, field.TypeString)
	}
	if cru.mutation.NodeCleared() {
		_spec.ClearField(costreport.FieldNode, field.TypeString)
	}
	if cru.mutation.ControllerCleared() {
		_spec.ClearField(costreport.FieldController, field.TypeString)
	}
	if cru.mutation.ControllerKindCleared() {
		_spec.ClearField(costreport.FieldControllerKind, field.TypeString)
	}
	if cru.mutation.PodCleared() {
		_spec.ClearField(costreport.FieldPod, field.TypeString)
	}
	if cru.mutation.ContainerCleared() {
		_spec.ClearField(costreport.FieldContainer, field.TypeString)
	}
	if value, ok := cru.mutation.TotalCost(); ok {
		_spec.SetField(costreport.FieldTotalCost, field.TypeFloat64, value)
	}
	if value, ok := cru.mutation.AddedTotalCost(); ok {
		_spec.AddField(costreport.FieldTotalCost, field.TypeFloat64, value)
	}
	if value, ok := cru.mutation.Currency(); ok {
		_spec.SetField(costreport.FieldCurrency, field.TypeInt, value)
	}
	if value, ok := cru.mutation.AddedCurrency(); ok {
		_spec.AddField(costreport.FieldCurrency, field.TypeInt, value)
	}
	if cru.mutation.CurrencyCleared() {
		_spec.ClearField(costreport.FieldCurrency, field.TypeInt)
	}
	if value, ok := cru.mutation.CPUCost(); ok {
		_spec.SetField(costreport.FieldCPUCost, field.TypeFloat64, value)
	}
	if value, ok := cru.mutation.AddedCPUCost(); ok {
		_spec.AddField(costreport.FieldCPUCost, field.TypeFloat64, value)
	}
	if value, ok := cru.mutation.GPUCost(); ok {
		_spec.SetField(costreport.FieldGPUCost, field.TypeFloat64, value)
	}
	if value, ok := cru.mutation.AddedGPUCost(); ok {
		_spec.AddField(costreport.FieldGPUCost, field.TypeFloat64, value)
	}
	if value, ok := cru.mutation.RAMCost(); ok {
		_spec.SetField(costreport.FieldRAMCost, field.TypeFloat64, value)
	}
	if value, ok := cru.mutation.AddedRAMCost(); ok {
		_spec.AddField(costreport.FieldRAMCost, field.TypeFloat64, value)
	}
	if value, ok := cru.mutation.PVCost(); ok {
		_spec.SetField(costreport.FieldPVCost, field.TypeFloat64, value)
	}
	if value, ok := cru.mutation.AddedPVCost(); ok {
		_spec.AddField(costreport.FieldPVCost, field.TypeFloat64, value)
	}
	if value, ok := cru.mutation.PVBytes(); ok {
		_spec.SetField(costreport.FieldPVBytes, field.TypeFloat64, value)
	}
	if value, ok := cru.mutation.AddedPVBytes(); ok {
		_spec.AddField(costreport.FieldPVBytes, field.TypeFloat64, value)
	}
	if value, ok := cru.mutation.LoadBalancerCost(); ok {
		_spec.SetField(costreport.FieldLoadBalancerCost, field.TypeFloat64, value)
	}
	if value, ok := cru.mutation.AddedLoadBalancerCost(); ok {
		_spec.AddField(costreport.FieldLoadBalancerCost, field.TypeFloat64, value)
	}
	if value, ok := cru.mutation.CPUCoreUsageAverage(); ok {
		_spec.SetField(costreport.FieldCPUCoreUsageAverage, field.TypeFloat64, value)
	}
	if value, ok := cru.mutation.AddedCPUCoreUsageAverage(); ok {
		_spec.AddField(costreport.FieldCPUCoreUsageAverage, field.TypeFloat64, value)
	}
	if value, ok := cru.mutation.CPUCoreUsageMax(); ok {
		_spec.SetField(costreport.FieldCPUCoreUsageMax, field.TypeFloat64, value)
	}
	if value, ok := cru.mutation.AddedCPUCoreUsageMax(); ok {
		_spec.AddField(costreport.FieldCPUCoreUsageMax, field.TypeFloat64, value)
	}
	if value, ok := cru.mutation.RAMByteUsageAverage(); ok {
		_spec.SetField(costreport.FieldRAMByteUsageAverage, field.TypeFloat64, value)
	}
	if value, ok := cru.mutation.AddedRAMByteUsageAverage(); ok {
		_spec.AddField(costreport.FieldRAMByteUsageAverage, field.TypeFloat64, value)
	}
	if value, ok := cru.mutation.RAMByteUsageMax(); ok {
		_spec.SetField(costreport.FieldRAMByteUsageMax, field.TypeFloat64, value)
	}
	if value, ok := cru.mutation.AddedRAMByteUsageMax(); ok {
		_spec.AddField(costreport.FieldRAMByteUsageMax, field.TypeFloat64, value)
	}
	_spec.Node.Schema = cru.schemaConfig.CostReport
	ctx = internal.NewSchemaConfigContext(ctx, cru.schemaConfig)
	_spec.AddModifiers(cru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{costreport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cru.mutation.done = true
	return n, nil
}

// CostReportUpdateOne is the builder for updating a single CostReport entity.
type CostReportUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CostReportMutation
	modifiers []func(*sql.UpdateBuilder)
	object    *CostReport
}

// SetTotalCost sets the "totalCost" field.
func (cruo *CostReportUpdateOne) SetTotalCost(f float64) *CostReportUpdateOne {
	cruo.mutation.ResetTotalCost()
	cruo.mutation.SetTotalCost(f)
	return cruo
}

// SetNillableTotalCost sets the "totalCost" field if the given value is not nil.
func (cruo *CostReportUpdateOne) SetNillableTotalCost(f *float64) *CostReportUpdateOne {
	if f != nil {
		cruo.SetTotalCost(*f)
	}
	return cruo
}

// AddTotalCost adds f to the "totalCost" field.
func (cruo *CostReportUpdateOne) AddTotalCost(f float64) *CostReportUpdateOne {
	cruo.mutation.AddTotalCost(f)
	return cruo
}

// SetCurrency sets the "currency" field.
func (cruo *CostReportUpdateOne) SetCurrency(i int) *CostReportUpdateOne {
	cruo.mutation.ResetCurrency()
	cruo.mutation.SetCurrency(i)
	return cruo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (cruo *CostReportUpdateOne) SetNillableCurrency(i *int) *CostReportUpdateOne {
	if i != nil {
		cruo.SetCurrency(*i)
	}
	return cruo
}

// AddCurrency adds i to the "currency" field.
func (cruo *CostReportUpdateOne) AddCurrency(i int) *CostReportUpdateOne {
	cruo.mutation.AddCurrency(i)
	return cruo
}

// ClearCurrency clears the value of the "currency" field.
func (cruo *CostReportUpdateOne) ClearCurrency() *CostReportUpdateOne {
	cruo.mutation.ClearCurrency()
	return cruo
}

// SetCPUCost sets the "cpu_cost" field.
func (cruo *CostReportUpdateOne) SetCPUCost(f float64) *CostReportUpdateOne {
	cruo.mutation.ResetCPUCost()
	cruo.mutation.SetCPUCost(f)
	return cruo
}

// SetNillableCPUCost sets the "cpu_cost" field if the given value is not nil.
func (cruo *CostReportUpdateOne) SetNillableCPUCost(f *float64) *CostReportUpdateOne {
	if f != nil {
		cruo.SetCPUCost(*f)
	}
	return cruo
}

// AddCPUCost adds f to the "cpu_cost" field.
func (cruo *CostReportUpdateOne) AddCPUCost(f float64) *CostReportUpdateOne {
	cruo.mutation.AddCPUCost(f)
	return cruo
}

// SetGPUCost sets the "gpu_cost" field.
func (cruo *CostReportUpdateOne) SetGPUCost(f float64) *CostReportUpdateOne {
	cruo.mutation.ResetGPUCost()
	cruo.mutation.SetGPUCost(f)
	return cruo
}

// SetNillableGPUCost sets the "gpu_cost" field if the given value is not nil.
func (cruo *CostReportUpdateOne) SetNillableGPUCost(f *float64) *CostReportUpdateOne {
	if f != nil {
		cruo.SetGPUCost(*f)
	}
	return cruo
}

// AddGPUCost adds f to the "gpu_cost" field.
func (cruo *CostReportUpdateOne) AddGPUCost(f float64) *CostReportUpdateOne {
	cruo.mutation.AddGPUCost(f)
	return cruo
}

// SetRAMCost sets the "ram_cost" field.
func (cruo *CostReportUpdateOne) SetRAMCost(f float64) *CostReportUpdateOne {
	cruo.mutation.ResetRAMCost()
	cruo.mutation.SetRAMCost(f)
	return cruo
}

// SetNillableRAMCost sets the "ram_cost" field if the given value is not nil.
func (cruo *CostReportUpdateOne) SetNillableRAMCost(f *float64) *CostReportUpdateOne {
	if f != nil {
		cruo.SetRAMCost(*f)
	}
	return cruo
}

// AddRAMCost adds f to the "ram_cost" field.
func (cruo *CostReportUpdateOne) AddRAMCost(f float64) *CostReportUpdateOne {
	cruo.mutation.AddRAMCost(f)
	return cruo
}

// SetPVCost sets the "pv_cost" field.
func (cruo *CostReportUpdateOne) SetPVCost(f float64) *CostReportUpdateOne {
	cruo.mutation.ResetPVCost()
	cruo.mutation.SetPVCost(f)
	return cruo
}

// SetNillablePVCost sets the "pv_cost" field if the given value is not nil.
func (cruo *CostReportUpdateOne) SetNillablePVCost(f *float64) *CostReportUpdateOne {
	if f != nil {
		cruo.SetPVCost(*f)
	}
	return cruo
}

// AddPVCost adds f to the "pv_cost" field.
func (cruo *CostReportUpdateOne) AddPVCost(f float64) *CostReportUpdateOne {
	cruo.mutation.AddPVCost(f)
	return cruo
}

// SetPVBytes sets the "pv_bytes" field.
func (cruo *CostReportUpdateOne) SetPVBytes(f float64) *CostReportUpdateOne {
	cruo.mutation.ResetPVBytes()
	cruo.mutation.SetPVBytes(f)
	return cruo
}

// SetNillablePVBytes sets the "pv_bytes" field if the given value is not nil.
func (cruo *CostReportUpdateOne) SetNillablePVBytes(f *float64) *CostReportUpdateOne {
	if f != nil {
		cruo.SetPVBytes(*f)
	}
	return cruo
}

// AddPVBytes adds f to the "pv_bytes" field.
func (cruo *CostReportUpdateOne) AddPVBytes(f float64) *CostReportUpdateOne {
	cruo.mutation.AddPVBytes(f)
	return cruo
}

// SetLoadBalancerCost sets the "load_balancer_cost" field.
func (cruo *CostReportUpdateOne) SetLoadBalancerCost(f float64) *CostReportUpdateOne {
	cruo.mutation.ResetLoadBalancerCost()
	cruo.mutation.SetLoadBalancerCost(f)
	return cruo
}

// SetNillableLoadBalancerCost sets the "load_balancer_cost" field if the given value is not nil.
func (cruo *CostReportUpdateOne) SetNillableLoadBalancerCost(f *float64) *CostReportUpdateOne {
	if f != nil {
		cruo.SetLoadBalancerCost(*f)
	}
	return cruo
}

// AddLoadBalancerCost adds f to the "load_balancer_cost" field.
func (cruo *CostReportUpdateOne) AddLoadBalancerCost(f float64) *CostReportUpdateOne {
	cruo.mutation.AddLoadBalancerCost(f)
	return cruo
}

// SetCPUCoreUsageAverage sets the "cpu_core_usage_average" field.
func (cruo *CostReportUpdateOne) SetCPUCoreUsageAverage(f float64) *CostReportUpdateOne {
	cruo.mutation.ResetCPUCoreUsageAverage()
	cruo.mutation.SetCPUCoreUsageAverage(f)
	return cruo
}

// SetNillableCPUCoreUsageAverage sets the "cpu_core_usage_average" field if the given value is not nil.
func (cruo *CostReportUpdateOne) SetNillableCPUCoreUsageAverage(f *float64) *CostReportUpdateOne {
	if f != nil {
		cruo.SetCPUCoreUsageAverage(*f)
	}
	return cruo
}

// AddCPUCoreUsageAverage adds f to the "cpu_core_usage_average" field.
func (cruo *CostReportUpdateOne) AddCPUCoreUsageAverage(f float64) *CostReportUpdateOne {
	cruo.mutation.AddCPUCoreUsageAverage(f)
	return cruo
}

// SetCPUCoreUsageMax sets the "cpu_core_usage_max" field.
func (cruo *CostReportUpdateOne) SetCPUCoreUsageMax(f float64) *CostReportUpdateOne {
	cruo.mutation.ResetCPUCoreUsageMax()
	cruo.mutation.SetCPUCoreUsageMax(f)
	return cruo
}

// SetNillableCPUCoreUsageMax sets the "cpu_core_usage_max" field if the given value is not nil.
func (cruo *CostReportUpdateOne) SetNillableCPUCoreUsageMax(f *float64) *CostReportUpdateOne {
	if f != nil {
		cruo.SetCPUCoreUsageMax(*f)
	}
	return cruo
}

// AddCPUCoreUsageMax adds f to the "cpu_core_usage_max" field.
func (cruo *CostReportUpdateOne) AddCPUCoreUsageMax(f float64) *CostReportUpdateOne {
	cruo.mutation.AddCPUCoreUsageMax(f)
	return cruo
}

// SetRAMByteUsageAverage sets the "ram_byte_usage_average" field.
func (cruo *CostReportUpdateOne) SetRAMByteUsageAverage(f float64) *CostReportUpdateOne {
	cruo.mutation.ResetRAMByteUsageAverage()
	cruo.mutation.SetRAMByteUsageAverage(f)
	return cruo
}

// SetNillableRAMByteUsageAverage sets the "ram_byte_usage_average" field if the given value is not nil.
func (cruo *CostReportUpdateOne) SetNillableRAMByteUsageAverage(f *float64) *CostReportUpdateOne {
	if f != nil {
		cruo.SetRAMByteUsageAverage(*f)
	}
	return cruo
}

// AddRAMByteUsageAverage adds f to the "ram_byte_usage_average" field.
func (cruo *CostReportUpdateOne) AddRAMByteUsageAverage(f float64) *CostReportUpdateOne {
	cruo.mutation.AddRAMByteUsageAverage(f)
	return cruo
}

// SetRAMByteUsageMax sets the "ram_byte_usage_max" field.
func (cruo *CostReportUpdateOne) SetRAMByteUsageMax(f float64) *CostReportUpdateOne {
	cruo.mutation.ResetRAMByteUsageMax()
	cruo.mutation.SetRAMByteUsageMax(f)
	return cruo
}

// SetNillableRAMByteUsageMax sets the "ram_byte_usage_max" field if the given value is not nil.
func (cruo *CostReportUpdateOne) SetNillableRAMByteUsageMax(f *float64) *CostReportUpdateOne {
	if f != nil {
		cruo.SetRAMByteUsageMax(*f)
	}
	return cruo
}

// AddRAMByteUsageMax adds f to the "ram_byte_usage_max" field.
func (cruo *CostReportUpdateOne) AddRAMByteUsageMax(f float64) *CostReportUpdateOne {
	cruo.mutation.AddRAMByteUsageMax(f)
	return cruo
}

// Mutation returns the CostReportMutation object of the builder.
func (cruo *CostReportUpdateOne) Mutation() *CostReportMutation {
	return cruo.mutation
}

// Where appends a list predicates to the CostReportUpdate builder.
func (cruo *CostReportUpdateOne) Where(ps ...predicate.CostReport) *CostReportUpdateOne {
	cruo.mutation.Where(ps...)
	return cruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cruo *CostReportUpdateOne) Select(field string, fields ...string) *CostReportUpdateOne {
	cruo.fields = append([]string{field}, fields...)
	return cruo
}

// Save executes the query and returns the updated CostReport entity.
func (cruo *CostReportUpdateOne) Save(ctx context.Context) (*CostReport, error) {
	return withHooks(ctx, cruo.sqlSave, cruo.mutation, cruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cruo *CostReportUpdateOne) SaveX(ctx context.Context) *CostReport {
	node, err := cruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cruo *CostReportUpdateOne) Exec(ctx context.Context) error {
	_, err := cruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cruo *CostReportUpdateOne) ExecX(ctx context.Context) {
	if err := cruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cruo *CostReportUpdateOne) check() error {
	if _, ok := cruo.mutation.ConnectorID(); cruo.mutation.ConnectorCleared() && !ok {
		return errors.New(`model: clearing a required unique edge "CostReport.connector"`)
	}
	return nil
}

// Set is different from other Set* methods,
// it sets the value by judging the definition of each field within the entire object.
//
// For default fields, Set calls if the value changes from the original.
//
// For no default but required fields, Set calls if the value changes from the original.
//
// For no default but optional fields, Set calls if the value changes from the original,
// or clears if changes to zero.
//
// For example:
//
//	## Without Default
//
//	### Required
//
//	db.SetX(obj.X)
//
//	### Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   if _is_not_equal_(db.X, obj.X) {
//	      db.SetX(obj.X)
//	   }
//	} else {
//	   db.ClearX()
//	}
//
//	## With Default
//
//	if _is_zero_value_(obj.X) && _is_not_equal_(db.X, obj.X) {
//	   db.SetX(obj.X)
//	}
func (cruo *CostReportUpdateOne) Set(obj *CostReport) *CostReportUpdateOne {
	h := func(n ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			mt := m.(*CostReportMutation)
			db, err := mt.Client().CostReport.Get(ctx, *mt.id)
			if err != nil {
				return nil, fmt.Errorf("failed getting CostReport with id: %v", *mt.id)
			}

			// Without Default.
			if db.TotalCost != obj.TotalCost {
				cruo.SetTotalCost(obj.TotalCost)
			}
			if obj.Currency != 0 {
				if db.Currency != obj.Currency {
					cruo.SetCurrency(obj.Currency)
				}
			}
			if db.CPUCost != obj.CPUCost {
				cruo.SetCPUCost(obj.CPUCost)
			}
			if db.GPUCost != obj.GPUCost {
				cruo.SetGPUCost(obj.GPUCost)
			}
			if db.RAMCost != obj.RAMCost {
				cruo.SetRAMCost(obj.RAMCost)
			}
			if db.PVCost != obj.PVCost {
				cruo.SetPVCost(obj.PVCost)
			}
			if db.PVBytes != obj.PVBytes {
				cruo.SetPVBytes(obj.PVBytes)
			}
			if db.LoadBalancerCost != obj.LoadBalancerCost {
				cruo.SetLoadBalancerCost(obj.LoadBalancerCost)
			}
			if db.CPUCoreUsageAverage != obj.CPUCoreUsageAverage {
				cruo.SetCPUCoreUsageAverage(obj.CPUCoreUsageAverage)
			}
			if db.CPUCoreUsageMax != obj.CPUCoreUsageMax {
				cruo.SetCPUCoreUsageMax(obj.CPUCoreUsageMax)
			}
			if db.RAMByteUsageAverage != obj.RAMByteUsageAverage {
				cruo.SetRAMByteUsageAverage(obj.RAMByteUsageAverage)
			}
			if db.RAMByteUsageMax != obj.RAMByteUsageMax {
				cruo.SetRAMByteUsageMax(obj.RAMByteUsageMax)
			}

			// With Default.

			// Record the given object.
			cruo.object = obj

			return n.Mutate(ctx, m)
		})
	}

	cruo.hooks = append(cruo.hooks, h)

	return cruo
}

// getClientSet returns the ClientSet for the given builder.
func (cruo *CostReportUpdateOne) getClientSet() (mc ClientSet) {
	if _, ok := cruo.config.driver.(*txDriver); ok {
		tx := &Tx{config: cruo.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: cruo.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after updated the CostReport entity,
// which is always good for cascading update operations.
func (cruo *CostReportUpdateOne) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *CostReport) error) (*CostReport, error) {
	obj, err := cruo.Save(ctx)
	if err != nil &&
		(cruo.object == nil || !errors.Is(err, stdsql.ErrNoRows)) {
		return nil, err
	}

	if len(cbs) == 0 {
		return obj, err
	}

	mc := cruo.getClientSet()

	if obj == nil {
		obj = cruo.object
	} else if x := cruo.object; x != nil {
		if _, set := cruo.mutation.Field(costreport.FieldTotalCost); set {
			obj.TotalCost = x.TotalCost
		}
		if _, set := cruo.mutation.Field(costreport.FieldCurrency); set {
			obj.Currency = x.Currency
		}
		if _, set := cruo.mutation.Field(costreport.FieldCPUCost); set {
			obj.CPUCost = x.CPUCost
		}
		if _, set := cruo.mutation.Field(costreport.FieldGPUCost); set {
			obj.GPUCost = x.GPUCost
		}
		if _, set := cruo.mutation.Field(costreport.FieldRAMCost); set {
			obj.RAMCost = x.RAMCost
		}
		if _, set := cruo.mutation.Field(costreport.FieldPVCost); set {
			obj.PVCost = x.PVCost
		}
		if _, set := cruo.mutation.Field(costreport.FieldPVBytes); set {
			obj.PVBytes = x.PVBytes
		}
		if _, set := cruo.mutation.Field(costreport.FieldLoadBalancerCost); set {
			obj.LoadBalancerCost = x.LoadBalancerCost
		}
		if _, set := cruo.mutation.Field(costreport.FieldCPUCoreUsageAverage); set {
			obj.CPUCoreUsageAverage = x.CPUCoreUsageAverage
		}
		if _, set := cruo.mutation.Field(costreport.FieldCPUCoreUsageMax); set {
			obj.CPUCoreUsageMax = x.CPUCoreUsageMax
		}
		if _, set := cruo.mutation.Field(costreport.FieldRAMByteUsageAverage); set {
			obj.RAMByteUsageAverage = x.RAMByteUsageAverage
		}
		if _, set := cruo.mutation.Field(costreport.FieldRAMByteUsageMax); set {
			obj.RAMByteUsageMax = x.RAMByteUsageMax
		}
		obj.Edges = x.Edges
	}

	for i := range cbs {
		if err = cbs[i](ctx, mc, obj); err != nil {
			return nil, err
		}
	}

	return obj, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (cruo *CostReportUpdateOne) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *CostReport) error) *CostReport {
	obj, err := cruo.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return obj
}

// ExecE calls the given function after executed the query,
// which is always good for cascading update operations.
func (cruo *CostReportUpdateOne) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *CostReport) error) error {
	_, err := cruo.SaveE(ctx, cbs...)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cruo *CostReportUpdateOne) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *CostReport) error) {
	if err := cruo.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cruo *CostReportUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CostReportUpdateOne {
	cruo.modifiers = append(cruo.modifiers, modifiers...)
	return cruo
}

func (cruo *CostReportUpdateOne) sqlSave(ctx context.Context) (_node *CostReport, err error) {
	if err := cruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(costreport.Table, costreport.Columns, sqlgraph.NewFieldSpec(costreport.FieldID, field.TypeInt))
	id, ok := cruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`model: missing "CostReport.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, costreport.FieldID)
		for _, f := range fields {
			if !costreport.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
			}
			if f != costreport.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cruo.mutation.ClusterNameCleared() {
		_spec.ClearField(costreport.FieldClusterName, field.TypeString)
	}
	if cruo.mutation.NamespaceCleared() {
		_spec.ClearField(costreport.FieldNamespace, field.TypeString)
	}
	if cruo.mutation.NodeCleared() {
		_spec.ClearField(costreport.FieldNode, field.TypeString)
	}
	if cruo.mutation.ControllerCleared() {
		_spec.ClearField(costreport.FieldController, field.TypeString)
	}
	if cruo.mutation.ControllerKindCleared() {
		_spec.ClearField(costreport.FieldControllerKind, field.TypeString)
	}
	if cruo.mutation.PodCleared() {
		_spec.ClearField(costreport.FieldPod, field.TypeString)
	}
	if cruo.mutation.ContainerCleared() {
		_spec.ClearField(costreport.FieldContainer, field.TypeString)
	}
	if value, ok := cruo.mutation.TotalCost(); ok {
		_spec.SetField(costreport.FieldTotalCost, field.TypeFloat64, value)
	}
	if value, ok := cruo.mutation.AddedTotalCost(); ok {
		_spec.AddField(costreport.FieldTotalCost, field.TypeFloat64, value)
	}
	if value, ok := cruo.mutation.Currency(); ok {
		_spec.SetField(costreport.FieldCurrency, field.TypeInt, value)
	}
	if value, ok := cruo.mutation.AddedCurrency(); ok {
		_spec.AddField(costreport.FieldCurrency, field.TypeInt, value)
	}
	if cruo.mutation.CurrencyCleared() {
		_spec.ClearField(costreport.FieldCurrency, field.TypeInt)
	}
	if value, ok := cruo.mutation.CPUCost(); ok {
		_spec.SetField(costreport.FieldCPUCost, field.TypeFloat64, value)
	}
	if value, ok := cruo.mutation.AddedCPUCost(); ok {
		_spec.AddField(costreport.FieldCPUCost, field.TypeFloat64, value)
	}
	if value, ok := cruo.mutation.GPUCost(); ok {
		_spec.SetField(costreport.FieldGPUCost, field.TypeFloat64, value)
	}
	if value, ok := cruo.mutation.AddedGPUCost(); ok {
		_spec.AddField(costreport.FieldGPUCost, field.TypeFloat64, value)
	}
	if value, ok := cruo.mutation.RAMCost(); ok {
		_spec.SetField(costreport.FieldRAMCost, field.TypeFloat64, value)
	}
	if value, ok := cruo.mutation.AddedRAMCost(); ok {
		_spec.AddField(costreport.FieldRAMCost, field.TypeFloat64, value)
	}
	if value, ok := cruo.mutation.PVCost(); ok {
		_spec.SetField(costreport.FieldPVCost, field.TypeFloat64, value)
	}
	if value, ok := cruo.mutation.AddedPVCost(); ok {
		_spec.AddField(costreport.FieldPVCost, field.TypeFloat64, value)
	}
	if value, ok := cruo.mutation.PVBytes(); ok {
		_spec.SetField(costreport.FieldPVBytes, field.TypeFloat64, value)
	}
	if value, ok := cruo.mutation.AddedPVBytes(); ok {
		_spec.AddField(costreport.FieldPVBytes, field.TypeFloat64, value)
	}
	if value, ok := cruo.mutation.LoadBalancerCost(); ok {
		_spec.SetField(costreport.FieldLoadBalancerCost, field.TypeFloat64, value)
	}
	if value, ok := cruo.mutation.AddedLoadBalancerCost(); ok {
		_spec.AddField(costreport.FieldLoadBalancerCost, field.TypeFloat64, value)
	}
	if value, ok := cruo.mutation.CPUCoreUsageAverage(); ok {
		_spec.SetField(costreport.FieldCPUCoreUsageAverage, field.TypeFloat64, value)
	}
	if value, ok := cruo.mutation.AddedCPUCoreUsageAverage(); ok {
		_spec.AddField(costreport.FieldCPUCoreUsageAverage, field.TypeFloat64, value)
	}
	if value, ok := cruo.mutation.CPUCoreUsageMax(); ok {
		_spec.SetField(costreport.FieldCPUCoreUsageMax, field.TypeFloat64, value)
	}
	if value, ok := cruo.mutation.AddedCPUCoreUsageMax(); ok {
		_spec.AddField(costreport.FieldCPUCoreUsageMax, field.TypeFloat64, value)
	}
	if value, ok := cruo.mutation.RAMByteUsageAverage(); ok {
		_spec.SetField(costreport.FieldRAMByteUsageAverage, field.TypeFloat64, value)
	}
	if value, ok := cruo.mutation.AddedRAMByteUsageAverage(); ok {
		_spec.AddField(costreport.FieldRAMByteUsageAverage, field.TypeFloat64, value)
	}
	if value, ok := cruo.mutation.RAMByteUsageMax(); ok {
		_spec.SetField(costreport.FieldRAMByteUsageMax, field.TypeFloat64, value)
	}
	if value, ok := cruo.mutation.AddedRAMByteUsageMax(); ok {
		_spec.AddField(costreport.FieldRAMByteUsageMax, field.TypeFloat64, value)
	}
	_spec.Node.Schema = cruo.schemaConfig.CostReport
	ctx = internal.NewSchemaConfigContext(ctx, cruo.schemaConfig)
	_spec.AddModifiers(cruo.modifiers...)
	_node = &CostReport{config: cruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{costreport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cruo.mutation.done = true
	return _node, nil
}
