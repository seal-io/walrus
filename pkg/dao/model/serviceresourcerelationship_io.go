// SPDX-FileCopyrightText: 2023 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "ent". DO NOT EDIT.

package model

import (
	"time"

	"github.com/seal-io/seal/pkg/dao/types/oid"
)

// ServiceResourceRelationshipQueryInput is the input for the ServiceResourceRelationship query.
type ServiceResourceRelationshipQueryInput struct {
	// ID holds the value of the "id" field.
	ID oid.ID `uri:"id,omitempty" json:"id,omitempty"`
}

// Model converts the ServiceResourceRelationshipQueryInput to ServiceResourceRelationship.
func (in ServiceResourceRelationshipQueryInput) Model() *ServiceResourceRelationship {
	return &ServiceResourceRelationship{
		ID: in.ID,
	}
}

// ServiceResourceRelationshipCreateInput is the input for the ServiceResourceRelationship creation.
type ServiceResourceRelationshipCreateInput struct {
	// Type of the relationship.
	Type string `json:"type"`
	// Service resource to which the dependency belongs.
	Dependency ServiceResourceQueryInput `json:"dependency"`
}

// Model converts the ServiceResourceRelationshipCreateInput to ServiceResourceRelationship.
func (in ServiceResourceRelationshipCreateInput) Model() *ServiceResourceRelationship {
	var entity = &ServiceResourceRelationship{
		Type: in.Type,
	}
	entity.DependencyID = in.Dependency.ID
	return entity
}

// ServiceResourceRelationshipUpdateInput is the input for the ServiceResourceRelationship modification.
type ServiceResourceRelationshipUpdateInput struct {
	// ID holds the value of the "id" field.
	ID oid.ID `uri:"id" json:"-"`
	// Service resource to which the dependency belongs.
	Dependency ServiceResourceQueryInput `json:"dependency,omitempty"`
}

// Model converts the ServiceResourceRelationshipUpdateInput to ServiceResourceRelationship.
func (in ServiceResourceRelationshipUpdateInput) Model() *ServiceResourceRelationship {
	var entity = &ServiceResourceRelationship{
		ID: in.ID,
	}
	entity.DependencyID = in.Dependency.ID
	return entity
}

// ServiceResourceRelationshipOutput is the output for the ServiceResourceRelationship.
type ServiceResourceRelationshipOutput struct {
	// ID holds the value of the "id" field.
	ID oid.ID `json:"id,omitempty"`
	// CreateTime holds the value of the "createTime" field.
	CreateTime *time.Time `json:"createTime,omitempty"`
	// Type of the relationship.
	Type string `json:"type,omitempty"`
	// Service resource to which the dependency belongs.
	Dependency *ServiceResourceOutput `json:"dependency,omitempty"`
}

// ExposeServiceResourceRelationship converts the ServiceResourceRelationship to ServiceResourceRelationshipOutput.
func ExposeServiceResourceRelationship(in *ServiceResourceRelationship) *ServiceResourceRelationshipOutput {
	if in == nil {
		return nil
	}
	var entity = &ServiceResourceRelationshipOutput{
		ID:         in.ID,
		CreateTime: in.CreateTime,
		Type:       in.Type,
		Dependency: ExposeServiceResource(in.Edges.Dependency),
	}
	if in.DependencyID != "" {
		if entity.Dependency == nil {
			entity.Dependency = &ServiceResourceOutput{}
		}
		entity.Dependency.ID = in.DependencyID
	}
	return entity
}

// ExposeServiceResourceRelationships converts the ServiceResourceRelationship slice to ServiceResourceRelationshipOutput pointer slice.
func ExposeServiceResourceRelationships(in []*ServiceResourceRelationship) []*ServiceResourceRelationshipOutput {
	var out = make([]*ServiceResourceRelationshipOutput, 0, len(in))
	for i := 0; i < len(in); i++ {
		var o = ExposeServiceResourceRelationship(in[i])
		if o == nil {
			continue
		}
		out = append(out, o)
	}
	if len(out) == 0 {
		return nil
	}
	return out
}
