{{/* gotype: entgo.io/ent/entc/gen.Type */}}

{{ define "io" }}

{{ template "header" $ }}


{{/* generate query input */}}
// {{ $.Name }}QueryInput is the input for the {{ $.Name }} query.
{{- $inputFields := getInputFields $ "query" }}
type {{ $.Name }}QueryInput struct {
	{{- range $f := $inputFields }}
		{{- template "model/fieldcomment" $f }}
		{{ $f.StructField }} {{ if $f.NillableValue }}*{{ end }}{{ $f.Type }} `{{ $f.StructTag }}`
	{{- end }}
}

// Model converts the {{ $.Name }}QueryInput to {{ $.Name }}.
func (in {{ $.Name }}QueryInput) Model() *{{ $.Name }} {
	return &{{ $.Name }}{
		{{- range $f := $inputFields }}
			{{ $f.StructField }}: in.{{ $f.StructField }},
		{{- end }}
	}
}


{{/* generate create input */}}
// {{ $.Name }}CreateInput is the input for the {{ $.Name }} creation.
{{- $inputFields = getInputFields $ "create" }}
{{- $inputEdges := getInputEdges $ "create" }}
type {{ $.Name }}CreateInput struct {
	{{- range $f := $inputFields }}
		{{- template "model/fieldcomment" $f }}
		{{ $f.StructField }} {{ if $f.NillableValue }}*{{ end }}{{ $f.Type }} `{{ $f.StructTag }}`
	{{- end }}
	{{- range $e := $inputEdges }}
		{{- template "model/edgecomment" $e }}
		{{ $e.StructField }} {{ if not $e.Unique }}[]{{ end }}{{ if $e.Optional }}*{{ end }}{{ $e.Type.Name }}{{ if not $e.Unique }}CreateInput{{ else }}QueryInput{{ end }} `{{ $e.StructTag }}`
	{{- end }}
}

// Model converts the {{ $.Name }}CreateInput to {{ $.Name }}.
func (in {{ $.Name }}CreateInput) Model() *{{ $.Name }} {
	var entity = &{{ $.Name }}{
		{{- range $f := $inputFields }}
			{{- $struct := $f.StructField }}
			{{ $struct }}: in.{{ $struct }},
		{{- end }}
    }
	{{- range $e := $inputEdges }}
		{{- $struct := $e.StructField }}
		{{- if not $e.Unique }}
			for i := 0; i < len(in.{{ $struct }}); i++ {
				if in.{{ $struct }}[i] == nil {
					continue
				}
				entity.Edges.{{ $struct }} = append(entity.Edges.{{ $struct }}, in.{{ $struct }}[i].Model())
			}
		{{- else }}
			{{- if $e.Optional }}
				if in.{{ $struct }} != nil {
					entity.{{ $struct }}ID = in.{{ $struct }}.ID
				}
			{{- else }}
				entity.{{ $struct }}ID = in.{{ $struct }}.ID
			{{- end }}
		{{- end }}
	{{- end }}
	return entity
}


{{/* generate update input */}}
// {{ $.Name }}UpdateInput is the input for the {{ $.Name }} modification.
{{- $inputFields = getInputFields $ "update" }}
{{- $inputEdges = getInputEdges $ "update" }}
type {{ $.Name }}UpdateInput struct {
	{{- range $f := $inputFields }}
		{{- template "model/fieldcomment" $f }}
		{{ $f.StructField }} {{ if $f.NillableValue }}*{{ end }}{{ $f.Type }} `{{ $f.StructTag }}`
	{{- end }}
	{{- range $e := $inputEdges }}
		{{- template "model/edgecomment" $e }}
		{{ $e.StructField }} {{ if not $e.Unique }}[]{{ end }}{{ if $e.Optional }}*{{ end }}{{ $e.Type.Name }}{{ if not $e.Unique }}UpdateInput{{ else }}QueryInput{{ end }} `{{ $e.StructTag }}`
	{{- end }}
}

// Model converts the {{ $.Name }}UpdateInput to {{ $.Name }}.
func (in {{ $.Name }}UpdateInput) Model() *{{ $.Name }} {
	var entity = &{{ $.Name }}{
		{{- range $f := $inputFields }}
			{{- $struct := $f.StructField }}
			{{ $struct }}: in.{{ $struct }},
		{{- end }}
	}
	{{- range $e := $inputEdges }}
		{{- $struct := $e.StructField }}
		{{- if not $e.Unique }}
			for i := 0; i < len(in.{{ $struct }}); i++ {
				if in.{{ $struct }}[i] == nil {
					continue
				}
				entity.Edges.{{ $struct }} = append(entity.Edges.{{ $struct }}, in.{{ $struct }}[i].Model())
			}
		{{- else }}
			{{- if $e.Optional }}
				if in.{{ $struct }} != nil {
					entity.{{ $struct }}ID = in.{{ $struct }}.ID
				}
			{{- else }}
				entity.{{ $struct }}ID = in.{{ $struct }}.ID
			{{- end }}
		{{- end }}
	{{- end }}
	return entity
}


{{/* generate output */}}
// {{ $.Name }}Output is the output for the {{ $.Name }}.
{{- $outputFields := getOutputFields $ }}
{{- $outputEdges := getOutputEdges $ }}
type {{ $.Name }}Output struct {
	{{- range $f := $outputFields }}
		{{- template "model/fieldcomment" $f }}
		{{ $f.StructField }} {{ if $f.NillableValue }}*{{ end }}{{ $f.Type }} `{{ $f.StructTag }}`
	{{- end }}
	{{- range $e := $outputEdges }}
		{{- template "model/edgecomment" $e }}
		{{ $e.StructField }} {{ if not $e.Unique }}[]{{ end }}*{{ $e.Type.Name }}Output `{{ $e.StructTag }}`
	{{- end }}
	{{- $exposeFieldsTmpl := printf "io/fields/additional/%s" (lower $.Name) }}
	{{- if hasTemplate $exposeFieldsTmpl }}
		{{- xtemplate $exposeFieldsTmpl $ }}
	{{- end }}
}


// Expose{{ $.Name }} converts the {{ $.Name }} to {{ $.Name }}Output.
func Expose{{ $.Name }}(in *{{ $.Name }}) *{{ $.Name }}Output {
	if in == nil {
		return nil
    }
	var entity = &{{ $.Name }}Output{
		{{- range $f := $outputFields }}
			{{- $struct := $f.StructField }}
			{{ $struct }}: in.{{ $struct }},
		{{- end }}
		{{- range $e := $outputEdges }}
			{{- $struct := $e.StructField }}
			{{- if $e.Unique }}
				{{ $struct }}: Expose{{ $e.Type.Name }}(in.Edges.{{ $struct }}),
			{{- else }}
				{{ $struct }}: Expose{{ plural $e.Type.Name }}(in.Edges.{{ $struct }}),
			{{- end }}
		{{- end }}
	}
	{{- range $e := $outputEdges }}
		{{- $struct := $e.StructField }}
		{{- if $e.Unique }}
			{{- if $e.Type.ID.Type.Nillable }}
			if in.{{ $struct }}ID != nil {
			{{- else if $e.Type.ID.Type.Numeric }}
			if in.{{ $struct }}ID != 0 {
			{{- else }}
			if in.{{ $struct }}ID != "" {
			{{- end }}
				if entity.{{ $struct }} == nil {
					entity.{{ $struct }} = &{{ $e.Type.Name }}Output{}
				}
				entity.{{ $struct }}.ID = in.{{ $struct }}ID
			}
		{{- end }}
	{{- end }}
	{{- $exposeTmpl := printf "io/additional/%s" (lower $.Name) }}
	{{- if hasTemplate $exposeTmpl }}
		{{- xtemplate $exposeTmpl $ }}
	{{- end }}
	return entity
}

// Expose{{ plural $.Name }} converts the {{ $.Name }} slice to {{ $.Name }}Output pointer slice.
func Expose{{ plural $.Name }}(in []*{{ $.Name }}) []*{{ $.Name }}Output {
	var out = make([]*{{ $.Name }}Output, 0, len(in))
	for i := 0; i < len(in); i++ {
		var o = Expose{{ $.Name }}(in[i])
		if o == nil {
			continue
		}
		out = append(out, o)
	}
	if len(out) == 0 {
		return nil
	}
	return out
}

{{ end }}
