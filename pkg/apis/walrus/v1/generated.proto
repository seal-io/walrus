// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.seal_io.walrus.pkg.apis.walrus.v1;

import "github.com/seal-io/walrus/pkg/apis/walruscore/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "github.com/seal-io/walrus/pkg/apis/walrus/v1";

// Catalog is the schema for the catalogs API.
//
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:apireg-gen:resource:scope="Namespaced",categories=["walrus"],subResources=["status"]
message Catalog {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional github.com.seal_io.walrus.pkg.apis.walruscore.v1.CatalogSpec spec = 2;

  optional github.com.seal_io.walrus.pkg.apis.walruscore.v1.CatalogStatus status = 3;
}

// CatalogList holds the list of Catalog.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message CatalogList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated github.com.seal_io.walrus.pkg.apis.walruscore.v1.Catalog items = 2;
}

// Connector is the schema for the connectors API.
//
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:apireg-gen:resource:scope="Namespaced",categories=["walrus"],shortName=["conn"],subResources=["status"]
message Connector {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional github.com.seal_io.walrus.pkg.apis.walruscore.v1.ConnectorSpec spec = 2;

  optional github.com.seal_io.walrus.pkg.apis.walruscore.v1.ConnectorStatus status = 3;
}

// ConnectorList holds the list of Connector.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message ConnectorList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated github.com.seal_io.walrus.pkg.apis.walruscore.v1.Connector items = 2;
}

// Environment is the schema for the environments API.
//
// +genclient
// +genclient:onlyVerbs=create,get,list,watch,apply,update,patch,delete,deleteCollection
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:apireg-gen:resource:scope="Namespaced",categories=["walrus"],shortName=["env"]
message Environment {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional EnvironmentSpec spec = 2;

  optional EnvironmentStatus status = 3;
}

// EnvironmentList holds the list of Environment.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message EnvironmentList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Environment items = 2;
}

// EnvironmentSpec defines the desired state of Environment.
message EnvironmentSpec {
  // Type is the type of the environment.
  //
  // +k8s:validation:enum=["development","staging","production"]
  optional string type = 1;

  // DisplayName is the display name of the environment.
  optional string displayName = 2;

  // Description is the description of the environment.
  optional string description = 3;
}

// EnvironmentStatus defines the observed state of Environment.
message EnvironmentStatus {
  // Project is the project that the environment belongs to.
  optional string project = 1;

  // Phase is the current phase of the environment.
  optional string phase = 2;
}

// FileExample is the schema for the file example API.
//
// +genclient
// +genclient:onlyVerbs=get,list
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:apireg-gen:resource:scope="Namespaced",categories=["walrus"]
message FileExample {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional FileExampleStatus status = 2;
}

// FileExampleList holds the list of FileExample.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message FileExampleList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated FileExample items = 2;
}

// FileExampleStatus defines the observed state of FileExample.
message FileExampleStatus {
  // Icon is the icon of the file example.
  optional string icon = 1;

  // Readme is the readme of the file example.
  optional string readme = 2;

  // Content is the content of the file example.
  optional string content = 3;
}

// Project is the schema for the projects API.
//
// +genclient
// +genclient:onlyVerbs=create,get,list,watch,apply,update,patch,delete,deleteCollection
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:apireg-gen:resource:scope="Namespaced",categories=["walrus"],shortName=["proj"]
message Project {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // +optional
  optional ProjectSpec spec = 2;

  optional ProjectStatus status = 3;
}

// ProjectList holds the list of Project.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message ProjectList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Project items = 2;
}

// ProjectSpec defines the desired state of Project.
message ProjectSpec {
  // DisplayName is the display name of the project.
  optional string displayName = 1;

  // Description is the description of the project.
  optional string description = 2;
}

// ProjectStatus defines the observed state of Project.
message ProjectStatus {
  // Phase is the current phase of the project.
  optional string phase = 1;
}

// Resource is the schema for the resources API.
//
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:apireg-gen:resource:scope="Namespaced",categories=["walrus"],shortName=["res"],subResources=["status"]
message Resource {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional github.com.seal_io.walrus.pkg.apis.walruscore.v1.ResourceSpec spec = 2;

  optional github.com.seal_io.walrus.pkg.apis.walruscore.v1.ResourceStatus status = 3;
}

// ResourceDefinition is the schema for the resource definitions API.
//
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:apireg-gen:resource:scope="Namespaced",categories=["walrus"],shortName=["resdef"],subResources=["status"]
message ResourceDefinition {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional github.com.seal_io.walrus.pkg.apis.walruscore.v1.ResourceDefinitionSpec spec = 2;

  optional github.com.seal_io.walrus.pkg.apis.walruscore.v1.ResourceDefinitionStatus status = 3;
}

// ResourceDefinitionList holds the list of ResourceDefinition.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message ResourceDefinitionList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated github.com.seal_io.walrus.pkg.apis.walruscore.v1.ResourceDefinition items = 2;
}

// ResourceList holds the list of Resource.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message ResourceList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated github.com.seal_io.walrus.pkg.apis.walruscore.v1.Resource items = 2;
}

// Setting is the schema for the settings API.
//
// +genclient
// +genclient:onlyVerbs=get,list,watch,apply,update,patch
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:apireg-gen:resource:scope="Namespaced",categories=["walrus"],shortName=["set"]
message Setting {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional SettingSpec spec = 2;

  optional SettingStatus status = 3;
}

// SettingList holds the list of Setting.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message SettingList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Setting items = 2;
}

// SettingSpec defines the desired state of Setting.
message SettingSpec {
  // Value contains the configuration data,
  // it is provided as a write-only input field.
  optional string value = 1;
}

// SettingStatus defines the observed state of Setting.
message SettingStatus {
  // Description is the description of the settings,
  // it is readonly.
  optional string description = 1;

  // Hidden indicates whether the setting is hidden on UI,
  // it is readonly.
  optional bool hidden = 2;

  // Editable indicates whether the setting is editable on UI,
  // it is readonly.
  optional bool editable = 3;

  // Sensitive indicates whether the setting is sensitive,
  // it is readonly.
  optional bool sensitive = 4;

  // Value is the current value of the setting,
  // it is provided as a read-only output field.
  //
  // "(sensitive)" returns if the setting is sensitive.
  optional string value = 5;
}

// Template is the schema for the templates API.
//
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:apireg-gen:resource:scope="Namespaced",categories=["walrus"],shortName=["tpl"],subResources=["status"]
message Template {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional github.com.seal_io.walrus.pkg.apis.walruscore.v1.TemplateSpec spec = 2;

  optional github.com.seal_io.walrus.pkg.apis.walruscore.v1.TemplateStatus status = 3;
}

// TemplateCompletion is the schema for the template completions API.
//
// +genclient
// +genclient:onlyVerbs=create
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:apireg-gen:resource:scope="Namespaced",categories=["walrus"]
message TemplateCompletion {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional TemplateCompletionSpec spec = 2;

  optional TemplateCompletionStatus status = 3;
}

// TemplateCompletionExample is the schema for the template completion examples API.
//
// +genclient
// +genclient:onlyVerbs=get,list
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:apireg-gen:resource:scope="Namespaced",categories=["walrus"]
message TemplateCompletionExample {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional TemplateCompletionExampleStatus status = 2;
}

// TemplateCompletionExampleList holds the list of TemplateCompletionExample.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message TemplateCompletionExampleList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated TemplateCompletionExample items = 2;
}

// TemplateCompletionExampleStatus defines the observed state of TemplateCompletionExample.
message TemplateCompletionExampleStatus {
  // Purpose is the purpose of the template completion example.
  optional string purpose = 1;

  // Prompt is the prompt of the template completion example.
  optional string prompt = 2;
}

// TemplateCompletionList holds the list of TemplateCompletion.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message TemplateCompletionList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated FileExample items = 2;
}

// TemplateCompletionSpec defines the desired state of TemplateCompletion.
message TemplateCompletionSpec {
  // Purpose is the purpose of template completion.
  //
  // +k8s:validation:enum=["generate","correct","explain"]
  optional string purpose = 1;

  // Content contains the content for completion,
  // it is provided as a write-only input field.
  optional string content = 2;
}

// TemplateCompletionStatus defines the observed state of TemplateCompletion.
message TemplateCompletionStatus {
  // Content contains the content for completion,
  // it is provided as a read-only output field.
  optional string content = 1;
}

// TemplateList holds the list of Template.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message TemplateList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated github.com.seal_io.walrus.pkg.apis.walruscore.v1.Template items = 2;
}

// Variable is the schema for the variables API.
//
// +genclient
// +genclient:onlyVerbs=create,get,list,watch,apply,update,patch,delete,deleteCollection
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:apireg-gen:resource:scope="Namespaced",categories=["walrus"],shortName=["var"]
message Variable {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional VariableSpec spec = 2;

  optional VariableStatus status = 3;
}

// VariableList holds the list of Variable.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message VariableList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Variable items = 2;
}

// VariableSpec defines the desired state of Variable.
message VariableSpec {
  // Value contains the configuration data,
  // it is provided as a write-only input field.
  optional string value = 1;

  // Sensitive indicates whether the variable is sensitive.
  optional bool sensitive = 2;
}

// VariableStatus defines the observed state of Variable.
message VariableStatus {
  // Project is the project that the variable belongs to.
  optional string project = 1;

  // Environment is the environment that the variable belongs to.
  optional string environment = 2;

  // Value is the current value of the setting,
  // it is provided as a read-only output field.
  //
  // "(sensitive)" returns if the variable is sensitive.
  optional string value = 3;
}

