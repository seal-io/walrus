//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1

import (
	v1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

func GetCustomResourceDefinitions() map[string]*v1.CustomResourceDefinition {
	return map[string]*v1.CustomResourceDefinition{
		"Catalog":            crd_pkg_apis_walruscore_v1_Catalog(),
		"Connector":          crd_pkg_apis_walruscore_v1_Connector(),
		"Resource":           crd_pkg_apis_walruscore_v1_Resource(),
		"ResourceDefinition": crd_pkg_apis_walruscore_v1_ResourceDefinition(),
		"Template":           crd_pkg_apis_walruscore_v1_Template(),
	}
}

func crd_pkg_apis_walruscore_v1_Catalog() *v1.CustomResourceDefinition {
	return &v1.CustomResourceDefinition{
		TypeMeta: metav1.TypeMeta{
			APIVersion: "apiextensions.k8s.io/v1",
			Kind:       "CustomResourceDefinition",
		},
		ObjectMeta: metav1.ObjectMeta{
			Name: "catalogs.walruscore.seal.io",
		},
		Spec: v1.CustomResourceDefinitionSpec{
			Group: "walruscore.seal.io",
			Names: v1.CustomResourceDefinitionNames{
				Plural:   "catalogs",
				Singular: "catalog",
				Kind:     "Catalog",
				ListKind: "CatalogList",
			},
			Scope: "Namespaced",
			Versions: []v1.CustomResourceDefinitionVersion{
				{
					Name:    "v1",
					Served:  true,
					Storage: true,
					Schema: &v1.CustomResourceValidation{
						OpenAPIV3Schema: &v1.JSONSchemaProps{
							Description: "Catalog is the schema for the catalogs API.",
							Type:        "object",
							Required: []string{
								"metadata",
								"spec",
							},
							Properties: map[string]v1.JSONSchemaProps{
								"apiVersion": {
									Type: "string",
								},
								"kind": {
									Type: "string",
								},
								"metadata": {
									Type: "object",
								},
								"spec": {
									Type: "object",
								},
								"status": {
									Type: "object",
								},
							},
						},
					},
					Subresources: &v1.CustomResourceSubresources{
						Status: &v1.CustomResourceSubresourceStatus{},
					},
				},
			},
		},
	}
}

func crd_pkg_apis_walruscore_v1_Connector() *v1.CustomResourceDefinition {
	return &v1.CustomResourceDefinition{
		TypeMeta: metav1.TypeMeta{
			APIVersion: "apiextensions.k8s.io/v1",
			Kind:       "CustomResourceDefinition",
		},
		ObjectMeta: metav1.ObjectMeta{
			Name: "connectors.walruscore.seal.io",
		},
		Spec: v1.CustomResourceDefinitionSpec{
			Group: "walruscore.seal.io",
			Names: v1.CustomResourceDefinitionNames{
				Plural:   "connectors",
				Singular: "connector",
				Kind:     "Connector",
				ListKind: "ConnectorList",
			},
			Scope: "Namespaced",
			Versions: []v1.CustomResourceDefinitionVersion{
				{
					Name:    "v1",
					Served:  true,
					Storage: true,
					Schema: &v1.CustomResourceValidation{
						OpenAPIV3Schema: &v1.JSONSchemaProps{
							Description: "Connector is the schema for the connectors API.",
							Type:        "object",
							Required: []string{
								"metadata",
								"spec",
							},
							Properties: map[string]v1.JSONSchemaProps{
								"apiVersion": {
									Type: "string",
								},
								"kind": {
									Type: "string",
								},
								"metadata": {
									Type: "object",
								},
								"spec": {
									Type: "object",
								},
								"status": {
									Type: "object",
								},
							},
						},
					},
					Subresources: &v1.CustomResourceSubresources{
						Status: &v1.CustomResourceSubresourceStatus{},
					},
				},
			},
		},
	}
}

func crd_pkg_apis_walruscore_v1_Resource() *v1.CustomResourceDefinition {
	return &v1.CustomResourceDefinition{
		TypeMeta: metav1.TypeMeta{
			APIVersion: "apiextensions.k8s.io/v1",
			Kind:       "CustomResourceDefinition",
		},
		ObjectMeta: metav1.ObjectMeta{
			Name: "resources.walruscore.seal.io",
		},
		Spec: v1.CustomResourceDefinitionSpec{
			Group: "walruscore.seal.io",
			Names: v1.CustomResourceDefinitionNames{
				Plural:   "resources",
				Singular: "resource",
				Kind:     "Resource",
				ListKind: "ResourceList",
			},
			Scope: "Namespaced",
			Versions: []v1.CustomResourceDefinitionVersion{
				{
					Name:    "v1",
					Served:  true,
					Storage: true,
					Schema: &v1.CustomResourceValidation{
						OpenAPIV3Schema: &v1.JSONSchemaProps{
							Description: "Resource is the schema for the resources API.",
							Type:        "object",
							Required: []string{
								"metadata",
								"spec",
							},
							Properties: map[string]v1.JSONSchemaProps{
								"apiVersion": {
									Type: "string",
								},
								"kind": {
									Type: "string",
								},
								"metadata": {
									Type: "object",
								},
								"spec": {
									Type: "object",
								},
								"status": {
									Type: "object",
								},
							},
						},
					},
					Subresources: &v1.CustomResourceSubresources{
						Status: &v1.CustomResourceSubresourceStatus{},
					},
				},
			},
		},
	}
}

func crd_pkg_apis_walruscore_v1_ResourceDefinition() *v1.CustomResourceDefinition {
	return &v1.CustomResourceDefinition{
		TypeMeta: metav1.TypeMeta{
			APIVersion: "apiextensions.k8s.io/v1",
			Kind:       "CustomResourceDefinition",
		},
		ObjectMeta: metav1.ObjectMeta{
			Name: "resourcedefinitions.walruscore.seal.io",
		},
		Spec: v1.CustomResourceDefinitionSpec{
			Group: "walruscore.seal.io",
			Names: v1.CustomResourceDefinitionNames{
				Plural:   "resourcedefinitions",
				Singular: "resourcedefinition",
				Kind:     "ResourceDefinition",
				ListKind: "ResourceDefinitionList",
			},
			Scope: "Namespaced",
			Versions: []v1.CustomResourceDefinitionVersion{
				{
					Name:    "v1",
					Served:  true,
					Storage: true,
					Schema: &v1.CustomResourceValidation{
						OpenAPIV3Schema: &v1.JSONSchemaProps{
							Description: "ResourceDefinition is the schema for the resource definitions API.",
							Type:        "object",
							Required: []string{
								"metadata",
								"spec",
							},
							Properties: map[string]v1.JSONSchemaProps{
								"apiVersion": {
									Type: "string",
								},
								"kind": {
									Type: "string",
								},
								"metadata": {
									Type: "object",
								},
								"spec": {
									Type: "object",
								},
								"status": {
									Type: "object",
								},
							},
						},
					},
					Subresources: &v1.CustomResourceSubresources{
						Status: &v1.CustomResourceSubresourceStatus{},
					},
				},
			},
		},
	}
}

func crd_pkg_apis_walruscore_v1_Template() *v1.CustomResourceDefinition {
	return &v1.CustomResourceDefinition{
		TypeMeta: metav1.TypeMeta{
			APIVersion: "apiextensions.k8s.io/v1",
			Kind:       "CustomResourceDefinition",
		},
		ObjectMeta: metav1.ObjectMeta{
			Name: "templates.walruscore.seal.io",
		},
		Spec: v1.CustomResourceDefinitionSpec{
			Group: "walruscore.seal.io",
			Names: v1.CustomResourceDefinitionNames{
				Plural:   "templates",
				Singular: "template",
				Kind:     "Template",
				ListKind: "TemplateList",
			},
			Scope: "Namespaced",
			Versions: []v1.CustomResourceDefinitionVersion{
				{
					Name:    "v1",
					Served:  true,
					Storage: true,
					Schema: &v1.CustomResourceValidation{
						OpenAPIV3Schema: &v1.JSONSchemaProps{
							Description: "Template is the schema for the templates API.",
							Type:        "object",
							Required: []string{
								"metadata",
								"spec",
							},
							Properties: map[string]v1.JSONSchemaProps{
								"apiVersion": {
									Type: "string",
								},
								"kind": {
									Type: "string",
								},
								"metadata": {
									Type: "object",
								},
								"spec": {
									Type: "object",
								},
								"status": {
									Type: "object",
								},
							},
						},
					},
					Subresources: &v1.CustomResourceSubresources{
						Status: &v1.CustomResourceSubresourceStatus{},
					},
				},
			},
		},
	}
}
