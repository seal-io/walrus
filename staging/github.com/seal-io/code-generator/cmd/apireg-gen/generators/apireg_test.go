package generators

import (
	"os"
	"path/filepath"
	"strings"
	"testing"

	"github.com/stretchr/testify/assert"
	"k8s.io/gengo/args"
	"k8s.io/gengo/generator"

	apireggenargs "github.com/seal-io/code-generator/cmd/apireg-gen/args"
)

func Test_apiregGen(t *testing.T) {
	var (
		dir = filepath.Join("testdata", "apireg_gen")
		pkg = "github.com/seal-io/code-generator/cmd/apireg-gen/generators/testdata/apireg_gen"
	)

	g := args.GeneratorArgs{
		InputDirs:          []string{pkg},
		OutputBase:         filepath.Join("testdata", "apireg_gen"),
		OutputFileBaseName: "zz_generated.apiservice",
		GoHeaderFilePath:   filepath.Join(dir, "go.txt"),
		GeneratedBuildTag:  "ignore_autogenerated",
		CustomArgs:         &apireggenargs.CustomArgs{},
	}

	err := g.Execute(
		NameSystems(),
		DefaultNameSystem(),
		func(ctx *generator.Context, args *args.GeneratorArgs) generator.Packages {
			packages := Packages(ctx, args)

			for i := range packages {
				p, ok := packages[i].(*generator.DefaultPackage)
				if !ok {
					continue
				}

				p.PackagePath = strings.TrimPrefix(p.PackagePath, pkg)
				packages[i] = p
			}

			return packages
		})
	if err != nil {
		t.Fatalf("failed to execute apireg-gen: %v", err)
	}

	actualBytes, err := os.ReadFile(filepath.Join(dir, "zz_generated.apiservice.go"))
	if err != nil {
		t.Fatalf("failed to read actual file: %v", err)
	}

	expectedBytes, err := os.ReadFile(filepath.Join(dir, "zz_generated.apiservice.go.expected"))
	if err != nil {
		t.Fatalf("failed to read expected file: %v", err)
	}

	assert.Equal(t, string(expectedBytes), string(actualBytes))
}
