version: '3.6'

services:
  casdoor:
    image: "sealio/casdoor:v1.344.0-seal.1"
    restart: always
    privileged: true
    container_name: casdoor
    ports:
      # internal postgres db of casdoor(user/password: casdoor/casdoor),
      # expose for local debugging.
      #
      - "15432:5432"

  postgres:
    image: "postgres:14.8"
    restart: always
    privileged: true
    container_name: postgres
    ports:
      # external postgres db of seal(user/password: root:Root123),
      # expose for local debugging.
      #
      - "25432:5432"
    environment:
      # update the '--data-source-address' if change the following envs.
      #
      - POSTGRES_PASSWORD=Root123
      - POSTGRES_USER=root
      - POSTGRES_DB=seal

  redis:
    image: "redis:6.2.11"
    restart: always
    container_name: redis
    ports:
      # external redis db of seal(user/password: default:Default123),
      # expose for local debugging.
      #
      - "16379:6379"
    command:
      - redis-server
      - "--save"
      - "\"\""
      - "--appendonly"
      - "no"
      - "--databases"
      - "1"
      - "--maxmemory"
      - "1gb"
      - "--maxmemory-policy"
      - "allkeys-lru"
      - "--requirepass"
      # update the '--cache-source-address' if change the following content.
      #
      - "Default123"

  seal:
    image: "sealio/seal-server:main"
    restart: always
    # privileged is used for internal k3s.
    #
    privileged: true
    container_name: seal
    environment:
      # avoid the impact from docker embedded DNS server.
      #
      - K3S_RESOLV_CONF=
    command:
      - "seal"
      - "--log-debug"
      - "--log-verbosity=4"
      - "--data-source-address=postgres://root:Root123@postgres:5432/walrus?sslmode=disable"
      - "--cache-source-address=redis://default:Default123@redis:6379/0"
      - "--casdoor-server=http://casdoor:8000"
    volumes:
      - seal-data:/var/run/walrus
    depends_on:
      - postgres
      - casdoor
      - redis
    ports:
      - "80:80"
      - "443:443"
    healthcheck:
      test: [ "CMD", "curl", "-ksf", "https://localhost/livez" ]
      interval: "10s"
      timeout: "5s"
      retries: 10
      start_period: "30s"

  prometheus:
    image: prom/prometheus:v2.44.0
    restart: always
    container_name: prometheus
    user: "nobody"
    volumes:
      - prometheus-data:/prometheus
      - ./prometheus/etc/prometheus:/etc/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yaml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana-oss:10.0.0
    restart: always
    container_name: grafana
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/etc/grafana:/etc/grafana
      - ./grafana/var/lib/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    ports:
      - "3000:3000"

volumes:
  seal-data: { }
  prometheus-data: { }
  grafana-data: { }
